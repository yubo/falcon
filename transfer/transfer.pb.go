// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transfer/transfer.proto

/*
Package transfer is a generated protocol buffer package.

It is generated from these files:
	transfer/transfer.proto

It has these top-level messages:
	DataPoint
	DataPoints
	PutRequest
	PutResponse
	GetRequest
	GetResponse
	Empty
	Stats
	StatsName
*/
package transfer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import tsdb "github.com/yubo/falcon/lib/tsdb"
import service "github.com/yubo/falcon/service"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DataPoint struct {
	Key   []byte              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *tsdb.TimeValuePair `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *DataPoint) Reset()                    { *m = DataPoint{} }
func (m *DataPoint) String() string            { return proto.CompactTextString(m) }
func (*DataPoint) ProtoMessage()               {}
func (*DataPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DataPoint) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DataPoint) GetValue() *tsdb.TimeValuePair {
	if m != nil {
		return m.Value
	}
	return nil
}

type DataPoints struct {
	Key    []byte                `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values []*tsdb.TimeValuePair `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *DataPoints) Reset()                    { *m = DataPoints{} }
func (m *DataPoints) String() string            { return proto.CompactTextString(m) }
func (*DataPoints) ProtoMessage()               {}
func (*DataPoints) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DataPoints) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DataPoints) GetValues() []*tsdb.TimeValuePair {
	if m != nil {
		return m.Values
	}
	return nil
}

type PutRequest struct {
	Data []*DataPoint `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PutRequest) GetData() []*DataPoint {
	if m != nil {
		return m.Data
	}
	return nil
}

type PutResponse struct {
	N int32 `protobuf:"varint,1,opt,name=n" json:"n,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PutResponse) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

type GetRequest struct {
	Keys      [][]byte   `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Start     int64      `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	End       int64      `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
	ConsolFun service.Cf `protobuf:"varint,4,opt,name=consolFun,enum=service.Cf" json:"consolFun,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetRequest) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *GetRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *GetRequest) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *GetRequest) GetConsolFun() service.Cf {
	if m != nil {
		return m.ConsolFun
	}
	return service.Cf_MIN
}

type GetResponse struct {
	Data []*DataPoints `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetResponse) GetData() []*DataPoints {
	if m != nil {
		return m.Data
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Stats struct {
	Counter []uint64 `protobuf:"varint,1,rep,packed,name=counter" json:"counter,omitempty"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Stats) GetCounter() []uint64 {
	if m != nil {
		return m.Counter
	}
	return nil
}

type StatsName struct {
	CounterName [][]byte `protobuf:"bytes,1,rep,name=counterName,proto3" json:"counterName,omitempty"`
}

func (m *StatsName) Reset()                    { *m = StatsName{} }
func (m *StatsName) String() string            { return proto.CompactTextString(m) }
func (*StatsName) ProtoMessage()               {}
func (*StatsName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StatsName) GetCounterName() [][]byte {
	if m != nil {
		return m.CounterName
	}
	return nil
}

func init() {
	proto.RegisterType((*DataPoint)(nil), "transfer.DataPoint")
	proto.RegisterType((*DataPoints)(nil), "transfer.DataPoints")
	proto.RegisterType((*PutRequest)(nil), "transfer.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "transfer.PutResponse")
	proto.RegisterType((*GetRequest)(nil), "transfer.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "transfer.GetResponse")
	proto.RegisterType((*Empty)(nil), "transfer.Empty")
	proto.RegisterType((*Stats)(nil), "transfer.Stats")
	proto.RegisterType((*StatsName)(nil), "transfer.StatsName")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Transfer service

type TransferClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
	GetStatsName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatsName, error)
}

type transferClient struct {
	cc *grpc.ClientConn
}

func NewTransferClient(cc *grpc.ClientConn) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/transfer.Transfer/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/transfer.Transfer/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := grpc.Invoke(ctx, "/transfer.Transfer/GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) GetStatsName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatsName, error) {
	out := new(StatsName)
	err := grpc.Invoke(ctx, "/transfer.Transfer/GetStatsName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transfer service

type TransferServer interface {
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetStats(context.Context, *Empty) (*Stats, error)
	GetStatsName(context.Context, *Empty) (*StatsName, error)
}

func RegisterTransferServer(s *grpc.Server, srv TransferServer) {
	s.RegisterService(&_Transfer_serviceDesc, srv)
}

func _Transfer_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.Transfer/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.Transfer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.Transfer/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).GetStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_GetStatsName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).GetStatsName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.Transfer/GetStatsName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).GetStatsName(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transfer.Transfer",
	HandlerType: (*TransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _Transfer_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Transfer_Get_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Transfer_GetStats_Handler,
		},
		{
			MethodName: "GetStatsName",
			Handler:    _Transfer_GetStatsName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer/transfer.proto",
}

func init() { proto.RegisterFile("transfer/transfer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe5, 0xfc, 0x69, 0x93, 0x71, 0x28, 0xd5, 0x26, 0x15, 0x56, 0x40, 0x22, 0xdd, 0x0b,
	0x29, 0x08, 0x1b, 0x82, 0x10, 0x12, 0x37, 0xfe, 0xa6, 0x12, 0x52, 0x15, 0x99, 0x8a, 0x03, 0x17,
	0xb4, 0x71, 0x36, 0xc1, 0xaa, 0xbd, 0x6b, 0xbc, 0xe3, 0x48, 0xb9, 0xf2, 0x0a, 0x3c, 0x09, 0xcf,
	0xc2, 0x2b, 0xf0, 0x20, 0xc8, 0x63, 0x3b, 0x71, 0x43, 0x7b, 0x49, 0x66, 0x3e, 0x7f, 0xf3, 0xdb,
	0xfd, 0x46, 0x5a, 0xb8, 0x87, 0xa9, 0x50, 0x66, 0x29, 0x53, 0xaf, 0x2a, 0xdc, 0x24, 0xd5, 0xa8,
	0x59, 0xa7, 0xea, 0x87, 0x0f, 0x56, 0x5a, 0xaf, 0x22, 0xe9, 0x89, 0x24, 0xf4, 0x84, 0x52, 0x1a,
	0x05, 0x86, 0x5a, 0x99, 0xc2, 0x37, 0xec, 0x47, 0xe1, 0xdc, 0x43, 0xb3, 0x28, 0x7e, 0x4a, 0xf1,
	0xc4, 0xc8, 0x74, 0x1d, 0x06, 0xd2, 0x2b, 0xff, 0x0b, 0x99, 0x9f, 0x43, 0xf7, 0xbd, 0x40, 0x31,
	0xd3, 0xa1, 0x42, 0x76, 0x0c, 0xcd, 0x2b, 0xb9, 0x71, 0xac, 0x91, 0x35, 0xee, 0xf9, 0x79, 0xc9,
	0xce, 0xa0, 0xbd, 0x16, 0x51, 0x26, 0x9d, 0xc6, 0xc8, 0x1a, 0xdb, 0x93, 0xbe, 0x4b, 0xc4, 0xcb,
	0x30, 0x96, 0x5f, 0x72, 0x79, 0x26, 0xc2, 0xd4, 0x2f, 0x1c, 0xfc, 0x13, 0xc0, 0x96, 0x64, 0x6e,
	0x40, 0x3d, 0x81, 0x03, 0x32, 0x1a, 0xa7, 0x31, 0x6a, 0xde, 0xc6, 0x2a, 0x2d, 0xfc, 0x25, 0xc0,
	0x2c, 0x43, 0x5f, 0xfe, 0xc8, 0xa4, 0x41, 0xf6, 0x08, 0x5a, 0x0b, 0x81, 0xc2, 0xb1, 0xaa, 0xc1,
	0x6a, 0x2f, 0xdb, 0x03, 0x7d, 0x32, 0xf0, 0xfb, 0x60, 0xd3, 0x98, 0x49, 0xb4, 0x32, 0x92, 0xf5,
	0xc0, 0x52, 0x74, 0x85, 0xb6, 0x6f, 0x29, 0x6e, 0x00, 0xa6, 0x72, 0xcb, 0x64, 0xd0, 0xba, 0x92,
	0x1b, 0x43, 0xcc, 0x9e, 0x4f, 0x35, 0x1b, 0x40, 0xdb, 0xa0, 0x48, 0x91, 0xd2, 0x36, 0xfd, 0xa2,
	0xc9, 0xa3, 0x48, 0xb5, 0x70, 0x9a, 0xa4, 0xe5, 0x25, 0x3b, 0x83, 0x6e, 0xa0, 0x95, 0xd1, 0xd1,
	0xc7, 0x4c, 0x39, 0xad, 0x91, 0x35, 0x3e, 0x9a, 0xd8, 0x6e, 0xb5, 0xd7, 0x77, 0x4b, 0x7f, 0xf7,
	0x95, 0xbf, 0x02, 0x9b, 0x0e, 0x2d, 0x6f, 0x34, 0xbe, 0x96, 0x64, 0x70, 0x43, 0x12, 0x53, 0x46,
	0x39, 0x84, 0xf6, 0x87, 0x38, 0xc1, 0x0d, 0x3f, 0x85, 0xf6, 0x67, 0x14, 0x68, 0x98, 0x03, 0x87,
	0x81, 0xce, 0x14, 0xca, 0x94, 0xc6, 0x5b, 0x7e, 0xd5, 0xf2, 0xa7, 0xd0, 0x25, 0xcb, 0x85, 0x88,
	0x25, 0x1b, 0x81, 0x5d, 0xea, 0x79, 0x5b, 0xe6, 0xab, 0x4b, 0x93, 0xdf, 0x0d, 0xe8, 0x5c, 0x96,
	0x07, 0xb3, 0x73, 0x68, 0xce, 0x32, 0x64, 0xb5, 0xab, 0xec, 0x16, 0x3f, 0x3c, 0xd9, 0x53, 0x8b,
	0x14, 0x7c, 0xf0, 0xf3, 0xcf, 0xdf, 0x5f, 0x8d, 0x23, 0xde, 0xf5, 0xd6, 0xcf, 0xdd, 0x67, 0x5e,
	0x92, 0xe1, 0x6b, 0xeb, 0x71, 0x4e, 0x9a, 0xca, 0x6b, 0xa4, 0xdd, 0xba, 0xeb, 0xa4, 0xda, 0x3e,
	0xf6, 0x49, 0x2b, 0x49, 0xa4, 0x37, 0xd0, 0x99, 0x4a, 0x2c, 0x52, 0xdf, 0xdd, 0x0d, 0xd2, 0x3e,
	0x86, 0x35, 0x81, 0x1c, 0xbc, 0x4f, 0x8c, 0x3b, 0xcc, 0x2e, 0x18, 0x86, 0xc6, 0x2e, 0xa0, 0x57,
	0x21, 0x68, 0x2b, 0xff, 0x61, 0xfa, 0x7b, 0x98, 0xdc, 0xc5, 0x1d, 0x42, 0x31, 0x76, 0x5c, 0x43,
	0x7d, 0x53, 0x22, 0x96, 0x6f, 0x4f, 0xbf, 0x3e, 0x5c, 0x85, 0xf8, 0x3d, 0x9b, 0xbb, 0x81, 0x8e,
	0xbd, 0x4d, 0x36, 0xd7, 0xde, 0x52, 0x44, 0x81, 0x56, 0xdb, 0x47, 0x3a, 0x3f, 0xa0, 0x17, 0xf5,
	0xe2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xab, 0xcd, 0x7a, 0x27, 0xc0, 0x03, 0x00, 0x00,
}
