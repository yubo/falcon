// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service/service.proto

It has these top-level messages:
	Key
	TimeValuePair
	DataPoint
	DataPoints
	PutRequest
	PutResponse
	GetRequest
	GetResponse
	Empty
	Stats
	StatsName
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Cf int32

const (
	Cf_MIN     Cf = 0
	Cf_MAX     Cf = 1
	Cf_AVERAGE Cf = 2
)

var Cf_name = map[int32]string{
	0: "MIN",
	1: "MAX",
	2: "AVERAGE",
}
var Cf_value = map[string]int32{
	"MIN":     0,
	"MAX":     1,
	"AVERAGE": 2,
}

func (x Cf) String() string {
	return proto.EnumName(Cf_name, int32(x))
}
func (Cf) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ItemType int32

const (
	ItemType_GAUGE   ItemType = 0
	ItemType_DERIVE  ItemType = 1
	ItemType_COUNTER ItemType = 2
)

var ItemType_name = map[int32]string{
	0: "GAUGE",
	1: "DERIVE",
	2: "COUNTER",
}
var ItemType_value = map[string]int32{
	"GAUGE":   0,
	"DERIVE":  1,
	"COUNTER": 2,
}

func (x ItemType) String() string {
	return proto.EnumName(ItemType_name, int32(x))
}
func (ItemType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Key struct {
	Key     []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ShardId int32  `protobuf:"varint,2,opt,name=shardId" json:"shardId,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Key) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Key) GetShardId() int32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

type TimeValuePair struct {
	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Value     float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *TimeValuePair) Reset()                    { *m = TimeValuePair{} }
func (m *TimeValuePair) String() string            { return proto.CompactTextString(m) }
func (*TimeValuePair) ProtoMessage()               {}
func (*TimeValuePair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TimeValuePair) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TimeValuePair) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type DataPoint struct {
	Key   *Key           `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *TimeValuePair `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *DataPoint) Reset()                    { *m = DataPoint{} }
func (m *DataPoint) String() string            { return proto.CompactTextString(m) }
func (*DataPoint) ProtoMessage()               {}
func (*DataPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DataPoint) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DataPoint) GetValue() *TimeValuePair {
	if m != nil {
		return m.Value
	}
	return nil
}

type DataPoints struct {
	Key    *Key             `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Values []*TimeValuePair `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *DataPoints) Reset()                    { *m = DataPoints{} }
func (m *DataPoints) String() string            { return proto.CompactTextString(m) }
func (*DataPoints) ProtoMessage()               {}
func (*DataPoints) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DataPoints) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DataPoints) GetValues() []*TimeValuePair {
	if m != nil {
		return m.Values
	}
	return nil
}

type PutRequest struct {
	Data []*DataPoint `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PutRequest) GetData() []*DataPoint {
	if m != nil {
		return m.Data
	}
	return nil
}

type PutResponse struct {
	N int32 `protobuf:"varint,1,opt,name=n" json:"n,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PutResponse) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

type GetRequest struct {
	Keys      []*Key `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	Start     int64  `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	End       int64  `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
	ConsolFun Cf     `protobuf:"varint,4,opt,name=consolFun,enum=service.Cf" json:"consolFun,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetRequest) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *GetRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *GetRequest) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *GetRequest) GetConsolFun() Cf {
	if m != nil {
		return m.ConsolFun
	}
	return Cf_MIN
}

type GetResponse struct {
	Data []*DataPoints `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetResponse) GetData() []*DataPoints {
	if m != nil {
		return m.Data
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Stats struct {
	Counter []uint64 `protobuf:"varint,1,rep,packed,name=counter" json:"counter,omitempty"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Stats) GetCounter() []uint64 {
	if m != nil {
		return m.Counter
	}
	return nil
}

type StatsName struct {
	CounterName [][]byte `protobuf:"bytes,1,rep,name=counterName,proto3" json:"counterName,omitempty"`
}

func (m *StatsName) Reset()                    { *m = StatsName{} }
func (m *StatsName) String() string            { return proto.CompactTextString(m) }
func (*StatsName) ProtoMessage()               {}
func (*StatsName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StatsName) GetCounterName() [][]byte {
	if m != nil {
		return m.CounterName
	}
	return nil
}

func init() {
	proto.RegisterType((*Key)(nil), "service.Key")
	proto.RegisterType((*TimeValuePair)(nil), "service.TimeValuePair")
	proto.RegisterType((*DataPoint)(nil), "service.DataPoint")
	proto.RegisterType((*DataPoints)(nil), "service.DataPoints")
	proto.RegisterType((*PutRequest)(nil), "service.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "service.PutResponse")
	proto.RegisterType((*GetRequest)(nil), "service.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "service.GetResponse")
	proto.RegisterType((*Empty)(nil), "service.Empty")
	proto.RegisterType((*Stats)(nil), "service.Stats")
	proto.RegisterType((*StatsName)(nil), "service.StatsName")
	proto.RegisterEnum("service.Cf", Cf_name, Cf_value)
	proto.RegisterEnum("service.ItemType", ItemType_name, ItemType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
	GetStatsName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatsName, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/service.Service/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/service.Service/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := grpc.Invoke(ctx, "/service.Service/GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetStatsName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatsName, error) {
	out := new(StatsName)
	err := grpc.Invoke(ctx, "/service.Service/GetStatsName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetStats(context.Context, *Empty) (*Stats, error)
	GetStatsName(context.Context, *Empty) (*StatsName, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetStatsName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetStatsName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/GetStatsName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetStatsName(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _Service_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Service_Get_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Service_GetStats_Handler,
		},
		{
			MethodName: "GetStatsName",
			Handler:    _Service_GetStatsName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}

func init() { proto.RegisterFile("service/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x94, 0xef, 0x6e, 0xd3, 0x3c,
	0x14, 0xc6, 0x9b, 0xa4, 0x5d, 0xd7, 0x93, 0x6e, 0x8a, 0xbc, 0xbd, 0xaf, 0xa2, 0x31, 0x4d, 0xc1,
	0x48, 0x30, 0x26, 0x68, 0x58, 0x41, 0x7c, 0x45, 0xa5, 0x0b, 0x55, 0x35, 0x18, 0x95, 0xf7, 0x47,
	0x80, 0x90, 0x90, 0xd7, 0x7a, 0x5b, 0xb4, 0xc6, 0x2e, 0xb5, 0x53, 0x29, 0xdf, 0x80, 0x5b, 0xe0,
	0xd2, 0xb8, 0x05, 0x2e, 0x04, 0xc5, 0x49, 0x93, 0x14, 0x24, 0xf8, 0x54, 0x9f, 0x73, 0x9e, 0xe7,
	0xd7, 0x73, 0x8e, 0x23, 0xc3, 0x7f, 0x92, 0xcd, 0x17, 0xe1, 0x98, 0xf9, 0xf9, 0x6f, 0x67, 0x36,
	0x17, 0x4a, 0xa0, 0x66, 0x1e, 0xee, 0xec, 0x5e, 0x0b, 0x71, 0x3d, 0x65, 0x3e, 0x9d, 0x85, 0x3e,
	0xe5, 0x5c, 0x28, 0xaa, 0x42, 0xc1, 0x65, 0x26, 0xc3, 0x87, 0x60, 0x1d, 0xb3, 0x04, 0x39, 0x60,
	0xdd, 0xb2, 0xc4, 0x35, 0x3c, 0x63, 0xbf, 0x4d, 0xd2, 0x23, 0x72, 0xa1, 0x29, 0x6f, 0xe8, 0x7c,
	0x32, 0x9c, 0xb8, 0xa6, 0x67, 0xec, 0x37, 0xc8, 0x32, 0xc4, 0x7d, 0xd8, 0x38, 0x0b, 0x23, 0x76,
	0x41, 0xa7, 0x31, 0x1b, 0xd1, 0x70, 0x8e, 0x76, 0xa1, 0xa5, 0xc2, 0x88, 0x49, 0x45, 0xa3, 0x99,
	0x46, 0x58, 0xa4, 0x4c, 0xa0, 0x6d, 0x68, 0x2c, 0x52, 0xa9, 0xc6, 0x18, 0x24, 0x0b, 0xf0, 0x7b,
	0x68, 0x1d, 0x51, 0x45, 0x47, 0x22, 0xe4, 0x0a, 0xed, 0x95, 0xff, 0x6e, 0x77, 0xdb, 0x9d, 0xe5,
	0x20, 0xc7, 0x2c, 0xc9, 0x7a, 0x79, 0x54, 0x45, 0xd8, 0xdd, 0xff, 0x0b, 0xc5, 0x4a, 0x1f, 0x4b,
	0xf4, 0x47, 0x80, 0x02, 0x2d, 0xff, 0xc9, 0xee, 0xc0, 0x9a, 0xb6, 0x49, 0xd7, 0xf4, 0xac, 0xbf,
	0xc0, 0x73, 0x15, 0x7e, 0x06, 0x30, 0x8a, 0x15, 0x61, 0x9f, 0x63, 0x26, 0x15, 0xba, 0x0f, 0xf5,
	0x09, 0x55, 0xd4, 0x35, 0xb4, 0x17, 0x15, 0xde, 0xa2, 0x01, 0xa2, 0xeb, 0xf8, 0x0e, 0xd8, 0xda,
	0x25, 0x67, 0x82, 0x4b, 0x86, 0xda, 0x60, 0x70, 0xdd, 0x52, 0x83, 0x18, 0x1c, 0x7f, 0x35, 0x00,
	0x06, 0xac, 0x60, 0x7a, 0x50, 0xbf, 0x65, 0x89, 0xcc, 0x99, 0xab, 0x2d, 0xeb, 0x4a, 0xba, 0x52,
	0xa9, 0xe8, 0x5c, 0xe9, 0x7d, 0x58, 0x24, 0x0b, 0xd2, 0x3b, 0x64, 0x7c, 0xe2, 0x5a, 0x3a, 0x97,
	0x1e, 0xd1, 0x43, 0x68, 0x8d, 0x05, 0x97, 0x62, 0xfa, 0x2a, 0xe6, 0x6e, 0xdd, 0x33, 0xf6, 0x37,
	0xbb, 0x76, 0x81, 0xeb, 0x5f, 0x91, 0xb2, 0x8a, 0x9f, 0x83, 0xad, 0x5b, 0xc8, 0x1b, 0x7c, 0xb0,
	0x32, 0xd7, 0xd6, 0x9f, 0x73, 0xc9, 0x7c, 0xb0, 0x26, 0x34, 0x82, 0x68, 0xa6, 0x12, 0x7c, 0x17,
	0x1a, 0xa7, 0x8a, 0x2a, 0x99, 0x7e, 0x38, 0x63, 0x11, 0x73, 0xc5, 0xe6, 0xda, 0x5d, 0x27, 0xcb,
	0x10, 0x3f, 0x86, 0x96, 0x96, 0x9c, 0xd0, 0x88, 0x21, 0x0f, 0xec, 0x3c, 0x9f, 0x86, 0x5a, 0xda,
	0x26, 0xd5, 0xd4, 0xc1, 0x3d, 0x30, 0xfb, 0x57, 0xa8, 0x09, 0xd6, 0x9b, 0xe1, 0x89, 0x53, 0xd3,
	0x87, 0xde, 0x3b, 0xc7, 0x40, 0x36, 0x34, 0x7b, 0x17, 0x01, 0xe9, 0x0d, 0x02, 0xc7, 0x3c, 0xe8,
	0xc0, 0xfa, 0x50, 0xb1, 0xe8, 0x2c, 0x99, 0x31, 0xd4, 0x82, 0xc6, 0xa0, 0x77, 0x3e, 0x08, 0x9c,
	0x1a, 0x02, 0x58, 0x3b, 0x0a, 0xc8, 0xf0, 0x22, 0xc8, 0xf4, 0xfd, 0xb7, 0xe7, 0x27, 0x67, 0x01,
	0x71, 0xcc, 0xee, 0x17, 0x13, 0x9a, 0xa7, 0xd9, 0x30, 0xa8, 0x0b, 0xd6, 0x28, 0x56, 0xa8, 0x9c,
	0xae, 0xbc, 0xd8, 0x9d, 0xed, 0xd5, 0x64, 0xb6, 0x16, 0x5c, 0x4b, 0x3d, 0x03, 0x56, 0xf5, 0x94,
	0x17, 0x57, 0xf1, 0x54, 0x56, 0x89, 0x6b, 0xe8, 0x05, 0xac, 0x0f, 0x98, 0xca, 0xb6, 0xb3, 0x59,
	0x68, 0xf4, 0xda, 0x76, 0xca, 0x58, 0xd7, 0xf1, 0xd6, 0xb7, 0x1f, 0x3f, 0xbf, 0x9b, 0x1b, 0xc8,
	0xf6, 0x17, 0x87, 0x9d, 0x27, 0xbe, 0xd4, 0xa6, 0xd7, 0xd0, 0x5e, 0x02, 0xf4, 0xee, 0x7e, 0x87,
	0xa0, 0x55, 0x48, 0xaa, 0xc1, 0xae, 0x06, 0x21, 0xe4, 0x54, 0x40, 0x9f, 0x38, 0x8d, 0xd8, 0x4b,
	0xef, 0xc3, 0xde, 0x75, 0xa8, 0x6e, 0xe2, 0xcb, 0xce, 0x58, 0x44, 0x7e, 0x12, 0x5f, 0x0a, 0xff,
	0x8a, 0x4e, 0xc7, 0x82, 0x2f, 0x5f, 0x90, 0xcb, 0x35, 0xfd, 0x36, 0x3c, 0xfd, 0x15, 0x00, 0x00,
	0xff, 0xff, 0x25, 0xba, 0xb6, 0x44, 0x5b, 0x04, 0x00, 0x00,
}
