swagger: "2.0"
info:
  title: falcon ctrl API
  description: Open-Falcon 是小米运维部开源的一款互联网企业级监控系统解决方案.
  version: 1.0.0
  termsOfService: http://open-falcon.org/
  contact:
    email: yubo@xiaomi.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1.0
paths:
  /admin/config/{module}:
    get:
      tags:
      - admin
      description: get module config
      operationId: AdminController.Get config
      parameters:
      - in: path
        name: module
        description: module name
        required: true
        type: string
      responses:
        "200":
          description: '[3]map[string]string {defualt{}, conf{}, configfile{}}'
        "400":
          description: string error
    put:
      tags:
      - admin
      description: get tag role user
      operationId: AdminController.update config
      parameters:
      - in: path
        name: module
        description: module
        required: true
        type: string
      - in: body
        name: body
        description: map[string]string
        required: true
        schema:
          $ref: '#/definitions/models.Obj'
      responses:
        "200":
          description: '{string} success'
        "400":
          description: string error
  /admin/config/list/etcd:
    get:
      tags:
      - admin
      description: list etcd Description
      operationId: AdminController.Get config
      responses:
        "200":
          description: map[string]string map[string]string etcd map string
        "400":
          description: string error
  /admin/config/list/module:
    get:
      tags:
      - admin
      description: list module config api Description
      operationId: AdminController.Get config
      responses:
        "200":
          description: map[string]string map[string]string etcd map string
        "400":
          description: string error
  /admin/debug/{action}:
    get:
      tags:
      - admin
      description: get tag role user
      operationId: AdminController.Get config
      parameters:
      - in: path
        name: action
        description: action
        required: true
        type: string
      responses:
        "200":
          description: '{string} result'
        "400":
          description: string error
  /admin/expansion/{module}:
    get:
      tags:
      - admin
      description: graph expansion config
      operationId: AdminController.Get expansion status
      parameters:
      - in: path
        name: module
        description: module name
        required: true
        type: string
      responses:
        "200":
          description: expansion status
          schema:
            $ref: '#/definitions/models.ExpansionStatus'
        "400":
          description: string error
    put:
      tags:
      - admin
      description: expansion set
      operationId: AdminController.set expansion (add endpoint)
      parameters:
      - in: path
        name: module
        description: module name
        required: true
        type: string
      - in: body
        name: body
        description: body for endpoints content
        required: true
        schema:
          $ref: '#/definitions/models.ExpansionStatus'
      responses:
        "200":
          description: string success
        "400":
          description: string error
  /admin/online/{module}:
    get:
      tags:
      - admin
      description: get online endpoint
      operationId: AdminController.Get online endpoint
      parameters:
      - in: path
        name: module
        description: module name
        required: true
        type: string
      responses:
        "200":
          description: map[string]string map[string]string online endpoint list
        "400":
          description: string error
  /aggreator/:
    post:
      tags:
      - aggreator
      description: create aggreators
      operationId: AggreatorController.CreateAggreator
      parameters:
      - in: body
        name: body
        description: body for aggreator content
        required: true
        schema:
          $ref: '#/definitions/models.APICreateAggregatorInput'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /aggreator/{id}:
    get:
      tags:
      - aggreator
      description: get aggreator by id
      operationId: AggreatorController.Get
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: aggreator info
          schema:
            $ref: '#/definitions/models.Aggreator'
        "400":
          description: string error
    put:
      tags:
      - aggreator
      description: update the aggreator
      operationId: AggreatorController.UpdateAggreator
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for aggreator content
        required: true
        schema:
          $ref: '#/definitions/models.APIUpdateAggregatorInput'
      responses:
        "200":
          description: aggreator info
          schema:
            $ref: '#/definitions/models.Aggreator'
        "400":
          description: string error
    delete:
      tags:
      - aggreator
      description: delete the aggreator
      operationId: AggreatorController.DeleteAggreator
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} "delete success!"'
        "400":
          description: string error
  /aggreator/0:
    post:
      tags:
      - aggreator
      description: create aggreators by tag_string
      operationId: AggreatorController.CreateAggreator
      parameters:
      - in: body
        name: body
        description: body for aggreator content
        required: true
        schema:
          $ref: '#/definitions/models.APICreateAggregatorInput0'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
    delete:
      tags:
      - aggreator
      description: delete the aggreator by tag string
      operationId: AggreatorController.DeleteAggreators by tag string
      parameters:
      - in: body
        name: rule
        description: The aggreators you want to delete
        required: true
        schema:
          $ref: '#/definitions/models.DeleteAggreator0'
      responses:
        "200":
          description: delete aggreator total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /aggreator/cnt:
    get:
      tags:
      - aggreator
      description: get Aggreators number
      operationId: AggreatorController.GeaggreatorgreatorsCnt
      parameters:
      - in: query
        name: tag_id
        description: tag id
        required: true
        type: integer
        format: int64
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      responses:
        "200":
          description: aggreator total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /aggreator/cnt/0:
    get:
      tags:
      - aggreator
      description: get Aggreators number
      operationId: AggreatorController.GeaggreatorgreatorsCnt
      parameters:
      - in: query
        name: tag_string
        description: tag string
        required: true
        type: string
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      responses:
        "200":
          description: aggreator total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /aggreator/search:
    get:
      tags:
      - aggreator
      description: get all Aggreators
      operationId: AggreatorController.Geaggreatorgreators
      parameters:
      - in: query
        name: tag_id
        description: tag id
        required: true
        type: integer
        format: int64
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: aggreators info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Aggreator'
        "400":
          description: string error
  /aggreator/search/0:
    get:
      tags:
      - aggreator
      description: get all Aggreators
      operationId: AggreatorController.Geaggreatorgreators by tag string
      parameters:
      - in: query
        name: tag_string
        description: tag string
        required: true
        type: string
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: aggreators info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.GetAggreator'
        "400":
          description: string error
  /auth/callback/{module}:
    get:
      tags:
      - auth
      description: Auth module callback handle
      operationId: AuthController.OAuth module callback handle
      parameters:
      - in: path
        name: module
        description: the module you want to use
        required: true
        type: string
      responses:
        "302":
          description: redirect to RedirectUrl(default "/")
        "406":
          description: not acceptable
  /auth/info:
    get:
      tags:
      - auth
      description: auth login, such as ldap auth
      operationId: AuthController.AuthLogin
      responses:
        "200":
          description: operator info, reload user's tokens
          schema:
            $ref: '#/definitions/models.OperatorInfo'
        "406":
          description: not acceptable
  /auth/login:
    post:
      tags:
      - auth
      description: auth login, such as ldap auth
      operationId: AuthController.AuthLogin
      parameters:
      - in: query
        name: username
        description: username for login
        type: string
      - in: query
        name: password
        description: passworld for login
        type: string
      - in: query
        name: method
        description: login method
        required: true
        type: string
      responses:
        "200":
          description: operator info
          schema:
            $ref: '#/definitions/models.OperatorInfo'
        "406":
          description: not acceptable
  /auth/login/{module}:
    get:
      tags:
      - auth
      description: auth login
      operationId: AuthController.OAuth Login
      parameters:
      - in: path
        name: module
        description: the module you want to use(github/google)
        required: true
        type: string
      responses:
        "302":
          description: redirect
        "405":
          description: string error
  /auth/logout:
    get:
      tags:
      - auth
      description: user logout, reset cookie
      operationId: AuthController.Auth Logout
      responses:
        "200":
          description: '{string} logout success!'
        "405":
          description: Method Not Allowed
  /auth/modules:
    get:
      tags:
      - auth
      description: get support auth modules
      operationId: AuthController.get support auth modules
      responses:
        "200":
          description: modules list
          schema:
            type: array
            items:
              type: string
        "405":
          description: string error
  /dashboard/graph:
    post:
      tags:
      - dashboard
      description: create graph, .endpoints and .counters is []string
      operationId: DashboardController.CreateGraph
      parameters:
      - in: body
        name: body
        description: body for graph content
        required: true
        schema:
          $ref: '#/definitions/models.APIGraph'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /dashboard/graph/{id}:
    get:
      tags:
      - dashboard
      description: get graph
      operationId: DashboardController.GetGraph
      parameters:
      - in: path
        name: id
        description: The id of graph
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: graph info
          schema:
            $ref: '#/definitions/models.APIGraph'
        "400":
          description: string error
    put:
      tags:
      - dashboard
      description: update graph, .endpoints and .counters is []string
      operationId: DashboardController.update Graph
      parameters:
      - in: body
        name: body
        description: body for graph content
        required: true
        schema:
          $ref: '#/definitions/models.APIGraph'
      responses:
        "200":
          description: DashboardGraph
          schema:
            $ref: '#/definitions/models.DashboardGraph'
        "400":
          description: string error
    delete:
      tags:
      - dashboard
      description: delete the graph
      operationId: DashboardController.DeleteGraph
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} "delete success!"'
        "400":
          description: string error
  /dashboard/graph/screen/{screen_id}:
    get:
      tags:
      - dashboard
      description: get graph by screen
      operationId: DashboardController.GetGraph by screen
      parameters:
      - in: path
        name: screen_id
        description: The id of screen
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: graph info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.APIGraph'
        "400":
          description: string error
  /dashboard/graphs:
    put:
      tags:
      - dashboard
      description: update graph, .endpoints and .counters is []string
      operationId: DashboardController.update Graphs
      parameters:
      - in: body
        name: body
        description: body for graph content
        required: true
        schema:
          $ref: '#/definitions/models.APIGraphs'
      responses:
        "200":
          description: DashboardGraph
          schema:
            $ref: '#/definitions/models.Stats'
        "400":
          description: string error
  /dashboard/screen:
    post:
      tags:
      - dashboard
      description: create screen
      operationId: DashboardController.CreateScreen
      parameters:
      - in: body
        name: body
        description: body for tmpGraph content
        required: true
        schema:
          $ref: '#/definitions/models.AddDashboardScreen'
      responses:
        "200":
          description: screen id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /dashboard/screen/{id}:
    get:
      tags:
      - dashboard
      description: get screen
      operationId: DashboardController.Get screen
      parameters:
      - in: path
        name: id
        description: The id of screen
        type: integer
        format: int64
      - in: query
        name: limit
        description: limit number
        type: integer
        format: int64
      responses:
        "200":
          description: screen info
          schema:
            $ref: '#/definitions/models.DashboardScreen'
        "400":
          description: string error
    put:
      tags:
      - dashboard
      description: update Screen
      operationId: DashboardController.update Screen
      parameters:
      - in: path
        name: id
        description: The id you want to modify
        required: true
        type: string
      - in: body
        name: body
        description: body for screen content
        required: true
        schema:
          $ref: '#/definitions/models.DashboardScreen'
      responses:
        "200":
          description: DashboardScreen
          schema:
            $ref: '#/definitions/models.DashboardScreen'
        "400":
          description: string error
    delete:
      tags:
      - dashboard
      description: delete the screen
      operationId: DashboardController.DeleteScreen
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} "delete success!"'
        "400":
          description: string error
  /dashboard/screen/pid/{pid}:
    get:
      tags:
      - dashboard
      description: get screen by pid
      operationId: DashboardController.Get screen by pid
      parameters:
      - in: path
        name: pid
        description: The pid of screen
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: screen info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.DashboardScreen'
        "400":
          description: string error
  /dashboard/tmpgraph:
    post:
      tags:
      - dashboard
      description: create tmp graph
      operationId: DashboardController.CreateTmpGraph
      parameters:
      - in: body
        name: body
        description: body for tmpGraph content
        required: true
        schema:
          $ref: '#/definitions/models.APITmpGraph'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /dashboard/tmpgraph/{id}:
    get:
      tags:
      - dashboard
      description: get tmp graph
      operationId: DashboardController.GetTmpGraph
      parameters:
      - in: path
        name: id
        description: The id of tmp graph
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: tmpgraph info
          schema:
            $ref: '#/definitions/models.APITmpGraph'
        "400":
          description: string error
  /expression/:
    post:
      tags:
      - expression
      description: create expressions
      operationId: ExpressionController.CreateExpression
      parameters:
      - in: body
        name: body
        description: body for expression content
        required: true
        schema:
          $ref: '#/definitions/models.ExpressionActionApiPut'
      responses:
        "200":
          description: models.Expression.Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /expression/{id}:
    get:
      tags:
      - expression
      description: get expression by id
      operationId: ExpressionController.Get
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: expression and action info
          schema:
            $ref: '#/definitions/models.ExpressionActionApiGet'
        "400":
          description: string error
    put:
      tags:
      - expression
      description: update the expression
      operationId: ExpressionController.UpdateExpressionAction
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for expression content
        required: true
        schema:
          $ref: '#/definitions/models.ExpressionActionApiPut'
      responses:
        "200":
          description: expression
          schema:
            $ref: '#/definitions/models.Expression'
        "400":
          description: string error
    delete:
      tags:
      - expression
      description: delete the expression
      operationId: ExpressionController.DeleteExpression
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "400":
          description: string error
  /expression/0:
    delete:
      tags:
      - expression
      description: delete the expression by expression
      operationId: ExpressionController.DeleteExpression by expression
      parameters:
      - in: query
        name: expr
        description: The expression you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "400":
          description: string error
  /expression/cnt:
    get:
      tags:
      - expression
      description: get Expressions number
      operationId: ExpressionController.GetExpressionsCnt
      parameters:
      - in: query
        name: query
        description: expression name
        type: string
      - in: query
        name: mine
        description: only show mine expressions, default true
        type: boolean
      responses:
        "200":
          description: expression number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /expression/pause:
    put:
      tags:
      - expression
      description: pause the expression
      operationId: ExpressionController.pause Expression
      parameters:
      - in: query
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: query
        name: pause
        description: '1: pause, 0: not pause'
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: null success
        "400":
          description: string error
  /expression/search:
    get:
      tags:
      - expression
      description: get all Expressions
      operationId: ExpressionController.GetExpressions
      parameters:
      - in: query
        name: query
        description: expression name
        type: string
      - in: query
        name: mine
        description: only show mine expressions, default true
        type: boolean
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: expressionuis
          schema:
            type: array
            items:
              $ref: '#/definitions/models.ExpressionApiGet'
        "400":
          description: string error
  /graph/counter_data:
    post:
      tags:
      - graph
      description: get tmp graph
      operationId: GraphController.Get Counters Data for draw lines
      parameters:
      - in: body
        name: body
        description: api query graph draw data
        required: true
        schema:
          $ref: '#/definitions/models.APIQueryGraphDrawData'
      responses:
        "200":
          description: '"graph query response"'
          schema:
            type: array
            items:
              $ref: '#/definitions/models.GraphQueryResponse'
        "400":
          description: string error
  /graph/endpoint:
    get:
      tags:
      - graph
      description: get endpoint
      operationId: GraphController.GetEndpoint
      parameters:
      - in: query
        name: query
        description: endpoint name
        type: string
      - in: query
        name: tag
        description: tag name(a=b[,c=d])
        type: string
      - in: query
        name: limit
        description: limit number
        type: integer
        format: int64
      responses:
        "200":
          description: endpoints info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Endpoint'
        "400":
          description: string error
  /graph/endpoint_counter:
    get:
      tags:
      - graph
      description: get endpoint's counter
      operationId: GraphController.GetEndpointCounter
      parameters:
      - in: query
        name: ids
        description: endpoint id ... eg(1,2,4,5)
        type: string
      - in: query
        name: query
        description: counter name
        type: string
      - in: query
        name: limit
        description: limit number
        type: integer
        format: int64
      responses:
        "200":
          description: endpointsCounter info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.EndpointCounter'
        "400":
          description: string error
  /host/:
    put:
      tags:
      - host
      description: update the host
      operationId: HostController.UpdateHost
      parameters:
      - in: body
        name: body
        description: body for host content
        required: true
        schema:
          $ref: '#/definitions/models.HostUpdate'
      responses:
        "200":
          description: host info
          schema:
            $ref: '#/definitions/models.Host'
        "400":
          description: string error
    post:
      tags:
      - host
      description: create hosts
      operationId: HostController.CreateHost
      parameters:
      - in: body
        name: body
        description: body for host content
        required: true
        schema:
          $ref: '#/definitions/models.HostCreate'
      responses:
        "200":
          description: id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
    delete:
      tags:
      - host
      description: delete the hosts
      operationId: HostController.DeleteHosts
      parameters:
      - in: body
        name: body
        description: The []id you want to delete
        required: true
        type: array
        items:
          type: integer
          format: int64
      responses:
        "200":
          description: '{string} "delete success!"'
        "400":
          description: string error
  /host/{id}:
    get:
      tags:
      - host
      description: get host by id
      operationId: HostController.GetHost
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: host info
          schema:
            $ref: '#/definitions/models.Host'
        "400":
          description: string error
    delete:
      tags:
      - host
      description: delete the host
      operationId: HostController.DeleteHost
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} "delete success!"'
        "400":
          description: string error
  /host/cnt:
    get:
      tags:
      - host
      description: get Hosts number
      operationId: HostController.GetHostsCnt
      parameters:
      - in: query
        name: query
        description: host name
        type: string
      responses:
        "200":
          description: host total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /host/search:
    get:
      tags:
      - host
      description: get all Hosts
      operationId: HostController.GetHosts
      parameters:
      - in: query
        name: query
        description: host name
        type: string
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: hosts info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Host'
        "400":
          description: string error
  /matter/{id}:
    put:
      tags:
      - matter
      description: update matter
      operationId: MatterController.update Matter
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: body for matter content
        required: true
        schema:
          $ref: '#/definitions/models.Matter'
      responses:
        "200":
          description: matter  info
          schema:
            $ref: '#/definitions/models.Matter'
        "400":
          description: string error
  /matter/claim:
    post:
      tags:
      - matter
      description: claim matter
      operationId: MatterController.Claim matter
      parameters:
      - in: body
        name: body
        description: body for team content
        required: true
        schema:
          $ref: '#/definitions/models.Claim'
      responses:
        "200":
          description: string ok
        "400":
          description: string error
  /matter/cnt:
    get:
      tags:
      - matter
      description: get Matters number
      operationId: MatterController.GetMattersCnt
      parameters:
      - in: query
        name: status
        description: matter status
        type: integer
        format: int64
      responses:
        "200":
          description: matter total number
          schema:
            format: int64
            type: integer
        "400":
          description: string error
  /matter/event/cnt:
    get:
      tags:
      - matter
      description: get Event number
      operationId: MatterController.GetEventCnt
      parameters:
      - in: query
        name: matter
        description: matter id
        type: integer
        format: int64
      responses:
        "200":
          description: event total number
          schema:
            format: int64
            type: integer
        "400":
          description: string error
  /matter/event/search:
    get:
      tags:
      - matter
      description: get Events
      operationId: MatterController.GetEvents
      parameters:
      - in: query
        name: matter
        description: matter id
        required: true
        type: integer
        format: int64
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: matters
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Events'
        "400":
          description: string error
  /matter/search:
    get:
      tags:
      - matter
      description: get Matters
      operationId: MatterController.GetMatters
      parameters:
      - in: query
        name: status
        description: matter status
        required: true
        type: integer
        format: int64
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: matters
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Matter'
        "400":
          description: string error
  /metric/cnt:
    get:
      tags:
      - metric
      description: get Metrics number
      operationId: MetricController.GetMetricsCnt
      parameters:
      - in: query
        name: query
        description: metric name
        type: string
      responses:
        "200":
          description: Metric total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /metric/search:
    get:
      tags:
      - metric
      description: get all Metrics
      operationId: MetricController.GetMetrics
      parameters:
      - in: query
        name: query
        description: metric name
        type: string
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: metrics info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Metric'
        "400":
          description: string error
  /nodata/:
    post:
      tags:
      - nodata
      description: create mockcfgs
      operationId: MockcfgController.CreateMockcfg
      parameters:
      - in: body
        name: body
        description: body for mockcfg content
        required: true
        schema:
          $ref: '#/definitions/models.NoDataApiPut'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /nodata/{id}:
    get:
      tags:
      - nodata
      description: get mockcfg by id
      operationId: MockcfgController.Get
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: mockcfg info
          schema:
            $ref: '#/definitions/models.Mockcfg'
        "400":
          description: string error
    put:
      tags:
      - nodata
      description: update the mockcfg
      operationId: MockcfgController.UpdateMockcfg
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for mockcfg content
        required: true
        schema:
          $ref: '#/definitions/models.NoDataApiPut'
      responses:
        "200":
          description: mockcfg info
          schema:
            $ref: '#/definitions/models.NoDataApiPut'
        "400":
          description: string error
    delete:
      tags:
      - nodata
      description: delete the mockcfg
      operationId: MockcfgController.DeleteMockcfg
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} "delete success!"'
        "400":
          description: string error
  /nodata/cnt:
    get:
      tags:
      - nodata
      description: get Mockcfgs number
      operationId: MockcfgController.GetMockcfgsCnt
      parameters:
      - in: query
        name: query
        description: mockcfg name
        type: string
      - in: query
        name: mine
        description: only show mine expressions, default true
        type: boolean
      responses:
        "200":
          description: mockcfg total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /nodata/search:
    get:
      tags:
      - nodata
      description: get all Mockcfgs
      operationId: MockcfgController.GetMockcfgs
      parameters:
      - in: query
        name: query
        description: mockcfg name
        type: string
      - in: query
        name: mine
        description: only show mine expressions, default true
        type: boolean
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: mockcfgs info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Mockcfg'
        "400":
          description: string error
  /pub/config/ctrl:
    get:
      tags:
      - pub
      description: get ctrl modules config
      operationId: PubController.Get config
      responses:
        "200":
          description: map[string]interface{} ctrl server config
        "400":
          description: string error
  /pub/rel/tag/host/cnt:
    get:
      tags:
      - pub
      description: get Tag-Host number
      operationId: PubController.GetTagHostCnt
      parameters:
      - in: query
        name: tag
        description: tag string(cop.xiaomi_pdl.inf or cop=xiaomi,pdl=inf)
        type: string
      - in: query
        name: query
        description: host name
        type: string
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      responses:
        "200":
          description: total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /pub/rel/tag/host/search:
    get:
      tags:
      - pub
      description: get all Host
      operationId: PubController.GetHost
      parameters:
      - in: query
        name: tag
        description: tag string(cop.xiaomi_pdl.inf or cop=xiaomi,pdl=inf)
        type: string
      - in: query
        name: query
        description: host name
        type: string
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: tag host info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.RelTagHost'
        "400":
          description: string error
  /rel/node:
    get:
      tags:
      - rel
      description: get node and it's children
      operationId: RelController.Get tree's node
      parameters:
      - in: query
        name: id
        description: tag id default root(1)
        type: integer
        format: int64
      - in: query
        name: depth
        description: depth levels default -1(no limit)
        type: integer
        format: int64
      responses:
        "200":
          description: all nodes of the tree(read)
          schema:
            $ref: '#/definitions/models.TreeNode'
        "400":
          description: string error
  /rel/operate/tag:
    get:
      tags:
      - rel
      description: get has operate token tags
      operationId: RelController.Get tags(operate)
      parameters:
      - in: query
        name: expand
        description: include child tag(default:false)
        type: boolean
      responses:
        "200":
          description: all ids of the node that can be operated
          schema:
            type: array
            items:
              format: int64
              type: integer
        "400":
          description: string error
  /rel/read/tag:
    get:
      tags:
      - rel
      description: get has read token tags
      operationId: RelController.Get tags(read)
      parameters:
      - in: query
        name: expand
        description: include child tag(default:false)
        type: boolean
      responses:
        "200":
          description: all ids of the node that can be read
          schema:
            type: array
            items:
              format: int64
              type: integer
        "400":
          description: string error
  /rel/tag/host:
    post:
      tags:
      - rel
      description: create tag/host relation
      operationId: RelController.create tag host relation
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.RelTagHostApiAdd'
      responses:
        "200":
          description: affected number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
    delete:
      tags:
      - rel
      description: delete tag/host relation
      operationId: RelController.delete tag host relation
      parameters:
      - in: body
        name: body
        description: unbind tag_id host_id relation
        required: true
        schema:
          $ref: '#/definitions/models.RelTagHostApiDel'
      responses:
        "200":
          description: affected number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /rel/tag/host/cnt:
    get:
      tags:
      - rel
      description: get Tag-Host number
      operationId: RelController.GetTagHostCnt
      parameters:
      - in: query
        name: tag_id
        description: tag id
        type: integer
        format: int64
      - in: query
        name: query
        description: host name
        type: string
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      responses:
        "200":
          description: total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /rel/tag/host/search:
    get:
      tags:
      - rel
      description: get all Host
      operationId: RelController.GetHost
      parameters:
      - in: query
        name: tag_id
        description: tag id
        type: integer
        format: int64
      - in: query
        name: query
        description: host name
        type: string
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: tag host info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.RelTagHost'
        "400":
          description: string error
  /rel/tag/hosts:
    post:
      tags:
      - rel
      description: create tag/hosts relation
      operationId: RelController.create tag host relation
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/.RelTagHostsAdd'
      responses:
        "200":
          description: affected number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
    delete:
      tags:
      - rel
      description: delete tag/hosts relation
      operationId: RelController.delete tag host relation
      parameters:
      - in: body
        name: body
        description: unbind tag_id host_id relation
        required: true
        schema:
          $ref: '#/definitions/models.RelTagHostsApiDel'
      responses:
        "200":
          description: affected number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /rel/tag/plugindir:
    post:
      tags:
      - rel
      description: create tag/template relation
      operationId: RelController.create tag template relation
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.PluginDirPost'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
    delete:
      tags:
      - rel
      description: delete the plugin
      operationId: RelController.Delete tag plugin
      parameters:
      - in: query
        name: tag_id
        description: tag id
        required: true
        type: integer
        format: int64
      - in: query
        name: id
        description: The id you want to delete
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /rel/tag/plugindir/cnt:
    get:
      tags:
      - rel
      description: get Tag-plugin number
      operationId: RelController.GetTagPluginCnt
      parameters:
      - in: query
        name: tag_id
        description: tag id
        required: true
        type: integer
        format: int64
      - in: query
        name: deep
        description: include child tag(default:true)
        type: boolean
      responses:
        "200":
          description: total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /rel/tag/plugindir/search:
    get:
      tags:
      - rel
      description: get all Template
      operationId: RelController.Get plugin dir
      parameters:
      - in: query
        name: tag_id
        description: tag id
        required: true
        type: integer
        format: int64
      - in: query
        name: deep
        description: include child tag(default:true)
        type: boolean
      - in: query
        name: limit
        description: per page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: plugin info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.PluginDirGet'
        "400":
          description: string error
  /rel/tag/role/token:
    post:
      tags:
      - rel
      description: create tag/role/tokens relation
      operationId: RelController.create tag role tokens relation
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.TagRoleTokenApi'
      responses:
        "200":
          description: affected id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
    delete:
      tags:
      - rel
      description: delete tag/role/token relation
      operationId: RelController.delete tag role token relation
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.TagRoleTokenApi'
      responses:
        "200":
          description: affected id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /rel/tag/role/token/cnt:
    get:
      tags:
      - rel
      description: get tag role token number
      operationId: RelController.GetTagRoleTokenCnt
      parameters:
      - in: query
        name: query
        description: token name
        type: string
      - in: query
        name: tag_id
        description: tag id
        required: true
        type: integer
        format: int64
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      responses:
        "200":
          description: affected number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /rel/tag/role/token/search:
    get:
      tags:
      - rel
      description: get tag role token
      operationId: RelController.GetTagRoleToken
      parameters:
      - in: query
        name: tag_id
        description: tag id
        required: true
        type: integer
        format: int64
      - in: query
        name: query
        description: token name
        type: string
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: hosts info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Host'
        "400":
          description: string error
  /rel/tag/role/user:
    post:
      tags:
      - rel
      description: create tag/role/users relation
      operationId: RelController.create tag role users relation
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.TagRoleUserApi'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
    delete:
      tags:
      - rel
      description: delete tag/role/user relation
      operationId: RelController.delete tag role user relation
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.TagRoleUserApi'
      responses:
        "200":
          description: affected id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /rel/tag/role/user/cnt:
    get:
      tags:
      - rel
      description: get tag role user number
      operationId: RelController.GetTagRoleUserCnt
      parameters:
      - in: query
        name: query
        description: user name
        type: string
      - in: query
        name: tag_id
        description: tag id
        required: true
        type: integer
        format: int64
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      responses:
        "200":
          description: user total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /rel/tag/role/user/search:
    get:
      tags:
      - rel
      description: get tag role user
      operationId: RelController.GetTagRoleUser
      parameters:
      - in: query
        name: tag_id
        description: tag id
        required: true
        type: integer
        format: int64
      - in: query
        name: query
        description: user name
        type: string
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: tag role user info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.TagRoleUserApiGet'
        "400":
          description: string error
  /rel/tag/template:
    post:
      tags:
      - rel
      description: create tag/template relation
      operationId: RelController.create tag template relation
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.RelTagTpl'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
    delete:
      tags:
      - rel
      description: delete tag/template relation
      operationId: RelController.delete tag template relation
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.RelTagTpl'
      responses:
        "200":
          description: affected number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /rel/tag/template/0:
    post:
      tags:
      - rel
      description: create tag/templates relation by tag string & template name
      operationId: RelController.create tag template relation by tag string & template
        name
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.RelTagTpl0'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
    delete:
      tags:
      - rel
      description: delete tag/template relation by tag string & template name
      operationId: RelController.delete tag template relation by tag string & template
        name
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.RelTagTpl0'
      responses:
        "200":
          description: affected number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /rel/tag/template/cnt:
    get:
      tags:
      - rel
      description: get Tag-Template number
      operationId: RelController.GetTagTemplateCnt
      parameters:
      - in: query
        name: query
        description: template name
        type: string
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      - in: query
        name: mine
        description: search mine template
        type: boolean
      - in: query
        name: tag_id
        description: tag id
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /rel/tag/template/cnt/0:
    get:
      tags:
      - rel
      description: get Tag-Template number
      operationId: RelController.GetTagTemplateCnt by tag string
      parameters:
      - in: query
        name: query
        description: template name
        type: string
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      - in: query
        name: mine
        description: search mine template
        type: boolean
      - in: query
        name: tag_string
        description: tag string
        required: true
        type: string
      responses:
        "200":
          description: total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /rel/tag/template/search:
    get:
      tags:
      - rel
      description: get all Template
      operationId: RelController.GetTemplate
      parameters:
      - in: query
        name: tag_id
        description: tag id
        required: true
        type: integer
        format: int64
      - in: query
        name: query
        description: template name
        type: string
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      - in: query
        name: mine
        description: search mine template
        type: boolean
      - in: query
        name: limit
        description: per page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: templates info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.TagTplGet'
        "400":
          description: string error
  /rel/tag/template/search/0:
    get:
      tags:
      - rel
      description: get all Template by tag string
      operationId: RelController.GetTemplate by tag string
      parameters:
      - in: query
        name: tag_string
        description: tag string
        required: true
        type: string
      - in: query
        name: query
        description: template name
        type: string
      - in: query
        name: deep
        description: search sub tag
        type: boolean
      - in: query
        name: mine
        description: search mine template
        type: boolean
      - in: query
        name: limit
        description: per page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: templates info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.TagTplGet'
        "400":
          description: string error
  /rel/tag/templates:
    post:
      tags:
      - rel
      description: create tag/templates relation
      operationId: RelController.create tag template relation
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.RelTagTpls'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
    delete:
      tags:
      - rel
      description: delete tag/templates relation
      operationId: RelController.delete tag template relation
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.RelTagTpls'
      responses:
        "200":
          description: affected number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /role/:
    put:
      tags:
      - role
      description: update the role
      operationId: RoleController.UpdateRole
      parameters:
      - in: body
        name: body
        description: body for role content
        required: true
        schema:
          $ref: '#/definitions/models.RoleUpdate'
      responses:
        "200":
          description: role info
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: string error
    post:
      tags:
      - role
      description: create roles
      operationId: RoleController.CreateRole
      parameters:
      - in: body
        name: body
        description: body for role content
        required: true
        schema:
          $ref: '#/definitions/models.RoleCreate'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /role/{id}:
    get:
      tags:
      - role
      description: get role by id
      operationId: RoleController.Get
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: role info
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: string error
    delete:
      tags:
      - role
      description: delete the role
      operationId: RoleController.DeleteRole
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "400":
          description: string error
  /role/cnt:
    get:
      tags:
      - role
      description: get Roles number
      operationId: RoleController.GetRolesCnt
      parameters:
      - in: query
        name: query
        description: role name
        type: string
      responses:
        "200":
          description: role number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /role/search:
    get:
      tags:
      - role
      description: get all Roles
      operationId: RoleController.GetRoles
      parameters:
      - in: query
        name: query
        description: role name
        type: string
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: roles info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Role'
        "400":
          description: string error
  /settings/config/{module}:
    get:
      tags:
      - settings
      description: get modules config
      operationId: SetController.Get config
      parameters:
      - in: path
        name: module
        description: module name
        required: true
        type: string
      responses:
        "200":
          description: map[string]string {defualt{}, conf{}, configfile{}}
        "400":
          description: string error
  /settings/log/cnt:
    get:
      tags:
      - settings
      description: get logs number
      operationId: SetController.GetLogsCnt
      parameters:
      - in: query
        name: begin
        description: end time(YYYY-MM-DD HH:mm:ss)
        type: string
      - in: query
        name: end
        description: begin time(YYYY-MM-DD HH:mm:ss)
        type: string
      responses:
        "200":
          description: total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /settings/log/search:
    get:
      tags:
      - settings
      description: get all Logs
      operationId: SetController.GetLogs
      parameters:
      - in: query
        name: begin
        description: end time(YYYY-MM-DD HH:mm:ss)
        type: string
      - in: query
        name: end
        description: begin time(YYYY-MM-DD HH:mm:ss)
        type: string
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: logs info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.LogApiGet'
        "400":
          description: string error
  /settings/profile:
    get:
      tags:
      - settings
      description: get profile
      operationId: SetController.Get
      responses:
        "200":
          description: user info
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: string error
    put:
      tags:
      - settings
      description: update profile
      operationId: SetController.Profile update
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.UserProfileUpdate'
      responses:
        "200":
          description: user info
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: string error
  /strategy/:
    post:
      tags:
      - strategy
      description: create strategys
      operationId: StrategyController.CreateStrategy
      parameters:
      - in: body
        name: body
        description: body for strategy content
        required: true
        schema:
          $ref: '#/definitions/models.Strategy'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /strategy/{id}:
    get:
      tags:
      - strategy
      description: get strategy by id
      operationId: StrategyController.Get
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: strategy info
          schema:
            $ref: '#/definitions/models.Strategy'
        "400":
          description: string error
    put:
      tags:
      - strategy
      description: update the strategy
      operationId: StrategyController.UpdateStrategy
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for strategy content
        required: true
        schema:
          $ref: '#/definitions/models.Strategy'
      responses:
        "200":
          description: strategy info
          schema:
            $ref: '#/definitions/models.Strategy'
        "400":
          description: string error
    delete:
      tags:
      - strategy
      description: delete the strategy
      operationId: StrategyController.DeleteStrategy
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "400":
          description: string error
  /strategy/cnt:
    get:
      tags:
      - strategy
      description: get Strategys number
      operationId: StrategyController.GetStrategysCnt
      parameters:
      - in: query
        name: tid
        description: template id
        type: integer
        format: int64
      - in: query
        name: query
        description: strategy name
        type: string
      responses:
        "200":
          description: strategy total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /strategy/search:
    get:
      tags:
      - strategy
      description: get all Strategys
      operationId: StrategyController.GetStrategys
      parameters:
      - in: query
        name: tid
        description: template id
        type: integer
        format: int64
      - in: query
        name: query
        description: strategy name
        type: string
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: strategys info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Strategy'
        "400":
          description: string error
  /tag/:
    post:
      tags:
      - tag
      description: create tags
      operationId: TagController.CreateTag
      parameters:
      - in: body
        name: body
        description: body for tag content
        required: true
        schema:
          $ref: '#/definitions/models.TagCreate'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /tag/{id}:
    get:
      tags:
      - tag
      description: get tag by id
      operationId: TagController.Get
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: tag info
          schema:
            $ref: '#/definitions/models.Tag'
        "400":
          description: string error
    delete:
      tags:
      - tag
      description: delete the tag
      operationId: TagController.DeleteTag
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} "delete success!"'
        "400":
          description: string error
  /tag/cnt:
    get:
      tags:
      - tag
      description: get Tags number
      operationId: TagController.GetTagsCnt
      parameters:
      - in: query
        name: query
        description: tag name
        type: string
      responses:
        "200":
          description: tag total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /tag/search:
    get:
      tags:
      - tag
      description: get all Tags
      operationId: TagController.GetTags
      parameters:
      - in: query
        name: query
        description: tag name
        type: string
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: tags info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Tag'
        "400":
          description: "string\terror"
  /template/:
    post:
      tags:
      - template
      description: create templates
      operationId: TemplateController.CreateTemplate
      parameters:
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/models.TemplateAction'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /template/{id}:
    get:
      tags:
      - template
      description: get template by id
      operationId: TemplateController.Get
      parameters:
      - in: path
        name: id
        description: template id
        required: true
        type: integer
        format: int64
      - in: query
        name: clone
        description: clone tid to new one
        type: boolean
      responses:
        "200":
          description: template and action info
          schema:
            $ref: '#/definitions/models.TemplateAction'
        "400":
          description: string error
    put:
      tags:
      - template
      description: update the template
      operationId: TemplateController.UpdateTemplate
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/models.TemplateAction'
      responses:
        "200":
          description: template info
          schema:
            $ref: '#/definitions/models.Template'
        "400":
          description: string error
    delete:
      tags:
      - template
      description: delete the template
      operationId: TemplateController.DeleteTemplate
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        '{code:200,':
          description: data:"delete success!"} delete success!
        '{code:400,':
          description: msg:string}
  /template/cnt:
    get:
      tags:
      - template
      description: get Templates number
      operationId: TemplateController.GetTemplatesCnt
      parameters:
      - in: query
        name: query
        description: template name
        type: string
      - in: query
        name: mine
        description: only show mine template, default true
        type: boolean
      responses:
        "200":
          description: total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /template/search:
    get:
      tags:
      - template
      description: get all Templates
      operationId: TemplateController.GetTemplates
      parameters:
      - in: query
        name: query
        description: template name
        type: string
      - in: query
        name: mine
        description: only show mine template, default true
        type: boolean
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: templates ui info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.TemplateUi'
        "400":
          description: string error
  /token/:
    put:
      tags:
      - token
      description: update the token
      operationId: TokenController.UpdateToken
      parameters:
      - in: body
        name: body
        description: body for token content
        required: true
        schema:
          $ref: '#/definitions/models.TokenUpdate'
      responses:
        "200":
          description: token info
          schema:
            $ref: '#/definitions/models.Token'
        "400":
          description: string error
    post:
      tags:
      - token
      description: create tokens
      operationId: TokenController.CreateToken
      parameters:
      - in: body
        name: body
        description: body for token content
        required: true
        schema:
          $ref: '#/definitions/models.TokenCreate'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /token/{id}:
    get:
      tags:
      - token
      description: get token by id
      operationId: TokenController.Get
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: token info
          schema:
            $ref: '#/definitions/models.Token'
        "400":
          description: string error
    delete:
      tags:
      - token
      description: delete the token
      operationId: TokenController.DeleteToken
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        '{code:200,':
          description: data:"delete success!"} delete success!
        '{code:400,':
          description: msg:string}
  /token/cnt:
    get:
      tags:
      - token
      description: get Tokens number
      operationId: TokenController.GetTokensCnt
      parameters:
      - in: query
        name: query
        description: token name
        type: string
      responses:
        "200":
          description: token total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /token/search:
    get:
      tags:
      - token
      description: get all Tokens
      operationId: TokenController.GetTokens
      parameters:
      - in: query
        name: query
        description: token name
        type: string
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: tokens info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Token'
        "400":
          description: string error
  /user/:
    put:
      tags:
      - user
      description: update user information
      operationId: UserController.Update
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.UserApiUpdate'
      responses:
        "200":
          description: user info
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: string error
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.UserApiAdd'
      responses:
        "200":
          description: Id
          schema:
            $ref: '#/definitions/models.Id'
        "400":
          description: string error
  /user/{id}:
    get:
      tags:
      - user
      description: get user by id
      operationId: UserController.Get
      parameters:
      - in: path
        name: id
        description: user id
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: user info
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: string error
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        '{code:200,':
          description: data:string} delete success!
        "400":
          description: string error
  /user/binded/{id}:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetBindedUsers
      parameters:
      - in: path
        name: id
        description: user id
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: users info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.User'
        "400":
          description: string error
  /user/cnt:
    get:
      tags:
      - user
      description: get Users number
      operationId: UserController.GetUsersCnt
      parameters:
      - in: query
        name: query
        description: user name/email
        type: string
      responses:
        "200":
          description: user total number
          schema:
            $ref: '#/definitions/models.Total'
        "400":
          description: string error
  /user/search:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetUsers
      parameters:
      - in: query
        name: query
        description: user name/email
        type: string
      - in: query
        name: limit
        description: limit page number
        type: integer
        format: int64
      - in: query
        name: offset
        description: offset  number
        type: integer
        format: int64
      responses:
        "200":
          description: users info
          schema:
            type: array
            items:
              $ref: '#/definitions/models.User'
        "400":
          description: string error
  /user/unbind/{id}:
    get:
      tags:
      - user
      description: unbind user
      operationId: UserController.unbind User
      parameters:
      - in: path
        name: id
        description: user id
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: string success
        "400":
          description: string error
  /weapp/authqr:
    get:
      tags:
      - weapp
      description: get auth task qrcode
      operationId: WeappController.create get auth task qrcode
      responses:
        "200":
          description: qr code image(encode by base64)
          schema:
            $ref: '#/definitions/models.QrTask'
        "400":
          description: string error
  /weapp/bindqr:
    get:
      tags:
      - weapp
      description: bind weapp to cur user
      operationId: 'WeappController.create bind weapp to falcon user task(acl: falcon
        session login)'
      responses:
        "200":
          description: qr code image(encode by base64)
          schema:
            $ref: '#/definitions/models.QrTask'
        "400":
          description: string error
  /weapp/login:
    get:
      tags:
      - weapp
      description: wexin app login api
      operationId: 'WeappController.login (acl: pub)'
      responses:
        "200":
          description: string success
        "400":
          description: string error
  /weapp/openid:
    get:
      tags:
      - weapp
      description: wexin app api
      operationId: 'WeappController.openid (acl: pub)'
      parameters:
      - in: query
        name: code
        description: code from weapp wx.login()
        required: true
        type: string
      responses:
        "200":
          description: string success
        "400":
          description: string error
  /weapp/task:
    get:
      tags:
      - weapp
      description: get task states
      operationId: WeappController.get task states
      parameters:
      - in: query
        name: key
        description: task key
        required: true
        type: string
      responses:
        "200":
          description: '{string} states'
        "400":
          description: string error
  /weapp/taskack:
    get:
      tags:
      - weapp
      description: bind weapp to cur user
      operationId: 'WeappController.ack auth to falcon request(acl: weapp login &&
        binded)'
      parameters:
      - in: query
        name: key
        description: task key
        required: true
        type: string
      responses:
        "200":
          description: bind to falcon user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: string error
  /weapp/templateMessage:
    get:
      tags:
      - weapp
      description: wexin app api
      operationId: WeappController.templateMessage
      responses:
        "200":
          description: string success
        "400":
          description: string error
  /weapp/testRequest:
    get:
      tags:
      - weapp
      description: wexin app api
      operationId: 'WeappController.testRequest (acl: weapp skey)'
      responses:
        "200":
          description: string success
        "400":
          description: string error
  /weapp/tunnel:
    get:
      tags:
      - weapp
      description: wexin app api
      operationId: WeappController.tunnel
      responses:
        "200":
          description: string success
        "400":
          description: string error
  /weapp/upload:
    post:
      tags:
      - weapp
      description: wexin app api
      operationId: WeappController.upload
      responses:
        "200":
          description: string success
        "400":
          description: string error
definitions:
  .RelTagHostsAdd:
    type: object
  models.APICreateAggregatorInput:
    title: APICreateAggregatorInput
    type: object
    properties:
      denominator:
        type: string
      endpoint:
        type: string
      metric:
        type: string
      numerator:
        type: string
      step:
        type: integer
        format: int64
      tag_id:
        type: integer
        format: int64
      tags:
        type: string
  models.APICreateAggregatorInput0:
    title: APICreateAggregatorInput0
    type: object
    properties:
      denominator:
        type: string
      endpoint:
        type: string
      metric:
        type: string
      numerator:
        type: string
      step:
        type: integer
        format: int64
      tag_string:
        type: string
      tags:
        type: string
  models.APIGraph:
    title: APIGraph
    type: object
    properties:
      counters:
        type: array
        items:
          type: string
      endpoints:
        type: array
        items:
          type: string
      falcon_tags:
        type: string
      graph_id:
        type: integer
        format: int64
      graph_type:
        type: string
      method:
        type: string
      position:
        type: integer
        format: int64
      screen_id:
        type: integer
        format: int64
      timespan:
        type: integer
        format: int64
      title:
        type: string
  models.APIGraphs:
    title: APIGraphs
    type: object
    properties:
      Gs:
        type: array
        items:
          $ref: '#/definitions/models.APIGraph'
  models.APIQueryGraphDrawData:
    title: APIQueryGraphDrawData
    type: object
    properties:
      consol_fun:
        type: string
      counters:
        type: array
        items:
          type: string
      end_time:
        type: integer
        format: int64
      hostnames:
        type: array
        items:
          type: string
      start_time:
        type: integer
        format: int64
      step:
        type: integer
        format: int64
  models.APITmpGraph:
    title: APITmpGraph
    type: object
    properties:
      counters:
        type: array
        items:
          type: string
      endpoints:
        type: array
        items:
          type: string
  models.APIUpdateAggregatorInput:
    title: APIUpdateAggregatorInput
    type: object
    properties:
      denominator:
        type: string
      endpoint:
        type: string
      id:
        type: integer
        format: int64
      metric:
        type: string
      numerator:
        type: string
      step:
        type: integer
        format: int64
      tags:
        type: string
  models.Action:
    title: Action
    type: object
    properties:
      after_callback_mail:
        type: integer
        format: int32
      after_callback_sms:
        type: integer
        format: int32
      before_callback_mail:
        type: integer
        format: int32
      before_callback_sms:
        type: integer
        format: int32
      callback:
        type: integer
        format: int32
      id:
        type: integer
        format: int64
      send_mail:
        type: integer
        format: int32
      send_sms:
        type: integer
        format: int32
      uic:
        type: string
      url:
        type: string
  models.AddDashboardScreen:
    title: AddDashboardScreen
    type: object
    properties:
      name:
        type: string
      pid:
        type: integer
        format: int64
  models.Aggreator:
    title: Aggreator
    type: object
    properties:
      creator:
        type: string
      denominator:
        type: string
      ds_type:
        type: string
      endpoint:
        type: string
      id:
        type: integer
        format: int64
      metric:
        type: string
      numerator:
        type: string
      step:
        type: integer
        format: int64
      tag_id:
        type: integer
        format: int64
      tags:
        type: string
  models.Claim:
    title: Claim
    type: object
    properties:
      Commit:
        type: string
      Matter:
        type: integer
        format: int64
      Timestamp:
        type: integer
        format: int64
      User:
        type: string
  models.DashboardGraph:
    title: DashboardGraph
    type: object
    properties:
      counters:
        type: string
      falcon_tags:
        type: string
      graph_type:
        type: string
      hosts:
        type: string
      id:
        type: integer
        format: int64
      method:
        type: string
      position:
        type: integer
        format: int64
      screen_id:
        type: integer
        format: int64
      timespan:
        type: integer
        format: int64
      title:
        type: string
  models.DashboardScreen:
    title: DashboardScreen
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      pid:
        type: integer
        format: int64
  models.DeleteAggreator0:
    title: DeleteAggreator0
    type: object
    properties:
      entries:
        type: array
        items:
          $ref: '#/definitions/models.DeleteAggreator0Entry'
      tag_string:
        type: string
  models.DeleteAggreator0Entry:
    title: DeleteAggreator0Entry
    type: object
    properties:
      endpoint:
        type: string
      metric:
        type: string
      tags:
        type: string
  models.Endpoint:
    title: Endpoint
    type: object
    properties:
      endpoint:
        type: string
      id:
        type: integer
        format: int64
  models.EndpointCounter:
    title: EndpointCounter
    type: object
    properties:
      counter:
        type: string
      step:
        type: integer
        format: int64
      type:
        type: string
  models.Events:
    title: Events
    type: object
    properties:
      Endpoint:
        type: string
      Eventid:
        type: string
      Func:
        type: string
      Metric:
        type: string
      Priority:
        type: string
      Status:
        type: string
      Timestamp:
        type: string
  models.ExpansionStatus:
    title: ExpansionStatus
    type: object
    properties:
      graph_cluster:
        type: string
      migrating:
        type: boolean
      new_endpoint:
        type: string
  models.Expression:
    title: Expression
    type: object
    properties:
      condition:
        type: string
      createUid:
        type: integer
        format: int64
      expression:
        type: string
      fun:
        type: string
      id:
        type: integer
        format: int64
      maxStep:
        type: integer
        format: int64
      msg:
        type: string
      name:
        type: string
      op:
        type: string
      pause:
        type: integer
        format: int64
      priority:
        type: integer
        format: int64
  models.ExpressionActionApiGet:
    title: ExpressionActionApiGet
    type: object
    properties:
      action:
        $ref: '#/definitions/models.Action'
      expression:
        $ref: '#/definitions/models.Expression'
  models.ExpressionActionApiPut:
    title: ExpressionActionApiPut
    type: object
    properties:
      action:
        $ref: '#/definitions/models.Action'
      expression:
        $ref: '#/definitions/models.ExpressionApiPut'
  models.ExpressionApiGet:
    title: ExpressionApiGet
    type: object
    properties:
      condition:
        type: string
      creator:
        type: string
      expression:
        type: string
      fun:
        type: string
      id:
        type: integer
        format: int64
      max_step:
        type: integer
        format: int64
      msg:
        type: string
      op:
        type: string
      pause:
        type: integer
        format: int64
      priority:
        type: integer
        format: int64
      sendMail:
        type: integer
        format: int32
      sendSms:
        type: integer
        format: int32
      uic:
        type: string
  models.ExpressionApiPut:
    title: ExpressionApiPut
    type: object
    properties:
      condition:
        type: string
      createUid:
        type: integer
        format: int64
      expression:
        type: string
      fun:
        type: string
      maxStep:
        type: integer
        format: int64
      msg:
        type: string
      name:
        type: string
      op:
        type: string
      pause:
        type: integer
        format: int64
      priority:
        type: integer
        format: int64
  models.GetAggreator:
    title: GetAggreator
    type: object
    properties:
      creator:
        type: string
      denominator:
        type: string
      ds_type:
        type: string
      endpoint:
        type: string
      id:
        type: integer
        format: int64
      metric:
        type: string
      numerator:
        type: string
      step:
        type: integer
        format: int64
      tag_id:
        type: integer
        format: int64
      tag_name:
        type: string
      tags:
        type: string
  models.GraphQueryResponse:
    title: GraphQueryResponse
    type: object
    properties:
      Values:
        type: array
        items:
          $ref: '#/definitions/models.RRDData'
      counter:
        type: string
      dstype:
        type: string
      endpoint:
        type: string
      step:
        type: integer
        format: int64
  models.Host:
    title: Host
    type: object
    properties:
      id:
        type: integer
        format: int64
      idc:
        type: string
      loc:
        type: string
      maintain_begin:
        type: integer
        format: int64
      maintain_end:
        type: integer
        format: int64
      name:
        type: string
      pause:
        type: integer
        format: int64
      status:
        type: string
      typ:
        type: string
      uuid:
        type: string
  models.HostCreate:
    title: HostCreate
    type: object
    properties:
      idc:
        type: string
      loc:
        type: string
      maintain_begin:
        type: integer
        format: int64
      maintain_end:
        type: integer
        format: int64
      name:
        type: string
      pause:
        type: integer
        format: int64
      status:
        type: string
      typ:
        type: string
      uuid:
        type: string
  models.HostUpdate:
    title: HostUpdate
    type: object
    properties:
      id:
        type: integer
        format: int64
      idc:
        type: string
      loc:
        type: string
      maintain_begin:
        type: integer
        format: int64
      maintain_end:
        type: integer
        format: int64
      name:
        type: string
      pause:
        type: integer
        format: int64
      status:
        type: string
      typ:
        type: string
      uuid:
        type: string
  models.Id:
    title: Id
    type: object
    properties:
      id:
        type: integer
        format: int64
  models.LogApiGet:
    title: LogApiGet
    type: object
    properties:
      action:
        type: string
      data:
        type: string
      id:
        type: integer
        format: int64
      module:
        type: string
      tid:
        type: integer
        format: int64
      time:
        type: string
        format: string
      user:
        type: string
  models.Matter:
    title: Matter
    type: object
    properties:
      Aggregation:
        type: string
      Endtime:
        type: integer
        format: int64
      Id:
        type: integer
        format: int64
      Name:
        type: string
      Starttime:
        type: integer
        format: int64
      Status:
        type: integer
        format: int64
  models.Metric:
    title: Metric
    type: object
    properties:
      name:
        type: string
  models.Mockcfg:
    title: Mockcfg
    type: object
    properties:
      creator:
        type: string
      dstype:
        type: string
      id:
        type: integer
        format: int64
      metric:
        type: string
      mock:
        type: number
        format: double
      name:
        type: string
      obj:
        type: string
      obj_type:
        type: string
      step:
        type: integer
        format: int64
      tags:
        type: string
  models.NoDataApiPut:
    title: NoDataApiPut
    type: object
    properties:
      dstype:
        type: string
      metric:
        type: string
      mock:
        type: number
        format: double
      name:
        type: string
      obj:
        type: string
      obj_type:
        type: string
      step:
        type: integer
        format: int64
      tags:
        type: string
  models.Obj:
    title: Obj
    type: object
  models.OperatorInfo:
    title: OperatorInfo
    type: object
    properties:
      admin:
        type: boolean
      operator:
        type: boolean
      reader:
        type: boolean
      user:
        $ref: '#/definitions/models.User'
  models.PluginDirGet:
    title: PluginDirGet
    type: object
    properties:
      creator:
        type: string
      dir:
        type: string
      id:
        type: integer
        format: int64
      tag_id:
        type: integer
        format: int64
      tag_name:
        type: string
  models.PluginDirPost:
    title: PluginDirPost
    type: object
    properties:
      dir:
        type: string
      tag_id:
        type: integer
        format: int64
  models.QrTask:
    title: QrTask
    type: object
    properties:
      img:
        type: string
      key:
        type: string
  models.RRDData:
    title: RRDData
    type: object
    properties:
      timestamp:
        type: integer
        format: int64
      value:
        type: number
        format: double
  models.RelTagHost:
    title: RelTagHost
    type: object
    properties:
      host_id:
        type: integer
        format: int64
      host_name:
        type: string
      id:
        type: integer
        format: int64
      maintain_begin:
        type: integer
        format: int64
      maintain_end:
        type: integer
        format: int64
      pause:
        type: integer
        format: int64
      tag_id:
        type: integer
        format: int64
      tag_name:
        type: string
  models.RelTagHostApiAdd:
    title: RelTagHostApiAdd
    type: object
    properties:
      host_id:
        type: integer
        format: int64
      src_tag_id:
        type: integer
        format: int64
      tag_id:
        type: integer
        format: int64
  models.RelTagHostApiDel:
    title: RelTagHostApiDel
    type: object
    properties:
      host_id:
        type: integer
        format: int64
      tag_id:
        type: integer
        format: int64
  models.RelTagHostsApiDel:
    title: RelTagHostsApiDel
    type: object
    properties:
      host_ids:
        type: array
        items:
          type: integer
          format: int64
      tag_id:
        type: integer
        format: int64
  models.RelTagTpl:
    title: RelTagTpl
    type: object
    properties:
      tag_id:
        type: integer
        format: int64
      tpl_id:
        type: integer
        format: int64
  models.RelTagTpl0:
    title: RelTagTpl0
    type: object
    properties:
      tag_string:
        type: string
      tpl_name:
        type: string
  models.RelTagTpls:
    title: RelTagTpls
    type: object
    properties:
      tag_id:
        type: integer
        format: int64
      tpl_ids:
        type: array
        items:
          type: integer
          format: int64
  models.Role:
    title: Role
    type: object
    properties:
      cname:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
      note:
        type: string
  models.RoleCreate:
    title: RoleCreate
    type: object
    properties:
      cname:
        type: string
      name:
        type: string
      note:
        type: string
  models.RoleUpdate:
    title: RoleUpdate
    type: object
    properties:
      cname:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
      note:
        type: string
  models.Stats:
    title: Stats
    type: object
    properties:
      failure:
        type: integer
        format: int64
      success:
        type: integer
        format: int64
  models.Strategy:
    title: Strategy
    type: object
    properties:
      condition:
        type: string
      fun:
        type: string
      id:
        type: integer
        format: int64
      maxStep:
        type: integer
        format: int64
      metric:
        type: string
      metricId:
        type: integer
        format: int64
      note:
        type: string
      op:
        type: string
      priority:
        type: integer
        format: int64
      runBegin:
        type: string
      runEnd:
        type: string
      tags:
        type: string
      tplId:
        type: integer
        format: int64
  models.Tag:
    title: Tag
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      type:
        type: integer
        format: int64
  models.TagCreate:
    title: TagCreate
    type: object
    properties:
      name:
        type: string
  models.TagRoleTokenApi:
    title: TagRoleTokenApi
    type: object
    properties:
      role_id:
        type: integer
        format: int64
      tag_id:
        type: integer
        format: int64
      token_id:
        type: integer
        format: int64
  models.TagRoleUserApi:
    title: TagRoleUserApi
    type: object
    properties:
      role_id:
        type: integer
        format: int64
      tag_id:
        type: integer
        format: int64
      user_id:
        type: integer
        format: int64
  models.TagRoleUserApiGet:
    title: TagRoleUserApiGet
    type: object
    properties:
      role_id:
        type: integer
        format: int64
      role_name:
        type: string
      tag_id:
        type: integer
        format: int64
      tag_name:
        type: string
      user_id:
        type: integer
        format: int64
      user_name:
        type: string
  models.TagTplGet:
    title: TagTplGet
    type: object
    properties:
      creator:
        type: string
      id:
        type: integer
        format: int64
      tag_id:
        type: integer
        format: int64
      tag_name:
        type: string
      tpl_id:
        type: integer
        format: int64
      tpl_name:
        type: string
      tpl_pid:
        type: integer
        format: int64
      tpl_pname:
        type: string
  models.Template:
    title: Template
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      pid:
        type: integer
        format: int64
  models.TemplateAction:
    title: TemplateAction
    type: object
    properties:
      action:
        $ref: '#/definitions/models.Action'
      pname:
        type: string
      template:
        $ref: '#/definitions/models.Template'
  models.TemplateUi:
    title: TemplateUi
    type: object
    properties:
      creator:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
      pid:
        type: integer
        format: int64
      pname:
        type: string
  models.Token:
    title: Token
    type: object
    properties:
      cname:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
      note:
        type: string
  models.TokenCreate:
    title: TokenCreate
    type: object
    properties:
      cname:
        type: string
      name:
        type: string
      note:
        type: string
  models.TokenUpdate:
    title: TokenUpdate
    type: object
    properties:
      cname:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
      note:
        type: string
  models.Total:
    title: Total
    type: object
    properties:
      total:
        type: integer
        format: int64
  models.TreeNode:
    title: TreeNode
    type: object
    properties:
      children:
        type: array
        items:
          $ref: '#/definitions/models.TreeNode'
      id:
        type: integer
        format: int64
      label:
        type: string
      name:
        type: string
      read:
        type: boolean
  models.User:
    title: User
    type: object
    properties:
      avatarurl:
        type: string
      cname:
        type: string
      disabled:
        type: integer
        format: int64
      email:
        type: string
      extra:
        type: string
      id:
        type: integer
        format: int64
      mname:
        type: string
      muid:
        type: integer
        format: int64
      name:
        type: string
      phone:
        type: string
      qq:
        type: string
      uuid:
        type: string
  models.UserApiAdd:
    title: UserApiAdd
    type: object
    properties:
      avatarurl:
        type: string
      cname:
        type: string
      email:
        type: string
      extra:
        type: string
      name:
        type: string
      phone:
        type: string
      qq:
        type: string
      uuid:
        type: string
  models.UserApiUpdate:
    title: UserApiUpdate
    type: object
    properties:
      avatarurl:
        type: string
      cname:
        type: string
      disabled:
        type: integer
        format: int64
      email:
        type: string
      extra:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
      phone:
        type: string
      qq:
        type: string
      uuid:
        type: string
  models.UserProfileUpdate:
    title: UserProfileUpdate
    type: object
    properties:
      cname:
        type: string
      email:
        type: string
      extra:
        type: string
      phone:
        type: string
      qq:
        type: string
tags:
- name: auth
  description: |
    Operations about Auth
- name: host
  description: |
    Operations about Hosts
- name: role
  description: |
    Operations about Roles
- name: tag
  description: |
    Operations about Tags
- name: user
  description: |
    Operations about Users
- name: token
  description: |
    Operations about Tokens
- name: rel
  description: |
    Operations about Relations
- name: template
  description: |
    Operations about Templates
- name: expression
  description: |
    Operations about Expressions
- name: strategy
  description: |
    Operations about Strategys
- name: settings
  description: |
    Operations about porfile/config/info
- name: metric
  description: |
    Operations about Metrics
- name: admin
  description: |
    Operations about porfile/config/info
- name: matter
  description: |
    Operations about Matters
- name: dashboard
  description: |
    Operations about dashboard
- name: nodata
  description: |
    Operations about Mockcfgs
- name: aggreator
  description: |
    Operations about Aggreators
- name: graph
  description: |
    Operations about idx
- name: pub
  description: |
    Operations about porfile/config/info
- name: weapp
  description: |
    Operations about weixin app
