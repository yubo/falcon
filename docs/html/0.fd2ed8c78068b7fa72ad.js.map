{"version":3,"sources":["webpack:///0.fd2ed8c78068b7fa72ad.js","webpack:///./src/routes/falcon/dashboard/components/SearchData.js","webpack:///./src/routes/falcon/dashboard/modules/index.js","webpack:///./src/routes/falcon/dashboard/components/Charts.js","webpack:///./src/routes/falcon/dashboard/components/ShowCharts.js","webpack:///./src/routes/falcon/dashboard/components/adapt-chart-to-legend.js","webpack:///./src/routes/falcon/dashboard/components/highcharts.src.js"],"names":["webpackJsonp","402","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_form","_form2","_table","_table2","_dropdown","_dropdown2","_button","_button2","_input","_input2","_icon","_icon2","_select","_select2","_spin","_spin2","_extends2","_extends3","_menu","_menu2","_modal","_modal2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_react","_react2","_reactRedux","_moment","_moment2","_index","FormItem","Item","Option","SearchData","_React$PureComponent","_ref","_temp","_this","_ret","this","_len","arguments","length","args","Array","_key","__proto__","getPrototypeOf","call","apply","concat","state","endpointInputBorderColor","endpoint","tag","counter","searchEndpointsText","searchCountersText","selectedEndpointRowKeys","selectedCounterRowKeys","selectedEndpointRows","selectedCounterRows","endpointsLimit","countersLimit","changeEndpoint","e","endpointText","target","setState","replace","changeTag","changeCounter","onInputEndpointChange","onInputCounterChange","queryEndpoints","_this$state","warning","title","content","type","preventDefault","props","getEndpoints","queryCounters","selectedRows","endpointIds","map","id","join","getCounters","showCharts","singleCounter","undefined","endpoints","counters","endTime","unix","startTime","subtract","saveSearchText","getId","key","_props$dashboard$toJS","dashboard","toJS","searchText","_this2","_props$dashboard$toJS2","isLoading","endpointsColumns","dataIndex","rowEndpointSelection","selections","selectedRowKeys","onChange","onSelectInvert","item","filter","rowCounterSelection","count","countersKeyData","newObj","countersColumns","render","text","record","createElement","onClick","width","menu","formEndpointItemLayout","labelCol","span","wrapperCol","formCounterItemLayout","tailEndpointFormItemLayout","sm","offset","tailCounterFormItemLayout","className","onSubmit","label","placeholder","style","borderColor","htmlType","position","top","suffix","rowKey","rowSelection","columns","dataSource","str","reg","RegExp","match","pagination","size","overlay","PureComponent","mapActionCreators","getCharts","mapStateToProps","connect","946","resetDashboardState","saveSearchData","data","payload","receiveSuccessEndpoints","RECEIVE_SUCCESS_ENDPOINTS","receiveSuccessCounters","RECEIVE_SUCCESS_COUNTERS","receiveSuccessChartsData","RECEIVE_SUCCESS_CHARTSDATA","chartsData","limit","dispatch","_utils","fetch","params","query","then","rsp","catch","ids","consol_fun","totalResCount","responseCount","results","push","sort","forEach","eachCounter","index","end_time","hostnames","start_time","body","sortEndpoints","eachEndpoint","postParams","JSON","stringify","win","window","open","cf","method","graph_type","location","href","getChartParams","path","action","midReducer","_immutable","_immutable2","initialState","fromJS","selectedEndpoints","selectedCounters","start","end","set","merge","947","_datePicker","_datePicker2","_reactRouter","_ShowCharts","_ShowCharts2","Charts","_PureComponent","handleSum","onStartChange","onStartOk","onEndChange","onEndOk","handlecfChange","handleViewChange","handleReset","_this$props$dashboard","startUnix","endUnix","searchData","pathname","router","_props$location$query","Number","layout","showTime","format","onOk","withRouter","949","950","951","_toConsumableArray2","_toConsumableArray3","Highcharts","Chart","_React$Component","chart","refs","options","nextProps","len","destroy","ref","Component","ShowCharts","_this3","setOptions","zoomType","colors","global","useUTC","credits","enabled","xAxis","dateTimeLabelFormats","hour","max","tickInterval","labels","step","tickPosition","plotOptions","series","marker","radius","pointStart","lineWidth","views","eachRspObj","eachRsp","_eachRspObj$params","chartTitle","name","isLegend","hostname","useHTML","height","legend","verticalAlign","adjustChartSize","navigation","borderWidth","symbolWidth","labelFormatter","chartWidth","Math","ceil","container","Values","eachObj","eachValue","timestamp","filterResults","sumResults","maxIndex","sumData","reduce","acc","curValue","curIndex","accIndex","sum","sumIndex","color","unshift","events","legendItemClick","tooltip","xDateFormat","backgroundColor","shadow","legendWidth","nameWidth","numWidth","floor","yData","min","last","avg","formatNum","num","toFixed","pre","cur","952","_typeof2","_typeof3","factory","H","wrap","Legend","prototype","proceed","translateY","addedHeight","legendHeight","originalChartHeight","chartHeight","align","group","attr","alignAttr","marginBottom","renderer","boxWrapper","boxedElement","box","clientWidth","parentElement","viewBox","clientHeight","positionCheckboxes","953","root","document","doc","SVG_NS","userAgent","navigator","svg","createElementNS","createSVGRect","isMS","test","opera","vml","isFirefox","hasBidiBug","parseInt","split","error","product","version","deg2rad","PI","hasTouch","documentElement","ontouchstart","isWebKit","isTouchDevice","chartCount","seriesTypes","symbolSizes","marginNames","noop","charts","timers","code","stop","msg","isNumber","Error","console","log","Fx","elem","prop","dSetter","startVal","paths","ret","now","i","toD","parseFloat","isNaN","update","element","unit","run","from","to","self","timer","gotoEnd","stopped","Date","pos","timerId","setInterval","splice","clearInterval","done","t","complete","duration","curAnim","objectEach","val","easing","initPath","fromD","sixify","arr","isOperator","nextIsOperator","insertSlice","subArr","prepend","other","fullLength","slice","numParams","isArea","append","positionFactor","bezier","shift","reverse","startX","endX","indexOf","fillSetter","strokeSetter","tweenTo","extend","a","b","n","doCopy","copy","original","isObject","isClass","isDOMElement","pInt","s","mag","isString","isArray","toString","strict","nodeType","c","constructor","erase","defined","setAttribute","getAttribute","splat","syncTimeout","fn","delay","context","setTimeout","pick","arg","css","el","styles","opacity","attribs","parent","nopad","padding","border","margin","appendChild","extendClass","members","object","pad","number","padder","String","relativeLength","base","func","outerArgs","ctx","getTZOffset","d","hcGetTimezoneOffset","hcTimezoneOffset","dateFormat","capitalize","defaultOptions","lang","invalidDate","D","date","hours","hcGetHours","day","hcGetDay","dayOfMonth","hcGetDate","month","hcGetMonth","fullYear","hcGetFullYear","langWeekdays","weekdays","shortWeekdays","replacements","substr","A","w","shortMonths","B","months","m","y","Y","k","I","l","M","hcGetMinutes","p","P","S","getSeconds","L","round","dateFormats","toUpperCase","formatSingle","decimals","floatRegex","decRegex","numberFormat","decimalPoint","thousandsSep","segment","valueAndFormat","splitter","isInside","getMagnitude","pow","LN10","normalizeTickInterval","interval","multiples","magnitude","allowDecimals","hasTickAmount","normalized","retInterval","grep","correctFloat","stableSort","sortFunction","sortValue","safeI","arrayMin","arrayMax","destroyObjectProperties","except","discardElement","garbageBin","innerHTML","prec","toPrecision","setAnimation","animation","globalAnimation","animObject","timeUnits","millisecond","second","minute","week","year","strinteger","thousands","roundedNumber","origDec","exponent","abs","easeInOutSine","cos","getStyle","toInt","offsetWidth","scrollWidth","offsetHeight","scrollHeight","getComputedStyle","getPropertyValue","inArray","callback","find","docElem","getBoundingClientRect","pageYOffset","scrollTop","clientTop","left","pageXOffset","scrollLeft","clientLeft","each","hasOwnProperty","addEvent","wrappedFn","srcElement","hcEvents","addEventListener","attachEvent","hcEventsIE","hcGetKey","uniqueKey","removeEvent","removeOneEvent","removeEventListener","detachEvent","removeAllEvents","types","nodeName","fireEvent","eventArguments","defaultFunction","createEvent","dispatchEvent","initEvent","defaultPrevented","animate","opt","fx","seriesType","pointProps","getOptions","pointClass","Point","uniqueKeyHash","random","substring","idCounter","jQuery","highcharts","defaultView","alias","zoom","currentStyle","elements","Color","input","init","parsers","regex","parse","result","names","none","white","black","rgba","parser","toLowerCase","stops","charAt","exec","get","brighten","alpha","setOpacity","hasAlpha","SVGElement","SVGRenderer","textProps","animOptions","colorGradient","colorObject","gradName","gradAttr","radAttr","gradients","gradientObject","stopColor","stopOpacity","radialReference","radialGradient","linearGradient","x1","y1","x2","y2","gradientUnits","getRadialAttr","add","defs","stopObject","stop-color","stop-opacity","url","gradient","applyTextOutline","textOutline","tspans","tspan","strokeWidth","firstRealChild","hasContrast","getContrast","fill","fakeTS","getElementsByTagName","ySetter","xSetter","digit","removeChild","firstChild","clone","cloneNode","class","stroke","stroke-width","stroke-linejoin","insertBefore","hash","continueAnimation","hasSetSymbolSize","skipAttr","setter","_defaultGetter","symbolName","symbolAttr","rotation","doTransform","_defaultSetter","shadows","updateShadows","afterSetters","updateTransform","cutHeight","addClass","currentClassName","hasClass","removeClass","wrapper","symbols","x","clip","clipRect","crisp","rect","normalizer","textWidth","hyphenate","oldStyles","newStyles","serializedCss","hasNew","svgPseudoProps","forExport","added","buildText","on","eventType","handler","svgElement","touchEventFired","onclick","setRadialReference","coordinates","existingGradient","translate","translateX","invert","inverted","transform","scaleX","scaleY","toFront","parentNode","alignOptions","alignByTranslate","vAlign","alignTo","alignFactor","vAlignFactor","alignedObjects","placed","getBBox","reload","rot","bBox","rad","fontSize","toggleTextShadowShim","cacheKey","textStr","cache","cacheKeys","textOverflow","namespaceURI","display","querySelectorAll","htmlGetBBox","isSVG","sin","show","inherit","visibility","hide","fadeOut","elemWrapper","inserted","parentGroup","parentInverted","handleZ","zIndex","zIndexSetter","onAdd","safeRemoveChild","grandParent","parentToClean","ownerSVGElement","onmouseout","onmouseover","onmousemove","point","clipPath","removeAttribute","destroyShadows","div","childNodes","shadowOptions","cutOff","shadowWidth","shadowElementOpacity","offsetX","offsetY","isShadow","stroke-opacity","xGetter","dashstyleSetter","alignSetter","convert","center","right","opacitySetter","titleSetter","titleNode","createTextNode","textSetter","visibilitySetter","otherElement","otherZIndex","parentWrapper","yGetter","translateXSetter","translateYSetter","rotationSetter","verticalAlignSetter","scaleXSetter","scaleYSetter","hasStroke","Element","allowHTML","desc","imgCount","setSize","subPixelFix","unSubPixelFix","fontFamily","setStyle","isHidden","rendererDefs","draw","cx","cy","r","getSpanWidth","actualWidth","measureSpanWidth","applyEllipsis","currentIndex","wasTooLong","minIndex","updateTSpan","lines","clsRegex","styleRegex","hrefRegex","textCache","isSubsequentLine","textNode","hasMarkup","parentX","textStyles","textLineHeight","lineHeight","ellipsis","noWrap","whiteSpace","tempParent","getLineHeight","fontSizeStyle","fontMetrics","h","unescapeAngleBrackets","inputStr","line","lineNo","spans","spanNo","spanCls","spanStyle","attributes","cursor","dx","tooLong","words","hasWhiteSpace","rest","dy","pop","button","normalState","hoverState","pressedState","disabledState","shape","curState","normalStyle","hoverStyle","pressedStyle","disabledStyle","fontWeight","crispLine","points","circle","arc","innerR","symbol","rSetter","rx","ry","g","image","src","preserveAspectRatio","setAttributeNS","imageSrc","centerImage","ren","imageRegex","isImage","sym","symbolFn","imgwidth","imgheight","imgSize","trans","isImg","onload","chartIndex","square","triangle","triangle-down","diamond","fullCircle","innerRadius","cosStart","sinStart","cosEnd","sinEnd","longArc","callout","safeDistance","anchorX","anchorY","fakeSVG","parentVal","html","baseline","f","rotCorr","alterY","wrapperX","wrapperY","textAlign","baselineOffset","getCrispAdjust","updateBoxSize","updateTextPadding","boxAttr","paddingLeft","deferredAttr","hasBGImage","needsBox","crispAdjust","textY","textX","widthSetter","heightSetter","paddingSetter","paddingLeftSetter","anchorXSetter","anchorYSetter","baseCss","Renderer","htmlCss","tagName","overflow","offsetLeft","offsetTop","htmlUpdateTransform","alignOnAdd","alignCorrection","marginLeft","marginTop","child","invertChild","currentTextTransform","cTT","setSpanRotation","textContent","innerText","getSpanCorrection","xCorr","yCorr","rotationStyle","cssTransformKey","transformOrigin","addSetters","svgGroupWrapper","htmlGroup","parents","htmlGroupStyle","cls","pointerEvents","classSetter","VMLRenderer","VMLRendererExtension","VMLElement","docMode8","documentMode","markup","isDiv","prepVML","deferUpdateTransform","costheta","sintheta","quad","elemHeight","nonLeft","pathToVML","isArc","clipMembers","cssRet","destroyClip","getCSS","evt","event","cutOffPath","modifiedPath","elemStyle","cssText","setAttr","filled","fill-opacitySetter","stroke-widthSetter","stroked","updateClipping","isIE8","isVML","namespaces","hcv","createStyleSheet","styleSheets","isObj","isShape","bottom","member","fillType","regexRgba","opacity1","opacity2","color1","color2","firstStop","lastStop","fillAttr","addFillNode","atan","sizex","sizey","applyRadialGradient","VMLRadialGradientURL","propNodes","vmlStyle","coordsize","isCircle","parentStyle","imgStyle","flip","measuringSpan","getTimezoneOffsetOption","globalOptions","moment","timezone","tz","utcOffset","getTimezoneOffset","setTimeMethods","GET","SET","timezoneOffset","hcMakeTime","minutes","seconds","UTC","getTime","loading","numericSymbols","resetZoom","resetZoomTitle","borderRadius","defaultSeriesType","ignoreHiddenSeries","spacing","resetZoomButton","theme","plotBorderColor","widthAdjust","subtitle","activeColor","inactiveColor","itemStyle","itemHoverStyle","itemHiddenStyle","itemCheckboxStyle","squareSymbol","symbolPadding","labelStyle","footerFormat","snap","headerFormat","pointFormat","defaultPlotOptions","Tick","axis","noLabel","isNew","isNewLabel","addLabel","dateTimeLabelFormat","tick","categories","labelOptions","tickPositions","isFirst","isLast","tickPositionInfo","info","isDatetimeAxis","higherRanks","unitName","isLog","lin2log","labelGroup","labelLength","getLabelSize","horiz","handleOverflow","xy","leftPos","rightPos","pxPos","leftBound","labelLeft","rightBound","labelRight","factor","labelAlign","labelWidth","slotWidth","getSlotWidth","modifiedSlotWidth","xCorrection","goRight","autoRotation","getPosition","tickmarkOffset","old","cHeight","oldChartHeight","transB","opposite","oldChartWidth","getLabelPosition","transA","reversed","staggerLines","tickRotCorr","yOffset","side","labelOffset","getMarkPath","tickLength","tickWidth","renderGridLine","reverseCrisp","gridLinePath","gridLine","gridPrefix","gridLineWidth","gridLineColor","dashStyle","dashstyle","gridGroup","getPlotLinePath","renderMark","tickPrefix","tickSize","mark","isNewMark","isXAxis","tickColor","axisGroup","renderLabel","showFirstLabel","showLastLabel","isRadial","isActive","Axis","endOnTick","minPadding","maxPadding","minorTickLength","minorTickPosition","startOfWeek","startOnTick","tickmarkPlacement","tickPixelInterval","minorGridLineColor","minorGridLineWidth","minorTickColor","lineColor","defaultYAxisOptions","stackLabels","allowOverlap","formatter","total","defaultLeftAxisOptions","defaultRightAxisOptions","defaultBottomAxisOptions","defaultTopAxisOptions","userOptions","isX","isZAxis","coll","defaultLabelFormatter","minPixelPadding","visible","zoomEnabled","hasNames","plotLinesAndBandsGroups","positiveValuesOnly","allowNegativeLog","isLinked","linkedTo","ticks","labelEdge","minorTicks","plotLinesAndBands","alternateBands","minRange","userMinRange","maxZoom","range","stacks","oldStacks","stacksTouched","crosshair","crosshairs","axes","linearToLogConverter","val2lin","log2lin","lin2val","multi","numSymMagnitude","numericSymbolMagnitude","formatOption","numericSymbolDetector","getSeriesExtremes","hasVisibleSeries","dataMin","dataMax","threshold","softThreshold","buildStacks","xData","seriesDataMin","seriesDataMax","seriesOptions","getExtremes","backwards","cvsCoord","handleLog","pointPlacement","returnValue","linkedParent","sign","cvsOffset","localA","oldTransA","localMin","oldMin","doPostTranslate","isOrdinal","isBroken","sector","toPixels","paneCoordinates","toValue","pixel","force","translatedValue","skip","axisLeft","axisTop","cWidth","between","getLinearTickPositions","lastPos","roundedMin","roundedMax","single","getMinorTickPositions","minorTickInterval","minorTickPositions","pointRangePadding","paddedTicks","getLogTickPositions","getTimeTicks","normalizeTimeTickInterval","trimTicks","adjustForMinRange","zoomOffset","spaceAvailable","closestDataRange","distance","loopLength","minArgs","maxArgs","xIncrement","getClosest","seriesClosest","closestPointRange","noSharedTooltip","nameToX","explicitCategories","nameX","requireSorting","uniqueNames","autoIncrement","updateNames","isDirtyData","processData","generatePoints","setAxisTranslation","saveOld","ordinalCorrection","pointRange","axisPointRange","minPointOffset","hasCategories","seriesPointRange","ordinalSlope","translationSlope","staticScale","minFromRange","setTickInterval","secondPass","linkedParentExtremes","minTickInterval","thresholdMin","thresholdMax","hardMin","hardMax","tickIntervalOption","tickPixelIntervalOption","getTickAmount","userMin","userMax","beforePadding","usePercentage","softMin","softMax","ceiling","tickAmount","oldMax","beforeSetTickPositions","postProcessTickInterval","unsquish","setTickPositions","tickPositionsOption","tickPositioner","units","ordinalPositions","adjustTickAmount","Infinity","alignToOthers","hasOther","others","alignTicks","otherOptions","pane","finalTickAmt","currentTickAmount","setScale","isDirtyAxisLength","oldAxisLength","setAxisSize","isDirty","forceRedraw","oldUserMin","oldUserMax","resetStacks","cleanStacks","setExtremes","newMin","newMax","redraw","serie","kdTree","eventArgs","allowZoomOutside","displayBtn","trigger","offsets","plotWidth","plotHeight","plotTop","plotLeft","getThreshold","realMin","realMax","autoLabelAlign","angle","prefix","labelMetrics","newTickInterval","slotSize","rotationOption","bestScore","MAX_VALUE","getStep","spaceNeeded","autoRotationLimit","score","labelRotation","slotCount","renderUnsquish","innerWidth","textOverflowOption","maxLabelLength","specCss","hasData","addTitle","axisTitleOptions","axisTitle","low","middle","high","generateTick","getOffset","showAxis","titleOffsetOption","labelOffsetPadded","lineHeightCorrection","invertedSide","titleOffset","titleMargin","axisOffset","clipOffset","directionFactor","axisParent","showEmpty","gridZIndex","reserveSpace","1","3","renderLine","axisTitleMargin","axisLine","getLinePath","lineLeft","lineTop","getTitlePosition","axisLength","xOption","yOption","textHeightOvershoot","alongAxis","offAxis","renderMinorTick","slideInTicks","hasRendered","renderTick","stackLabelOptions","alternateGridColor","overlap","polar","PlotLineOrBand","_addedPlotLB","plotLines","plotBands","plotLineOptions","addPlotBandOrLine","forDestruction","destroyInactiveItems","isPlaced","titleXy","renderStackTotals","plotLine","keepProps","keepEvents","plotGroup","stack","stackKey","drawCrosshair","categorized","graphic","cross","plotX","plotY","chartX","chartY","stackY","hideCrosshair","normalizedInterval","minYear","baseOffset","variableDayLength","minDate","makeTime","unitRange","hcSetMilliseconds","getMilliseconds","hcSetSeconds","hcSetMinutes","hcSetHours","hcSetDate","hcSetMonth","hcSetFullYear","minMonth","minDateDate","minHours","time","totalRange","unitsOption","lessThan","minor","positions","_minorAutoInterval","intermediate","j","break2","filteredTickIntervalOption","totalPixelLength","optionsLabel","isBand","isLine","svgElem","groupAttribs","groupName","getPlotBandPath","flat","xs","ys","toPath","plus","outside","addPlotBand","addPlotLine","removePlotBandOrLine","removePlotBand","removePlotLine","Tooltip","shared","cleanSplit","tt","getLabel","clearTimeout","hideTimer","tooltipTimeout","move","skipAnchor","followPointer","hideDelay","getAnchor","mouseEvent","yAxis","tooltipPos","pointer","normalize","plotLow","plotHigh","boxWidth","boxHeight","swapped","first","preferFarSide","ttBelow","negative","firstDimension","dim","outerSize","innerSize","roomLeft","roomRight","alignedLeft","alignedRight","secondDimension","retVal","swap","temp","defaultFormatter","items","tooltipFooterHeaderFormatter","bodyFormatter","refresh","pointOrPoints","anchor","currentSeries","textConfig","pointConfig","tooltipOptions","getLabelConfig","category","renderSplit","spacingBox","colorIndex","updatePosition","boxes","rightAligned","headerHeight","tooltipLabel","isHeader","owner","colorClass","rank","distribute","positioner","getDateFormat","dateStr","blank","strpos","lastN","getXDateFormat","labelConfig","isFooter","footOrHead","isDateTime","formatString","pointFormatter","tooltipFormatter","Pointer","runChartClick","click","pinchDown","lastValidTouch","followTouchMove","setDOMEvents","zoomOption","zoomX","zoomY","pinchType","zoomHor","zoomVert","hasZoom","chartPosition","ePos","touches","changedTouches","pageX","clientX","pageY","getCoordinates","findNearestKDPoint","closest","p1","p2","isCloserX","distX","isCloser","dist","isAbove","compareX","findNearestPointBy","searchPoint","getPointFromEvent","getChartCoordinatesFromPoint","getHoverData","existingHoverPoint","existingHoverSeries","isDirectTouch","hoverPoint","hoverPoints","hoverSeries","useExisting","notSticky","stickyTracking","directTouch","enableMouseTracking","searchSeries","isNull","runPointActions","useSharedTooltip","hoverData","onMouseOver","firePointEvent","unDocMouseMove","ownerDocument","hoverChartIndex","onDocumentMouseMove","reset","allowMove","tooltipPoints","isCartesian","onMouseOut","hoverX","scaleGroups","seriesAttribs","getPlotBox","markerGroup","dataLabelsGroup","clipBox","dragStart","mouseIsDown","cancelClick","mouseDownX","mouseDownY","drag","clickedInside","chartOptions","selectionMarker","panKey","touch","hasDragged","sqrt","isInsidePlot","hasCartesianSeries","selectionMarkerFill","panning","pan","drop","hasPinched","runZoom","selectionData","originalEvent","selectionBox","selectionLeft","selectionTop","selectionWidth","selectionHeight","selectionMin","selectionMax","_cursor","onContainerMouseDown","onDocumentMouseUp","inClass","onContainerMouseLeave","relatedTarget","toElement","onContainerMouseMove","openMenu","elemClassName","onTrackerMouseOut","onContainerClick","ownerDoc","onmousedown","onContainerTouchStart","ontouchmove","onContainerTouchMove","onDocumentTouchEnd","pinchTranslate","pinchTranslateDirection","forcedScale","selectionWH","selectionXY","clipXY","outOfBounds","transformScale","scaleKey","XY","sChartXY","wh","plotLeftTop","scale","bounds","singleTouch","touch0Start","touch0Now","touch1Start","touch1Now","pinch","touchesLength","fireClickEvent","runTrackerClick","initiated","absMin","absMax","res","plotBox","hasMoved","PointerEvent","MSPointerEvent","hasPointerEvent","getWebkitTouches","fake","translateMSPointer","wktype","pointerType","MSPOINTER_TYPE_TOUCH","currentTarget","onContainerPointerDown","pointerId","onContainerPointerMove","onDocumentPointerUp","batchMSEvents","-ms-touch-action","touch-action","itemMarginTop","initialItemY","maxItemWidth","itemHeight","pages","isDirtyLegend","isDirtyBox","colorizeItem","legendGroup","legendItem","legendLine","legendSymbol","hiddenColor","textColor","symbolColor","markerOptions","isMarker","pointAttribs","positionItem","ltr","rtl","legendItemPos","_legendItemPos","itemX","itemY","checkbox","destroyItem","destroyItems","getAllItems","scrollOffset","clipHeight","titleHeight","allItems","checkboxOffset","renderTitle","titleOptions","contentGroup","setText","labelFormat","renderItem","itemWidth","horizontal","itemDistance","widthOption","itemMarginBottom","li","isSeries","drawLegendSymbol","showCheckbox","createCheckboxForItem","itemExtraWidth","itemClassName","scrollGroup","symbolHeight","setItemEvents","legendItemWidth","legendItemHeight","lastLineHeight","lastItemY","showInLegend","legendItems","legendType","adjustMargins","alignment","floating","alignments","legendIndex","isResizing","lastY","optionsY","alignTop","spaceHeight","maxHeight","navOptions","arrowSize","nav","clipToHeight","currentPage","fullHeight","up","scroll","pager","down","scrollBy","pageCount","LegendSymbolMixin","drawRectangle","symbolRadius","drawLineMarker","generalRadius","legendItemGroup","verticalCenter","runPositionItem","getArgs","callbacks","renderTo","userPlotOptions","optionsChart","chartEvents","v","showAxes","pointCount","colorCounter","symbolCounter","firstRender","initSeries","Constr","orderSeries","fromIndex","hasStackedSeries","hasDirtyStacks","redrawLegend","isHiddenChart","afterRedraw","setResponsive","temporaryDisplay","layOutTitles","stacking","updateTotals","getStacks","getMargins","extKey","drawChartBox","itemById","getAxes","optionsArray","xAxisOptions","yAxisOptions","axisOptions","getSelectedPoints","selected","getSelectedSeries","setTitle","subtitleOptions","chartTitleOptions","chartSubtitleOptions","isStock","o","requiresDirtyBox","titleSize","getChartSize","heightOption","containerWidth","containerHeight","revert","tempStyle","node","hcOrigStyle","hcOrigDetached","contains","hcOricDetached","setProperty","setClassName","getContainer","oldChartIndex","Ren","containerStyle","containerId","getElementById","skipClone","-webkit-tap-highlight-color","exporting","skipAxes","resetMargins","extraMargin","extraTopMargin","getAxisMargins","setChartSize","reflow","hasUserSize","isPrinting","reflowTimeout","initReflow","unbind","clipOffsetSide","plotBorderWidth","clipX","clipY","marginRight","plotSizeX","plotSizeY","values","sideName","chartBorderWidth","mgn","bgAttr","chartBackground","plotBackground","plotBorder","plotBGImage","chartBackgroundColor","plotBackgroundColor","plotBackgroundImage","verb","plotShadow","propFromSeries","klass","linkSeries","chartSeries","linkedSeries","renderSeries","renderLabels","tempWidth","tempHeight","redoHorizontal","redoVertical","seriesGroup","addCredits","mapCredits","scroller","isReadyToRender","readyState","serieOptions","colorCount","applyOptions","colorByPoint","pointValKey","optionsToObject","isValid","firstItemType","keys","pointArrayMap","valueCount","dataLabels","_hasPointLabels","_hasPointMarkers","getClassName","zone","getZone","zones","zoneAxis","dataLabel","destroyElements","percentage","stackTotal","seriesTooltipOptions","valueDecimals","valuePrefix","valueSuffix","importEvents","allowPointSelect","select","ctrlKey","metaKey","shiftKey","Series","states","hover","radiusPlus","lineWidthPlus","fillColor","cropThreshold","halo","turboThreshold","sorted","axisTypes","parallelArrays","lastSeries","bindAxes","getColor","getSymbol","setData","_i","insert","collection","indexOption","AXIS","optionalAxis","updateParallelArrays","toYData","pointInterval","pointIntervalUnit","itemOptions","typeOptions","negativeColor","negativeFillColor","getCyclic","defaults","setting","indexName","counterName","seriesMarkerOption","updatePoints","dataLength","pt","oldData","oldDataLength","firstPoint","cropped","hasGroupedData","croppedData","xExtremes","processedXData","processedYData","cropStart","getExtremesFromAll","forceCrop","cropData","cropEnd","cropShoulder","dataOptions","PointClass","processedDataLength","dataGroup","groupMap","yDataLength","validValue","withinRange","activeYData","activeCounter","xMin","xMax","stackedYData","lastPlotX","stackIndicator","hasModifyValue","modifyValue","dynamicallyPlaced","stackThreshold","startFromThreshold","closestPointRangePx","pointStack","stackValues","xValue","yValue","yBottom","negStacks","getStackIndicator","setOffset","pointXOffset","barW","getValidPoints","insideOnly","setClip","seriesClipBox","sharedClipKey","markerClipRect","afterAnimate","finishedAnimating","drawPoints","pointMarkerOptions","hasPointMarker","markerAttribs","seriesMarkerOptions","specialGroup","globallyEnabled","hasImage","seriesStateOptions","pointStateOptions","pointOptions","pointColorOption","pointColor","zoneColor","issue134","animationTimeout","survive","getGraphPath","nullsAsZeroes","connectCliffs","gap","graphPath","xMap","connectNulls","pathToPoint","lastPoint","leftCliff","rightCliff","getPointSpline","drawGraph","gappedPath","graphKey","graph","fillGraph","linecap","applyZones","translatedFrom","translatedTo","clipAttr","extremes","pxRange","pxPosMin","pxPosMax","clips","area","chartSizeMax","ignoreZones","invertGroups","setInvert","remover","animDuration","chartSeriesGroup","drawDataLabels","drawTracker","wasDirty","kdAxisArray","searchKDTree","buildKDTree","_kdtree","depth","dimensions","median","startRecursive","buildingKdTree","kdNow","setDistance","kdX","kdY","_search","search","tree","tdist","sideA","sideB","nPoint1","nPoint2","kdComparer","kdDimensions","StackItem","isNegative","stackOption","xOffset","xWidth","stackItem","yZero","stackBox","getStackBox","crop","neg","axisSeries","reversedStacks","setStackedPoints","setPercentStacks","stackTotalGroup","touched","cum","pointKey","negKey","singleStacks","pointExtremes","totalFactor","addSeries","addAxis","showLoading","loadingDiv","loadingOptions","setLoadingSize","loadingSpan","loadingShown","showDuration","hideLoading","hideDuration","propsRequireDirtyBox","propsRequireUpdateSeries","oneToOne","updateAllAxes","updateAllSeries","newWidth","newHeight","adders","itemsForRemoval","newOptions","remove","setSubtitle","runEvent","fixedBox","removePoint","addPoint","isInTheMiddle","withEvent","oldOptions","oldType","newType","proto","preserve","setCategories","getStackPoints","visibleSeries","pointMap","seriesIndex","yAxisSeries","seriesLength","upOrDown","stackX","idx","stackPoint","stackedValues","direction","nullName","cliffName","cliff","otherStack","topPath","bottomPath","areaPath","bottomPoints","graphPoints","translatedThreshold","addDummyPoints","otherI","nullVal","cliffVal","isCliff","doCurve","rectPlotX","areaKey","fillOpacity","shiftUnit","otherPoint","leftContX","leftContY","rightContX","rightContY","nextPoint","lastX","nextX","nextY","correction","smoothing","areaProto","groupPadding","pointPadding","minPointLength","brightness","trackerGroups","otherSeries","getColumnMetrics","reversedXAxis","stackGroups","columnCount","grouping","columnIndex","otherYAxis","categoryWidth","groupWidth","pointOffsetWidth","pointWidth","maxPointWidth","colIndex","columnMetrics","crispCol","fromTop","xCrisp","yCrisp","dense","metrics","seriesBarW","barX","barY","barH","shapeType","shapeArgs","stateOptions","p2o","pointAttrToOptions","strokeOption","strokeWidthOption","animationLimit","takeOrdinalPosition","CenteredSeriesMixin","getCenter","handleSlicingRoom","slicingRoom","slicedOffset","centerOption","smallestSize","ignoreHiddenPoint","column","startAngleRad","startR","finalConnectorOffset","radiusX","radiusY","cumulative","connectorOffset","startAngle","endAngleRad","endAngle","circ","labelDistance","getX","asin","maxLabelDistance","slicedTranslation","half","labelPos","groupTranslation","pointAttr","shadowGroup","getTranslate","sortByAngle","toggleSlice","setVisible","vis","sliced","haloPath","sortByTarget","overlapping","origBoxes","restBoxes","targets","posInCompositeBox","generalOptions","defer","dlProcessOptions","connector","dlOptions","contrastColor","inside","alignDataLabel","normRotation","negRotation","forceDL","justify","isLabelJustified","justifyDataLabel","off","justified","pie","dataLabelWidth","labelHeight","connectorPadding","connectorWidth","seriesCenter","centerY","halves","shortened","_pos","naturalY","sideOverflow","positionsIndex","positionIndex","_attr","verifyDataLabelOverflow","placeDataLabels","connectorColor","connectorPath","softConnector","moved","minSize","newSize","overshoot","dlBox","below","collectAndHide","collections","dataLabelCollections","labelrank","hideOverlappingLabels","label1","label2","pos1","pos2","parent1","parent2","oldOpacity","newOpacity","w1","h1","w2","h2","isOld","TrackerMixin","drawTrackerPoint","_hasTracking","drawTrackerGraph","trackByArea","trackerPath","trackerPathLength","tracker","TRACKER_FILL","scatter","activeClass","fnLegendItemClick","browserEvent","checked","defaultChecked","showResetZoom","zoomOut","btnOptions","relativeTo","resetSelection","hasZoomed","displayButton","axisData","doRedraw","spill","mousePos","mouseDown","startPos","halfPointRange","panMin","panMax","flipped","paddedMin","paddedMax","accumulate","loopPoint","hasImportedEvents","haloOptions","newSymbol","normalDisabled","markerStateOptions","stateDisabled","stateMarkerGraphic","pointMarker","hasMarkers","currentSymbol","fill-opacity","mouseOver","mouseOut","showOrHide","oldVisibility","currentRuleIds","responsive","ruleIds","currentResponsive","rules","rule","_id","matchResponsiveRule","mergedOptions","ruleId","undoOptions","currentOptions","matches","condition","maxWidth","minWidth","minHeight","getCurrent","curr"],"mappings":"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","file":"0.fd2ed8c78068b7fa72ad.js","sourcesContent":["webpackJsonp([0,1],{\n\n/***/ 402:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _form = __webpack_require__(39);\n\nvar _form2 = _interopRequireDefault(_form);\n\nvar _table = __webpack_require__(33);\n\nvar _table2 = _interopRequireDefault(_table);\n\nvar _dropdown = __webpack_require__(88);\n\nvar _dropdown2 = _interopRequireDefault(_dropdown);\n\nvar _button = __webpack_require__(18);\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _input = __webpack_require__(48);\n\nvar _input2 = _interopRequireDefault(_input);\n\nvar _icon = __webpack_require__(23);\n\nvar _icon2 = _interopRequireDefault(_icon);\n\nvar _select = __webpack_require__(41);\n\nvar _select2 = _interopRequireDefault(_select);\n\nvar _spin = __webpack_require__(77);\n\nvar _spin2 = _interopRequireDefault(_spin);\n\nvar _extends2 = __webpack_require__(6);\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _menu = __webpack_require__(116);\n\nvar _menu2 = _interopRequireDefault(_menu);\n\nvar _modal = __webpack_require__(21);\n\nvar _modal2 = _interopRequireDefault(_modal);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(7);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(5);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(4);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\n__webpack_require__(40);\n\n__webpack_require__(34);\n\n__webpack_require__(115);\n\n__webpack_require__(19);\n\n__webpack_require__(32);\n\n__webpack_require__(89);\n\n__webpack_require__(42);\n\n__webpack_require__(78);\n\n__webpack_require__(174);\n\n__webpack_require__(22);\n\nvar _react = __webpack_require__(0);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactRedux = __webpack_require__(12);\n\nvar _moment = __webpack_require__(3);\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _index = __webpack_require__(946);\n\n__webpack_require__(949);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar FormItem = _form2.default.Item;\nvar Option = _select2.default.Option;\n\nvar SearchData = function (_React$PureComponent) {\n  (0, _inherits3.default)(SearchData, _React$PureComponent);\n\n  function SearchData() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, SearchData);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = SearchData.__proto__ || Object.getPrototypeOf(SearchData)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      endpointInputBorderColor: '#d9d9d9',\n      endpoint: '',\n      tag: '',\n      counter: '',\n      searchEndpointsText: '',\n      searchCountersText: '',\n      selectedEndpointRowKeys: [],\n      selectedCounterRowKeys: [],\n      selectedEndpointRows: [],\n      selectedCounterRows: [],\n      endpointsLimit: '50',\n      countersLimit: '50'\n    }, _this.changeEndpoint = function (e) {\n      var endpointText = e.target.value;\n      _this.setState({ endpoint: endpointText });\n      var str = endpointText.replace(/\\s+/g, '');\n      // 除去所有空格后字符串长度为0，说明没有输入\n      if (str.length === 0) {\n        _this.setState({ endpointInputBorderColor: 'red' });\n      } else {\n        _this.setState({ endpointInputBorderColor: '#d9d9d9' });\n      }\n    }, _this.changeTag = function (e) {\n      _this.setState({ tag: e.target.value });\n    }, _this.changeCounter = function (e) {\n      _this.setState({ counter: e.target.value });\n    }, _this.onInputEndpointChange = function (e) {\n      _this.setState({ searchEndpointsText: e.target.value, selectedEndpointRowKeys: [], selectedEndpointRows: [] });\n    }, _this.onInputCounterChange = function (e) {\n      _this.setState({ searchCountersText: e.target.value, selectedCounterRowKeys: [], selectedCounterRows: [] });\n    }, _this.queryEndpoints = function (e) {\n      var _this$state = _this.state,\n          endpoint = _this$state.endpoint,\n          tag = _this$state.tag;\n\n      if (endpoint.replace(/[\\s]/g, '') === '' && tag.replace(/[\\s]/g, '') === '') {\n        _modal2.default.warning({\n          title: '提示',\n          content: '请填写有效Endpoint或者标签！'\n        });\n        return false;\n      }\n      // 去请求数据之前先把目前选中的endpoints重置\n      _this.setState({ selectedEndpointRowKeys: [], selectedEndpointRows: [] });\n      if (e.type === 'submit') {\n        e.preventDefault();\n        _this.props.getEndpoints('getEndpoints', endpoint, tag, _this.state.endpointsLimit);\n      } else {\n        _this.setState({ endpointsLimit: e });\n        _this.props.getEndpoints('getEndpoints', endpoint, tag, e);\n      }\n    }, _this.queryCounters = function (e) {\n      var selectedRows = _this.state.selectedEndpointRows;\n      if (selectedRows.length === 0) {\n        _modal2.default.warning({\n          title: '提示',\n          content: '请勾选要查看的endpoints'\n        });\n        return false;\n      }\n      // 去请求数据之前先把目前选中的counters重置\n      _this.setState({ selectedCounterRowKeys: [], selectedCounterRows: [] });\n      var endpointIds = selectedRows.map(function (obj) {\n        return obj.id;\n      }).join();\n      var counter = _this.state.counter;\n      // 先判断是全局搜索还是切换limit\n\n      if (e.type === 'submit') {\n        e.preventDefault();\n        _this.props.getCounters(endpointIds, counter, _this.state.countersLimit);\n      } else {\n        _this.setState({ countersLimit: e });\n        _this.props.getCounters(endpointIds, counter, e);\n      }\n    }, _this.showCharts = function (title, singleCounter) {\n      // 获取选中的endpoints name和conuters name,把他们转化成两个数组\n      var selectedEndpointRows = _this.state.selectedEndpointRows;\n      var selectedCounterRows = _this.state.selectedCounterRows;\n      // 如果点击画图按钮，判断是否选择了endpoint和counter\n      if (selectedEndpointRows.length === 0 || singleCounter === undefined && selectedCounterRows.length === 0) {\n        _modal2.default.warning({\n          title: '提示',\n          content: '请勾选要查看的endpoints和counters！'\n        });\n        return false;\n      }\n      var endpoints = selectedEndpointRows.map(function (obj) {\n        return obj.endpoint;\n      });\n      var counters = singleCounter === undefined ? selectedCounterRows.map(function (obj) {\n        return obj.counter;\n      }) : [singleCounter];\n      var endTime = (0, _moment2.default)().unix(); // 单位是秒\n      var startTime = (0, _moment2.default)().subtract(1, 'hour').unix();\n      // 把如下数据存入store中以便在其他地方使用\n      _this.props.saveSearchText({\n        endpoint: _this.state.endpoint,\n        tag: _this.state.tag,\n        counter: _this.state.counter,\n        selectedEndpointRows: _this.state.selectedEndpointRows,\n        selectedCounterRows: _this.state.selectedCounterRows\n      });\n      // singleCounter不为undefined时说明点击的查看大图\n      _this.props.getId(endpoints, counters, title, startTime, endTime, singleCounter);\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(SearchData, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props$dashboard$toJS = this.props.dashboard.toJS(),\n          searchText = _props$dashboard$toJS.searchText;\n\n      var endpoint = searchText.endpoint,\n          tag = searchText.tag,\n          counter = searchText.counter,\n          selectedEndpointRows = searchText.selectedEndpointRows,\n          selectedCounterRows = searchText.selectedCounterRows;\n\n      var selectedEndpointRowKeys = selectedEndpointRows.length === 0 ? [] : selectedEndpointRows.map(function (obj) {\n        return obj.id;\n      });\n      var selectedCounterRowKeys = selectedCounterRows.length === 0 ? [] : selectedCounterRows.map(function (obj) {\n        return obj.key;\n      });\n      this.setState({ endpoint: endpoint, tag: tag, counter: counter, selectedEndpointRows: selectedEndpointRows, selectedCounterRows: selectedCounterRows, selectedEndpointRowKeys: selectedEndpointRowKeys, selectedCounterRowKeys: selectedCounterRowKeys });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props$dashboard$toJS2 = this.props.dashboard.toJS(),\n          endpoints = _props$dashboard$toJS2.endpoints,\n          counters = _props$dashboard$toJS2.counters,\n          isLoading = _props$dashboard$toJS2.isLoading;\n\n      var endpointsColumns = [{\n        title: 'Endpoints',\n        dataIndex: 'endpoint',\n        key: 'id'\n      }];\n      var rowEndpointSelection = {\n        selections: true,\n        selectedRowKeys: this.state.selectedEndpointRowKeys,\n        onChange: function onChange(selectedRowKeys, selectedRows) {\n          _this2.setState({ selectedEndpointRowKeys: selectedRowKeys, selectedEndpointRows: selectedRows });\n        },\n        onSelectInvert: function onSelectInvert(selectedRows) {\n          var selectedEndpointRows = selectedRows;\n          if (selectedRows.length !== 0) {\n            selectedEndpointRows = selectedRows.map(function (item) {\n              return endpoints.filter(function (obj) {\n                return obj.id === item;\n              })[0];\n            });\n          }\n          _this2.setState({ selectedEndpointRows: selectedEndpointRows, selectedEndpointRowKeys: selectedRows });\n        }\n      };\n      var rowCounterSelection = {\n        selections: true,\n        selectedRowKeys: this.state.selectedCounterRowKeys,\n        onChange: function onChange(selectedRowKeys, selectedRows) {\n          _this2.setState({ selectedCounterRowKeys: selectedRowKeys, selectedCounterRows: selectedRows });\n        },\n        onSelectInvert: function onSelectInvert(selectedRows) {\n          var selectedCounterRows = selectedRows;\n          if (selectedRows.length !== 0) {\n            selectedCounterRows = selectedRows.map(function (item) {\n              return counters.filter(function (obj) {\n                return obj.key === item;\n              })[0];\n            });\n          }\n          _this2.setState({ selectedCounterRows: selectedCounterRows, selectedCounterRowKeys: selectedRows });\n        }\n      };\n      var count = 0;\n      var countersKeyData = counters.map(function (obj) {\n        var newObj = obj;\n        count += 1;\n        newObj.key = count;\n        return newObj;\n      });\n      var countersColumns = [{\n        title: 'Counters',\n        dataIndex: 'counter',\n        key: 'key',\n        render: function render(text, record) {\n          return _react2.default.createElement(\n            'a',\n            { onClick: function onClick() {\n                return _this2.showCharts('Endpoint', record.counter);\n              } },\n            text\n          );\n        }\n      }, {\n        title: '类型',\n        dataIndex: 'type',\n        width: 60\n      }, {\n        title: '频率',\n        dataIndex: 'step',\n        width: 50\n      }];\n      var menu = _react2.default.createElement(\n        _menu2.default,\n        null,\n        _react2.default.createElement(\n          _menu2.default.Item,\n          null,\n          _react2.default.createElement(\n            _button2.default,\n            { type: 'dashed', onClick: function onClick() {\n                return _this2.showCharts('Endpoint');\n              } },\n            'Endpoint\\u89C6\\u89D2'\n          )\n        ),\n        _react2.default.createElement(\n          _menu2.default.Item,\n          null,\n          _react2.default.createElement(\n            _button2.default,\n            { type: 'dashed', onClick: function onClick() {\n                return _this2.showCharts('Counter');\n              } },\n            'Counter\\u89C6\\u89D2'\n          )\n        ),\n        _react2.default.createElement(\n          _menu2.default.Item,\n          null,\n          _react2.default.createElement(\n            _button2.default,\n            { type: 'dashed', onClick: function onClick() {\n                return _this2.showCharts('组合');\n              } },\n            '\\u7EC4\\u5408\\u89C6\\u89D2'\n          )\n        )\n      );\n      var formEndpointItemLayout = {\n        labelCol: { span: 4 },\n        wrapperCol: { span: 19 }\n      };\n      var formCounterItemLayout = {\n        labelCol: { span: 2 },\n        wrapperCol: { span: 21 }\n      };\n      var tailEndpointFormItemLayout = {\n        wrapperCol: {\n          sm: {\n            span: 19,\n            offset: 4\n          }\n        }\n      };\n      var tailCounterFormItemLayout = {\n        wrapperCol: {\n          sm: {\n            span: 21,\n            offset: 2\n          }\n        }\n      };\n      return _react2.default.createElement(\n        'div',\n        { id: 'dashboard-container' },\n        _react2.default.createElement(\n          'div',\n          { className: 'endpoints' },\n          _react2.default.createElement(\n            _form2.default,\n            { onSubmit: this.queryEndpoints },\n            _react2.default.createElement(\n              'div',\n              { className: 'content' },\n              _react2.default.createElement(\n                'div',\n                { className: 'header' },\n                _react2.default.createElement(\n                  'span',\n                  { className: 'num' },\n                  '1'\n                ),\n                _react2.default.createElement(\n                  'span',\n                  { className: 'title' },\n                  '\\u641C\\u7D22Endpoints'\n                )\n              ),\n              _react2.default.createElement(\n                'div',\n                { className: 'up' },\n                _react2.default.createElement(\n                  'div',\n                  null,\n                  _react2.default.createElement(\n                    FormItem,\n                    (0, _extends3.default)({}, formEndpointItemLayout, { label: 'Endpoint' }),\n                    _react2.default.createElement(_input2.default, {\n                      id: 'txtDashBoardEndPoint',\n                      placeholder: '\\u53EF\\u4EE5\\u7528\\u7A7A\\u683C\\u5206\\u5272\\u591A\\u4E2A\\u641C\\u7D22\\u5173\\u952E\\u5B57',\n                      onChange: this.changeEndpoint,\n                      value: this.state.endpoint,\n                      style: { borderColor: this.state.endpointInputBorderColor } })\n                  ),\n                  _react2.default.createElement(\n                    FormItem,\n                    (0, _extends3.default)({}, formEndpointItemLayout, { label: '\\u6807\\u7B7E' }),\n                    _react2.default.createElement(_input2.default, {\n                      id: 'txtDashBoardTag',\n                      placeholder: 'eg:job=appstore-web',\n                      value: this.state.tag,\n                      onChange: this.changeTag\n                    })\n                  ),\n                  _react2.default.createElement(\n                    FormItem,\n                    tailEndpointFormItemLayout,\n                    _react2.default.createElement(\n                      _button2.default,\n                      { type: 'primary', htmlType: 'submit' },\n                      '\\u5168\\u5C40\\u641C\\u7D22'\n                    )\n                  )\n                )\n              ),\n              endpoints.length === 0 ? _react2.default.createElement(\n                'div',\n                { className: 'down' },\n                '\\u65E0\\u6570\\u636E'\n              ) : _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(\n                  'div',\n                  { id: 'table-header' },\n                  _react2.default.createElement(\n                    FormItem,\n                    null,\n                    _react2.default.createElement(\n                      _select2.default,\n                      { value: this.state.endpointsLimit, style: { width: 80, position: 'relative', top: -1 }, onChange: this.queryEndpoints },\n                      _react2.default.createElement(\n                        Option,\n                        { value: '50' },\n                        'Limit50'\n                      ),\n                      _react2.default.createElement(\n                        Option,\n                        { value: '100' },\n                        'Limit100'\n                      ),\n                      _react2.default.createElement(\n                        Option,\n                        { value: '500' },\n                        'Limit500'\n                      )\n                    )\n                  ),\n                  _react2.default.createElement(\n                    FormItem,\n                    { className: 'check' },\n                    _react2.default.createElement(_input2.default, {\n                      style: { width: 200 },\n                      placeholder: '\\u8BF7\\u8F93\\u5165\\u8FC7\\u6EE4\\u4FE1\\u606F',\n                      suffix: _react2.default.createElement(_icon2.default, { type: 'filter' }),\n                      value: this.state.searchEndpointsText,\n                      onChange: this.onInputEndpointChange\n                    })\n                  )\n                ),\n                _react2.default.createElement(\n                  'div',\n                  { id: 'endpoints-results' },\n                  _react2.default.createElement(_table2.default, {\n                    className: 'narrow-rows',\n                    rowKey: function rowKey(record) {\n                      return record.id;\n                    },\n                    rowSelection: rowEndpointSelection,\n                    columns: endpointsColumns,\n                    dataSource: endpoints.filter(function (item) {\n                      var str = _this2.state.searchEndpointsText;\n                      try {\n                        var reg = new RegExp(str, 'gi');\n                        return item.endpoint.match(reg);\n                      } catch (e) {\n                        return true;\n                      }\n                    }),\n                    pagination: false\n                  })\n                )\n              )\n            )\n          )\n        ),\n        isLoading === 0 ? _react2.default.createElement(\n          'div',\n          { className: 'dashboard-searchdata-loading' },\n          _react2.default.createElement(_spin2.default, { size: 'large' })\n        ) : '',\n        _react2.default.createElement(\n          'div',\n          { className: 'counters' },\n          _react2.default.createElement(\n            'p',\n            { className: 'header' },\n            _react2.default.createElement(\n              'span',\n              { className: 'num' },\n              '2'\n            ),\n            _react2.default.createElement(\n              'span',\n              { className: 'title' },\n              '\\u641C\\u7D22Counters'\n            )\n          ),\n          _react2.default.createElement(\n            'div',\n            { className: 'up' },\n            _react2.default.createElement(\n              _form2.default,\n              { onSubmit: this.queryCounters },\n              _react2.default.createElement(\n                'div',\n                { className: 'content' },\n                _react2.default.createElement(\n                  'div',\n                  null,\n                  _react2.default.createElement(\n                    FormItem,\n                    (0, _extends3.default)({}, formCounterItemLayout, { label: 'Counter' }),\n                    _react2.default.createElement(_input2.default, {\n                      id: 'txtDashBoardCounter',\n                      placeholder: '\\u53EF\\u4EE5\\u7528\\u7A7A\\u683C\\u5206\\u5272\\u591A\\u4E2A\\u641C\\u7D22\\u5173\\u952E\\u5B57',\n                      value: this.state.counter,\n                      onChange: this.changeCounter\n                    })\n                  ),\n                  _react2.default.createElement(\n                    FormItem,\n                    tailCounterFormItemLayout,\n                    _react2.default.createElement(\n                      _button2.default,\n                      { type: 'primary', htmlType: 'submit' },\n                      '\\u641C\\u7D22'\n                    )\n                  )\n                )\n              )\n            )\n          ),\n          counters.length === 0 ? _react2.default.createElement(\n            'div',\n            { className: 'down' },\n            '\\u65E0\\u6570\\u636E'\n          ) : _react2.default.createElement(\n            'div',\n            { id: 'counters-results' },\n            _react2.default.createElement(\n              _form2.default,\n              null,\n              _react2.default.createElement(\n                'div',\n                { className: 'title' },\n                _react2.default.createElement(\n                  FormItem,\n                  null,\n                  _react2.default.createElement(\n                    _select2.default,\n                    { value: this.state.countersLimit, style: { width: 80 }, onChange: this.queryCounters },\n                    _react2.default.createElement(\n                      Option,\n                      { value: '50' },\n                      'Limit50'\n                    ),\n                    _react2.default.createElement(\n                      Option,\n                      { value: '100' },\n                      'Limit100'\n                    ),\n                    _react2.default.createElement(\n                      Option,\n                      { value: '500' },\n                      'Limit500'\n                    )\n                  )\n                ),\n                _react2.default.createElement(\n                  FormItem,\n                  null,\n                  _react2.default.createElement(_input2.default, {\n                    style: { width: 140 },\n                    placeholder: '\\u8BF7\\u8F93\\u5165\\u8FC7\\u6EE4\\u4FE1\\u606F',\n                    suffix: _react2.default.createElement(_icon2.default, { type: 'filter' }),\n                    value: this.state.searchCountersText,\n                    onChange: this.onInputCounterChange\n                  })\n                ),\n                _react2.default.createElement(\n                  FormItem,\n                  { className: 'check' },\n                  _react2.default.createElement(\n                    _dropdown2.default,\n                    { overlay: menu },\n                    _react2.default.createElement(\n                      _button2.default,\n                      { type: 'default' },\n                      '\\u770B\\u56FE'\n                    )\n                  )\n                )\n              ),\n              _react2.default.createElement(_table2.default, {\n                className: 'narrow-rows',\n                rowSelection: rowCounterSelection,\n                columns: countersColumns,\n                dataSource: countersKeyData.filter(function (item) {\n                  var str = _this2.state.searchCountersText.replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\");\n                  var reg = new RegExp(str, 'gi');\n                  return item.counter.match(reg);\n                }),\n                pagination: false\n              })\n            )\n          )\n        )\n      );\n    }\n  }]);\n  return SearchData;\n}(_react2.default.PureComponent);\n\nvar mapActionCreators = {\n  getEndpoints: _index.getEndpoints,\n  getCounters: _index.getCounters,\n  getCharts: _index.getCharts,\n  saveSearchText: _index.saveSearchText,\n  getId: _index.getId\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    dashboard: state.dashboard\n  };\n};\n\nexports.default = (0, _reactRedux.connect)(mapStateToProps, mapActionCreators)(SearchData);\n\n/***/ }),\n\n/***/ 946:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _modal = __webpack_require__(21);\n\nvar _modal2 = _interopRequireDefault(_modal);\n\nexports.resetDashboardState = resetDashboardState;\nexports.saveSearchData = saveSearchData;\nexports.saveSearchText = saveSearchText;\nexports.getEndpoints = getEndpoints;\nexports.getCounters = getCounters;\nexports.getCharts = getCharts;\nexports.getId = getId;\nexports.getChartParams = getChartParams;\nexports.default = dashboard;\n\n__webpack_require__(22);\n\nvar _immutable = __webpack_require__(173);\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _utils = __webpack_require__(16);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint no-await-in-loop: 0 */\nvar RECEIVE_SUCCESS_ENDPOINTS = 'RECEIVE_SUCCESS_ENDPOINTS';\nvar RECEIVE_SUCCESS_COUNTERS = 'RECEIVE_SUCCESS_COUNTERS';\nvar RECEIVE_SUCCESS_CHARTSDATA = 'RECEIVE_SUCCESS_CHARTSDATA';\n\nvar totalResCount = 0;\nvar responseCount = 0;\n\n/*\n  isLoading分几个状态，分别对应不同的值：\n  1.请求未开始：-1\n  2.请求开始：0\n  3.响应结束：1\n*/\nvar initialState = _immutable2.default.fromJS({\n  endpoints: [],\n  counters: [],\n  searchText: { endpoint: '', tag: '', counter: '', selectedEndpointRows: [], selectedCounterRows: [] },\n  selectedEndpoints: [],\n  selectedCounters: [],\n  title: '',\n  start: '',\n  end: '',\n  cf: 'AVERAGE',\n  method: 'nosum',\n  chartsData: [],\n  isLoading: -1\n});\n\nfunction resetDashboardState() {\n  return { type: 'RESET_DASHBOARD_STATE' };\n}\n\nfunction saveSearchData(data) {\n  return {\n    type: 'SAVE_SEARCH_DATA',\n    payload: data\n  };\n}\n\nfunction saveSearchText(data) {\n  return {\n    type: 'SAVE_SEARCH_TEXT',\n    searchText: data\n  };\n}\n\nfunction receiveSuccessEndpoints(data) {\n  return {\n    type: RECEIVE_SUCCESS_ENDPOINTS,\n    payload: {\n      endpoints: data\n    }\n  };\n}\n\nfunction receiveSuccessCounters(data) {\n  return {\n    type: RECEIVE_SUCCESS_COUNTERS,\n    counters: data\n  };\n}\n\nfunction receiveSuccessChartsData(data) {\n  return {\n    type: RECEIVE_SUCCESS_CHARTSDATA,\n    chartsData: data\n  };\n}\n\nfunction getEndpoints(type, endpoint, tag, limit) {\n  // 如果没有输入有效数值，就不传这个值了，比如endpoint输入无效值，就不给endpoint传参数了\n  return function (dispatch) {\n    return (0, _utils.fetch)(type, { params: { tag: tag, query: endpoint, limit: limit } }).then(function (rsp) {\n      dispatch(receiveSuccessEndpoints(rsp));\n      if (rsp.length === 0) {\n        _modal2.default.warning({\n          title: '提示',\n          content: '响应数据是空！'\n        });\n        return false;\n      }\n    }).catch(function () {\n      _modal2.default.warning({\n        title: '提示',\n        content: 'endpoints获取失败！'\n      });\n    });\n  };\n}\n\nfunction getCounters(ids, query, limit) {\n  return function (dispatch) {\n    // 请求开始时，重置isLoading的值\n    dispatch({ type: 'START_REQUEST_COUNTERS' });\n    return (0, _utils.fetch)('getCounters', { params: { query: query, limit: limit, ids: ids } }).then(function (rsp) {\n      dispatch(receiveSuccessCounters(rsp));\n      if (rsp.length === 0) {\n        _modal2.default.warning({\n          title: '提示',\n          content: '响应数据是空！'\n        });\n        return false;\n      }\n    }).catch(function () {\n      dispatch({ type: 'RECEIVE_FAIL_COUNTERS' });\n      _modal2.default.warning({\n        title: '提示',\n        content: 'counters获取失败！'\n      });\n    });\n  };\n}\n\nfunction getCharts(consol_fun, endpoints, counters, title, startTime, endTime) {\n  totalResCount = 0;\n  responseCount = 0;\n  return function (dispatch) {\n    // 首次并发,清空接收画图数据的数组\n    dispatch({ type: 'CLEAR_DASHBOARD_VIEWS' });\n    // 请求开始时把isLoading置为0\n    dispatch({ type: 'START_REQUEST_CHARTSDATA' });\n    var results = []; // 用于存放所有响应\n    // 判断是哪个视角，计算请求总数，开始并发请求\n    if (title === 'Endpoint') {\n      totalResCount = counters.length;\n      var length = totalResCount;\n      while (length) {\n        results.push({ rsp: [] });\n        length -= 1;\n      }\n      var sortCounters = counters.sort();\n      sortCounters.forEach(function (eachCounter, index) {\n        var params = {\n          consol_fun: consol_fun,\n          counters: [eachCounter],\n          end_time: endTime,\n          hostnames: endpoints,\n          start_time: startTime\n        };\n        results[index].params = params;\n        (0, _utils.fetch)('getCharts', { body: params }).then(function (rsp) {\n          results[index].rsp = rsp;\n          dispatch(receiveSuccessChartsData(results));\n          responseCount += 1;\n          if (totalResCount === responseCount) {\n            dispatch({ type: 'FINISHED_RESPONSE' });\n          }\n        }).catch(function () {\n          // 响应失败的情况\n          responseCount += 1;\n          if (totalResCount === responseCount) {\n            dispatch({ type: 'FINISHED_RESPONSE' });\n          }\n        });\n      });\n    } else if (title === 'Counter') {\n      totalResCount = endpoints.length;\n      var _length = totalResCount;\n      while (_length) {\n        results.push({ rsp: [] });\n        _length -= 1;\n      }\n      var sortEndpoints = endpoints.sort();\n      sortEndpoints.forEach(function (eachEndpoint, index) {\n        var params = {\n          consol_fun: consol_fun,\n          counters: counters,\n          end_time: endTime,\n          hostnames: [eachEndpoint],\n          start_time: startTime\n        };\n        results[index].params = params;\n        (0, _utils.fetch)('getCharts', { body: params }).then(function (rsp) {\n          results[index].rsp = rsp;\n          dispatch(receiveSuccessChartsData(results));\n          responseCount += 1;\n          if (totalResCount === responseCount) {\n            dispatch({ type: 'FINISHED_RESPONSE' });\n          }\n        }).catch(function () {\n          // 响应失败的情况\n          responseCount += 1;\n          if (totalResCount === responseCount) {\n            dispatch({ type: 'FINISHED_RESPONSE' });\n          }\n        });\n      });\n    } else {\n      // 组合视角\n      totalResCount = 1;\n      var params = {\n        consol_fun: consol_fun,\n        counters: counters,\n        end_time: endTime,\n        hostnames: endpoints,\n        start_time: startTime\n      };\n      var postParams = JSON.stringify(params);\n      results.push({ rsp: [], params: params });\n      (0, _utils.fetch)('getCharts', postParams).then(function (rsp) {\n        results[0].rsp = rsp;\n        dispatch(receiveSuccessChartsData(results));\n        responseCount += 1;\n        if (totalResCount === responseCount) {\n          dispatch({ type: 'FINISHED_RESPONSE' });\n        }\n      }).catch(function () {\n        // 响应失败的情况\n        responseCount += 1;\n        if (totalResCount === responseCount) {\n          dispatch({ type: 'FINISHED_RESPONSE' });\n        }\n      });\n    }\n  };\n}\n// 获得id是用于在URL上设置的\nfunction getId(endpoints, counters, title, startTime, endTime, singleCounter) {\n  return function (dispatch) {\n    var params = JSON.stringify({ endpoints: endpoints, counters: counters });\n    var win = window.open('about:blank', '_blank');\n    (0, _utils.fetch)('tmpGraphAdd', { body: { endpoints: endpoints, counters: counters } }).then(function (rsp) {\n      var data = {\n        id: rsp.id,\n        endpoints: endpoints,\n        counters: counters,\n        title: title,\n        startTime: startTime,\n        endTime: endTime,\n        cf: 'AVERAGE',\n        method: 'nosum'\n      };\n      dispatch(saveSearchData(data));\n      var graph_type = 'h';\n      if (title === 'Counter') {\n        graph_type = 'k';\n      }\n      if (title === '组合') {\n        graph_type = 'a';\n      }\n      // 得到id后打开新页面\n      // const protocol = window.location.protocol\n      // const host = window.location.host\n      if (singleCounter === undefined) {\n        var _query = 'id=' + rsp.id + '&graph_type=' + graph_type + '&cf=AVERAGE&start=' + startTime + '&end=' + endTime;\n        win.location.href = '/dashboard/charts?' + _query;\n        // window.open(`${protocol}//${host}/#/dashboard/charts?${query}`, '_blank')\n        return false;\n      }\n      var query = 'id=' + rsp.id + '&graph_type=h&cf=AVERAGE&start=-3600';\n      win.location.href = '/chart?' + query;\n      // window.open(`${protocol}//${host}/#/chart?${query}`, '_blank')\n    }).catch(function () {\n      _modal2.default.warning({\n        title: '提示',\n        content: '响应失败！'\n      });\n    });\n  };\n}\n// 获得endpoints和counters去请求画图参数\nfunction getChartParams(id, graph_type, startTime, endTime, consol_fun, method) {\n  return function (dispatch) {\n    (0, _utils.fetch)('tmpGraphGet', { path: '/' + id }).then(function (rsp) {\n      // 修改method, id, searchData的值\n      var endpoints = rsp.endpoints,\n          counters = rsp.counters;\n\n      var title = 'Endpoint';\n      if (graph_type === 'k') {\n        title = 'Counter';\n      }\n      if (graph_type === 'a') {\n        title = '组合';\n      }\n      var data = {\n        id: id,\n        endpoints: endpoints,\n        counters: counters,\n        title: title,\n        startTime: startTime,\n        endTime: endTime,\n        cf: consol_fun,\n        method: method\n      };\n      dispatch(saveSearchData(data));\n      // 接下来用这个参数去请求画图数据\n      dispatch(getCharts(consol_fun, endpoints, counters, title, startTime, endTime));\n    }).catch(function () {\n      _modal2.default.warning({\n        title: '提示',\n        content: '响应失败！'\n      });\n    });\n  };\n}\nvar midReducer = function midReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments[1];\n\n  switch (action.type) {\n    case 'RECEIVE_SUCCESS_ENDPOINTS':\n      return state.set('endpoints', action.payload.endpoints);\n    case 'START_REQUEST_COUNTERS':\n      return state.set('isLoading', 0);\n    case 'START_REQUEST_CHARTSDATA':\n      return state.set('isLoading', 0);\n    case 'RECEIVE_SUCCESS_COUNTERS':\n      return state.merge({\n        isLoading: 1,\n        counters: action.counters\n      });\n    case 'RECEIVE_FAIL_COUNTERS':\n      return state.set('isLoading', 1);\n    case 'SAVE_SEARCH_TEXT':\n      return state.set('searchText', action.searchText);\n    case 'SAVE_SEARCH_DATA':\n      return state.merge({\n        id: action.payload.id,\n        selectedEndpoints: action.payload.endpoints,\n        selectedCounters: action.payload.counters,\n        title: action.payload.title,\n        start: action.payload.startTime,\n        end: action.payload.endTime,\n        cf: action.payload.cf,\n        method: action.payload.method\n      });\n    case 'RECEIVE_SUCCESS_CHART_PARAMS':\n      return state.set('searchData', action.payload);\n    case 'CLEAR_DASHBOARD_VIEWS':\n      return state.set('chartsData', []);\n    case 'RECEIVE_SUCCESS_CHARTSDATA':\n      return state.set('chartsData', action.chartsData);\n    case 'FINISHED_RESPONSE':\n      return state.set('isLoading', 1);\n    default:\n      return state;\n  }\n};\n\nfunction dashboard(state, action) {\n  if (action.type === 'RESET_DASHBOARD_STATE') {\n    state = undefined;\n  }\n  return midReducer(state, action);\n}\n\n/***/ }),\n\n/***/ 947:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _form = __webpack_require__(39);\n\nvar _form2 = _interopRequireDefault(_form);\n\nvar _button = __webpack_require__(18);\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _select = __webpack_require__(41);\n\nvar _select2 = _interopRequireDefault(_select);\n\nvar _datePicker = __webpack_require__(403);\n\nvar _datePicker2 = _interopRequireDefault(_datePicker);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(7);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(5);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(4);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\n__webpack_require__(40);\n\n__webpack_require__(19);\n\n__webpack_require__(42);\n\n__webpack_require__(404);\n\nvar _react = __webpack_require__(0);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactRouter = __webpack_require__(86);\n\nvar _reactRedux = __webpack_require__(12);\n\nvar _moment = __webpack_require__(3);\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _ShowCharts = __webpack_require__(951);\n\nvar _ShowCharts2 = _interopRequireDefault(_ShowCharts);\n\nvar _index = __webpack_require__(946);\n\n__webpack_require__(950);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Option = _select2.default.Option;\nvar FormItem = _form2.default.Item;\n\nvar Charts = function (_PureComponent) {\n  (0, _inherits3.default)(Charts, _PureComponent);\n\n  function Charts() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, Charts);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Charts.__proto__ || Object.getPrototypeOf(Charts)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      title: '',\n      cf: 'AVERAGE',\n      start: '',\n      end: '',\n      method: 'nosum'\n    }, _this.handleSum = function (value) {\n      _this.setState({ method: value });\n    }, _this.onStartChange = function (value) {\n      _this.setState({ start: value });\n    }, _this.onStartOk = function (value) {\n      _this.setState({ start: value });\n    }, _this.onEndChange = function (value) {\n      _this.setState({ end: value });\n    }, _this.onEndOk = function (value) {\n      _this.setState({ end: value });\n    }, _this.handlecfChange = function (value) {\n      _this.setState({ cf: value });\n    }, _this.handleViewChange = function (value) {\n      _this.setState({ title: value });\n    }, _this.handleReset = function () {\n      _this.setState({\n        title: 'Endpoint',\n        cf: 'AVERAGE',\n        start: (0, _moment2.default)().subtract(1, 'hour'),\n        end: (0, _moment2.default)(),\n        method: 'nosum'\n      });\n    }, _this.showCharts = function () {\n      var _this$props$dashboard = _this.props.dashboard.toJS(),\n          id = _this$props$dashboard.id,\n          selectedEndpoints = _this$props$dashboard.selectedEndpoints,\n          selectedCounters = _this$props$dashboard.selectedCounters,\n          start = _this$props$dashboard.start,\n          end = _this$props$dashboard.end;\n\n      var cf = _this.state.cf;\n      var title = _this.state.title;\n      var method = _this.state.method;\n\n      var startUnix = _this.state.start.unix();\n      var endUnix = _this.state.end.unix();\n      // 判断如果用户未改过开始时间以及截至时间，点击刷新按钮，就按当前时间计算\n      if (start === startUnix && end === endUnix) {\n        startUnix = (0, _moment2.default)().subtract(1, 'hour').unix();\n        endUnix = (0, _moment2.default)().unix();\n        _this.setState({\n          start: (0, _moment2.default)().subtract(1, 'hour'),\n          end: (0, _moment2.default)()\n        });\n      }\n      // 参数都有了，直接去画图，同时更新store中的数据，而且要改变URL\n      var searchData = {\n        id: id,\n        endpoints: selectedEndpoints,\n        counters: selectedCounters,\n        title: title,\n        startTime: startUnix,\n        endTime: endUnix,\n        cf: cf,\n        method: method\n      };\n      _this.props.saveSearchData(searchData);\n      _this.props.getCharts(cf, selectedEndpoints, selectedCounters, title, startUnix, endUnix);\n      var graph_type = 'h';\n      if (title === 'Counter') {\n        graph_type = 'k';\n      }\n      if (title === '组合') {\n        graph_type = 'a';\n      }\n      var data = { id: id, graph_type: graph_type, cf: cf, start: startUnix, end: endUnix, method: method === 'nosum' ? undefined : method };\n      var path = {\n        pathname: '/dashboard/charts',\n        query: data\n      };\n      _this.props.router.push(path);\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(Charts, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props$location$query = this.props.location.query,\n          id = _props$location$query.id,\n          graph_type = _props$location$query.graph_type,\n          start = _props$location$query.start,\n          end = _props$location$query.end,\n          cf = _props$location$query.cf,\n          method = _props$location$query.method;\n      // 用id请求接口获取endpoints和counters进而画图\n\n      this.props.getChartParams(id, graph_type, Number(start), Number(end), cf, method);\n      // 根据URL的参数设置条件值\n      var title = 'Endpoint';\n      if (graph_type === 'k') {\n        title = 'Counter';\n      }\n      if (graph_type === 'a') {\n        title = '组合';\n      }\n      this.setState({\n        title: title,\n        cf: cf,\n        start: _moment2.default.unix(start),\n        end: _moment2.default.unix(end),\n        method: method === undefined ? 'nosum' : method\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props$dashboard$toJS = this.props.dashboard.toJS(),\n          title = _props$dashboard$toJS.title,\n          start = _props$dashboard$toJS.start,\n          end = _props$dashboard$toJS.end,\n          cf = _props$dashboard$toJS.cf,\n          method = _props$dashboard$toJS.method;\n\n      var dateFormat = 'YYYY-MM-DD HH:mm:ss';\n      return _react2.default.createElement(\n        'div',\n        { className: 'canvas' },\n        _react2.default.createElement(\n          'p',\n          { className: 'header' },\n          title,\n          ' \\u89C6\\u89D2'\n        ),\n        _react2.default.createElement(\n          _form2.default,\n          { layout: 'inline', id: 'charts-form' },\n          _react2.default.createElement(\n            FormItem,\n            { label: '\\u5F00\\u59CB' },\n            _react2.default.createElement(_datePicker2.default, {\n              showTime: true,\n              format: dateFormat,\n              onChange: this.onStartChange,\n              onOk: this.onStartOk,\n              value: this.state.start\n            })\n          ),\n          _react2.default.createElement(\n            FormItem,\n            { label: '\\u7ED3\\u675F' },\n            _react2.default.createElement(_datePicker2.default, {\n              showTime: true,\n              format: 'YYYY-MM-DD HH:mm:ss',\n              onChange: this.onEndChange,\n              onOk: this.onEndOk,\n              value: this.state.end\n            })\n          ),\n          _react2.default.createElement(\n            FormItem,\n            { label: '\\u91C7\\u6837\\u65B9\\u5F0F' },\n            _react2.default.createElement(\n              _select2.default,\n              { style: { width: 100 }, onChange: this.handlecfChange, value: this.state.cf },\n              _react2.default.createElement(\n                Option,\n                { value: 'AVERAGE' },\n                'AVERAGE'\n              ),\n              _react2.default.createElement(\n                Option,\n                { value: 'MAX' },\n                'MAX'\n              ),\n              _react2.default.createElement(\n                Option,\n                { value: 'MIN' },\n                'MIN'\n              )\n            )\n          ),\n          _react2.default.createElement(\n            FormItem,\n            { label: '\\u89C6\\u89D2' },\n            _react2.default.createElement(\n              _select2.default,\n              { style: { width: 100 }, onChange: this.handleViewChange, value: this.state.title },\n              _react2.default.createElement(\n                Option,\n                { value: 'Endpoint' },\n                'Endpoint'\n              ),\n              _react2.default.createElement(\n                Option,\n                { value: 'Counter' },\n                'Counter'\n              ),\n              _react2.default.createElement(\n                Option,\n                { value: '\\u7EC4\\u5408' },\n                '\\u7EC4\\u5408'\n              )\n            )\n          ),\n          _react2.default.createElement(\n            FormItem,\n            { label: '\\u6C42\\u548C' },\n            _react2.default.createElement(\n              _select2.default,\n              { style: { width: 100 }, onChange: this.handleSum, value: this.state.method },\n              _react2.default.createElement(\n                Option,\n                { value: 'sum' },\n                '\\u6C42\\u548C'\n              ),\n              _react2.default.createElement(\n                Option,\n                { value: 'onlysum' },\n                '\\u4EC5\\u663E\\u793A\\u6C42\\u548C'\n              ),\n              _react2.default.createElement(\n                Option,\n                { value: 'nosum' },\n                '\\u539F\\u56FE'\n              )\n            )\n          ),\n          _react2.default.createElement(\n            FormItem,\n            null,\n            _react2.default.createElement(\n              _button2.default,\n              { type: 'primary', onClick: this.showCharts },\n              '\\u5237\\u65B0'\n            )\n          ),\n          _react2.default.createElement(\n            FormItem,\n            null,\n            _react2.default.createElement(\n              _button2.default,\n              { type: 'primary', onClick: this.handleReset },\n              '\\u6062\\u590D\\u9ED8\\u8BA4'\n            )\n          )\n        ),\n        _react2.default.createElement(_ShowCharts2.default, null)\n      );\n    }\n  }]);\n  return Charts;\n}(_react.PureComponent);\n\nvar mapActionCreators = {\n  getCharts: _index.getCharts,\n  saveSearchData: _index.saveSearchData,\n  getChartParams: _index.getChartParams\n};\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    dashboard: state.dashboard\n  };\n};\nexports.default = (0, _reactRouter.withRouter)((0, _reactRedux.connect)(mapStateToProps, mapActionCreators)(Charts));\n\n/***/ }),\n\n/***/ 949:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 950:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 951:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _spin = __webpack_require__(77);\n\nvar _spin2 = _interopRequireDefault(_spin);\n\nvar _toConsumableArray2 = __webpack_require__(90);\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _classCallCheck2 = __webpack_require__(2);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(7);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(5);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(4);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\n__webpack_require__(78);\n\nvar _react = __webpack_require__(0);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactRedux = __webpack_require__(12);\n\n__webpack_require__(950);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Highcharts = __webpack_require__(953);\n__webpack_require__(952)(Highcharts);\n\nvar Chart = function (_React$Component) {\n  (0, _inherits3.default)(Chart, _React$Component);\n\n  function Chart() {\n    (0, _classCallCheck3.default)(this, Chart);\n    return (0, _possibleConstructorReturn3.default)(this, (Chart.__proto__ || Object.getPrototypeOf(Chart)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(Chart, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.chart = new Highcharts[\"Chart\"](this.refs.chart, this.props.options);\n    }\n    // 最开始rsp为空数组的时候，图也会渲染，后面rsp有值了，就需要更新这个图，所以更新flag设为rsp的长度\n\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      if (nextProps.len !== this.props.len) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.chart = new Highcharts[\"Chart\"](this.refs.chart, this.props.options);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.chart.destroy();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement('div', { ref: 'chart' });\n    }\n  }]);\n  return Chart;\n}(_react2.default.Component);\n\nvar ShowCharts = function (_React$PureComponent) {\n  (0, _inherits3.default)(ShowCharts, _React$PureComponent);\n\n  function ShowCharts() {\n    (0, _classCallCheck3.default)(this, ShowCharts);\n    return (0, _possibleConstructorReturn3.default)(this, (ShowCharts.__proto__ || Object.getPrototypeOf(ShowCharts)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(ShowCharts, [{\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props$dashboard$toJS = this.props.dashboard.toJS(),\n          chartsData = _props$dashboard$toJS.chartsData,\n          isLoading = _props$dashboard$toJS.isLoading,\n          title = _props$dashboard$toJS.title,\n          start = _props$dashboard$toJS.start,\n          end = _props$dashboard$toJS.end;\n      /*\n        1.highcharts的一些通用配置条件写在判断条件的外面\n        2.chart、legend、tooltip这几个配置项要写在判断条件里面，根据有没有data区分配置\n      */\n\n\n      Highcharts.setOptions({\n        chart: {\n          zoomType: 'x'\n        },\n        colors: ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1', '#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce', '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a', '#4572A7', '#AA4643', '#89A54E', '#80699B', '#3D96AE', '#DB843D', '#92A8CD', '#A47D7C', '#B5CA92'],\n        global: {\n          useUTC: false\n        },\n        credits: {\n          enabled: false\n        },\n        xAxis: [{\n          type: 'datetime',\n          dateTimeLabelFormats: {\n            hour: '%H:%M'\n          },\n          max: end * 1000,\n          tickInterval: (end - start) / 12 * 1000,\n          labels: {\n            step: 1\n          },\n          tickPosition: 'inside'\n        }],\n        plotOptions: {\n          series: {\n            marker: {\n              radius: 1\n            },\n            pointStart: start * 1000,\n            lineWidth: 1\n          }\n        }\n      });\n\n      /*\n        1.chartsData如果为空，views的值就不会被改变\n        2.chartsData如果不为空，要分三种情况：\n        2.1响应是空数组，就画个空框\n        2.2响应有endpoint和counter，但是Values是null或者[]，给chart的series中只配置{name}\n        2.3响应中的Values不全是null，给charts的series中配置{name,data}\n      */\n      var views = '';\n      if (chartsData.length !== 0) {\n        views = chartsData.map(function (eachRspObj, index) {\n          var eachRsp = eachRspObj.rsp;\n          // 如果响应是[]，就画一个带legend的空图\n          if (eachRsp.length === 0) {\n            var _eachRspObj$params = eachRspObj.params,\n                counters = _eachRspObj$params.counters,\n                hostnames = _eachRspObj$params.hostnames;\n\n            var chartTitle = void 0;\n            var name = [{ name: '  ' }];\n            var isLegend = true;\n            if (title === 'Endpoint') {\n              chartTitle = hostnames[0];\n              name = counters.map(function (counter) {\n                return { name: counter };\n              });\n            } else if (title === 'Counter') {\n              chartTitle = counters[0];\n              name = hostnames.map(function (hostname) {\n                return { name: hostname };\n              });\n            } else {\n              chartTitle = '组合视角';\n              isLegend = false;\n            }\n            var options = {\n              title: {\n                useHTML: true,\n                text: '<p class=\"dashboard-chart-title\">' + chartTitle + '</p>'\n              },\n              series: name,\n              chart: {\n                height: 230\n              },\n              legend: {\n                enabled: isLegend,\n                verticalAlign: 'bottom',\n                adjustChartSize: true,\n                navigation: {\n                  enabled: false\n                },\n                borderWidth: 0,\n                symbolWidth: 10,\n                useHTML: true,\n                labelFormatter: function labelFormatter() {\n                  var chartWidth = this.chart.chartWidth;\n                  var legendWidth = Math.ceil(chartWidth * 0.8);\n                  return '<div class=\"dashboard-legend-name\" style=\"width:' + legendWidth + 'px\">' + this.name + '</div>';\n                }\n              }\n            };\n            return _react2.default.createElement(\n              'div',\n              { key: index, className: 'charts' },\n              _react2.default.createElement(Chart, { container: 'chart', options: options, len: eachRsp.length })\n            );\n          } else {\n            // 如果响应中的所有对象的Values都是null或者[]，那series中只传入name，不传data即可。\n            var results = eachRsp.filter(function (obj) {\n              return obj.Values !== null && obj.Values.length !== 0;\n            });\n            if (results.length === 0) {\n              var _chartTitle = void 0,\n                  _name = void 0;\n              if (title === 'Endpoint') {\n                _chartTitle = eachRsp[0].counter;\n                _name = eachRsp.map(function (eachObj) {\n                  var newObj = {};\n                  newObj.name = eachObj.endpoint;\n                  return newObj;\n                });\n              } else if (title === 'Counter') {\n                _chartTitle = eachRsp[0].endpoint;\n                _name = eachRsp.map(function (eachObj) {\n                  var newObj = {};\n                  newObj.name = eachObj.counter;\n                  return newObj;\n                });\n              } else {\n                _chartTitle = '组合视角';\n                _name = eachRsp.map(function (eachObj) {\n                  var newObj = {};\n                  newObj.name = eachObj.endpoint + ' | ' + eachObj.counter;\n                  return newObj;\n                });\n              }\n              // 根据name和chartTitle给chart加上对应的options\n              var _options = {\n                title: {\n                  useHTML: true,\n                  text: '<p class=\"dashboard-chart-title\">' + _chartTitle + '</p>'\n                },\n                series: _name,\n                chart: {\n                  height: 230\n                },\n                legend: {\n                  enabled: true,\n                  verticalAlign: 'bottom',\n                  adjustChartSize: true,\n                  navigation: {\n                    enabled: false\n                  },\n                  borderWidth: 0,\n                  symbolWidth: 10,\n                  useHTML: true,\n                  labelFormatter: function labelFormatter() {\n                    var chartWidth = this.chart.chartWidth;\n                    var legendWidth = Math.ceil(chartWidth * 0.8);\n                    return '<div class=\"dashboard-legend-name\" style=\"width:' + legendWidth + 'px\">' + this.name + '</div>';\n                  }\n                }\n              };\n              return _react2.default.createElement(\n                'div',\n                { key: index, className: 'charts' },\n                _react2.default.createElement(Chart, { container: 'chart', options: _options, len: eachRsp.length })\n              );\n            } else {\n              // 排除一些边界条件，开始画图，这里要先区分三个视角，再在视角中区分是否画图\n              var _props$dashboard$toJS2 = _this3.props.dashboard.toJS(),\n                  method = _props$dashboard$toJS2.method;\n\n              var _chartTitle2 = void 0,\n                  data = void 0;\n              if (title === 'Endpoint') {\n                _chartTitle2 = eachRsp[0].counter;\n                data = eachRsp.map(function (eachObj) {\n                  var newObj = {};\n                  newObj.name = eachObj.endpoint;\n                  if (eachObj.Values !== null && eachObj.Values.length !== 0) {\n                    newObj.data = eachObj.Values.map(function (eachValue) {\n                      eachValue.timestamp = eachValue[0];\n                      eachValue.value = eachValue[1];\n                      return [eachValue.timestamp * 1000, eachValue.value];\n                    });\n                  }\n                  return newObj;\n                });\n              } else if (title === 'Counter') {\n                _chartTitle2 = eachRsp[0].endpoint;\n                data = eachRsp.map(function (eachObj) {\n                  var newObj = {};\n                  newObj.name = eachObj.counter;\n                  if (eachObj.Values !== null && eachObj.Values.length !== 0) {\n                    newObj.data = eachObj.Values.map(function (eachValue) {\n                      eachValue.timestamp = eachValue[0];\n                      eachValue.value = eachValue[1];\n                      return [eachValue.timestamp * 1000, eachValue.value];\n                    });\n                  }\n                  return newObj;\n                });\n              } else {\n                _chartTitle2 = '组合视角';\n                data = eachRsp.map(function (eachObj) {\n                  var newObj = {};\n                  newObj.name = eachObj.endpoint + ' | ' + eachObj.counter;\n                  if (eachObj.Values !== null && eachObj.Values.length !== 0) {\n                    newObj.data = eachObj.Values.map(function (eachValue) {\n                      eachValue.timestamp = eachValue[0];\n                      eachValue.value = eachValue[1];\n                      return [eachValue.timestamp * 1000, eachValue.value];\n                    });\n                  }\n                  return newObj;\n                });\n              }\n              // 这里要区分是sum还是onlysum，如果是onlysum，那data中就只有计算好的sum这一项\n              if (method === 'sum' || method === 'onlysum') {\n                /*\n                  1.sumResults = [[v, v, ...], [v, v, ...]...]\n                  2.过滤掉响应对象中Values是null和[]的对象，只对有数据的求和\n                */\n                var filterResults = eachRsp.filter(function (eachObj) {\n                  return eachObj.Values !== null && eachObj.Values.length !== 0;\n                });\n                var sumResults = filterResults.map(function (eachObj) {\n                  return eachObj.Values.map(function (eachValue) {\n                    return eachValue.value;\n                  });\n                });\n                // sumData = [sum1, sum2, ...],这里需要注意，sumResults中的每个数组的长度不一定相等\n                var maxIndex = 0;\n                var sumData = sumResults.reduce(function (acc, curValue, curIndex) {\n                  if (acc.length <= curValue.length) {\n                    maxIndex = curIndex;\n                    return curValue.map(function (item, curIndex) {\n                      if ((item === null || item === undefined) && (acc[curIndex] === null || acc[curIndex] === undefined)) {\n                        return null;\n                      }\n                      return (item || 0) + (acc[curIndex] || 0);\n                    });\n                  }\n                  return acc.map(function (item, accIndex) {\n                    if ((item === null || item === undefined) && (curValue[accIndex] === null || curValue[accIndex] === undefined)) {\n                      return null;\n                    }\n                    return (item || 0) + (curValue[accIndex] || 0);\n                  });\n                }, []);\n                // sum = [[timestamp, sum1], [timestamp, sum2]...]\n                var sum = sumData.map(function (item, sumIndex) {\n                  return [filterResults[maxIndex].Values[sumIndex].timestamp * 1000, item];\n                });\n                if (method === 'sum') {\n                  data.push({ name: 'sum', data: sum, color: '#FF0000' });\n                } else {\n                  data = [{ name: 'sum', data: sum, color: '#FF0000' }];\n                }\n              }\n              data.unshift({\n                name: ' ',\n                color: 'transparent',\n                events: {\n                  legendItemClick: function legendItemClick() {\n                    return false;\n                  }\n                }\n              });\n              // 根据data和chartTitle给chart加上对应的options\n              var _options2 = {\n                title: {\n                  useHTML: true,\n                  text: '<p class=\"dashboard-chart-title\">' + _chartTitle2 + '</p>'\n                },\n                series: data,\n                chart: {\n                  height: 230\n                },\n                tooltip: {\n                  xDateFormat: '%Y-%m-%d %H:%M:%S',\n                  borderWidth: 0,\n                  backgroundColor: \"rgba(175,216,248, 0.65)\",\n                  shadow: false\n                },\n                legend: {\n                  enabled: true,\n                  verticalAlign: 'bottom',\n                  adjustChartSize: true,\n                  navigation: {\n                    enabled: false\n                  },\n                  borderWidth: 0,\n                  symbolWidth: 10,\n                  useHTML: true,\n                  labelFormatter: function labelFormatter() {\n                    var chartWidth = this.chart.chartWidth;\n                    var legendWidth = Math.ceil(chartWidth * 0.95);\n                    var nameWidth = Math.ceil(legendWidth * 0.5);\n                    var numWidth = Math.floor(chartWidth * 0.07);\n                    if (this.index === 0) {\n                      return '<div class=\"dashboard-legend-container\" style=\"width:' + legendWidth + 'px\">\\n                      <div class=\"dashboard-legend-name\" style=\"width:' + nameWidth + 'px\">' + this.name + '</div>\\n                      <div class=\"dashboard-legend-num\" style=\"margin-left: 10px\">\\n                        <span style=\"color: #DB7093;width:' + numWidth + 'px\"> last </span>\\n                        <span style=\"color: #FF00FF;width:' + numWidth + 'px\"> min </span>\\n                        <span style=\"color: #9932CC;width:' + numWidth + 'px\"> max </span>\\n                        <span style=\"color: #DC143C;width:' + numWidth + 'px\"> avg </span>\\n                      </div>\\n                    </div>';\n                    }\n                    // 过滤掉this.yData是[]以及this.yData数组中都是null的情况\n                    var yData = this.yData.filter(function (item) {\n                      return item !== null;\n                    });\n                    var len = yData.length;\n                    var max = 'NAN';\n                    var min = 'NAN';\n                    var last = 'NAN';\n                    var avg = 'NAN';\n                    // 说明Values中的value都是null\n                    // 格式化legend中的数据显示\n                    var suffix = ['', 'K', 'M', 'G', 'T', 'P'];\n                    var formatNum = function formatNum(num) {\n                      var count = 0;\n                      while (num / 1000 >= 1) {\n                        num = num / 1000;\n                        count += 1;\n                      }\n                      num = num.toFixed(3);\n                      return num + suffix[count];\n                    };\n                    if (len !== 0) {\n                      max = Math.max.apply(Math, (0, _toConsumableArray3.default)(yData));\n                      min = Math.min.apply(Math, (0, _toConsumableArray3.default)(yData));\n                      last = yData[len - 1];\n                      var _sum = yData.reduce(function (pre, cur) {\n                        return cur += pre;\n                      });\n                      avg = _sum / len;\n                      max = formatNum(max);\n                      min = formatNum(min);\n                      last = formatNum(last);\n                      avg = formatNum(avg);\n                    }\n                    return '<div class=\"dashboard-legend-container\" style=\"width:' + legendWidth + 'px\">\\n                    <div class=\"dashboard-legend-name\" style=\"width:' + nameWidth + 'px\">' + this.name + '</div>\\n                    <div class=\"dashboard-legend-num\" style=\"margin-left: 10px\">\\n                      <span style=\"color: #DB7093;width:' + numWidth + 'px\"> ' + last + ' </span>\\n                      <span style=\"color: #FF00FF;width:' + numWidth + 'px\"> ' + min + ' </span>\\n                      <span style=\"color: #9932CC;width:' + numWidth + 'px\"> ' + max + ' </span>\\n                      <span style=\"color: #DC143C;width:' + numWidth + 'px\"> ' + avg + ' </span>\\n                    </div>\\n                  </div>';\n                  }\n                }\n              };\n              return _react2.default.createElement(\n                'div',\n                { key: index, className: 'charts' },\n                _react2.default.createElement(Chart, { container: 'chart', options: _options2 })\n              );\n            }\n          }\n        });\n      }\n      return _react2.default.createElement(\n        'div',\n        { className: 'charts-container' },\n        isLoading === 0 ? _react2.default.createElement(\n          'div',\n          { className: 'dashboard-showcharts-loading' },\n          _react2.default.createElement(_spin2.default, { size: 'large' })\n        ) : '',\n        views\n      );\n    }\n  }]);\n  return ShowCharts;\n}(_react2.default.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    dashboard: state.dashboard\n  };\n};\n\nexports.default = (0, _reactRedux.connect)(mapStateToProps)(ShowCharts);\n\n/***/ }),\n\n/***/ 952:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(module) {\n\nvar _typeof2 = __webpack_require__(27);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Highcharts plugin for adjustable chart height in response to legend height\n *\n * Author:        Torstein Honsi\n * Version:       1.0.6\n * Last revision: 2016-12-15\n */\n\n(function (factory) {\n  if (( false ? 'undefined' : (0, _typeof3.default)(module)) === 'object' && module.exports) {\n    module.exports = factory;\n  } else {\n    factory(Highcharts);\n  }\n})(function (Highcharts) {\n  (function (H) {\n    H.wrap(H.Legend.prototype, 'render', function (proceed) {\n      var chart = this.chart,\n          translateY,\n          addedHeight;\n\n      proceed.call(this);\n\n      if (this.options.adjustChartSize) {\n        // #7\n\n        addedHeight = this.legendHeight;\n        if (!chart.originalChartHeight) {\n          chart.originalChartHeight = chart.chartHeight;\n        }\n        if (this.options.align === 'left' || this.options.align === 'right') {\n          addedHeight = Math.max(this.group.translateY + this.legendHeight - chart.originalChartHeight, 0);\n          // Move the legend down\n        } else if (this.options.verticalAlign === 'bottom') {\n          translateY = this.group.attr('translateY') + this.legendHeight;\n          this.group.attr('translateY', translateY);\n          if (this.group.alignAttr) {\n            this.group.alignAttr.translateY = translateY;\n          }\n        }\n        if (addedHeight) {\n          //   // Adapt chart metrics\n          chart.chartHeight = chart.originalChartHeight + addedHeight;\n          chart.marginBottom += addedHeight;\n\n          //   // Set the DOM element heights\n          chart.container.style.height = chart.chartHeight + 'px';\n          chart.renderer.boxWrapper.attr('height', chart.chartHeight); // #7\n          var boxedElement = chart.renderer.box.clientWidth ? chart.renderer.box /*IE*/ : chart.renderer.box.parentElement; /*FF*/\n          var viewBox = \"0 0 \" + boxedElement.clientWidth + \" \" + boxedElement.clientHeight;\n          chart.renderer.boxWrapper.attr('viewBox', viewBox);\n        }\n        this.positionCheckboxes();\n      }\n    });\n  })(Highcharts);\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79)(module)))\n\n/***/ }),\n\n/***/ 953:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(module) {/**\n * @license Highcharts JS v5.0.14 (2017-07-28)\n *\n * (c) 2009-2016 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */var _typeof2=__webpack_require__(27);var _typeof3=_interopRequireDefault(_typeof2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}(function(root,factory){if(( false?'undefined':(0,_typeof3.default)(module))==='object'&&module.exports){module.exports=root.document?factory(root):factory;}else{root.Highcharts=factory(root);}})(typeof window!=='undefined'?window:undefined,function(win){var Highcharts=function(){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         *//* global window */var win=window,doc=win.document;var SVG_NS='http://www.w3.org/2000/svg',userAgent=win.navigator&&win.navigator.userAgent||'',svg=doc&&doc.createElementNS&&!!doc.createElementNS(SVG_NS,'svg').createSVGRect,isMS=/(edge|msie|trident)/i.test(userAgent)&&!window.opera,vml=!svg,isFirefox=/Firefox/.test(userAgent),hasBidiBug=isFirefox&&parseInt(userAgent.split('Firefox/')[1],10)<4;// issue #38\nvar Highcharts=win.Highcharts?win.Highcharts.error(16,true):{product:'Highcharts',version:'5.0.14',deg2rad:Math.PI*2/360,doc:doc,hasBidiBug:hasBidiBug,hasTouch:doc&&doc.documentElement.ontouchstart!==undefined,isMS:isMS,isWebKit:/AppleWebKit/.test(userAgent),isFirefox:isFirefox,isTouchDevice:/(Mobile|Android|Windows Phone)/.test(userAgent),SVG_NS:SVG_NS,chartCount:0,seriesTypes:{},symbolSizes:{},svg:svg,vml:vml,win:win,marginNames:['plotTop','marginRight','marginBottom','plotLeft'],noop:function noop(){return undefined;},/**\n             * An array containing the current chart objects in the page. A chart's\n             * position in the array is preserved throughout the page's lifetime. When\n             * a chart is destroyed, the array item becomes `undefined`.\n             * @type {Array.<Highcharts.Chart>}\n             * @memberOf Highcharts\n             */charts:[]};return Highcharts;}();(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         *//* eslint max-len: [\"warn\", 80, 4] *//**\n         * The Highcharts object is the placeholder for all other members, and various\n         * utility functions. The most important member of the namespace would be the\n         * chart constructor.\n         *\n         * @example\n         * var chart = Highcharts.chart('container', { ... });\n         *\n         * @namespace Highcharts\n         */var timers=[];var charts=H.charts,doc=H.doc,win=H.win;/**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @function #error\n         * @memberOf Highcharts\n         * @param {Number|String} code - The error code. See [errors.xml]{@link\n         *     https://github.com/highcharts/highcharts/blob/master/errors/errors.xml}\n         *     for available codes. If it is a string, the error message is printed\n         *     directly in the console.\n         * @param {Boolean} [stop=false] - Whether to throw an error or just log a\n         *     warning in the console.\n         *\n         * @sample highcharts/chart/highcharts-error/ Custom error handler\n         */H.error=function(code,stop){var msg=H.isNumber(code)?'Highcharts error #'+code+': www.highcharts.com/errors/'+code:code;if(stop){throw new Error(msg);}// else ...\nif(win.console){console.log(msg);// eslint-disable-line no-console\n}};/**\n         * An animator object used internally. One instance applies to one property\n         * (attribute or style prop) on one element. Animation is always initiated\n         * through {@link SVGElement#animate}.\n         *\n         * @constructor Fx\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement|SVGElement} elem - The element to animate.\n         * @param {AnimationOptions} options - Animation options.\n         * @param {string} prop - The single attribute or CSS property to animate.\n         * @private\n         *\n         * @example\n         * var rect = renderer.rect(0, 0, 10, 10).add();\n         * rect.animate({ width: 100 });\n         */H.Fx=function(elem,options,prop){this.options=options;this.elem=elem;this.prop=prop;};H.Fx.prototype={/**\n             * Set the current step of a path definition on SVGElement.\n             *\n             * @function #dSetter\n             * @memberOf Highcharts.Fx\n             */dSetter:function dSetter(){var start=this.paths[0],end=this.paths[1],ret=[],now=this.now,i=start.length,startVal;// Land on the final path without adjustment points appended in the ends\nif(now===1){ret=this.toD;}else if(i===end.length&&now<1){while(i--){startVal=parseFloat(start[i]);ret[i]=isNaN(startVal)?// a letter instruction like M or L\nstart[i]:now*parseFloat(end[i]-startVal)+startVal;}// If animation is finished or length not matching, land on right value\n}else{ret=end;}this.elem.attr('d',ret,null,true);},/**\n             * Update the element with the current animation step.\n             *\n             * @function #update\n             * @memberOf Highcharts.Fx\n             */update:function update(){var elem=this.elem,prop=this.prop,// if destroyed, it is null\nnow=this.now,step=this.options.step;// Animation setter defined from outside\nif(this[prop+'Setter']){this[prop+'Setter']();// Other animations on SVGElement\n}else if(elem.attr){if(elem.element){elem.attr(prop,now,null,true);}// HTML styles, raw HTML content like container size\n}else{elem.style[prop]=now+this.unit;}if(step){step.call(elem,now,this);}},/**\n             * Run an animation.\n             *\n             * @function #run\n             * @memberOf Highcharts.Fx\n             * @param {Number} from - The current value, value to start from.\n             * @param {Number} to - The end value, value to land on.\n             * @param {String} [unit] - The property unit, for example `px`.\n             *\n             */run:function run(from,to,unit){var self=this,timer=function timer(gotoEnd){return timer.stopped?false:self.step(gotoEnd);},i;this.startTime=+new Date();this.start=from;this.end=to;this.unit=unit;this.now=this.start;this.pos=0;timer.elem=this.elem;timer.prop=this.prop;if(timer()&&timers.push(timer)===1){timer.timerId=setInterval(function(){for(i=0;i<timers.length;i++){if(!timers[i]()){timers.splice(i--,1);}}if(!timers.length){clearInterval(timer.timerId);}},13);}},/**\n             * Run a single step in the animation.\n             *\n             * @function #step\n             * @memberOf Highcharts.Fx\n             * @param   {Boolean} [gotoEnd] - Whether to go to the endpoint of the\n             *     animation after abort.\n             * @returns {Boolean} Returns `true` if animation continues.\n             */step:function step(gotoEnd){var t=+new Date(),ret,done,options=this.options,elem=this.elem,complete=options.complete,duration=options.duration,curAnim=options.curAnim;if(elem.attr&&!elem.element){// #2616, element is destroyed\nret=false;}else if(gotoEnd||t>=duration+this.startTime){this.now=this.end;this.pos=1;this.update();curAnim[this.prop]=true;done=true;H.objectEach(curAnim,function(val){if(val!==true){done=false;}});if(done&&complete){complete.call(elem);}ret=false;}else{this.pos=options.easing((t-this.startTime)/duration);this.now=this.start+(this.end-this.start)*this.pos;this.update();ret=true;}return ret;},/**\n             * Prepare start and end values so that the path can be animated one to one.\n             *\n             * @function #initPath\n             * @memberOf Highcharts.Fx\n             * @param {SVGElement} elem - The SVGElement item.\n             * @param {String} fromD - Starting path definition.\n             * @param {Array} toD - Ending path definition.\n             * @returns {Array} An array containing start and end paths in array form\n             * so that they can be animated in parallel.\n             */initPath:function initPath(elem,fromD,toD){fromD=fromD||'';var shift,startX=elem.startX,endX=elem.endX,bezier=fromD.indexOf('C')>-1,numParams=bezier?7:3,fullLength,slice,i,start=fromD.split(' '),end=toD.slice(),// copy\nisArea=elem.isArea,positionFactor=isArea?2:1,reverse;/**\n                 * In splines make moveTo and lineTo points have six parameters like\n                 * bezier curves, to allow animation one-to-one.\n                 */function sixify(arr){var isOperator,nextIsOperator;i=arr.length;while(i--){// Fill in dummy coordinates only if the next operator comes\n// three places behind (#5788)\nisOperator=arr[i]==='M'||arr[i]==='L';nextIsOperator=/[a-zA-Z]/.test(arr[i+3]);if(isOperator&&nextIsOperator){arr.splice(i+1,0,arr[i+1],arr[i+2],arr[i+1],arr[i+2]);}}}/**\n                 * Insert an array at the given position of another array\n                 */function insertSlice(arr,subArr,index){[].splice.apply(arr,[index,0].concat(subArr));}/**\n                 * If shifting points, prepend a dummy point to the end path.\n                 */function prepend(arr,other){while(arr.length<fullLength){// Move to, line to or curve to?\narr[0]=other[fullLength-arr.length];// Prepend a copy of the first point\ninsertSlice(arr,arr.slice(0,numParams),0);// For areas, the bottom path goes back again to the left, so we\n// need to append a copy of the last point.\nif(isArea){insertSlice(arr,arr.slice(arr.length-numParams),arr.length);i--;}}arr[0]='M';}/**\n                 * Copy and append last point until the length matches the end length\n                 */function append(arr,other){var i=(fullLength-arr.length)/numParams;while(i>0&&i--){// Pull out the slice that is going to be appended or inserted.\n// In a line graph, the positionFactor is 1, and the last point\n// is sliced out. In an area graph, the positionFactor is 2,\n// causing the middle two points to be sliced out, since an area\n// path starts at left, follows the upper path then turns and\n// follows the bottom back.\nslice=arr.slice().splice(arr.length/positionFactor-numParams,numParams*positionFactor);// Move to, line to or curve to?\nslice[0]=other[fullLength-numParams-i*numParams];// Disable first control point\nif(bezier){slice[numParams-6]=slice[numParams-2];slice[numParams-5]=slice[numParams-1];}// Now insert the slice, either in the middle (for areas) or at\n// the end (for lines)\ninsertSlice(arr,slice,arr.length/positionFactor);if(isArea){i--;}}}if(bezier){sixify(start);sixify(end);}// For sideways animation, find out how much we need to shift to get the\n// start path Xs to match the end path Xs.\nif(startX&&endX){for(i=0;i<startX.length;i++){// Moving left, new points coming in on right\nif(startX[i]===endX[0]){shift=i;break;// Moving right\n}else if(startX[0]===endX[endX.length-startX.length+i]){shift=i;reverse=true;break;}}if(shift===undefined){start=[];}}if(start.length&&H.isNumber(shift)){// The common target length for the start and end array, where both\n// arrays are padded in opposite ends\nfullLength=end.length+shift*positionFactor*numParams;if(!reverse){prepend(end,start);append(start,end);}else{prepend(start,end);append(end,start);}}return[start,end];}};// End of Fx prototype\n/**\n         * Handle animation of the color attributes directly.\n         */H.Fx.prototype.fillSetter=H.Fx.prototype.strokeSetter=function(){this.elem.attr(this.prop,H.color(this.start).tweenTo(H.color(this.end),this.pos),null,true);};/**\n         * Utility function to extend an object with the members of another.\n         *\n         * @function #extend\n         * @memberOf Highcharts\n         * @param {Object} a - The object to be extended.\n         * @param {Object} b - The object to add to the first one.\n         * @returns {Object} Object a, the original object.\n         */H.extend=function(a,b){var n;if(!a){a={};}for(n in b){a[n]=b[n];}return a;};/**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function #merge\n         * @memberOf Highcharts\n         * @param {Boolean} [extend] - Whether to extend the left-side object (a) or\n                  return a whole new object.\n         * @param {Object} a - The first object to extend. When only this is given, the\n                  function returns a deep copy.\n         * @param {...Object} [n] - An object to merge into the previous one.\n         * @returns {Object} - The merged object. If the first argument is true, the\n         * return is the same as the second argument.\n         */H.merge=function(){var i,args=arguments,len,ret={},doCopy=function doCopy(copy,original){// An object is replacing a primitive\nif((typeof copy==='undefined'?'undefined':(0,_typeof3.default)(copy))!=='object'){copy={};}H.objectEach(original,function(value,key){// Copy the contents of objects, but not arrays or DOM nodes\nif(H.isObject(value,true)&&!H.isClass(value)&&!H.isDOMElement(value)){copy[key]=doCopy(copy[key]||{},value);// Primitives and arrays are copied over directly\n}else{copy[key]=original[key];}});return copy;};// If first argument is true, copy into the existing object. Used in\n// setOptions.\nif(args[0]===true){ret=args[1];args=Array.prototype.slice.call(args,2);}// For each argument, extend the return\nlen=args.length;for(i=0;i<len;i++){ret=doCopy(ret,args[i]);}return ret;};/**\n         * Shortcut for parseInt\n         * @ignore\n         * @param {Object} s\n         * @param {Number} mag Magnitude\n         */H.pInt=function(s,mag){return parseInt(s,mag||10);};/**\n         * Utility function to check for string type.\n         *\n         * @function #isString\n         * @memberOf Highcharts\n         * @param {Object} s - The item to check.\n         * @returns {Boolean} - True if the argument is a string.\n         */H.isString=function(s){return typeof s==='string';};/**\n         * Utility function to check if an item is an array.\n         *\n         * @function #isArray\n         * @memberOf Highcharts\n         * @param {Object} obj - The item to check.\n         * @returns {Boolean} - True if the argument is an array.\n         */H.isArray=function(obj){var str=Object.prototype.toString.call(obj);return str==='[object Array]'||str==='[object Array Iterator]';};/**\n         * Utility function to check if an item is of type object.\n         *\n         * @function #isObject\n         * @memberOf Highcharts\n         * @param {Object} obj - The item to check.\n         * @param {Boolean} [strict=false] - Also checks that the object is not an\n         *    array.\n         * @returns {Boolean} - True if the argument is an object.\n         */H.isObject=function(obj,strict){return!!obj&&(typeof obj==='undefined'?'undefined':(0,_typeof3.default)(obj))==='object'&&(!strict||!H.isArray(obj));};/**\n         * Utility function to check if an Object is a HTML Element.\n         *\n         * @function #isDOMElement\n         * @memberOf Highcharts\n         * @param {Object} obj - The item to check.\n         * @returns {Boolean} - True if the argument is a HTML Element.\n         */H.isDOMElement=function(obj){return H.isObject(obj)&&typeof obj.nodeType==='number';};/**\n         * Utility function to check if an Object is an class.\n         *\n         * @function #isClass\n         * @memberOf Highcharts\n         * @param {Object} obj - The item to check.\n         * @returns {Boolean} - True if the argument is an class.\n         */H.isClass=function(obj){var c=obj&&obj.constructor;return!!(H.isObject(obj,true)&&!H.isDOMElement(obj)&&c&&c.name&&c.name!=='Object');};/**\n         * Utility function to check if an item is of type number.\n         *\n         * @function #isNumber\n         * @memberOf Highcharts\n         * @param {Object} n - The item to check.\n         * @returns {Boolean} - True if the item is a number and is not NaN.\n         */H.isNumber=function(n){return typeof n==='number'&&!isNaN(n);};/**\n         * Remove the last occurence of an item from an array.\n         *\n         * @function #erase\n         * @memberOf Highcharts\n         * @param {Array} arr - The array.\n         * @param {*} item - The item to remove.\n         */H.erase=function(arr,item){var i=arr.length;while(i--){if(arr[i]===item){arr.splice(i,1);break;}}};/**\n         * Check if an object is null or undefined.\n         *\n         * @function #defined\n         * @memberOf Highcharts\n         * @param {Object} obj - The object to check.\n         * @returns {Boolean} - False if the object is null or undefined, otherwise\n         *        true.\n         */H.defined=function(obj){return obj!==undefined&&obj!==null;};/**\n         * Set or get an attribute or an object of attributes. To use as a setter, pass\n         * a key and a value, or let the second argument be a collection of keys and\n         * values. To use as a getter, pass only a string as the second argument.\n         *\n         * @function #attr\n         * @memberOf Highcharts\n         * @param {Object} elem - The DOM element to receive the attribute(s).\n         * @param {String|Object} [prop] - The property or an object of key-value pairs.\n         * @param {String} [value] - The value if a single property is set.\n         * @returns {*} When used as a getter, return the value.\n         */H.attr=function(elem,prop,value){var ret;// if the prop is a string\nif(H.isString(prop)){// set the value\nif(H.defined(value)){elem.setAttribute(prop,value);// get the value\n}else if(elem&&elem.getAttribute){ret=elem.getAttribute(prop);}// else if prop is defined, it is a hash of key/value pairs\n}else if(H.defined(prop)&&H.isObject(prop)){H.objectEach(prop,function(val,key){elem.setAttribute(key,val);});}return ret;};/**\n         * Check if an element is an array, and if not, make it into an array.\n         *\n         * @function #splat\n         * @memberOf Highcharts\n         * @param obj {*} - The object to splat.\n         * @returns {Array} The produced or original array.\n         */H.splat=function(obj){return H.isArray(obj)?obj:[obj];};/**\n         * Set a timeout if the delay is given, otherwise perform the function\n         * synchronously.\n         *\n         * @function #syncTimeout\n         * @memberOf Highcharts\n         * @param   {Function} fn - The function callback.\n         * @param   {Number}   delay - Delay in milliseconds.\n         * @param   {Object}   [context] - The context.\n         * @returns {Number} An identifier for the timeout that can later be cleared\n         * with clearTimeout.\n         */H.syncTimeout=function(fn,delay,context){if(delay){return setTimeout(fn,delay,context);}fn.call(0,context);};/**\n         * Return the first value that is not null or undefined.\n         *\n         * @function #pick\n         * @memberOf Highcharts\n         * @param {...*} items - Variable number of arguments to inspect.\n         * @returns {*} The value of the first argument that is not null or undefined.\n         */H.pick=function(){var args=arguments,i,arg,length=args.length;for(i=0;i<length;i++){arg=args[i];if(arg!==undefined&&arg!==null){return arg;}}};/**\n         * @typedef {Object} CSSObject - A style object with camel case property names.\n         * The properties can be whatever styles are supported on the given SVG or HTML\n         * element.\n         * @example\n         * {\n         *    fontFamily: 'monospace',\n         *    fontSize: '1.2em'\n         * }\n         *//**\n         * Set CSS on a given element.\n         *\n         * @function #css\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement} el - A HTML DOM element.\n         * @param {CSSObject} styles - Style object with camel case property names.\n         *\n         */H.css=function(el,styles){if(H.isMS&&!H.svg){// #2686\nif(styles&&styles.opacity!==undefined){styles.filter='alpha(opacity='+styles.opacity*100+')';}}H.extend(el.style,styles);};/**\n         * A HTML DOM element.\n         * @typedef {Object} HTMLDOMElement\n         *//**\n         * Utility function to create an HTML element with attributes and styles.\n         *\n         * @function #createElement\n         * @memberOf Highcharts\n         * @param {String} tag - The HTML tag.\n         * @param {Object} [attribs] - Attributes as an object of key-value pairs.\n         * @param {CSSObject} [styles] - Styles as an object of key-value pairs.\n         * @param {Object} [parent] - The parent HTML object.\n         * @param {Boolean} [nopad=false] - If true, remove all padding, border and\n         *    margin.\n         * @returns {HTMLDOMElement} The created DOM element.\n         */H.createElement=function(tag,attribs,styles,parent,nopad){var el=doc.createElement(tag),css=H.css;if(attribs){H.extend(el,attribs);}if(nopad){css(el,{padding:0,border:'none',margin:0});}if(styles){css(el,styles);}if(parent){parent.appendChild(el);}return el;};/**\n         * Extend a prototyped class by new members.\n         *\n         * @function #extendClass\n         * @memberOf Highcharts\n         * @param {Object} parent - The parent prototype to inherit.\n         * @param {Object} members - A collection of prototype members to add or\n         *        override compared to the parent prototype.\n         * @returns {Object} A new prototype.\n         */H.extendClass=function(parent,members){var object=function object(){};object.prototype=new parent();// eslint-disable-line new-cap\nH.extend(object.prototype,members);return object;};/**\n         * Left-pad a string to a given length by adding a character repetetively.\n         *\n         * @function #pad\n         * @memberOf Highcharts\n         * @param {Number} number - The input string or number.\n         * @param {Number} length - The desired string length.\n         * @param {String} [padder=0] - The character to pad with.\n         * @returns {String} The padded string.\n         */H.pad=function(number,length,padder){return new Array((length||2)+1-String(number).length).join(padder||0)+number;};/**\n         * @typedef {Number|String} RelativeSize - If a number is given, it defines the\n         *    pixel length. If a percentage string is given, like for example `'50%'`,\n         *    the setting defines a length relative to a base size, for example the size\n         *    of a container.\n         *//**\n         * Return a length based on either the integer value, or a percentage of a base.\n         *\n         * @function #relativeLength\n         * @memberOf Highcharts\n         * @param  {RelativeSize} value\n         *         A percentage string or a number.\n         * @param  {number} base\n         *         The full length that represents 100%.\n         * @param  {number} [offset=0]\n         *         A pixel offset to apply for percentage values. Used internally in\n         *         axis positioning.\n         * @return {number}\n         *         The computed length.\n         */H.relativeLength=function(value,base,offset){return /%$/.test(value)?base*parseFloat(value)/100+(offset||0):parseFloat(value);};/**\n         * Wrap a method with extended functionality, preserving the original function.\n         *\n         * @function #wrap\n         * @memberOf Highcharts\n         * @param {Object} obj - The context object that the method belongs to. In real\n         *        cases, this is often a prototype.\n         * @param {String} method - The name of the method to extend.\n         * @param {Function} func - A wrapper function callback. This function is called\n         *        with the same arguments as the original function, except that the\n         *        original function is unshifted and passed as the first argument.\n         *\n         */H.wrap=function(obj,method,func){var proceed=obj[method];obj[method]=function(){var args=Array.prototype.slice.call(arguments),outerArgs=arguments,ctx=this,ret;ctx.proceed=function(){proceed.apply(ctx,arguments.length?arguments:outerArgs);};args.unshift(proceed);ret=func.apply(this,args);ctx.proceed=null;return ret;};};/**\n         * Get the time zone offset based on the current timezone information as set in\n         * the global options.\n         *\n         * @function #getTZOffset\n         * @memberOf Highcharts\n         * @param  {Number} timestamp - The JavaScript timestamp to inspect.\n         * @return {Number} - The timezone offset in minutes compared to UTC.\n         */H.getTZOffset=function(timestamp){var d=H.Date;return(d.hcGetTimezoneOffset&&d.hcGetTimezoneOffset(timestamp)||d.hcTimezoneOffset||0)*60000;};/**\n         * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a\n         * human readable date string. The format is a subset of the formats for PHP's\n         * [strftime]{@link\n         * http://www.php.net/manual/en/function.strftime.php} function. Additional\n         * formats can be given in the {@link Highcharts.dateFormats} hook.\n         *\n         * @function #dateFormat\n         * @memberOf Highcharts\n         * @param {String} format - The desired format where various time\n         *        representations are prefixed with %.\n         * @param {Number} timestamp - The JavaScript timestamp.\n         * @param {Boolean} [capitalize=false] - Upper case first letter in the return.\n         * @returns {String} The formatted date.\n         */H.dateFormat=function(format,timestamp,capitalize){if(!H.defined(timestamp)||isNaN(timestamp)){return H.defaultOptions.lang.invalidDate||'';}format=H.pick(format,'%Y-%m-%d %H:%M:%S');var D=H.Date,date=new D(timestamp-H.getTZOffset(timestamp)),// get the basic time values\nhours=date[D.hcGetHours](),day=date[D.hcGetDay](),dayOfMonth=date[D.hcGetDate](),month=date[D.hcGetMonth](),fullYear=date[D.hcGetFullYear](),lang=H.defaultOptions.lang,langWeekdays=lang.weekdays,shortWeekdays=lang.shortWeekdays,pad=H.pad,// List all format keys. Custom formats can be added from the outside.\nreplacements=H.extend({//-- Day\n// Short weekday, like 'Mon'\n'a':shortWeekdays?shortWeekdays[day]:langWeekdays[day].substr(0,3),// Long weekday, like 'Monday'\n'A':langWeekdays[day],// Two digit day of the month, 01 to 31\n'd':pad(dayOfMonth),// Day of the month, 1 through 31\n'e':pad(dayOfMonth,2,' '),'w':day,// Week (none implemented)\n//'W': weekNumber(),\n//-- Month\n// Short month, like 'Jan'\n'b':lang.shortMonths[month],// Long month, like 'January'\n'B':lang.months[month],// Two digit month number, 01 through 12\n'm':pad(month+1),//-- Year\n// Two digits year, like 09 for 2009\n'y':fullYear.toString().substr(2,2),// Four digits year, like 2009\n'Y':fullYear,//-- Time\n// Two digits hours in 24h format, 00 through 23\n'H':pad(hours),// Hours in 24h format, 0 through 23\n'k':hours,// Two digits hours in 12h format, 00 through 11\n'I':pad(hours%12||12),// Hours in 12h format, 1 through 12\n'l':hours%12||12,// Two digits minutes, 00 through 59\n'M':pad(date[D.hcGetMinutes]()),// Upper case AM or PM\n'p':hours<12?'AM':'PM',// Lower case AM or PM\n'P':hours<12?'am':'pm',// Two digits seconds, 00 through  59\n'S':pad(date.getSeconds()),// Milliseconds (naming from Ruby)\n'L':pad(Math.round(timestamp%1000),3)},/**\n                     * A hook for defining additional date format specifiers. New\n                     * specifiers are defined as key-value pairs by using the specifier\n                     * as key, and a function which takes the timestamp as value. This\n                     * function returns the formatted portion of the date.\n                     *\n                     * @type {Object}\n                     * @name dateFormats\n                     * @memberOf Highcharts\n                     * @sample highcharts/global/dateformats/ Adding support for week\n                     * number\n                     */H.dateFormats);// Do the replaces\nH.objectEach(replacements,function(val,key){// Regex would do it in one line, but this is faster\nwhile(format.indexOf('%'+key)!==-1){format=format.replace('%'+key,typeof val==='function'?val(timestamp):val);}});// Optionally capitalize the string and return\nreturn capitalize?format.substr(0,1).toUpperCase()+format.substr(1):format;};/**\n         * Format a single variable. Similar to sprintf, without the % prefix.\n         *\n         * @example\n         * formatSingle('.2f', 5); // => '5.00'.\n         *\n         * @function #formatSingle\n         * @memberOf Highcharts\n         * @param {String} format The format string.\n         * @param {*} val The value.\n         * @returns {String} The formatted representation of the value.\n         */H.formatSingle=function(format,val){var floatRegex=/f$/,decRegex=/\\.([0-9])/,lang=H.defaultOptions.lang,decimals;if(floatRegex.test(format)){// float\ndecimals=format.match(decRegex);decimals=decimals?decimals[1]:-1;if(val!==null){val=H.numberFormat(val,decimals,lang.decimalPoint,format.indexOf(',')>-1?lang.thousandsSep:'');}}else{val=H.dateFormat(format,val);}return val;};/**\n         * Format a string according to a subset of the rules of Python's String.format\n         * method.\n         *\n         * @function #format\n         * @memberOf Highcharts\n         * @param {String} str The string to format.\n         * @param {Object} ctx The context, a collection of key-value pairs where each\n         *        key is replaced by its value.\n         * @returns {String} The formatted string.\n         *\n         * @example\n         * var s = Highcharts.format(\n         *     'The {color} fox was {len:.2f} feet long',\n         *     { color: 'red', len: Math.PI }\n         * );\n         * // => The red fox was 3.14 feet long\n         */H.format=function(str,ctx){var splitter='{',isInside=false,segment,valueAndFormat,path,i,len,ret=[],val,index;while(str){index=str.indexOf(splitter);if(index===-1){break;}segment=str.slice(0,index);if(isInside){// we're on the closing bracket looking back\nvalueAndFormat=segment.split(':');path=valueAndFormat.shift().split('.');// get first and leave\nlen=path.length;val=ctx;// Assign deeper paths\nfor(i=0;i<len;i++){val=val[path[i]];}// Format the replacement\nif(valueAndFormat.length){val=H.formatSingle(valueAndFormat.join(':'),val);}// Push the result and advance the cursor\nret.push(val);}else{ret.push(segment);}str=str.slice(index+1);// the rest\nisInside=!isInside;// toggle\nsplitter=isInside?'}':'{';// now look for next matching bracket\n}ret.push(str);return ret.join('');};/**\n         * Get the magnitude of a number.\n         *\n         * @function #getMagnitude\n         * @memberOf Highcharts\n         * @param {Number} number The number.\n         * @returns {Number} The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2\n         *        etc.\n         */H.getMagnitude=function(num){return Math.pow(10,Math.floor(Math.log(num)/Math.LN10));};/**\n         * Take an interval and normalize it to multiples of round numbers.\n         *\n         * @todo  Move this function to the Axis prototype. It is here only for\n         *        historical reasons.\n         * @function #normalizeTickInterval\n         * @memberOf Highcharts\n         * @param {Number} interval - The raw, un-rounded interval.\n         * @param {Array} [multiples] - Allowed multiples.\n         * @param {Number} [magnitude] - The magnitude of the number.\n         * @param {Boolean} [allowDecimals] - Whether to allow decimals.\n         * @param {Boolean} [hasTickAmount] - If it has tickAmount, avoid landing\n         *        on tick intervals lower than original.\n         * @returns {Number} The normalized interval.\n         */H.normalizeTickInterval=function(interval,multiples,magnitude,allowDecimals,hasTickAmount){var normalized,i,retInterval=interval;// round to a tenfold of 1, 2, 2.5 or 5\nmagnitude=H.pick(magnitude,1);normalized=interval/magnitude;// multiples for a linear scale\nif(!multiples){multiples=hasTickAmount?// Finer grained ticks when the tick amount is hard set, including\n// when alignTicks is true on multiple axes (#4580).\n[1,1.2,1.5,2,2.5,3,4,5,6,8,10]:// Else, let ticks fall on rounder numbers\n[1,2,2.5,5,10];// the allowDecimals option\nif(allowDecimals===false){if(magnitude===1){multiples=H.grep(multiples,function(num){return num%1===0;});}else if(magnitude<=0.1){multiples=[1/magnitude];}}}// normalize the interval to the nearest multiple\nfor(i=0;i<multiples.length;i++){retInterval=multiples[i];// only allow tick amounts smaller than natural\nif(hasTickAmount&&retInterval*magnitude>=interval||!hasTickAmount&&normalized<=(multiples[i]+(multiples[i+1]||multiples[i]))/2){break;}}// Multiply back to the correct magnitude. Correct floats to appropriate\n// precision (#6085).\nretInterval=H.correctFloat(retInterval*magnitude,-Math.round(Math.log(0.001)/Math.LN10));return retInterval;};/**\n         * Sort an object array and keep the order of equal items. The ECMAScript\n         * standard does not specify the behaviour when items are equal.\n         *\n         * @function #stableSort\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to sort.\n         * @param {Function} sortFunction - The function to sort it with, like with\n         *        regular Array.prototype.sort.\n         *\n         */H.stableSort=function(arr,sortFunction){var length=arr.length,sortValue,i;// Add index to each item\nfor(i=0;i<length;i++){arr[i].safeI=i;// stable sort index\n}arr.sort(function(a,b){sortValue=sortFunction(a,b);return sortValue===0?a.safeI-b.safeI:sortValue;});// Remove index from items\nfor(i=0;i<length;i++){delete arr[i].safeI;// stable sort index\n}};/**\n         * Non-recursive method to find the lowest member of an array. `Math.min` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function #arrayMin\n         * @memberOf  Highcharts\n         * @param {Array} data An array of numbers.\n         * @returns {Number} The lowest number.\n         */H.arrayMin=function(data){var i=data.length,min=data[0];while(i--){if(data[i]<min){min=data[i];}}return min;};/**\n         * Non-recursive method to find the lowest member of an array. `Math.max` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function #arrayMax\n         * @memberOf  Highcharts\n         * @param {Array} data - An array of numbers.\n         * @returns {Number} The highest number.\n         */H.arrayMax=function(data){var i=data.length,max=data[0];while(i--){if(data[i]>max){max=data[i];}}return max;};/**\n         * Utility method that destroys any SVGElement instances that are properties on\n         * the given object. It loops all properties and invokes destroy if there is a\n         * destroy method. The property is then delete.\n         *\n         * @function #destroyObjectProperties\n         * @memberOf Highcharts\n         * @param {Object} obj - The object to destroy properties on.\n         * @param {Object} [except] - Exception, do not destroy this property, only\n         *    delete it.\n         *\n         */H.destroyObjectProperties=function(obj,except){H.objectEach(obj,function(val,n){// If the object is non-null and destroy is defined\nif(val&&val!==except&&val.destroy){// Invoke the destroy\nval.destroy();}// Delete the property from the object.\ndelete obj[n];});};/**\n         * Discard a HTML element by moving it to the bin and delete.\n         *\n         * @function #discardElement\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement} element - The HTML node to discard.\n         *\n         */H.discardElement=function(element){var garbageBin=H.garbageBin;// create a garbage bin element, not part of the DOM\nif(!garbageBin){garbageBin=H.createElement('div');}// move the node and empty bin\nif(element){garbageBin.appendChild(element);}garbageBin.innerHTML='';};/**\n         * Fix JS round off float errors.\n         *\n         * @function #correctFloat\n         * @memberOf Highcharts\n         * @param {Number} num - A float number to fix.\n         * @param {Number} [prec=14] - The precision.\n         * @returns {Number} The corrected float number.\n         */H.correctFloat=function(num,prec){return parseFloat(num.toPrecision(prec||14));};/**\n         * Set the global animation to either a given value, or fall back to the given\n         * chart's animation option.\n         *\n         * @function #setAnimation\n         * @memberOf Highcharts\n         * @param {Boolean|Animation} animation - The animation object.\n         * @param {Object} chart - The chart instance.\n         *\n         * @todo This function always relates to a chart, and sets a property on the\n         *        renderer, so it should be moved to the SVGRenderer.\n         */H.setAnimation=function(animation,chart){chart.renderer.globalAnimation=H.pick(animation,chart.options.chart.animation,true);};/**\n         * Get the animation in object form, where a disabled animation is always\n         * returned as `{ duration: 0 }`.\n         *\n         * @function #animObject\n         * @memberOf Highcharts\n         * @param {Boolean|AnimationOptions} animation - An animation setting. Can be an\n         *        object with duration, complete and easing properties, or a boolean to\n         *        enable or disable.\n         * @returns {AnimationOptions} An object with at least a duration property.\n         */H.animObject=function(animation){return H.isObject(animation)?H.merge(animation):{duration:animation?500:0};};/**\n         * The time unit lookup\n         */H.timeUnits={millisecond:1,second:1000,minute:60000,hour:3600000,day:24*3600000,week:7*24*3600000,month:28*24*3600000,year:364*24*3600000};/**\n         * Format a number and return a string based on input settings.\n         *\n         * @function #numberFormat\n         * @memberOf Highcharts\n         * @param {Number} number - The input number to format.\n         * @param {Number} decimals - The amount of decimals. A value of -1 preserves\n         *        the amount in the input number.\n         * @param {String} [decimalPoint] - The decimal point, defaults to the one given\n         *        in the lang options, or a dot.\n         * @param {String} [thousandsSep] - The thousands separator, defaults to the one\n         *        given in the lang options, or a space character.\n         * @returns {String} The formatted number.\n         *\n         * @sample members/highcharts-numberformat/ Custom number format\n         */H.numberFormat=function(number,decimals,decimalPoint,thousandsSep){number=+number||0;decimals=+decimals;var lang=H.defaultOptions.lang,origDec=(number.toString().split('.')[1]||'').split('e')[0].length,strinteger,thousands,ret,roundedNumber,exponent=number.toString().split('e');if(decimals===-1){// Preserve decimals. Not huge numbers (#3793).\ndecimals=Math.min(origDec,20);}else if(!H.isNumber(decimals)){decimals=2;}// Add another decimal to avoid rounding errors of float numbers. (#4573)\n// Then use toFixed to handle rounding.\nroundedNumber=(Math.abs(exponent[1]?exponent[0]:number)+Math.pow(10,-Math.max(decimals,origDec)-1)).toFixed(decimals);// A string containing the positive integer component of the number\nstrinteger=String(H.pInt(roundedNumber));// Leftover after grouping into thousands. Can be 0, 1 or 3.\nthousands=strinteger.length>3?strinteger.length%3:0;// Language\ndecimalPoint=H.pick(decimalPoint,lang.decimalPoint);thousandsSep=H.pick(thousandsSep,lang.thousandsSep);// Start building the return\nret=number<0?'-':'';// Add the leftover after grouping into thousands. For example, in the\n// number 42 000 000, this line adds 42.\nret+=thousands?strinteger.substr(0,thousands)+thousandsSep:'';// Add the remaining thousands groups, joined by the thousands separator\nret+=strinteger.substr(thousands).replace(/(\\d{3})(?=\\d)/g,'$1'+thousandsSep);// Add the decimal point and the decimal component\nif(decimals){// Get the decimal component\nret+=decimalPoint+roundedNumber.slice(-decimals);}if(exponent[1]){ret+='e'+exponent[1];}return ret;};/**\n         * Easing definition\n         * @ignore\n         * @param   {Number} pos Current position, ranging from 0 to 1.\n         */Math.easeInOutSine=function(pos){return-0.5*(Math.cos(Math.PI*pos)-1);};/**\n         * Get the computed CSS value for given element and property, only for numerical\n         * properties. For width and height, the dimension of the inner box (excluding\n         * padding) is returned. Used for fitting the chart within the container.\n         *\n         * @function #getStyle\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement} el - A HTML element.\n         * @param {String} prop - The property name.\n         * @param {Boolean} [toInt=true] - Parse to integer.\n         * @returns {Number} - The numeric value.\n         */H.getStyle=function(el,prop,toInt){var style;// For width and height, return the actual inner pixel size (#4913)\nif(prop==='width'){return Math.min(el.offsetWidth,el.scrollWidth)-H.getStyle(el,'padding-left')-H.getStyle(el,'padding-right');}else if(prop==='height'){return Math.min(el.offsetHeight,el.scrollHeight)-H.getStyle(el,'padding-top')-H.getStyle(el,'padding-bottom');}// Otherwise, get the computed style\nstyle=win.getComputedStyle(el,undefined);if(style){style=style.getPropertyValue(prop);if(H.pick(toInt,true)){style=H.pInt(style);}}return style;};/**\n         * Search for an item in an array.\n         *\n         * @function #inArray\n         * @memberOf Highcharts\n         * @param {*} item - The item to search for.\n         * @param {arr} arr - The array or node collection to search in.\n         * @returns {Number} - The index within the array, or -1 if not found.\n         */H.inArray=function(item,arr){return arr.indexOf?arr.indexOf(item):[].indexOf.call(arr,item);};/**\n         * Filter an array by a callback.\n         *\n         * @function #grep\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to filter.\n         * @param {Function} callback - The callback function. The function receives the\n         *        item as the first argument. Return `true` if the item is to be\n         *        preserved.\n         * @returns {Array} - A new, filtered array.\n         */H.grep=function(arr,callback){return[].filter.call(arr,callback);};/**\n         * Return the value of the first element in the array that satisfies the\n         * provided testing function.\n         *\n         * @function #find\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to test.\n         * @param {Function} callback - The callback function. The function receives the\n         *        item as the first argument. Return `true` if this item satisfies the\n         *        condition.\n         * @returns {Mixed} - The value of the element.\n         */H.find=function(arr,callback){return[].find.call(arr,callback);};/**\n         * Map an array by a callback.\n         *\n         * @function #map\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to map.\n         * @param {Function} fn - The callback function. Return the new value for the\n         *        new array.\n         * @returns {Array} - A new array item with modified items.\n         */H.map=function(arr,fn){var results=[],i=0,len=arr.length;for(;i<len;i++){results[i]=fn.call(arr[i],arr[i],i,arr);}return results;};/**\n         * Get the element's offset position, corrected for `overflow: auto`.\n         *\n         * @function #offset\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement} el - The HTML element.\n         * @returns {Object} An object containing `left` and `top` properties for the\n         * position in the page.\n         */H.offset=function(el){var docElem=doc.documentElement,box=el.getBoundingClientRect();return{top:box.top+(win.pageYOffset||docElem.scrollTop)-(docElem.clientTop||0),left:box.left+(win.pageXOffset||docElem.scrollLeft)-(docElem.clientLeft||0)};};/**\n         * Stop running animation.\n         *\n         * @todo A possible extension to this would be to stop a single property, when\n         * we want to continue animating others. Then assign the prop to the timer\n         * in the Fx.run method, and check for the prop here. This would be an\n         * improvement in all cases where we stop the animation from .attr. Instead of\n         * stopping everything, we can just stop the actual attributes we're setting.\n         *\n         * @function #stop\n         * @memberOf Highcharts\n         * @param {SVGElement} el - The SVGElement to stop animation on.\n         * @param {string} [prop] - The property to stop animating. If given, the stop\n         *    method will stop a single property from animating, while others continue.\n         *\n         */H.stop=function(el,prop){var i=timers.length;// Remove timers related to this element (#4519)\nwhile(i--){if(timers[i].elem===el&&(!prop||prop===timers[i].prop)){timers[i].stopped=true;// #4667\n}}};/**\n         * Iterate over an array.\n         *\n         * @function #each\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to iterate over.\n         * @param {Function} fn - The iterator callback. It passes three arguments:\n         * * item - The array item.\n         * * index - The item's index in the array.\n         * * arr - The array that each is being applied to.\n         * @param {Object} [ctx] The context.\n         */H.each=function(arr,fn,ctx){// modern browsers\nreturn Array.prototype.forEach.call(arr,fn,ctx);};/**\n         * Iterate over object key pairs in an object.\n         *\n         * @function #objectEach\n         * @memberOf Highcharts\n         * @param  {Object}   obj - The object to iterate over.\n         * @param  {Function} fn  - The iterator callback. It passes three arguments:\n         * * value - The property value.\n         * * key - The property key.\n         * * obj - The object that objectEach is being applied to.\n         * @param  {Object}   ctx The context\n         */H.objectEach=function(obj,fn,ctx){for(var key in obj){if(obj.hasOwnProperty(key)){fn.call(ctx,obj[key],key,obj);}}};/**\n         * Add an event listener.\n         *\n         * @function #addEvent\n         * @memberOf Highcharts\n         * @param {Object} el - The element or object to add a listener to. It can be a\n         *        {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         * @param {String} type - The event type.\n         * @param {Function} fn - The function callback to execute when the event is\n         *        fired.\n         * @returns {Function} A callback function to remove the added event.\n         */H.addEvent=function(el,type,fn){var events=el.hcEvents=el.hcEvents||{};function wrappedFn(e){e.target=e.srcElement||win;// #2820\nfn.call(el,e);}// Handle DOM events in modern browsers\nif(el.addEventListener){el.addEventListener(type,fn,false);// Handle old IE implementation\n}else if(el.attachEvent){if(!el.hcEventsIE){el.hcEventsIE={};}// unique function string (#6746)\nif(!fn.hcGetKey){fn.hcGetKey=H.uniqueKey();}// Link wrapped fn with original fn, so we can get this in removeEvent\nel.hcEventsIE[fn.hcGetKey]=wrappedFn;el.attachEvent('on'+type,wrappedFn);}if(!events[type]){events[type]=[];}events[type].push(fn);// Return a function that can be called to remove this event.\nreturn function(){H.removeEvent(el,type,fn);};};/**\n         * Remove an event that was added with {@link Highcharts#addEvent}.\n         *\n         * @function #removeEvent\n         * @memberOf Highcharts\n         * @param {Object} el - The element to remove events on.\n         * @param {String} [type] - The type of events to remove. If undefined, all\n         *        events are removed from the element.\n         * @param {Function} [fn] - The specific callback to remove. If undefined, all\n         *        events that match the element and optionally the type are removed.\n         *\n         */H.removeEvent=function(el,type,fn){var events,hcEvents=el.hcEvents,index;function removeOneEvent(type,fn){if(el.removeEventListener){el.removeEventListener(type,fn,false);}else if(el.attachEvent){fn=el.hcEventsIE[fn.hcGetKey];el.detachEvent('on'+type,fn);}}function removeAllEvents(){var types,len;if(!el.nodeName){return;// break on non-DOM events\n}if(type){types={};types[type]=true;}else{types=hcEvents;}H.objectEach(types,function(val,n){if(hcEvents[n]){len=hcEvents[n].length;while(len--){removeOneEvent(n,hcEvents[n][len]);}}});}if(hcEvents){if(type){events=hcEvents[type]||[];if(fn){index=H.inArray(fn,events);if(index>-1){events.splice(index,1);hcEvents[type]=events;}removeOneEvent(type,fn);}else{removeAllEvents();hcEvents[type]=[];}}else{removeAllEvents();el.hcEvents={};}}};/**\n         * Fire an event that was registered with {@link Highcharts#addEvent}.\n         *\n         * @function #fireEvent\n         * @memberOf Highcharts\n         * @param {Object} el - The object to fire the event on. It can be a\n         *        {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         * @param {String} type - The type of event.\n         * @param {Object} [eventArguments] - Custom event arguments that are passed on\n         *        as an argument to the event handler.\n         * @param {Function} [defaultFunction] - The default function to execute if the\n         *        other listeners haven't returned false.\n         *\n         */H.fireEvent=function(el,type,eventArguments,defaultFunction){var e,hcEvents=el.hcEvents,events,len,i,fn;eventArguments=eventArguments||{};if(doc.createEvent&&(el.dispatchEvent||el.fireEvent)){e=doc.createEvent('Events');e.initEvent(type,true,true);//e.target = el;\nH.extend(e,eventArguments);if(el.dispatchEvent){el.dispatchEvent(e);}else{el.fireEvent(type,e);}}else if(hcEvents){events=hcEvents[type]||[];len=events.length;if(!eventArguments.target){// We're running a custom event\nH.extend(eventArguments,{// Attach a simple preventDefault function to skip default\n// handler if called. The built-in defaultPrevented property is\n// not overwritable (#5112)\npreventDefault:function preventDefault(){eventArguments.defaultPrevented=true;},// Setting target to native events fails with clicking the\n// zoom-out button in Chrome.\ntarget:el,// If the type is not set, we're running a custom event (#2297).\n// If it is set, we're running a browser event, and setting it\n// will cause en error in IE8 (#2465).\ntype:type});}for(i=0;i<len;i++){fn=events[i];// If the event handler return false, prevent the default handler\n// from executing\nif(fn&&fn.call(el,eventArguments)===false){eventArguments.preventDefault();}}}// Run the default if not prevented\nif(defaultFunction&&!eventArguments.defaultPrevented){defaultFunction(eventArguments);}};/**\n         * An animation configuration. Animation configurations can also be defined as\n         * booleans, where `false` turns off animation and `true` defaults to a duration\n         * of 500ms.\n         * @typedef {Object} AnimationOptions\n         * @property {Number} duration - The animation duration in milliseconds.\n         * @property {String} [easing] - The name of an easing function as defined on\n         *     the `Math` object.\n         * @property {Function} [complete] - A callback function to exectute when the\n         *     animation finishes.\n         * @property {Function} [step] - A callback function to execute on each step of\n         *     each attribute or CSS property that's being animated. The first argument\n         *     contains information about the animation and progress.\n         *//**\n         * The global animate method, which uses Fx to create individual animators.\n         *\n         * @function #animate\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement|SVGElement} el - The element to animate.\n         * @param {Object} params - An object containing key-value pairs of the\n         *        properties to animate. Supports numeric as pixel-based CSS properties\n         *        for HTML objects and attributes for SVGElements.\n         * @param {AnimationOptions} [opt] - Animation options.\n         */H.animate=function(el,params,opt){var start,unit='',end,fx,args;if(!H.isObject(opt)){// Number or undefined/null\nargs=arguments;opt={duration:args[2],easing:args[3],complete:args[4]};}if(!H.isNumber(opt.duration)){opt.duration=400;}opt.easing=typeof opt.easing==='function'?opt.easing:Math[opt.easing]||Math.easeInOutSine;opt.curAnim=H.merge(params);H.objectEach(params,function(val,prop){// Stop current running animation of this property\nH.stop(el,prop);fx=new H.Fx(el,opt,prop);end=null;if(prop==='d'){fx.paths=fx.initPath(el,el.d,params.d);fx.toD=params.d;start=0;end=1;}else if(el.attr){start=el.attr(prop);}else{start=parseFloat(H.getStyle(el,prop))||0;if(prop!=='opacity'){unit='px';}}if(!end){end=val;}if(end&&end.match&&end.match('px')){end=end.replace(/px/g,'');// #4351\n}fx.run(start,end,unit);});};/**\n         * Factory to create new series prototypes.\n         *\n         * @function #seriesType\n         * @memberOf Highcharts\n         *\n         * @param {String} type - The series type name.\n         * @param {String} parent - The parent series type name. Use `line` to inherit\n         *        from the basic {@link Series} object.\n         * @param {Object} options - The additional default options that is merged with\n         *        the parent's options.\n         * @param {Object} props - The properties (functions and primitives) to set on\n         *        the new prototype.\n         * @param {Object} [pointProps] - Members for a series-specific extension of the\n         *        {@link Point} prototype if needed.\n         * @returns {*} - The newly created prototype as extended from {@link Series}\n         * or its derivatives.\n         */// docs: add to API + extending Highcharts\nH.seriesType=function(type,parent,options,props,pointProps){var defaultOptions=H.getOptions(),seriesTypes=H.seriesTypes;// Merge the options\ndefaultOptions.plotOptions[type]=H.merge(defaultOptions.plotOptions[parent],options);// Create the class\nseriesTypes[type]=H.extendClass(seriesTypes[parent]||function(){},props);seriesTypes[type].prototype.type=type;// Create the point class if needed\nif(pointProps){seriesTypes[type].prototype.pointClass=H.extendClass(H.Point,pointProps);}return seriesTypes[type];};/**\n         * Get a unique key for using in internal element id's and pointers. The key\n         * is composed of a random hash specific to this Highcharts instance, and a\n         * counter.\n         * @function #uniqueKey\n         * @memberOf Highcharts\n         * @return {string} The key.\n         * @example\n         * var id = H.uniqueKey(); // => 'highcharts-x45f6hp-0'\n         */H.uniqueKey=function(){var uniqueKeyHash=Math.random().toString(36).substring(2,9),idCounter=0;return function(){return'highcharts-'+uniqueKeyHash+'-'+idCounter++;};}();/**\n         * Register Highcharts as a plugin in jQuery\n         */if(win.jQuery){win.jQuery.fn.highcharts=function(){var args=[].slice.call(arguments);if(this[0]){// this[0] is the renderTo div\n// Create the chart\nif(args[0]){new H[// eslint-disable-line no-new\n// Constructor defaults to Chart\nH.isString(args[0])?args.shift():'Chart'](this[0],args[0],args[1]);return this;}// When called without parameters or with the return argument,\n// return an existing chart\nreturn charts[H.attr(this[0],'data-highcharts-chart')];}};}/**\n         * Compatibility section to add support for legacy IE. This can be removed if\n         * old IE support is not needed.\n         */if(doc&&!doc.defaultView){H.getStyle=function(el,prop){var val,alias={width:'clientWidth',height:'clientHeight'}[prop];if(el.style[prop]){return H.pInt(el.style[prop]);}if(prop==='opacity'){prop='filter';}// Getting the rendered width and height\nif(alias){el.style.zoom=1;return Math.max(el[alias]-2*H.getStyle(el,'padding'),0);}val=el.currentStyle[prop.replace(/\\-(\\w)/g,function(a,b){return b.toUpperCase();})];if(prop==='filter'){val=val.replace(/alpha\\(opacity=([0-9]+)\\)/,function(a,b){return b/100;});}return val===''?1:H.pInt(val);};}if(!Array.prototype.forEach){H.each=function(arr,fn,ctx){// legacy\nvar i=0,len=arr.length;for(;i<len;i++){if(fn.call(ctx,arr[i],i,arr)===false){return i;}}};}if(!Array.prototype.indexOf){H.inArray=function(item,arr){var len,i=0;if(arr){len=arr.length;for(;i<len;i++){if(arr[i]===item){return i;}}}return-1;};}if(!Array.prototype.filter){H.grep=function(elements,fn){var ret=[],i=0,length=elements.length;for(;i<length;i++){if(fn(elements[i],i)){ret.push(elements[i]);}}return ret;};}if(!Array.prototype.find){H.find=function(arr,fn){var i,length=arr.length;for(i=0;i<length;i++){if(fn(arr[i],i)){return arr[i];}}};}//--- End compatibility section ---\n})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var each=H.each,isNumber=H.isNumber,map=H.map,merge=H.merge,pInt=H.pInt;/**\n         * @typedef {string} ColorString\n         * A valid color to be parsed and handled by Highcharts. Highcharts internally\n         * supports hex colors like `#ffffff`, rgb colors like `rgb(255,255,255)` and\n         * rgba colors like `rgba(255,255,255,1)`. Other colors may be supported by the\n         * browsers and displayed correctly, but Highcharts is not able to process them\n         * and apply concepts like opacity and brightening.\n         *//**\n         * Handle color operations. The object methods are chainable.\n         * @param {String} input The input color in either rbga or hex format\n         */H.Color=function(input){// Backwards compatibility, allow instanciation without new\nif(!(this instanceof H.Color)){return new H.Color(input);}// Initialize\nthis.init(input);};H.Color.prototype={// Collection of parsers. This can be extended from the outside by pushing parsers\n// to Highcharts.Color.prototype.parsers.\nparsers:[{// RGBA color\nregex:/rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]?(?:\\.[0-9]+)?)\\s*\\)/,parse:function parse(result){return[pInt(result[1]),pInt(result[2]),pInt(result[3]),parseFloat(result[4],10)];}},{// RGB color\nregex:/rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/,parse:function parse(result){return[pInt(result[1]),pInt(result[2]),pInt(result[3]),1];}}],// Collection of named colors. Can be extended from the outside by adding\n// colors to Highcharts.Color.prototype.names.\nnames:{none:'rgba(255,255,255,0)',white:'#ffffff',black:'#000000'},/**\n             * Parse the input color to rgba array\n             * @param {String} input\n             */init:function init(input){var result,rgba,i,parser,len;this.input=input=this.names[input&&input.toLowerCase?input.toLowerCase():'']||input;// Gradients\nif(input&&input.stops){this.stops=map(input.stops,function(stop){return new H.Color(stop[1]);});// Solid colors\n}else{// Bitmasking as input[0] is not working for legacy IE.\nif(input&&input.charAt()==='#'){len=input.length;input=parseInt(input.substr(1),16);// Handle long-form, e.g. #AABBCC\nif(len===7){rgba=[(input&0xFF0000)>>16,(input&0xFF00)>>8,input&0xFF,1];// Handle short-form, e.g. #ABC\n// In short form, the value is assumed to be the same\n// for both nibbles for each component. e.g. #ABC = #AABBCC\n}else if(len===4){rgba=[(input&0xF00)>>4|(input&0xF00)>>8,(input&0xF0)>>4|input&0xF0,(input&0xF)<<4|input&0xF,1];}}// Otherwise, check regex parsers\nif(!rgba){i=this.parsers.length;while(i--&&!rgba){parser=this.parsers[i];result=parser.regex.exec(input);if(result){rgba=parser.parse(result);}}}}this.rgba=rgba||[];},/**\n             * Return the color a specified format\n             * @param {String} format\n             */get:function get(format){var input=this.input,rgba=this.rgba,ret;if(this.stops){ret=merge(input);ret.stops=[].concat(ret.stops);each(this.stops,function(stop,i){ret.stops[i]=[ret.stops[i][0],stop.get(format)];});// it's NaN if gradient colors on a column chart\n}else if(rgba&&isNumber(rgba[0])){if(format==='rgb'||!format&&rgba[3]===1){ret='rgb('+rgba[0]+','+rgba[1]+','+rgba[2]+')';}else if(format==='a'){ret=rgba[3];}else{ret='rgba('+rgba.join(',')+')';}}else{ret=input;}return ret;},/**\n             * Brighten the color\n             * @param {Number} alpha\n             */brighten:function brighten(alpha){var i,rgba=this.rgba;if(this.stops){each(this.stops,function(stop){stop.brighten(alpha);});}else if(isNumber(alpha)&&alpha!==0){for(i=0;i<3;i++){rgba[i]+=pInt(alpha*255);if(rgba[i]<0){rgba[i]=0;}if(rgba[i]>255){rgba[i]=255;}}}return this;},/**\n             * Set the color's opacity to a given alpha value\n             * @param {Number} alpha\n             */setOpacity:function setOpacity(alpha){this.rgba[3]=alpha;return this;},/*\n             * Return an intermediate color between two colors.\n             *\n             * @param  {Highcharts.Color} to\n             *         The color object to tween to.\n             * @param  {Number} pos\n             *         The intermediate position, where 0 is the from color (current\n             *         color item), and 1 is the `to` color.\n             *\n             * @return {String}\n             *         The intermediate color in rgba notation.\n             */tweenTo:function tweenTo(to,pos){// Check for has alpha, because rgba colors perform worse due to lack of\n// support in WebKit.\nvar from=this,hasAlpha,ret;// Unsupported color, return to-color (#3920)\nif(!to.rgba.length){ret=to.input||'none';// Interpolate\n}else{from=from.rgba;to=to.rgba;hasAlpha=to[3]!==1||from[3]!==1;ret=(hasAlpha?'rgba(':'rgb(')+Math.round(to[0]+(from[0]-to[0])*(1-pos))+','+Math.round(to[1]+(from[1]-to[1])*(1-pos))+','+Math.round(to[2]+(from[2]-to[2])*(1-pos))+(hasAlpha?','+(to[3]+(from[3]-to[3])*(1-pos)):'')+')';}return ret;}};H.color=function(input){return new H.Color(input);};})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var SVGElement,SVGRenderer,addEvent=H.addEvent,_animate=H.animate,attr=H.attr,charts=H.charts,color=H.color,_css=H.css,createElement=H.createElement,defined=H.defined,deg2rad=H.deg2rad,destroyObjectProperties=H.destroyObjectProperties,doc=H.doc,each=H.each,extend=H.extend,erase=H.erase,grep=H.grep,hasTouch=H.hasTouch,inArray=H.inArray,isArray=H.isArray,isFirefox=H.isFirefox,isMS=H.isMS,isObject=H.isObject,isString=H.isString,isWebKit=H.isWebKit,merge=H.merge,noop=H.noop,objectEach=H.objectEach,pick=H.pick,pInt=H.pInt,removeEvent=H.removeEvent,splat=H.splat,stop=H.stop,svg=H.svg,SVG_NS=H.SVG_NS,symbolSizes=H.symbolSizes,win=H.win;/**\n         * @typedef {Object} SVGDOMElement - An SVG DOM element.\n         *//**\n         * The SVGElement prototype is a JavaScript wrapper for SVG elements used in the\n         * rendering layer of Highcharts. Combined with the {@link\n         * Highcharts.SVGRenderer} object, these prototypes allow freeform annotation\n         * in the charts or even in HTML pages without instanciating a chart. The\n         * SVGElement can also wrap HTML labels, when `text` or `label` elements are\n         * created with the `useHTML` parameter.\n         *\n         * The SVGElement instances are created through factory functions on the\n         * {@link Highcharts.SVGRenderer} object, like\n         * [rect]{@link Highcharts.SVGRenderer#rect}, [path]{@link\n         * Highcharts.SVGRenderer#path}, [text]{@link Highcharts.SVGRenderer#text},\n         * [label]{@link Highcharts.SVGRenderer#label}, [g]{@link\n         * Highcharts.SVGRenderer#g} and more.\n         *\n         * @class Highcharts.SVGElement\n         */SVGElement=H.SVGElement=function(){return this;};extend(SVGElement.prototype,/** @lends Highcharts.SVGElement.prototype */{// Default base for animation\nopacity:1,SVG_NS:SVG_NS,/**\n             * For labels, these CSS properties are applied to the `text` node directly.\n             *\n             * @private\n             * @type {Array.<string>}\n             */textProps:['direction','fontSize','fontWeight','fontFamily','fontStyle','color','lineHeight','width','textAlign','textDecoration','textOverflow','textOutline'],/**\n             * Initialize the SVG renderer. This function only exists to make the\n             * initiation process overridable. It should not be called directly.\n             *\n             * @param  {SVGRenderer} renderer\n             *         The SVGRenderer instance to initialize to.\n             * @param  {String} nodeName\n             *         The SVG node name.\n             *\n             */init:function init(renderer,nodeName){/**\n                 * The primary DOM node. Each `SVGElement` instance wraps a main DOM\n                 * node, but may also represent more nodes.\n                 *\n                 * @name  element\n                 * @memberOf SVGElement\n                 * @type {SVGDOMNode|HTMLDOMNode}\n                 */this.element=nodeName==='span'?createElement(nodeName):doc.createElementNS(this.SVG_NS,nodeName);/**\n                 * The renderer that the SVGElement belongs to.\n                 *\n                 * @name renderer\n                 * @memberOf SVGElement\n                 * @type {SVGRenderer}\n                 */this.renderer=renderer;},/**\n             * Animate to given attributes or CSS properties.\n             *\n             * @param {SVGAttributes} params SVG attributes or CSS to animate.\n             * @param {AnimationOptions} [options] Animation options.\n             * @param {Function} [complete] Function to perform at the end of animation.\n             *\n             * @sample highcharts/members/element-on/\n             *         Setting some attributes by animation\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */animate:function animate(params,options,complete){var animOptions=H.animObject(pick(options,this.renderer.globalAnimation,true));if(animOptions.duration!==0){// allows using a callback with the global animation without\n// overwriting it\nif(complete){animOptions.complete=complete;}_animate(this,params,animOptions);}else{this.attr(params,null,complete);if(animOptions.step){animOptions.step.call(this);}}return this;},/**\n             * @typedef {Object} GradientOptions\n             * @property {Object} linearGradient Holds an object that defines the start\n             *    position and the end position relative to the shape.\n             * @property {Number} linearGradient.x1 Start horizontal position of the\n             *    gradient. Ranges 0-1.\n             * @property {Number} linearGradient.x2 End horizontal position of the\n             *    gradient. Ranges 0-1.\n             * @property {Number} linearGradient.y1 Start vertical position of the\n             *    gradient. Ranges 0-1.\n             * @property {Number} linearGradient.y2 End vertical position of the\n             *    gradient. Ranges 0-1.\n             * @property {Object} radialGradient Holds an object that defines the center\n             *    position and the radius.\n             * @property {Number} radialGradient.cx Center horizontal position relative\n             *    to the shape. Ranges 0-1.\n             * @property {Number} radialGradient.cy Center vertical position relative\n             *    to the shape. Ranges 0-1.\n             * @property {Number} radialGradient.r Radius relative to the shape. Ranges\n             *    0-1.\n             * @property {Array.<Array>} stops The first item in each tuple is the\n             *    position in the gradient, where 0 is the start of the gradient and 1\n             *    is the end of the gradient. Multiple stops can be applied. The second\n             *    item is the color for each stop. This color can also be given in the\n             *    rgba format.\n             *\n             * @example\n             * // Linear gradient used as a color option\n             * color: {\n             *     linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },\n             *         stops: [\n             *             [0, '#003399'], // start\n             *             [0.5, '#ffffff'], // middle\n             *             [1, '#3366AA'] // end\n             *         ]\n             *     }\n             * }\n             *//**\n             * Build and apply an SVG gradient out of a common JavaScript configuration\n             * object. This function is called from the attribute setters.\n             *\n             * @private\n             * @param {GradientOptions} color The gradient options structure.\n             * @param {string} prop The property to apply, can either be `fill` or\n             * `stroke`.\n             * @param {SVGDOMElement} elem SVG DOM element to apply the gradient on.\n             */colorGradient:function colorGradient(color,prop,elem){var renderer=this.renderer,colorObject,gradName,gradAttr,radAttr,gradients,gradientObject,stops,stopColor,stopOpacity,radialReference,id,key=[],value;// Apply linear or radial gradients\nif(color.radialGradient){gradName='radialGradient';}else if(color.linearGradient){gradName='linearGradient';}if(gradName){gradAttr=color[gradName];gradients=renderer.gradients;stops=color.stops;radialReference=elem.radialReference;// Keep < 2.2 kompatibility\nif(isArray(gradAttr)){color[gradName]=gradAttr={x1:gradAttr[0],y1:gradAttr[1],x2:gradAttr[2],y2:gradAttr[3],gradientUnits:'userSpaceOnUse'};}// Correct the radial gradient for the radial reference system\nif(gradName==='radialGradient'&&radialReference&&!defined(gradAttr.gradientUnits)){radAttr=gradAttr;// Save the radial attributes for updating\ngradAttr=merge(gradAttr,renderer.getRadialAttr(radialReference,radAttr),{gradientUnits:'userSpaceOnUse'});}// Build the unique key to detect whether we need to create a new\n// element (#1282)\nobjectEach(gradAttr,function(val,n){if(n!=='id'){key.push(n,val);}});objectEach(stops,function(val){key.push(val);});key=key.join(',');// Check if a gradient object with the same config object is created\n// within this renderer\nif(gradients[key]){id=gradients[key].attr('id');}else{// Set the id and create the element\ngradAttr.id=id=H.uniqueKey();gradients[key]=gradientObject=renderer.createElement(gradName).attr(gradAttr).add(renderer.defs);gradientObject.radAttr=radAttr;// The gradient needs to keep a list of stops to be able to\n// destroy them\ngradientObject.stops=[];each(stops,function(stop){var stopObject;if(stop[1].indexOf('rgba')===0){colorObject=H.color(stop[1]);stopColor=colorObject.get('rgb');stopOpacity=colorObject.get('a');}else{stopColor=stop[1];stopOpacity=1;}stopObject=renderer.createElement('stop').attr({offset:stop[0],'stop-color':stopColor,'stop-opacity':stopOpacity}).add(gradientObject);// Add the stop element to the gradient\ngradientObject.stops.push(stopObject);});}// Set the reference to the gradient object\nvalue='url('+renderer.url+'#'+id+')';elem.setAttribute(prop,value);elem.gradient=key;// Allow the color to be concatenated into tooltips formatters etc.\n// (#2995)\ncolor.toString=function(){return value;};}},/**\n             * Apply a text outline through a custom CSS property, by copying the text\n             * element and apply stroke to the copy. Used internally. Contrast checks\n             * at http://jsfiddle.net/highcharts/43soe9m1/2/ .\n             *\n             * @private\n             * @param {String} textOutline A custom CSS `text-outline` setting, defined\n             *    by `width color`.\n             * @example\n             * // Specific color\n             * text.css({\n             *    textOutline: '1px black'\n             * });\n             * // Automatic contrast\n             * text.css({\n             *    color: '#000000', // black text\n             *    textOutline: '1px contrast' // => white outline\n             * });\n             */applyTextOutline:function applyTextOutline(textOutline){var elem=this.element,tspans,tspan,hasContrast=textOutline.indexOf('contrast')!==-1,styles={},color,strokeWidth,firstRealChild,i;// When the text shadow is set to contrast, use dark stroke for light\n// text and vice versa.\nif(hasContrast){styles.textOutline=textOutline=textOutline.replace(/contrast/g,this.renderer.getContrast(elem.style.fill));}// Extract the stroke width and color\ntextOutline=textOutline.split(' ');color=textOutline[textOutline.length-1];strokeWidth=textOutline[0];if(strokeWidth&&strokeWidth!=='none'&&H.svg){this.fakeTS=true;// Fake text shadow\ntspans=[].slice.call(elem.getElementsByTagName('tspan'));// In order to get the right y position of the clone,\n// copy over the y setter\nthis.ySetter=this.xSetter;// Since the stroke is applied on center of the actual outline, we\n// need to double it to get the correct stroke-width outside the\n// glyphs.\nstrokeWidth=strokeWidth.replace(/(^[\\d\\.]+)(.*?)$/g,function(match,digit,unit){return 2*digit+unit;});// Remove shadows from previous runs. Iterate from the end to\n// support removing items inside the cycle (#6472).\ni=tspans.length;while(i--){tspan=tspans[i];if(tspan.getAttribute('class')==='highcharts-text-outline'){// Remove then erase\nerase(tspans,elem.removeChild(tspan));}}// For each of the tspans, create a stroked copy behind it.\nfirstRealChild=elem.firstChild;each(tspans,function(tspan,y){var clone;// Let the first line start at the correct X position\nif(y===0){tspan.setAttribute('x',elem.getAttribute('x'));y=elem.getAttribute('y');tspan.setAttribute('y',y||0);if(y===null){elem.setAttribute('y',0);}}// Create the clone and apply outline properties\nclone=tspan.cloneNode(1);attr(clone,{'class':'highcharts-text-outline','fill':color,'stroke':color,'stroke-width':strokeWidth,'stroke-linejoin':'round'});elem.insertBefore(clone,firstRealChild);});}},/**\n             *\n             * @typedef {Object} SVGAttributes An object of key-value pairs for SVG\n             *   attributes. Attributes in Highcharts elements for the most parts\n             *   correspond to SVG, but some are specific to Highcharts, like `zIndex`,\n             *   `rotation`, `translateX`, `translateY`, `scaleX` and `scaleY`. SVG\n             *   attributes containing a hyphen are _not_ camel-cased, they should be\n             *   quoted to preserve the hyphen.\n             * @example\n             * {\n             *     'stroke': '#ff0000', // basic\n             *     'stroke-width': 2, // hyphenated\n             *     'rotation': 45 // custom\n             *     'd': ['M', 10, 10, 'L', 30, 30, 'z'] // path definition, note format\n             * }\n             *//**\n             * Apply native and custom attributes to the SVG elements.\n             *\n             * In order to set the rotation center for rotation, set x and y to 0 and\n             * use `translateX` and `translateY` attributes to position the element\n             * instead.\n             *\n             * Attributes frequently used in Highcharts are `fill`, `stroke`,\n             * `stroke-width`.\n             *\n             * @param {SVGAttributes|String} hash - The native and custom SVG\n             *    attributes.\n             * @param {string} [val] - If the type of the first argument is `string`,\n             *    the second can be a value, which will serve as a single attribute\n             *    setter. If the first argument is a string and the second is undefined,\n             *    the function serves as a getter and the current value of the property\n             *    is returned.\n             * @param {Function} [complete] - A callback function to execute after\n             *    setting the attributes. This makes the function compliant and\n             *    interchangeable with the {@link SVGElement#animate} function.\n             * @param {boolean} [continueAnimation=true] Used internally when `.attr` is\n             *    called as part of an animation step. Otherwise, calling `.attr` for an\n             *    attribute will stop animation for that attribute.\n             *\n             * @returns {SVGElement|string|number} If used as a setter, it returns the\n             *    current {@link SVGElement} so the calls can be chained. If used as a\n             *    getter, the current value of the attribute is returned.\n             *\n             * @sample highcharts/members/renderer-rect/\n             *         Setting some attributes\n             *\n             * @example\n             * // Set multiple attributes\n             * element.attr({\n             *     stroke: 'red',\n             *     fill: 'blue',\n             *     x: 10,\n             *     y: 10\n             * });\n             *\n             * // Set a single attribute\n             * element.attr('stroke', 'red');\n             *\n             * // Get an attribute\n             * element.attr('stroke'); // => 'red'\n             *\n             */attr:function attr(hash,val,complete,continueAnimation){var key,element=this.element,hasSetSymbolSize,ret=this,skipAttr,setter;// single key-value pair\nif(typeof hash==='string'&&val!==undefined){key=hash;hash={};hash[key]=val;}// used as a getter: first argument is a string, second is undefined\nif(typeof hash==='string'){ret=(this[hash+'Getter']||this._defaultGetter).call(this,hash,element);// setter\n}else{objectEach(hash,function(val,key){skipAttr=false;// Unless .attr is from the animator update, stop current\n// running animation of this property\nif(!continueAnimation){stop(this,key);}// Special handling of symbol attributes\nif(this.symbolName&&/^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)$/.test(key)){if(!hasSetSymbolSize){this.symbolAttr(hash);hasSetSymbolSize=true;}skipAttr=true;}if(this.rotation&&(key==='x'||key==='y')){this.doTransform=true;}if(!skipAttr){setter=this[key+'Setter']||this._defaultSetter;setter.call(this,val,key,element);// Let the shadow follow the main element\nif(this.shadows&&/^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(key)){this.updateShadows(key,val,setter);}}},this);this.afterSetters();}// In accordance with animate, run a complete callback\nif(complete){complete();}return ret;},/**\n             * This method is executed in the end of `attr()`, after setting all\n             * attributes in the hash. In can be used to efficiently consolidate\n             * multiple attributes in one SVG property -- e.g., translate, rotate and\n             * scale are merged in one \"transform\" attribute in the SVG node.\n             *\n             * @private\n             */afterSetters:function afterSetters(){// Update transform. Do this outside the loop to prevent redundant\n// updating for batch setting of attributes.\nif(this.doTransform){this.updateTransform();this.doTransform=false;}},/**\n             * Update the shadow elements with new attributes.\n             *\n             * @private\n             * @param {String} key - The attribute name.\n             * @param {String|Number} value - The value of the attribute.\n             * @param {Function} setter - The setter function, inherited from the\n             *   parent wrapper\n             *\n             */updateShadows:function updateShadows(key,value,setter){var shadows=this.shadows,i=shadows.length;while(i--){setter.call(shadows[i],key==='height'?Math.max(value-(shadows[i].cutHeight||0),0):key==='d'?this.d:value,key,shadows[i]);}},/**\n             * Add a class name to an element.\n             *\n             * @param {string} className - The new class name to add.\n             * @param {boolean} [replace=false] - When true, the existing class name(s)\n             *    will be overwritten with the new one. When false, the new one is\n             *    added.\n             * @returns {SVGElement} Return the SVG element for chainability.\n             */addClass:function addClass(className,replace){var currentClassName=this.attr('class')||'';if(currentClassName.indexOf(className)===-1){if(!replace){className=(currentClassName+(currentClassName?' ':'')+className).replace('  ',' ');}this.attr('class',className);}return this;},/**\n             * Check if an element has the given class name.\n             * @param  {string} className\n             *         The class name to check for.\n             * @return {Boolean}\n             *         Whether the class name is found.\n             */hasClass:function hasClass(className){return inArray(className,(this.attr('class')||'').split(' '))!==-1;},/**\n             * Remove a class name from the element.\n             * @param  {string} className The class name to remove.\n             * @return {SVGElement} Returns the SVG element for chainability.\n             */removeClass:function removeClass(className){return this.attr('class',(this.attr('class')||'').replace(className,''));},/**\n             * If one of the symbol size affecting parameters are changed,\n             * check all the others only once for each call to an element's\n             * .attr() method\n             * @param {Object} hash - The attributes to set.\n             * @private\n             */symbolAttr:function symbolAttr(hash){var wrapper=this;each(['x','y','r','start','end','width','height','innerR','anchorX','anchorY'],function(key){wrapper[key]=pick(hash[key],wrapper[key]);});wrapper.attr({d:wrapper.renderer.symbols[wrapper.symbolName](wrapper.x,wrapper.y,wrapper.width,wrapper.height,wrapper)});},/**\n             * Apply a clipping rectangle to this element.\n             *\n             * @param {ClipRect} [clipRect] - The clipping rectangle. If skipped, the\n             *    current clip is removed.\n             * @returns {SVGElement} Returns the SVG element to allow chaining.\n             */clip:function clip(clipRect){return this.attr('clip-path',clipRect?'url('+this.renderer.url+'#'+clipRect.id+')':'none');},/**\n             * Calculate the coordinates needed for drawing a rectangle crisply and\n             * return the calculated attributes.\n             *\n             * @param {Object} rect - A rectangle.\n             * @param {number} rect.x - The x position.\n             * @param {number} rect.y - The y position.\n             * @param {number} rect.width - The width.\n             * @param {number} rect.height - The height.\n             * @param {number} [strokeWidth] - The stroke width to consider when\n             *    computing crisp positioning. It can also be set directly on the rect\n             *    parameter.\n             *\n             * @returns {{x: Number, y: Number, width: Number, height: Number}} The\n             *    modified rectangle arguments.\n             */crisp:function crisp(rect,strokeWidth){var wrapper=this,attribs={},normalizer;strokeWidth=strokeWidth||rect.strokeWidth||0;// Math.round because strokeWidth can sometimes have roundoff errors\nnormalizer=Math.round(strokeWidth)%2/2;// normalize for crisp edges\nrect.x=Math.floor(rect.x||wrapper.x||0)+normalizer;rect.y=Math.floor(rect.y||wrapper.y||0)+normalizer;rect.width=Math.floor((rect.width||wrapper.width||0)-2*normalizer);rect.height=Math.floor((rect.height||wrapper.height||0)-2*normalizer);if(defined(rect.strokeWidth)){rect.strokeWidth=strokeWidth;}objectEach(rect,function(val,key){if(wrapper[key]!==val){// only set attribute if changed\nwrapper[key]=attribs[key]=val;}});return attribs;},/**\n             * Set styles for the element. In addition to CSS styles supported by\n             * native SVG and HTML elements, there are also some custom made for\n             * Highcharts, like `width`, `ellipsis` and `textOverflow` for SVG text\n             * elements.\n             * @param {CSSObject} styles The new CSS styles.\n             * @returns {SVGElement} Return the SVG element for chaining.\n             *\n             * @sample highcharts/members/renderer-text-on-chart/\n             *         Styled text\n             */css:function css(styles){var oldStyles=this.styles,newStyles={},elem=this.element,textWidth,serializedCss='',hyphenate,hasNew=!oldStyles,// These CSS properties are interpreted internally by the SVG\n// renderer, but are not supported by SVG and should not be added to\n// the DOM. In styled mode, no CSS should find its way to the DOM\n// whatsoever (#6173, #6474).\nsvgPseudoProps=['textOutline','textOverflow','width'];// convert legacy\nif(styles&&styles.color){styles.fill=styles.color;}// Filter out existing styles to increase performance (#2640)\nif(oldStyles){objectEach(styles,function(style,n){if(style!==oldStyles[n]){newStyles[n]=style;hasNew=true;}});}if(hasNew){// Merge the new styles with the old ones\nif(oldStyles){styles=extend(oldStyles,newStyles);}// Get the text width from style\ntextWidth=this.textWidth=styles&&styles.width&&styles.width!=='auto'&&elem.nodeName.toLowerCase()==='text'&&pInt(styles.width);// store object\nthis.styles=styles;if(textWidth&&!svg&&this.renderer.forExport){delete styles.width;}// serialize and set style attribute\nif(isMS&&!svg){_css(this.element,styles);}else{hyphenate=function hyphenate(a,b){return'-'+b.toLowerCase();};objectEach(styles,function(style,n){if(inArray(n,svgPseudoProps)===-1){serializedCss+=n.replace(/([A-Z])/g,hyphenate)+':'+style+';';}});if(serializedCss){attr(elem,'style',serializedCss);// #1881\n}}if(this.added){// Rebuild text after added. Cache mechanisms in the buildText\n// will prevent building if there are no significant changes.\nif(this.element.nodeName==='text'){this.renderer.buildText(this);}// Apply text outline after added\nif(styles&&styles.textOutline){this.applyTextOutline(styles.textOutline);}}}return this;},/**\n             * Get the current stroke width. In classic mode, the setter registers it\n             * directly on the element.\n             * @returns {number} The stroke width in pixels.\n             * @ignore\n             */strokeWidth:function strokeWidth(){return this['stroke-width']||0;},/**\n             * Add an event listener. This is a simple setter that replaces all other\n             * events of the same type, opposed to the {@link Highcharts#addEvent}\n             * function.\n             * @param {string} eventType - The event type. If the type is `click`,\n             *    Highcharts will internally translate it to a `touchstart` event on\n             *    touch devices, to prevent the browser from waiting for a click event\n             *    from firing.\n             * @param {Function} handler - The handler callback.\n             * @returns {SVGElement} The SVGElement for chaining.\n             *\n             * @sample highcharts/members/element-on/\n             *         A clickable rectangle\n             */on:function on(eventType,handler){var svgElement=this,element=svgElement.element;// touch\nif(hasTouch&&eventType==='click'){element.ontouchstart=function(e){svgElement.touchEventFired=Date.now();// #2269\ne.preventDefault();handler.call(element,e);};element.onclick=function(e){if(win.navigator.userAgent.indexOf('Android')===-1||Date.now()-(svgElement.touchEventFired||0)>1100){handler.call(element,e);}};}else{// simplest possible event model for internal use\nelement['on'+eventType]=handler;}return this;},/**\n             * Set the coordinates needed to draw a consistent radial gradient across\n             * a shape regardless of positioning inside the chart. Used on pie slices\n             * to make all the slices have the same radial reference point.\n             *\n             * @param {Array} coordinates The center reference. The format is\n             *    `[centerX, centerY, diameter]` in pixels.\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */setRadialReference:function setRadialReference(coordinates){var existingGradient=this.renderer.gradients[this.element.gradient];this.element.radialReference=coordinates;// On redrawing objects with an existing gradient, the gradient needs\n// to be repositioned (#3801)\nif(existingGradient&&existingGradient.radAttr){existingGradient.animate(this.renderer.getRadialAttr(coordinates,existingGradient.radAttr));}return this;},/**\n             * Move an object and its children by x and y values.\n             *\n             * @param {number} x - The x value.\n             * @param {number} y - The y value.\n             */translate:function translate(x,y){return this.attr({translateX:x,translateY:y});},/**\n             * Invert a group, rotate and flip. This is used internally on inverted\n             * charts, where the points and graphs are drawn as if not inverted, then\n             * the series group elements are inverted.\n             *\n             * @param  {boolean} inverted\n             *         Whether to invert or not. An inverted shape can be un-inverted by\n             *         setting it to false.\n             * @return {SVGElement}\n             *         Return the SVGElement for chaining.\n             */invert:function invert(inverted){var wrapper=this;wrapper.inverted=inverted;wrapper.updateTransform();return wrapper;},/**\n             * Update the transform attribute based on internal properties. Deals with\n             * the custom `translateX`, `translateY`, `rotation`, `scaleX` and `scaleY`\n             * attributes and updates the SVG `transform` attribute.\n             * @private\n             *\n             */updateTransform:function updateTransform(){var wrapper=this,translateX=wrapper.translateX||0,translateY=wrapper.translateY||0,scaleX=wrapper.scaleX,scaleY=wrapper.scaleY,inverted=wrapper.inverted,rotation=wrapper.rotation,element=wrapper.element,transform;// Flipping affects translate as adjustment for flipping around the\n// group's axis\nif(inverted){translateX+=wrapper.width;translateY+=wrapper.height;}// Apply translate. Nearly all transformed elements have translation,\n// so instead of checking for translate = 0, do it always (#1767,\n// #1846).\ntransform=['translate('+translateX+','+translateY+')'];// apply rotation\nif(inverted){transform.push('rotate(90) scale(-1,1)');}else if(rotation){// text rotation\ntransform.push('rotate('+rotation+' '+(element.getAttribute('x')||0)+' '+(element.getAttribute('y')||0)+')');}// apply scale\nif(defined(scaleX)||defined(scaleY)){transform.push('scale('+pick(scaleX,1)+' '+pick(scaleY,1)+')');}if(transform.length){element.setAttribute('transform',transform.join(' '));}},/**\n             * Bring the element to the front. Alternatively, a new zIndex can be set.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             *\n             * @sample highcharts/members/element-tofront/\n             *         Click an element to bring it to front\n             */toFront:function toFront(){var element=this.element;element.parentNode.appendChild(element);return this;},/**\n             * Align the element relative to the chart or another box.\n             *\n             * @param {Object} [alignOptions] The alignment options. The function can be\n             *   called without this parameter in order to re-align an element after the\n             *   box has been updated.\n             * @param {string} [alignOptions.align=left] Horizontal alignment. Can be\n             *   one of `left`, `center` and `right`.\n             * @param {string} [alignOptions.verticalAlign=top] Vertical alignment. Can\n             *   be one of `top`, `middle` and `bottom`.\n             * @param {number} [alignOptions.x=0] Horizontal pixel offset from\n             *   alignment.\n             * @param {number} [alignOptions.y=0] Vertical pixel offset from alignment.\n             * @param {Boolean} [alignByTranslate=false] Use the `transform` attribute\n             *   with translateX and translateY custom attributes to align this elements\n             *   rather than `x` and `y` attributes.\n             * @param {String|Object} box The box to align to, needs a width and height.\n             *   When the box is a string, it refers to an object in the Renderer. For\n             *   example, when box is `spacingBox`, it refers to `Renderer.spacingBox`\n             *   which holds `width`, `height`, `x` and `y` properties.\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */align:function align(alignOptions,alignByTranslate,box){var align,vAlign,x,y,attribs={},alignTo,renderer=this.renderer,alignedObjects=renderer.alignedObjects,alignFactor,vAlignFactor;// First call on instanciate\nif(alignOptions){this.alignOptions=alignOptions;this.alignByTranslate=alignByTranslate;if(!box||isString(box)){// boxes other than renderer handle this internally\nthis.alignTo=alignTo=box||'renderer';erase(alignedObjects,this);// prevent duplicates, like legendGroup after resize\nalignedObjects.push(this);box=null;// reassign it below\n}// When called on resize, no arguments are supplied\n}else{alignOptions=this.alignOptions;alignByTranslate=this.alignByTranslate;alignTo=this.alignTo;}box=pick(box,renderer[alignTo],renderer);// Assign variables\nalign=alignOptions.align;vAlign=alignOptions.verticalAlign;x=(box.x||0)+(alignOptions.x||0);// default: left align\ny=(box.y||0)+(alignOptions.y||0);// default: top align\n// Align\nif(align==='right'){alignFactor=1;}else if(align==='center'){alignFactor=2;}if(alignFactor){x+=(box.width-(alignOptions.width||0))/alignFactor;}attribs[alignByTranslate?'translateX':'x']=Math.round(x);// Vertical align\nif(vAlign==='bottom'){vAlignFactor=1;}else if(vAlign==='middle'){vAlignFactor=2;}if(vAlignFactor){y+=(box.height-(alignOptions.height||0))/vAlignFactor;}attribs[alignByTranslate?'translateY':'y']=Math.round(y);// Animate only if already placed\nthis[this.placed?'animate':'attr'](attribs);this.placed=true;this.alignAttr=attribs;return this;},/**\n             * Get the bounding box (width, height, x and y) for the element. Generally\n             * used to get rendered text size. Since this is called a lot in charts,\n             * the results are cached based on text properties, in order to save DOM\n             * traffic. The returned bounding box includes the rotation, so for example\n             * a single text line of rotation 90 will report a greater height, and a\n             * width corresponding to the line-height.\n             *\n             * @param {boolean} [reload] Skip the cache and get the updated DOM bouding\n             *   box.\n             * @param {number} [rot] Override the element's rotation. This is internally\n             *   used on axis labels with a value of 0 to find out what the bounding box\n             *   would be have been if it were not rotated.\n             * @returns {Object} The bounding box with `x`, `y`, `width` and `height`\n             * properties.\n             *\n             * @sample highcharts/members/renderer-on-chart/\n             *         Draw a rectangle based on a text's bounding box\n             */getBBox:function getBBox(reload,rot){var wrapper=this,bBox,// = wrapper.bBox,\nrenderer=wrapper.renderer,width,height,rotation,rad,element=wrapper.element,styles=wrapper.styles,fontSize,textStr=wrapper.textStr,toggleTextShadowShim,cache=renderer.cache,cacheKeys=renderer.cacheKeys,cacheKey;rotation=pick(rot,wrapper.rotation);rad=rotation*deg2rad;fontSize=styles&&styles.fontSize;if(textStr!==undefined){cacheKey=textStr.toString();// Since numbers are monospaced, and numerical labels appear a lot\n// in a chart, we assume that a label of n characters has the same\n// bounding box as others of the same length. Unless there is inner\n// HTML in the label. In that case, leave the numbers as is (#5899).\nif(cacheKey.indexOf('<')===-1){cacheKey=cacheKey.replace(/[0-9]/g,'0');}// Properties that affect bounding box\ncacheKey+=['',rotation||0,fontSize,styles&&styles.width,styles&&styles.textOverflow// #5968\n].join(',');}if(cacheKey&&!reload){bBox=cache[cacheKey];}// No cache found\nif(!bBox){// SVG elements\nif(element.namespaceURI===wrapper.SVG_NS||renderer.forExport){try{// Fails in Firefox if the container has display: none.\n// When the text shadow shim is used, we need to hide the fake shadows\n// to get the correct bounding box (#3872)\ntoggleTextShadowShim=this.fakeTS&&function(display){each(element.querySelectorAll('.highcharts-text-outline'),function(tspan){tspan.style.display=display;});};// Workaround for #3842, Firefox reporting wrong bounding box for shadows\nif(toggleTextShadowShim){toggleTextShadowShim('none');}bBox=element.getBBox?// SVG: use extend because IE9 is not allowed to change width and height in case\n// of rotation (below)\nextend({},element.getBBox()):{// Legacy IE in export mode\nwidth:element.offsetWidth,height:element.offsetHeight};// #3842\nif(toggleTextShadowShim){toggleTextShadowShim('');}}catch(e){}// If the bBox is not set, the try-catch block above failed. The other condition\n// is for Opera that returns a width of -Infinity on hidden elements.\nif(!bBox||bBox.width<0){bBox={width:0,height:0};}// VML Renderer or useHTML within SVG\n}else{bBox=wrapper.htmlGetBBox();}// True SVG elements as well as HTML elements in modern browsers using the .useHTML option\n// need to compensated for rotation\nif(renderer.isSVG){width=bBox.width;height=bBox.height;// Workaround for wrong bounding box in IE, Edge and Chrome on\n// Windows. With Highcharts' default font, IE and Edge report\n// a box height of 16.899 and Chrome rounds it to 17. If this\n// stands uncorrected, it results in more padding added below\n// the text than above when adding a label border or background.\n// Also vertical positioning is affected.\n// http://jsfiddle.net/highcharts/em37nvuj/\n// (#1101, #1505, #1669, #2568, #6213).\nif(styles&&styles.fontSize==='11px'&&Math.round(height)===17){bBox.height=height=14;}// Adjust for rotated text\nif(rotation){bBox.width=Math.abs(height*Math.sin(rad))+Math.abs(width*Math.cos(rad));bBox.height=Math.abs(height*Math.cos(rad))+Math.abs(width*Math.sin(rad));}}// Cache it. When loading a chart in a hidden iframe in Firefox and IE/Edge, the\n// bounding box height is 0, so don't cache it (#5620).\nif(cacheKey&&bBox.height>0){// Rotate (#4681)\nwhile(cacheKeys.length>250){delete cache[cacheKeys.shift()];}if(!cache[cacheKey]){cacheKeys.push(cacheKey);}cache[cacheKey]=bBox;}}return bBox;},/**\n             * Show the element after it has been hidden.\n             *\n             * @param {boolean} [inherit=false] Set the visibility attribute to\n             * `inherit` rather than `visible`. The difference is that an element with\n             * `visibility=\"visible\"` will be visible even if the parent is hidden.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */show:function show(inherit){return this.attr({visibility:inherit?'inherit':'visible'});},/**\n             * Hide the element, equivalent to setting the `visibility` attribute to\n             * `hidden`.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */hide:function hide(){return this.attr({visibility:'hidden'});},/**\n             * Fade out an element by animating its opacity down to 0, and hide it on\n             * complete. Used internally for the tooltip.\n             *\n             * @param {number} [duration=150] The fade duration in milliseconds.\n             */fadeOut:function fadeOut(duration){var elemWrapper=this;elemWrapper.animate({opacity:0},{duration:duration||150,complete:function complete(){// #3088, assuming we're only using this for tooltips\nelemWrapper.attr({y:-9999});}});},/**\n             * Add the element to the DOM. All elements must be added this way.\n             *\n             * @param {SVGElement|SVGDOMElement} [parent] The parent item to add it to.\n             *   If undefined, the element is added to the {@link\n             *   Highcharts.SVGRenderer.box}.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             *\n             * @sample highcharts/members/renderer-g - Elements added to a group\n             */add:function add(parent){var renderer=this.renderer,element=this.element,inserted;if(parent){this.parentGroup=parent;}// mark as inverted\nthis.parentInverted=parent&&parent.inverted;// build formatted text\nif(this.textStr!==undefined){renderer.buildText(this);}// Mark as added\nthis.added=true;// If we're adding to renderer root, or other elements in the group\n// have a z index, we need to handle it\nif(!parent||parent.handleZ||this.zIndex){inserted=this.zIndexSetter();}// If zIndex is not handled, append at the end\nif(!inserted){(parent?parent.element:renderer.box).appendChild(element);}// fire an event for internal hooks\nif(this.onAdd){this.onAdd();}return this;},/**\n             * Removes an element from the DOM.\n             *\n             * @private\n             * @param {SVGDOMElement|HTMLDOMElement} element The DOM node to remove.\n             */safeRemoveChild:function safeRemoveChild(element){var parentNode=element.parentNode;if(parentNode){parentNode.removeChild(element);}},/**\n             * Destroy the element and element wrapper and clear up the DOM and event\n             * hooks.\n             *\n             *\n             */destroy:function destroy(){var wrapper=this,element=wrapper.element||{},parentToClean=wrapper.renderer.isSVG&&element.nodeName==='SPAN'&&wrapper.parentGroup,grandParent,ownerSVGElement=element.ownerSVGElement,i;// remove events\nelement.onclick=element.onmouseout=element.onmouseover=element.onmousemove=element.point=null;stop(wrapper);// stop running animations\nif(wrapper.clipPath&&ownerSVGElement){// Look for existing references to this clipPath and remove them\n// before destroying the element (#6196).\neach(ownerSVGElement.querySelectorAll('[clip-path]'),function(el){// Include the closing paranthesis in the test to rule out\n// id's from 10 and above (#6550)\nif(el.getAttribute('clip-path').indexOf(wrapper.clipPath.element.id+')')>-1){el.removeAttribute('clip-path');}});wrapper.clipPath=wrapper.clipPath.destroy();}// Destroy stops in case this is a gradient object\nif(wrapper.stops){for(i=0;i<wrapper.stops.length;i++){wrapper.stops[i]=wrapper.stops[i].destroy();}wrapper.stops=null;}// remove element\nwrapper.safeRemoveChild(element);wrapper.destroyShadows();// In case of useHTML, clean up empty containers emulating SVG groups\n// (#1960, #2393, #2697).\nwhile(parentToClean&&parentToClean.div&&parentToClean.div.childNodes.length===0){grandParent=parentToClean.parentGroup;wrapper.safeRemoveChild(parentToClean.div);delete parentToClean.div;parentToClean=grandParent;}// remove from alignObjects\nif(wrapper.alignTo){erase(wrapper.renderer.alignedObjects,wrapper);}objectEach(wrapper,function(val,key){delete wrapper[key];});return null;},/**\n             * @typedef {Object} ShadowOptions\n             * @property {string} [color=#000000] The shadow color.\n             * @property {number} [offsetX=1] The horizontal offset from the element.\n             * @property {number} [offsetY=1] The vertical offset from the element.\n             * @property {number} [opacity=0.15] The shadow opacity.\n             * @property {number} [width=3] The shadow width or distance from the\n             *    element.\n             *//**\n             * Add a shadow to the element. Must be called after the element is added to\n             * the DOM. In styled mode, this method is not used, instead use `defs` and\n             * filters.\n             *\n             * @param {boolean|ShadowOptions} shadowOptions The shadow options. If\n             *    `true`, the default options are applied. If `false`, the current\n             *    shadow will be removed.\n             * @param {SVGElement} [group] The SVG group element where the shadows will\n             *    be applied. The default is to add it to the same parent as the current\n             *    element. Internally, this is ised for pie slices, where all the\n             *    shadows are added to an element behind all the slices.\n             * @param {boolean} [cutOff] Used internally for column shadows.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             *\n             * @example\n             * renderer.rect(10, 100, 100, 100)\n             *     .attr({ fill: 'red' })\n             *     .shadow(true);\n             */shadow:function shadow(shadowOptions,group,cutOff){var shadows=[],i,shadow,element=this.element,strokeWidth,shadowWidth,shadowElementOpacity,// compensate for inverted plot area\ntransform;if(!shadowOptions){this.destroyShadows();}else if(!this.shadows){shadowWidth=pick(shadowOptions.width,3);shadowElementOpacity=(shadowOptions.opacity||0.15)/shadowWidth;transform=this.parentInverted?'(-1,-1)':'('+pick(shadowOptions.offsetX,1)+', '+pick(shadowOptions.offsetY,1)+')';for(i=1;i<=shadowWidth;i++){shadow=element.cloneNode(0);strokeWidth=shadowWidth*2+1-2*i;attr(shadow,{'isShadow':'true','stroke':shadowOptions.color||'#000000','stroke-opacity':shadowElementOpacity*i,'stroke-width':strokeWidth,'transform':'translate'+transform,'fill':'none'});if(cutOff){attr(shadow,'height',Math.max(attr(shadow,'height')-strokeWidth,0));shadow.cutHeight=strokeWidth;}if(group){group.element.appendChild(shadow);}else{element.parentNode.insertBefore(shadow,element);}shadows.push(shadow);}this.shadows=shadows;}return this;},/**\n             * Destroy shadows on the element.\n             * @private\n             */destroyShadows:function destroyShadows(){each(this.shadows||[],function(shadow){this.safeRemoveChild(shadow);},this);this.shadows=undefined;},xGetter:function xGetter(key){if(this.element.nodeName==='circle'){if(key==='x'){key='cx';}else if(key==='y'){key='cy';}}return this._defaultGetter(key);},/**\n             * Get the current value of an attribute or pseudo attribute, used mainly\n             * for animation. Called internally from the {@link\n             * Highcharts.SVGRenderer#attr}\n             * function.\n             *\n             * @private\n             */_defaultGetter:function _defaultGetter(key){var ret=pick(this[key],this.element?this.element.getAttribute(key):null,0);if(/^[\\-0-9\\.]+$/.test(ret)){// is numerical\nret=parseFloat(ret);}return ret;},dSetter:function dSetter(value,key,element){if(value&&value.join){// join path\nvalue=value.join(' ');}if(/(NaN| {2}|^$)/.test(value)){value='M 0 0';}// Check for cache before resetting. Resetting causes disturbance in the\n// DOM, causing flickering in some cases in Edge/IE (#6747). Also\n// possible performance gain.\nif(this[key]!==value){element.setAttribute(key,value);this[key]=value;}},dashstyleSetter:function dashstyleSetter(value){var i,strokeWidth=this['stroke-width'];// If \"inherit\", like maps in IE, assume 1 (#4981). With HC5 and the new\n// strokeWidth function, we should be able to use that instead.\nif(strokeWidth==='inherit'){strokeWidth=1;}value=value&&value.toLowerCase();if(value){value=value.replace('shortdashdotdot','3,1,1,1,1,1,').replace('shortdashdot','3,1,1,1').replace('shortdot','1,1,').replace('shortdash','3,1,').replace('longdash','8,3,').replace(/dot/g,'1,3,').replace('dash','4,3,').replace(/,$/,'').split(',');// ending comma\ni=value.length;while(i--){value[i]=pInt(value[i])*strokeWidth;}value=value.join(',').replace(/NaN/g,'none');// #3226\nthis.element.setAttribute('stroke-dasharray',value);}},alignSetter:function alignSetter(value){var convert={left:'start',center:'middle',right:'end'};this.element.setAttribute('text-anchor',convert[value]);},opacitySetter:function opacitySetter(value,key,element){this[key]=value;element.setAttribute(key,value);},titleSetter:function titleSetter(value){var titleNode=this.element.getElementsByTagName('title')[0];if(!titleNode){titleNode=doc.createElementNS(this.SVG_NS,'title');this.element.appendChild(titleNode);}// Remove text content if it exists\nif(titleNode.firstChild){titleNode.removeChild(titleNode.firstChild);}titleNode.appendChild(doc.createTextNode(String(pick(value),'').replace(/<[^>]*>/g,'')// #3276, #3895\n));},textSetter:function textSetter(value){if(value!==this.textStr){// Delete bBox memo when the text changes\ndelete this.bBox;this.textStr=value;if(this.added){this.renderer.buildText(this);}}},fillSetter:function fillSetter(value,key,element){if(typeof value==='string'){element.setAttribute(key,value);}else if(value){this.colorGradient(value,key,element);}},visibilitySetter:function visibilitySetter(value,key,element){// IE9-11 doesn't handle visibilty:inherit well, so we remove the attribute instead (#2881, #3909)\nif(value==='inherit'){element.removeAttribute(key);}else if(this[key]!==value){// #6747\nelement.setAttribute(key,value);}this[key]=value;},zIndexSetter:function zIndexSetter(value,key){var renderer=this.renderer,parentGroup=this.parentGroup,parentWrapper=parentGroup||renderer,parentNode=parentWrapper.element||renderer.box,childNodes,otherElement,otherZIndex,element=this.element,inserted,run=this.added,i;if(defined(value)){element.zIndex=value;// So we can read it for other elements in the group\nvalue=+value;if(this[key]===value){// Only update when needed (#3865)\nrun=false;}this[key]=value;}// Insert according to this and other elements' zIndex. Before .add() is called,\n// nothing is done. Then on add, or by later calls to zIndexSetter, the node\n// is placed on the right place in the DOM.\nif(run){value=this.zIndex;if(value&&parentGroup){parentGroup.handleZ=true;}childNodes=parentNode.childNodes;for(i=0;i<childNodes.length&&!inserted;i++){otherElement=childNodes[i];otherZIndex=otherElement.zIndex;if(otherElement!==element&&(// Insert before the first element with a higher zIndex\npInt(otherZIndex)>value||// If no zIndex given, insert before the first element with a zIndex\n!defined(value)&&defined(otherZIndex)||// Negative zIndex versus no zIndex:\n// On all levels except the highest. If the parent is <svg>,\n// then we don't want to put items before <desc> or <defs>\nvalue<0&&!defined(otherZIndex)&&parentNode!==renderer.box)){parentNode.insertBefore(element,otherElement);inserted=true;}}if(!inserted){parentNode.appendChild(element);}}return inserted;},_defaultSetter:function _defaultSetter(value,key,element){element.setAttribute(key,value);}});// Some shared setters and getters\nSVGElement.prototype.yGetter=SVGElement.prototype.xGetter;SVGElement.prototype.translateXSetter=SVGElement.prototype.translateYSetter=SVGElement.prototype.rotationSetter=SVGElement.prototype.verticalAlignSetter=SVGElement.prototype.scaleXSetter=SVGElement.prototype.scaleYSetter=function(value,key){this[key]=value;this.doTransform=true;};// WebKit and Batik have problems with a stroke-width of zero, so in this case we remove the\n// stroke attribute altogether. #1270, #1369, #3065, #3072.\nSVGElement.prototype['stroke-widthSetter']=SVGElement.prototype.strokeSetter=function(value,key,element){this[key]=value;// Only apply the stroke attribute if the stroke width is defined and larger than 0\nif(this.stroke&&this['stroke-width']){SVGElement.prototype.fillSetter.call(this,this.stroke,'stroke',element);// use prototype as instance may be overridden\nelement.setAttribute('stroke-width',this['stroke-width']);this.hasStroke=true;}else if(key==='stroke-width'&&value===0&&this.hasStroke){element.removeAttribute('stroke');this.hasStroke=false;}};/**\n         * Allows direct access to the Highcharts rendering layer in order to draw\n         * primitive shapes like circles, rectangles, paths or text directly on a chart,\n         * or independent from any chart. The SVGRenderer represents a wrapper object\n         * for SVGin modern browsers and through the VMLRenderer, for VML in IE < 8.\n         *\n         * An existing chart's renderer can be accessed through {@link Chart.renderer}.\n         * The renderer can also be used completely decoupled from a chart.\n         *\n         * @param {HTMLDOMElement} container - Where to put the SVG in the web page.\n         * @param {number} width - The width of the SVG.\n         * @param {number} height - The height of the SVG.\n         * @param {boolean} [forExport=false] - Whether the rendered content is intended\n         *   for export.\n         * @param {boolean} [allowHTML=true] - Whether the renderer is allowed to\n         *   include HTML text, which will be projected on top of the SVG.\n         *\n         * @example\n         * // Use directly without a chart object.\n         * var renderer = new Highcharts.Renderer(parentNode, 600, 400);\n         *\n         * @sample highcharts/members/renderer-on-chart - Annotating a chart programmatically.\n         * @sample highcharts/members/renderer-basic - Independent SVG drawing.\n         *\n         * @class Highcharts.SVGRenderer\n         */SVGRenderer=H.SVGRenderer=function(){this.init.apply(this,arguments);};extend(SVGRenderer.prototype,/** @lends Highcharts.SVGRenderer.prototype */{/**\n             * A pointer to the renderer's associated Element class. The VMLRenderer\n             * will have a pointer to VMLElement here.\n             * @type {SVGElement}\n             */Element:SVGElement,SVG_NS:SVG_NS,/**\n             * Initialize the SVGRenderer. Overridable initiator function that takes\n             * the same parameters as the constructor.\n             */init:function init(container,width,height,style,forExport,allowHTML){var renderer=this,boxWrapper,element,desc;boxWrapper=renderer.createElement('svg').attr({'version':'1.1','class':'highcharts-root'}).css(this.getStyle(style));element=boxWrapper.element;container.appendChild(element);// For browsers other than IE, add the namespace attribute (#1978)\nif(container.innerHTML.indexOf('xmlns')===-1){attr(element,'xmlns',this.SVG_NS);}// object properties\nrenderer.isSVG=true;/**\n                 * The root `svg` node of the renderer.\n                 * @name box\n                 * @memberOf SVGRenderer\n                 * @type {SVGDOMElement}\n                 */this.box=element;/**\n                 * The wrapper for the root `svg` node of the renderer.\n                 *\n                 * @name boxWrapper\n                 * @memberOf SVGRenderer\n                 * @type {SVGElement}\n                 */this.boxWrapper=boxWrapper;renderer.alignedObjects=[];/**\n                 * Page url used for internal references.\n                 * @type {string}\n                 */// #24, #672, #1070\nthis.url=(isFirefox||isWebKit)&&doc.getElementsByTagName('base').length?win.location.href.replace(/#.*?$/,'')// remove the hash\n.replace(/<[^>]*>/g,'')// wing cut HTML\n.replace(/([\\('\\)])/g,'\\\\$1')// escape parantheses and quotes\n.replace(/ /g,'%20'):// replace spaces (needed for Safari only)\n'';// Add description\ndesc=this.createElement('desc').add();desc.element.appendChild(doc.createTextNode('Created with Highcharts 5.0.14'));/**\n                 * A pointer to the `defs` node of the root SVG.\n                 * @type {SVGElement}\n                 * @name defs\n                 * @memberOf SVGRenderer\n                 */renderer.defs=this.createElement('defs').add();renderer.allowHTML=allowHTML;renderer.forExport=forExport;renderer.gradients={};// Object where gradient SvgElements are stored\nrenderer.cache={};// Cache for numerical bounding boxes\nrenderer.cacheKeys=[];renderer.imgCount=0;renderer.setSize(width,height,false);// Issue 110 workaround:\n// In Firefox, if a div is positioned by percentage, its pixel position may land\n// between pixels. The container itself doesn't display this, but an SVG element\n// inside this container will be drawn at subpixel precision. In order to draw\n// sharp lines, this must be compensated for. This doesn't seem to work inside\n// iframes though (like in jsFiddle).\nvar subPixelFix,rect;if(isFirefox&&container.getBoundingClientRect){subPixelFix=function subPixelFix(){_css(container,{left:0,top:0});rect=container.getBoundingClientRect();_css(container,{left:Math.ceil(rect.left)-rect.left+'px',top:Math.ceil(rect.top)-rect.top+'px'});};// run the fix now\nsubPixelFix();// run it on resize\nrenderer.unSubPixelFix=addEvent(win,'resize',subPixelFix);}},/**\n             * Get the global style setting for the renderer.\n             * @private\n             * @param  {CSSObject} style - Style settings.\n             * @return {CSSObject} The style settings mixed with defaults.\n             */getStyle:function getStyle(style){this.style=extend({fontFamily:'\"Lucida Grande\", \"Lucida Sans Unicode\", Arial, Helvetica, sans-serif',// default font\nfontSize:'12px'},style);return this.style;},/**\n             * Apply the global style on the renderer, mixed with the default styles.\n             *\n             * @param {CSSObject} style - CSS to apply.\n             */setStyle:function setStyle(style){this.boxWrapper.css(this.getStyle(style));},/**\n             * Detect whether the renderer is hidden. This happens when one of the\n             * parent elements has `display: none`. Used internally to detect when we\n             * needto render preliminarily in another div to get the text bounding boxes\n             * right.\n             *\n             * @returns {boolean} True if it is hidden.\n             */isHidden:function isHidden(){// #608\nreturn!this.boxWrapper.getBBox().width;},/**\n             * Destroys the renderer and its allocated members.\n             */destroy:function destroy(){var renderer=this,rendererDefs=renderer.defs;renderer.box=null;renderer.boxWrapper=renderer.boxWrapper.destroy();// Call destroy on all gradient elements\ndestroyObjectProperties(renderer.gradients||{});renderer.gradients=null;// Defs are null in VMLRenderer\n// Otherwise, destroy them here.\nif(rendererDefs){renderer.defs=rendererDefs.destroy();}// Remove sub pixel fix handler (#982)\nif(renderer.unSubPixelFix){renderer.unSubPixelFix();}renderer.alignedObjects=null;return null;},/**\n             * Create a wrapper for an SVG element. Serves as a factory for\n             * {@link SVGElement}, but this function is itself mostly called from\n             * primitive factories like {@link SVGRenderer#path}, {@link\n             * SVGRenderer#rect} or {@link SVGRenderer#text}.\n             *\n             * @param {string} nodeName - The node name, for example `rect`, `g` etc.\n             * @returns {SVGElement} The generated SVGElement.\n             */createElement:function createElement(nodeName){var wrapper=new this.Element();wrapper.init(this,nodeName);return wrapper;},/**\n             * Dummy function for plugins, called every time the renderer is updated.\n             * Prior to Highcharts 5, this was used for the canvg renderer.\n             * @function\n             */draw:noop,/**\n             * Get converted radial gradient attributes according to the radial\n             * reference. Used internally from the {@link SVGElement#colorGradient}\n             * function.\n             *\n             * @private\n             */getRadialAttr:function getRadialAttr(radialReference,gradAttr){return{cx:radialReference[0]-radialReference[2]/2+gradAttr.cx*radialReference[2],cy:radialReference[1]-radialReference[2]/2+gradAttr.cy*radialReference[2],r:gradAttr.r*radialReference[2]};},getSpanWidth:function getSpanWidth(wrapper,tspan){var renderer=this,bBox=wrapper.getBBox(true),actualWidth=bBox.width;// Old IE cannot measure the actualWidth for SVG elements (#2314)\nif(!svg&&renderer.forExport){actualWidth=renderer.measureSpanWidth(tspan.firstChild.data,wrapper.styles);}return actualWidth;},applyEllipsis:function applyEllipsis(wrapper,tspan,text,width){var renderer=this,rotation=wrapper.rotation,str=text,currentIndex,minIndex=0,maxIndex=text.length,updateTSpan=function updateTSpan(s){tspan.removeChild(tspan.firstChild);if(s){tspan.appendChild(doc.createTextNode(s));}},actualWidth,wasTooLong;wrapper.rotation=0;// discard rotation when computing box\nactualWidth=renderer.getSpanWidth(wrapper,tspan);wasTooLong=actualWidth>width;if(wasTooLong){while(minIndex<=maxIndex){currentIndex=Math.ceil((minIndex+maxIndex)/2);str=text.substring(0,currentIndex)+'\\u2026';updateTSpan(str);actualWidth=renderer.getSpanWidth(wrapper,tspan);if(minIndex===maxIndex){// Complete\nminIndex=maxIndex+1;}else if(actualWidth>width){// Too large. Set max index to current.\nmaxIndex=currentIndex-1;}else{// Within width. Set min index to current.\nminIndex=currentIndex;}}// If max index was 0 it means just ellipsis was also to large.\nif(maxIndex===0){// Remove ellipses.\nupdateTSpan('');}}wrapper.rotation=rotation;// Apply rotation again.\nreturn wasTooLong;},/**\n             * Parse a simple HTML string into SVG tspans. Called internally when text\n             *   is set on an SVGElement. The function supports a subset of HTML tags,\n             *   CSS text features like `width`, `text-overflow`, `white-space`, and\n             *   also attributes like `href` and `style`.\n             * @private\n             * @param {SVGElement} wrapper The parent SVGElement.\n             */buildText:function buildText(wrapper){var textNode=wrapper.element,renderer=this,forExport=renderer.forExport,textStr=pick(wrapper.textStr,'').toString(),hasMarkup=textStr.indexOf('<')!==-1,lines,childNodes=textNode.childNodes,clsRegex,styleRegex,hrefRegex,wasTooLong,parentX=attr(textNode,'x'),textStyles=wrapper.styles,width=wrapper.textWidth,textLineHeight=textStyles&&textStyles.lineHeight,textOutline=textStyles&&textStyles.textOutline,ellipsis=textStyles&&textStyles.textOverflow==='ellipsis',noWrap=textStyles&&textStyles.whiteSpace==='nowrap',fontSize=textStyles&&textStyles.fontSize,textCache,isSubsequentLine,i=childNodes.length,tempParent=width&&!wrapper.added&&this.box,getLineHeight=function getLineHeight(tspan){var fontSizeStyle;fontSizeStyle=/(px|em)$/.test(tspan&&tspan.style.fontSize)?tspan.style.fontSize:fontSize||renderer.style.fontSize||12;return textLineHeight?pInt(textLineHeight):renderer.fontMetrics(fontSizeStyle,// Get the computed size from parent if not explicit\ntspan.getAttribute('style')?tspan:textNode).h;},unescapeAngleBrackets=function unescapeAngleBrackets(inputStr){return inputStr.replace(/&lt;/g,'<').replace(/&gt;/g,'>');};// The buildText code is quite heavy, so if we're not changing something\n// that affects the text, skip it (#6113).\ntextCache=[textStr,ellipsis,noWrap,textLineHeight,textOutline,fontSize,width].join(',');if(textCache===wrapper.textCache){return;}wrapper.textCache=textCache;/// remove old text\nwhile(i--){textNode.removeChild(childNodes[i]);}// Skip tspans, add text directly to text node. The forceTSpan is a hook\n// used in text outline hack.\nif(!hasMarkup&&!textOutline&&!ellipsis&&!width&&textStr.indexOf(' ')===-1){textNode.appendChild(doc.createTextNode(unescapeAngleBrackets(textStr)));// Complex strings, add more logic\n}else{clsRegex=/<.*class=\"([^\"]+)\".*>/;styleRegex=/<.*style=\"([^\"]+)\".*>/;hrefRegex=/<.*href=\"([^\"]+)\".*>/;if(tempParent){tempParent.appendChild(textNode);// attach it to the DOM to read offset width\n}if(hasMarkup){lines=textStr.replace(/<(b|strong)>/g,'<span style=\"font-weight:bold\">').replace(/<(i|em)>/g,'<span style=\"font-style:italic\">').replace(/<a/g,'<span').replace(/<\\/(b|strong|i|em|a)>/g,'</span>').split(/<br.*?>/g);}else{lines=[textStr];}// Trim empty lines (#5261)\nlines=grep(lines,function(line){return line!=='';});// build the lines\neach(lines,function buildTextLines(line,lineNo){var spans,spanNo=0;line=line.replace(/^\\s+|\\s+$/g,'')// Trim to prevent useless/costly process on the spaces (#5258)\n.replace(/<span/g,'|||<span').replace(/<\\/span>/g,'</span>|||');spans=line.split('|||');each(spans,function buildTextSpans(span){if(span!==''||spans.length===1){var attributes={},tspan=doc.createElementNS(renderer.SVG_NS,'tspan'),spanCls,spanStyle;// #390\nif(clsRegex.test(span)){spanCls=span.match(clsRegex)[1];attr(tspan,'class',spanCls);}if(styleRegex.test(span)){spanStyle=span.match(styleRegex)[1].replace(/(;| |^)color([ :])/,'$1fill$2');attr(tspan,'style',spanStyle);}if(hrefRegex.test(span)&&!forExport){// Not for export - #1529\nattr(tspan,'onclick','location.href=\\\"'+span.match(hrefRegex)[1]+'\\\"');_css(tspan,{cursor:'pointer'});}span=unescapeAngleBrackets(span.replace(/<(.|\\n)*?>/g,'')||' ');// Nested tags aren't supported, and cause crash in Safari (#1596)\nif(span!==' '){// add the text node\ntspan.appendChild(doc.createTextNode(span));if(!spanNo){// first span in a line, align it to the left\nif(lineNo&&parentX!==null){attributes.x=parentX;}}else{attributes.dx=0;// #16\n}// add attributes\nattr(tspan,attributes);// Append it\ntextNode.appendChild(tspan);// first span on subsequent line, add the line height\nif(!spanNo&&isSubsequentLine){// allow getting the right offset height in exporting in IE\nif(!svg&&forExport){_css(tspan,{display:'block'});}// Set the line height based on the font size of either\n// the text element or the tspan element\nattr(tspan,'dy',getLineHeight(tspan));}/*if (width) {\n                                    \trenderer.breakText(wrapper, width);\n                                    }*/// Check width and apply soft breaks or ellipsis\nif(width){var words=span.replace(/([^\\^])-/g,'$1- ').split(' '),// #1273\nhasWhiteSpace=spans.length>1||lineNo||words.length>1&&!noWrap,tooLong,rest=[],actualWidth,dy=getLineHeight(tspan),rotation=wrapper.rotation;if(ellipsis){wasTooLong=renderer.applyEllipsis(wrapper,tspan,span,width);}while(!ellipsis&&hasWhiteSpace&&(words.length||rest.length)){wrapper.rotation=0;// discard rotation when computing box\nactualWidth=renderer.getSpanWidth(wrapper,tspan);tooLong=actualWidth>width;// For ellipsis, do a binary search for the correct string length\nif(wasTooLong===undefined){wasTooLong=tooLong;// First time\n}// Looping down, this is the first word sequence that is not too long,\n// so we can move on to build the next line.\nif(!tooLong||words.length===1){words=rest;rest=[];if(words.length&&!noWrap){tspan=doc.createElementNS(SVG_NS,'tspan');attr(tspan,{dy:dy,x:parentX});if(spanStyle){// #390\nattr(tspan,'style',spanStyle);}textNode.appendChild(tspan);}if(actualWidth>width){// a single word is pressing it out\nwidth=actualWidth;}}else{// append to existing line tspan\ntspan.removeChild(tspan.firstChild);rest.unshift(words.pop());}if(words.length){tspan.appendChild(doc.createTextNode(words.join(' ').replace(/- /g,'-')));}}wrapper.rotation=rotation;}spanNo++;}}});// To avoid beginning lines that doesn't add to the textNode (#6144)\nisSubsequentLine=isSubsequentLine||textNode.childNodes.length;});if(wasTooLong){wrapper.attr('title',wrapper.textStr);}if(tempParent){tempParent.removeChild(textNode);// attach it to the DOM to read offset width\n}// Apply the text outline\nif(textOutline&&wrapper.applyTextOutline){wrapper.applyTextOutline(textOutline);}}},/*\n            breakText: function (wrapper, width) {\n            \tvar bBox = wrapper.getBBox(),\n            \t\tnode = wrapper.element,\n            \t\ttextLength = node.textContent.length,\n            \t\tpos = Math.round(width * textLength / bBox.width), // try this position first, based on average character width\n            \t\tincrement = 0,\n            \t\tfinalPos;\n\n            \tif (bBox.width > width) {\n            \t\twhile (finalPos === undefined) {\n            \t\t\ttextLength = node.getSubStringLength(0, pos);\n\n            \t\t\tif (textLength <= width) {\n            \t\t\t\tif (increment === -1) {\n            \t\t\t\t\tfinalPos = pos;\n            \t\t\t\t} else {\n            \t\t\t\t\tincrement = 1;\n            \t\t\t\t}\n            \t\t\t} else {\n            \t\t\t\tif (increment === 1) {\n            \t\t\t\t\tfinalPos = pos - 1;\n            \t\t\t\t} else {\n            \t\t\t\t\tincrement = -1;\n            \t\t\t\t}\n            \t\t\t}\n            \t\t\tpos += increment;\n            \t\t}\n            \t}\n            \tconsole.log('width', width, 'stringWidth', node.getSubStringLength(0, finalPos))\n            },\n            *//**\n             * Returns white for dark colors and black for bright colors.\n             *\n             * @param {ColorString} rgba - The color to get the contrast for.\n             * @returns {string} The contrast color, either `#000000` or `#FFFFFF`.\n             */getContrast:function getContrast(rgba){rgba=color(rgba).rgba;// The threshold may be discussed. Here's a proposal for adding\n// different weight to the color channels (#6216)\n/*\n        rgba[0] *= 1; // red\n        rgba[1] *= 1.2; // green\n        rgba[2] *= 0.7; // blue\n        */return rgba[0]+rgba[1]+rgba[2]>2*255?'#000000':'#FFFFFF';},/**\n             * Create a button with preset states.\n             * @param {string} text - The text or HTML to draw.\n             * @param {number} x - The x position of the button's left side.\n             * @param {number} y - The y position of the button's top side.\n             * @param {Function} callback - The function to execute on button click or\n             *    touch.\n             * @param {SVGAttributes} [normalState] - SVG attributes for the normal\n             *    state.\n             * @param {SVGAttributes} [hoverState] - SVG attributes for the hover state.\n             * @param {SVGAttributes} [pressedState] - SVG attributes for the pressed\n             *    state.\n             * @param {SVGAttributes} [disabledState] - SVG attributes for the disabled\n             *    state.\n             * @param {Symbol} [shape=rect] - The shape type.\n             * @returns {SVGRenderer} The button element.\n             */button:function button(text,x,y,callback,normalState,hoverState,pressedState,disabledState,shape){var label=this.label(text,x,y,shape,null,null,null,null,'button'),curState=0;// Default, non-stylable attributes\nlabel.attr(merge({'padding':8,'r':2},normalState));// Presentational\nvar normalStyle,hoverStyle,pressedStyle,disabledStyle;// Normal state - prepare the attributes\nnormalState=merge({fill:'#f7f7f7',stroke:'#cccccc','stroke-width':1,style:{color:'#333333',cursor:'pointer',fontWeight:'normal'}},normalState);normalStyle=normalState.style;delete normalState.style;// Hover state\nhoverState=merge(normalState,{fill:'#e6e6e6'},hoverState);hoverStyle=hoverState.style;delete hoverState.style;// Pressed state\npressedState=merge(normalState,{fill:'#e6ebf5',style:{color:'#000000',fontWeight:'bold'}},pressedState);pressedStyle=pressedState.style;delete pressedState.style;// Disabled state\ndisabledState=merge(normalState,{style:{color:'#cccccc'}},disabledState);disabledStyle=disabledState.style;delete disabledState.style;// Add the events. IE9 and IE10 need mouseover and mouseout to funciton (#667).\naddEvent(label.element,isMS?'mouseover':'mouseenter',function(){if(curState!==3){label.setState(1);}});addEvent(label.element,isMS?'mouseout':'mouseleave',function(){if(curState!==3){label.setState(curState);}});label.setState=function(state){// Hover state is temporary, don't record it\nif(state!==1){label.state=curState=state;}// Update visuals\nlabel.removeClass(/highcharts-button-(normal|hover|pressed|disabled)/).addClass('highcharts-button-'+['normal','hover','pressed','disabled'][state||0]);label.attr([normalState,hoverState,pressedState,disabledState][state||0]).css([normalStyle,hoverStyle,pressedStyle,disabledStyle][state||0]);};// Presentational attributes\nlabel.attr(normalState).css(extend({cursor:'default'},normalStyle));return label.on('click',function(e){if(curState!==3){callback.call(label,e);}});},/**\n             * Make a straight line crisper by not spilling out to neighbour pixels.\n             *\n             * @param {Array} points - The original points on the format `['M', 0, 0,\n             *    'L', 100, 0]`.\n             * @param {number} width - The width of the line.\n             * @returns {Array} The original points array, but modified to render\n             * crisply.\n             */crispLine:function crispLine(points,width){// normalize to a crisp line\nif(points[1]===points[4]){// Substract due to #1129. Now bottom and left axis gridlines behave the same.\npoints[1]=points[4]=Math.round(points[1])-width%2/2;}if(points[2]===points[5]){points[2]=points[5]=Math.round(points[2])+width%2/2;}return points;},/**\n             * Draw a path, wraps the SVG `path` element.\n             *\n             * @param {Array} [path] An SVG path definition in array form.\n             *\n             * @example\n             * var path = renderer.path(['M', 10, 10, 'L', 30, 30, 'z'])\n             *     .attr({ stroke: '#ff00ff' })\n             *     .add();\n             * @returns {SVGElement} The generated wrapper element.\n             *\n             * @sample highcharts/members/renderer-path-on-chart/\n             *         Draw a path in a chart\n             * @sample highcharts/members/renderer-path/\n             *         Draw a path independent from a chart\n             *\n             *//**\n             * Draw a path, wraps the SVG `path` element.\n             *\n             * @param {SVGAttributes} [attribs] The initial attributes.\n             * @returns {SVGElement} The generated wrapper element.\n             */path:function path(_path){var attribs={fill:'none'};if(isArray(_path)){attribs.d=_path;}else if(isObject(_path)){// attributes\nextend(attribs,_path);}return this.createElement('path').attr(attribs);},/**\n             * Draw a circle, wraps the SVG `circle` element.\n             *\n             * @param {number} [x] The center x position.\n             * @param {number} [y] The center y position.\n             * @param {number} [r] The radius.\n             * @returns {SVGElement} The generated wrapper element.\n             *\n             * @sample highcharts/members/renderer-circle/ Drawing a circle\n             *//**\n             * Draw a circle, wraps the SVG `circle` element.\n             *\n             * @param {SVGAttributes} [attribs] The initial attributes.\n             * @returns {SVGElement} The generated wrapper element.\n             */circle:function circle(x,y,r){var attribs=isObject(x)?x:{x:x,y:y,r:r},wrapper=this.createElement('circle');// Setting x or y translates to cx and cy\nwrapper.xSetter=wrapper.ySetter=function(value,key,element){element.setAttribute('c'+key,value);};return wrapper.attr(attribs);},/**\n             * Draw and return an arc.\n             * @param {number} [x=0] Center X position.\n             * @param {number} [y=0] Center Y position.\n             * @param {number} [r=0] The outer radius of the arc.\n             * @param {number} [innerR=0] Inner radius like used in donut charts.\n             * @param {number} [start=0] The starting angle of the arc in radians, where\n             *    0 is to the right and `-Math.PI/2` is up.\n             * @param {number} [end=0] The ending angle of the arc in radians, where 0\n             *    is to the right and `-Math.PI/2` is up.\n             * @returns {SVGElement} The generated wrapper element.\n             *\n             * @sample highcharts/members/renderer-arc/\n             *         Drawing an arc\n             *//**\n             * Draw and return an arc. Overloaded function that takes arguments object.\n             * @param {SVGAttributes} attribs Initial SVG attributes.\n             * @returns {SVGElement} The generated wrapper element.\n             */arc:function arc(x,y,r,innerR,start,end){var arc,options;if(isObject(x)){options=x;y=options.y;r=options.r;innerR=options.innerR;start=options.start;end=options.end;x=options.x;}else{options={innerR:innerR,start:start,end:end};}// Arcs are defined as symbols for the ability to set\n// attributes in attr and animate\narc=this.symbol('arc',x,y,r,r,options);arc.r=r;// #959\nreturn arc;},/**\n             * Draw and return a rectangle.\n             * @param {number} [x] Left position.\n             * @param {number} [y] Top position.\n             * @param {number} [width] Width of the rectangle.\n             * @param {number} [height] Height of the rectangle.\n             * @param {number} [r] Border corner radius.\n             * @param {number} [strokeWidth] A stroke width can be supplied to allow\n             *    crisp drawing.\n             * @returns {SVGElement} The generated wrapper element.\n             *//**\n             * Draw and return a rectangle.\n             * @param  {SVGAttributes} [attributes]\n             *         General SVG attributes for the rectangle.\n             * @return {SVGElement}\n             *         The generated wrapper element.\n             *\n             * @sample highcharts/members/renderer-rect-on-chart/\n             *         Draw a rectangle in a chart\n             * @sample highcharts/members/renderer-rect/\n             *         Draw a rectangle independent from a chart\n             */rect:function rect(x,y,width,height,r,strokeWidth){r=isObject(x)?x.r:r;var wrapper=this.createElement('rect'),attribs=isObject(x)?x:x===undefined?{}:{x:x,y:y,width:Math.max(width,0),height:Math.max(height,0)};if(strokeWidth!==undefined){attribs.strokeWidth=strokeWidth;attribs=wrapper.crisp(attribs);}attribs.fill='none';if(r){attribs.r=r;}wrapper.rSetter=function(value,key,element){attr(element,{rx:value,ry:value});};return wrapper.attr(attribs);},/**\n             * Resize the {@link SVGRenderer#box} and re-align all aligned child\n             * elements.\n             * @param  {number} width\n             *         The new pixel width.\n             * @param  {number} height\n             *         The new pixel height.\n             * @param  {Boolean|AnimationOptions} [animate=true]\n             *         Whether and how to animate.\n             */setSize:function setSize(width,height,animate){var renderer=this,alignedObjects=renderer.alignedObjects,i=alignedObjects.length;renderer.width=width;renderer.height=height;renderer.boxWrapper.animate({width:width,height:height},{step:function step(){this.attr({viewBox:'0 0 '+this.attr('width')+' '+this.attr('height')});},duration:pick(animate,true)?undefined:0});while(i--){alignedObjects[i].align();}},/**\n             * Create and return an svg group element. Child {@link Highcharts.SVGElement}\n             * objects are added to the group by using the group as the first parameter\n             * in {@link Highcharts.SVGElement#add|add()}.\n             *\n             * @param {string} [name] The group will be given a class name of\n             * `highcharts-{name}`. This can be used for styling and scripting.\n             * @returns {SVGElement} The generated wrapper element.\n             *\n             * @sample highcharts/members/renderer-g/\n             *         Show and hide grouped objects\n             */g:function g(name){var elem=this.createElement('g');return name?elem.attr({'class':'highcharts-'+name}):elem;},/**\n             * Display an image.\n             * @param {string} src The image source.\n             * @param {number} [x] The X position.\n             * @param {number} [y] The Y position.\n             * @param {number} [width] The image width. If omitted, it defaults to the\n             *    image file width.\n             * @param {number} [height] The image height. If omitted it defaults to the\n             *    image file height.\n             * @returns {SVGElement} The generated wrapper element.\n             *\n             * @sample highcharts/members/renderer-image-on-chart/\n             *         Add an image in a chart\n             * @sample highcharts/members/renderer-image/\n             *         Add an image independent of a chart\n             */image:function image(src,x,y,width,height){var attribs={preserveAspectRatio:'none'},elemWrapper;// optional properties\nif(arguments.length>1){extend(attribs,{x:x,y:y,width:width,height:height});}elemWrapper=this.createElement('image').attr(attribs);// set the href in the xlink namespace\nif(elemWrapper.element.setAttributeNS){elemWrapper.element.setAttributeNS('http://www.w3.org/1999/xlink','href',src);}else{// could be exporting in IE\n// using href throws \"not supported\" in ie7 and under, requries regex shim to fix later\nelemWrapper.element.setAttribute('hc-svg-href',src);}return elemWrapper;},/**\n             * Draw a symbol out of pre-defined shape paths from {@link SVGRenderer#symbols}.\n             * It is used in Highcharts for point makers, which cake a `symbol` option,\n             * and label and button backgrounds like in the tooltip and stock flags.\n             *\n             * @param {Symbol} symbol - The symbol name.\n             * @param {number} x - The X coordinate for the top left position.\n             * @param {number} y - The Y coordinate for the top left position.\n             * @param {number} width - The pixel width.\n             * @param {number} height - The pixel height.\n             * @param {Object} [options] - Additional options, depending on the actual\n             *    symbol drawn.\n             * @param {number} [options.anchorX] - The anchor X position for the\n             *    `callout` symbol. This is where the chevron points to.\n             * @param {number} [options.anchorY] - The anchor Y position for the\n             *    `callout` symbol. This is where the chevron points to.\n             * @param {number} [options.end] - The end angle of an `arc` symbol.\n             * @param {boolean} [options.open] - Whether to draw `arc` symbol open or\n             *    closed.\n             * @param {number} [options.r] - The radius of an `arc` symbol, or the\n             *    border radius for the `callout` symbol.\n             * @param {number} [options.start] - The start angle of an `arc` symbol.\n             */symbol:function symbol(_symbol,x,y,width,height,options){var ren=this,obj,imageRegex=/^url\\((.*?)\\)$/,isImage=imageRegex.test(_symbol),sym=!isImage&&(this.symbols[_symbol]?_symbol:'circle'),// get the symbol definition function\nsymbolFn=sym&&this.symbols[sym],// check if there's a path defined for this symbol\npath=defined(x)&&symbolFn&&symbolFn.call(this.symbols,Math.round(x),Math.round(y),width,height,options),imageSrc,centerImage;if(symbolFn){obj=this.path(path);obj.attr('fill','none');// expando properties for use in animate and attr\nextend(obj,{symbolName:sym,x:x,y:y,width:width,height:height});if(options){extend(obj,options);}// Image symbols\n}else if(isImage){imageSrc=_symbol.match(imageRegex)[1];// Create the image synchronously, add attribs async\nobj=this.image(imageSrc);// The image width is not always the same as the symbol width. The\n// image may be centered within the symbol, as is the case when\n// image shapes are used as label backgrounds, for example in flags.\nobj.imgwidth=pick(symbolSizes[imageSrc]&&symbolSizes[imageSrc].width,options&&options.width);obj.imgheight=pick(symbolSizes[imageSrc]&&symbolSizes[imageSrc].height,options&&options.height);/**\n                     * Set the size and position\n                     */centerImage=function centerImage(){obj.attr({width:obj.width,height:obj.height});};/**\n                     * Width and height setters that take both the image's physical size\n                     * and the label size into consideration, and translates the image\n                     * to center within the label.\n                     */each(['width','height'],function(key){obj[key+'Setter']=function(value,key){var attribs={},imgSize=this['img'+key],trans=key==='width'?'translateX':'translateY';this[key]=value;if(defined(imgSize)){if(this.element){this.element.setAttribute(key,imgSize);}if(!this.alignByTranslate){attribs[trans]=((this[key]||0)-imgSize)/2;this.attr(attribs);}}};});if(defined(x)){obj.attr({x:x,y:y});}obj.isImg=true;if(defined(obj.imgwidth)&&defined(obj.imgheight)){centerImage();}else{// Initialize image to be 0 size so export will still function if there's no cached sizes.\nobj.attr({width:0,height:0});// Create a dummy JavaScript image to get the width and height. Due to a bug in IE < 8,\n// the created element must be assigned to a variable in order to load (#292).\ncreateElement('img',{onload:function onload(){var chart=charts[ren.chartIndex];// Special case for SVGs on IE11, the width is not accessible until the image is\n// part of the DOM (#2854).\nif(this.width===0){_css(this,{position:'absolute',top:'-999em'});doc.body.appendChild(this);}// Center the image\nsymbolSizes[imageSrc]={// Cache for next\nwidth:this.width,height:this.height};obj.imgwidth=this.width;obj.imgheight=this.height;if(obj.element){centerImage();}// Clean up after #2854 workaround.\nif(this.parentNode){this.parentNode.removeChild(this);}// Fire the load event when all external images are loaded\nren.imgCount--;if(!ren.imgCount&&chart&&chart.onload){chart.onload();}},src:imageSrc});this.imgCount++;}}return obj;},/**\n             * @typedef {string} Symbol\n             *\n             * Can be one of `arc`, `callout`, `circle`, `diamond`, `square`,\n             * `triangle`, `triangle-down`. Symbols are used internally for point\n             * markers, button and label borders and backgrounds, or custom shapes.\n             * Extendable by adding to {@link SVGRenderer#symbols}.\n             *//**\n             * An extendable collection of functions for defining symbol paths.\n             */symbols:{'circle':function circle(x,y,w,h){// Return a full arc\nreturn this.arc(x+w/2,y+h/2,w/2,h/2,{start:0,end:Math.PI*2,open:false});},'square':function square(x,y,w,h){return['M',x,y,'L',x+w,y,x+w,y+h,x,y+h,'Z'];},'triangle':function triangle(x,y,w,h){return['M',x+w/2,y,'L',x+w,y+h,x,y+h,'Z'];},'triangle-down':function triangleDown(x,y,w,h){return['M',x,y,'L',x+w,y,x+w/2,y+h,'Z'];},'diamond':function diamond(x,y,w,h){return['M',x+w/2,y,'L',x+w,y+h/2,x+w/2,y+h,x,y+h/2,'Z'];},'arc':function arc(x,y,w,h,options){var start=options.start,rx=options.r||w,ry=options.r||h||w,proximity=0.001,fullCircle=Math.abs(options.end-options.start-2*Math.PI)<proximity,// Substract a small number to prevent cos and sin of start and\n// end from becoming equal on 360 arcs (related: #1561)\nend=options.end-proximity,innerRadius=options.innerR,open=pick(options.open,fullCircle),cosStart=Math.cos(start),sinStart=Math.sin(start),cosEnd=Math.cos(end),sinEnd=Math.sin(end),// Proximity takes care of rounding errors around PI (#6971)\nlongArc=options.end-start-Math.PI<proximity?0:1,arc;arc=['M',x+rx*cosStart,y+ry*sinStart,'A',// arcTo\nrx,// x radius\nry,// y radius\n0,// slanting\nlongArc,// long or short arc\n1,// clockwise\nx+rx*cosEnd,y+ry*sinEnd];if(defined(innerRadius)){arc.push(open?'M':'L',x+innerRadius*cosEnd,y+innerRadius*sinEnd,'A',// arcTo\ninnerRadius,// x radius\ninnerRadius,// y radius\n0,// slanting\nlongArc,// long or short arc\n0,// clockwise\nx+innerRadius*cosStart,y+innerRadius*sinStart);}arc.push(open?'':'Z');// close\nreturn arc;},/**\n                 * Callout shape used for default tooltips, also used for rounded rectangles in VML\n                 */callout:function callout(x,y,w,h,options){var arrowLength=6,halfDistance=6,r=Math.min(options&&options.r||0,w,h),safeDistance=r+halfDistance,anchorX=options&&options.anchorX,anchorY=options&&options.anchorY,path;path=['M',x+r,y,'L',x+w-r,y,// top side\n'C',x+w,y,x+w,y,x+w,y+r,// top-right corner\n'L',x+w,y+h-r,// right side\n'C',x+w,y+h,x+w,y+h,x+w-r,y+h,// bottom-right corner\n'L',x+r,y+h,// bottom side\n'C',x,y+h,x,y+h,x,y+h-r,// bottom-left corner\n'L',x,y+r,// left side\n'C',x,y,x,y,x+r,y// top-left corner\n];// Anchor on right side\nif(anchorX&&anchorX>w){// Chevron\nif(anchorY>y+safeDistance&&anchorY<y+h-safeDistance){path.splice(13,3,'L',x+w,anchorY-halfDistance,x+w+arrowLength,anchorY,x+w,anchorY+halfDistance,x+w,y+h-r);// Simple connector\n}else{path.splice(13,3,'L',x+w,h/2,anchorX,anchorY,x+w,h/2,x+w,y+h-r);}// Anchor on left side\n}else if(anchorX&&anchorX<0){// Chevron\nif(anchorY>y+safeDistance&&anchorY<y+h-safeDistance){path.splice(33,3,'L',x,anchorY+halfDistance,x-arrowLength,anchorY,x,anchorY-halfDistance,x,y+r);// Simple connector\n}else{path.splice(33,3,'L',x,h/2,anchorX,anchorY,x,h/2,x,y+r);}}else if(anchorY&&anchorY>h&&anchorX>x+safeDistance&&anchorX<x+w-safeDistance){// replace bottom\npath.splice(23,3,'L',anchorX+halfDistance,y+h,anchorX,y+h+arrowLength,anchorX-halfDistance,y+h,x+r,y+h);}else if(anchorY&&anchorY<0&&anchorX>x+safeDistance&&anchorX<x+w-safeDistance){// replace top\npath.splice(3,3,'L',anchorX-halfDistance,y,anchorX,y-arrowLength,anchorX+halfDistance,y,w-r,y);}return path;}},/**\n             * @typedef {SVGElement} ClipRect - A clipping rectangle that can be applied\n             * to one or more {@link SVGElement} instances. It is instanciated with the\n             * {@link SVGRenderer#clipRect} function and applied with the {@link\n             * SVGElement#clip} function.\n             *\n             * @example\n             * var circle = renderer.circle(100, 100, 100)\n             *     .attr({ fill: 'red' })\n             *     .add();\n             * var clipRect = renderer.clipRect(100, 100, 100, 100);\n             *\n             * // Leave only the lower right quarter visible\n             * circle.clip(clipRect);\n             *//**\n             * Define a clipping rectangle. The clipping rectangle is later applied\n             * to {@link SVGElement} objects through the {@link SVGElement#clip}\n             * function.\n             *\n             * @param {String} id\n             * @param {number} x\n             * @param {number} y\n             * @param {number} width\n             * @param {number} height\n             * @returns {ClipRect} A clipping rectangle.\n             *\n             * @example\n             * var circle = renderer.circle(100, 100, 100)\n             *     .attr({ fill: 'red' })\n             *     .add();\n             * var clipRect = renderer.clipRect(100, 100, 100, 100);\n             *\n             * // Leave only the lower right quarter visible\n             * circle.clip(clipRect);\n             */clipRect:function clipRect(x,y,width,height){var wrapper,id=H.uniqueKey(),clipPath=this.createElement('clipPath').attr({id:id}).add(this.defs);wrapper=this.rect(x,y,width,height,0).add(clipPath);wrapper.id=id;wrapper.clipPath=clipPath;wrapper.count=0;return wrapper;},/**\n             * Draw text. The text can contain a subset of HTML, like spans and anchors\n             * and some basic text styling of these. For more advanced features like\n             * border and background, use {@link Highcharts.SVGRenderer#label} instead.\n             * To update the text after render, run `text.attr({ text: 'New text' })`.\n             * @param  {String} str\n             *         The text of (subset) HTML to draw.\n             * @param  {number} x\n             *         The x position of the text's lower left corner.\n             * @param  {number} y\n             *         The y position of the text's lower left corner.\n             * @param  {Boolean} [useHTML=false]\n             *         Use HTML to render the text.\n             *\n             * @return {SVGElement} The text object.\n             *\n             * @sample highcharts/members/renderer-text-on-chart/\n             *         Annotate the chart freely\n             * @sample highcharts/members/renderer-on-chart/\n             *         Annotate with a border and in response to the data\n             * @sample highcharts/members/renderer-text/\n             *         Formatted text\n             */text:function text(str,x,y,useHTML){// declare variables\nvar renderer=this,fakeSVG=!svg&&renderer.forExport,wrapper,attribs={};if(useHTML&&(renderer.allowHTML||!renderer.forExport)){return renderer.html(str,x,y);}attribs.x=Math.round(x||0);// X is always needed for line-wrap logic\nif(y){attribs.y=Math.round(y);}if(str||str===0){attribs.text=str;}wrapper=renderer.createElement('text').attr(attribs);// Prevent wrapping from creating false offsetWidths in export in legacy IE (#1079, #1063)\nif(fakeSVG){wrapper.css({position:'absolute'});}if(!useHTML){wrapper.xSetter=function(value,key,element){var tspans=element.getElementsByTagName('tspan'),tspan,parentVal=element.getAttribute(key),i;for(i=0;i<tspans.length;i++){tspan=tspans[i];// If the x values are equal, the tspan represents a linebreak\nif(tspan.getAttribute(key)===parentVal){tspan.setAttribute(key,value);}}element.setAttribute(key,value);};}return wrapper;},/**\n             * Utility to return the baseline offset and total line height from the font\n             * size.\n             *\n             * @param {?string} fontSize The current font size to inspect. If not given,\n             *   the font size will be found from the DOM element.\n             * @param {SVGElement|SVGDOMElement} [elem] The element to inspect for a\n             *   current font size.\n             * @returns {Object} An object containing `h`: the line height, `b`: the\n             * baseline relative to the top of the box, and `f`: the font size.\n             */fontMetrics:function fontMetrics(fontSize,elem){var lineHeight,baseline;fontSize=fontSize||// When the elem is a DOM element (#5932)\nelem&&elem.style&&elem.style.fontSize||// Fall back on the renderer style default\nthis.style&&this.style.fontSize;// Handle different units\nif(/px/.test(fontSize)){fontSize=pInt(fontSize);}else if(/em/.test(fontSize)){// The em unit depends on parent items\nfontSize=parseFloat(fontSize)*(elem?this.fontMetrics(null,elem.parentNode).f:16);}else{fontSize=12;}// Empirical values found by comparing font size and bounding box\n// height. Applies to the default font family.\n// http://jsfiddle.net/highcharts/7xvn7/\nlineHeight=fontSize<24?fontSize+3:Math.round(fontSize*1.2);baseline=Math.round(lineHeight*0.8);return{h:lineHeight,b:baseline,f:fontSize};},/**\n             * Correct X and Y positioning of a label for rotation (#1764).\n             *\n             * @private\n             */rotCorr:function rotCorr(baseline,rotation,alterY){var y=baseline;if(rotation&&alterY){y=Math.max(y*Math.cos(rotation*deg2rad),4);}return{x:-baseline/3*Math.sin(rotation*deg2rad),y:y};},/**\n             * Draw a label, which is an extended text element with support for border\n             * and background. Highcharts creates a `g` element with a text and a `path`\n             * or `rect` inside, to make it behave somewhat like a HTML div. Border and\n             * background are set through `stroke`, `stroke-width` and `fill` attributes\n             * using the {@link Highcharts.SVGElement#attr|attr} method. To update the\n             * text after render, run `label.attr({ text: 'New text' })`.\n             *\n             * @param  {string} str\n             *         The initial text string or (subset) HTML to render.\n             * @param  {number} x\n             *         The x position of the label's left side.\n             * @param  {number} y\n             *         The y position of the label's top side or baseline, depending on\n             *         the `baseline` parameter.\n             * @param  {String} shape\n             *         The shape of the label's border/background, if any. Defaults to\n             *         `rect`. Other possible values are `callout` or other shapes\n             *         defined in {@link Highcharts.SVGRenderer#symbols}.\n             * @param  {number} anchorX\n             *         In case the `shape` has a pointer, like a flag, this is the\n             *         coordinates it should be pinned to.\n             * @param  {number} anchorY\n             *         In case the `shape` has a pointer, like a flag, this is the\n             *         coordinates it should be pinned to.\n             * @param  {Boolean} baseline\n             *         Whether to position the label relative to the text baseline,\n             *\t       like {@link Highcharts.SVGRenderer#text|renderer.text}, or to the\n             *\t       upper border of the rectangle.\n             * @param  {String} className\n             *         Class name for the group.\n             *\n             * @return {SVGElement}\n             *         The generated label.\n             *\n             * @sample highcharts/members/renderer-label-on-chart/\n             *         A label on the chart\n             */label:function label(str,x,y,shape,anchorX,anchorY,useHTML,baseline,className){var renderer=this,wrapper=renderer.g(className!=='button'&&'label'),text=wrapper.text=renderer.text('',0,0,useHTML).attr({zIndex:1}),box,bBox,alignFactor=0,padding=3,paddingLeft=0,width,height,wrapperX,wrapperY,textAlign,deferredAttr={},strokeWidth,baselineOffset,hasBGImage=/^url\\((.*?)\\)$/.test(shape),needsBox=hasBGImage,getCrispAdjust,updateBoxSize,updateTextPadding,boxAttr;if(className){wrapper.addClass('highcharts-'+className);}needsBox=hasBGImage;getCrispAdjust=function getCrispAdjust(){return(strokeWidth||0)%2/2;};/**\n                 * This function runs after the label is added to the DOM (when the bounding box is\n                 * available), and after the text of the label is updated to detect the new bounding\n                 * box and reflect it in the border box.\n                 */updateBoxSize=function updateBoxSize(){var style=text.element.style,crispAdjust,attribs={};bBox=(width===undefined||height===undefined||textAlign)&&defined(text.textStr)&&text.getBBox();//#3295 && 3514 box failure when string equals 0\nwrapper.width=(width||bBox.width||0)+2*padding+paddingLeft;wrapper.height=(height||bBox.height||0)+2*padding;// Update the label-scoped y offset\nbaselineOffset=padding+renderer.fontMetrics(style&&style.fontSize,text).b;if(needsBox){// Create the border box if it is not already present\nif(!box){wrapper.box=box=renderer.symbols[shape]||hasBGImage?// Symbol definition exists (#5324)\nrenderer.symbol(shape):renderer.rect();box.addClass((className==='button'?'':'highcharts-label-box')+(// Don't use label className for buttons\nclassName?' highcharts-'+className+'-box':''));box.add(wrapper);crispAdjust=getCrispAdjust();attribs.x=crispAdjust;attribs.y=(baseline?-baselineOffset:0)+crispAdjust;}// Apply the box attributes\nattribs.width=Math.round(wrapper.width);attribs.height=Math.round(wrapper.height);box.attr(extend(attribs,deferredAttr));deferredAttr={};}};/**\n                 * This function runs after setting text or padding, but only if padding is changed\n                 */updateTextPadding=function updateTextPadding(){var textX=paddingLeft+padding,textY;// determin y based on the baseline\ntextY=baseline?0:baselineOffset;// compensate for alignment\nif(defined(width)&&bBox&&(textAlign==='center'||textAlign==='right')){textX+={center:0.5,right:1}[textAlign]*(width-bBox.width);}// update if anything changed\nif(textX!==text.x||textY!==text.y){text.attr('x',textX);if(textY!==undefined){text.attr('y',textY);}}// record current values\ntext.x=textX;text.y=textY;};/**\n                 * Set a box attribute, or defer it if the box is not yet created\n                 * @param {Object} key\n                 * @param {Object} value\n                 */boxAttr=function boxAttr(key,value){if(box){box.attr(key,value);}else{deferredAttr[key]=value;}};/**\n                 * After the text element is added, get the desired size of the border box\n                 * and add it before the text in the DOM.\n                 */wrapper.onAdd=function(){text.add(wrapper);wrapper.attr({text:str||str===0?str:'',// alignment is available now // #3295: 0 not rendered if given as a value\nx:x,y:y});if(box&&defined(anchorX)){wrapper.attr({anchorX:anchorX,anchorY:anchorY});}};/*\n                 * Add specific attribute setters.\n                 */// only change local variables\nwrapper.widthSetter=function(value){width=H.isNumber(value)?value:null;// width:auto => null\n};wrapper.heightSetter=function(value){height=value;};wrapper['text-alignSetter']=function(value){textAlign=value;};wrapper.paddingSetter=function(value){if(defined(value)&&value!==padding){padding=wrapper.padding=value;updateTextPadding();}};wrapper.paddingLeftSetter=function(value){if(defined(value)&&value!==paddingLeft){paddingLeft=value;updateTextPadding();}};// change local variable and prevent setting attribute on the group\nwrapper.alignSetter=function(value){value={left:0,center:0.5,right:1}[value];if(value!==alignFactor){alignFactor=value;if(bBox){// Bounding box exists, means we're dynamically changing\nwrapper.attr({x:wrapperX});// #5134\n}}};// apply these to the box and the text alike\nwrapper.textSetter=function(value){if(value!==undefined){text.textSetter(value);}updateBoxSize();updateTextPadding();};// apply these to the box but not to the text\nwrapper['stroke-widthSetter']=function(value,key){if(value){needsBox=true;}strokeWidth=this['stroke-width']=value;boxAttr(key,value);};wrapper.strokeSetter=wrapper.fillSetter=wrapper.rSetter=function(value,key){if(key!=='r'){if(key==='fill'&&value){needsBox=true;}// for animation getter (#6776)\nwrapper[key]=value;}boxAttr(key,value);};wrapper.anchorXSetter=function(value,key){anchorX=wrapper.anchorX=value;boxAttr(key,Math.round(value)-getCrispAdjust()-wrapperX);};wrapper.anchorYSetter=function(value,key){anchorY=wrapper.anchorY=value;boxAttr(key,value-wrapperY);};// rename attributes\nwrapper.xSetter=function(value){wrapper.x=value;// for animation getter\nif(alignFactor){value-=alignFactor*((width||bBox.width)+2*padding);}wrapperX=Math.round(value);wrapper.attr('translateX',wrapperX);};wrapper.ySetter=function(value){wrapperY=wrapper.y=Math.round(value);wrapper.attr('translateY',wrapperY);};// Redirect certain methods to either the box or the text\nvar baseCss=wrapper.css;return extend(wrapper,{/**\n                     * Pick up some properties and apply them to the text instead of the\n                     * wrapper.\n                     * @ignore\n                     */css:function css(styles){if(styles){var textStyles={};styles=merge(styles);// create a copy to avoid altering the original object (#537)\neach(wrapper.textProps,function(prop){if(styles[prop]!==undefined){textStyles[prop]=styles[prop];delete styles[prop];}});text.css(textStyles);}return baseCss.call(wrapper,styles);},/**\n                     * Return the bounding box of the box, not the group.\n                     * @ignore\n                     */getBBox:function getBBox(){return{width:bBox.width+2*padding,height:bBox.height+2*padding,x:bBox.x-padding,y:bBox.y-padding};},/**\n                     * Apply the shadow to the box.\n                     * @ignore\n                     */shadow:function shadow(b){if(b){updateBoxSize();if(box){box.shadow(b);}}return wrapper;},/**\n                     * Destroy and release memory.\n                     * @ignore\n                     */destroy:function destroy(){// Added by button implementation\nremoveEvent(wrapper.element,'mouseenter');removeEvent(wrapper.element,'mouseleave');if(text){text=text.destroy();}if(box){box=box.destroy();}// Call base implementation to destroy the rest\nSVGElement.prototype.destroy.call(wrapper);// Release local pointers (#1298)\nwrapper=renderer=updateBoxSize=updateTextPadding=boxAttr=null;}});}});// end SVGRenderer\n// general renderer\nH.Renderer=SVGRenderer;})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         *//* eslint max-len: [\"warn\", 80, 4] */var attr=H.attr,createElement=H.createElement,css=H.css,defined=H.defined,each=H.each,extend=H.extend,isFirefox=H.isFirefox,isMS=H.isMS,isWebKit=H.isWebKit,pInt=H.pInt,SVGElement=H.SVGElement,SVGRenderer=H.SVGRenderer,win=H.win,wrap=H.wrap;// Extend SvgElement for useHTML option\nextend(SVGElement.prototype,/** @lends SVGElement.prototype */{/**\n             * Apply CSS to HTML elements. This is used in text within SVG rendering and\n             * by the VML renderer\n             */htmlCss:function htmlCss(styles){var wrapper=this,element=wrapper.element,textWidth=styles&&element.tagName==='SPAN'&&styles.width;if(textWidth){delete styles.width;wrapper.textWidth=textWidth;wrapper.updateTransform();}if(styles&&styles.textOverflow==='ellipsis'){styles.whiteSpace='nowrap';styles.overflow='hidden';}wrapper.styles=extend(wrapper.styles,styles);css(wrapper.element,styles);return wrapper;},/**\n             * VML and useHTML method for calculating the bounding box based on offsets\n             * @param {Boolean} refresh Whether to force a fresh value from the DOM or\n             * to use the cached value.\n             *\n             * @return {Object} A hash containing values for x, y, width and height\n             */htmlGetBBox:function htmlGetBBox(){var wrapper=this,element=wrapper.element;// faking getBBox in exported SVG in legacy IE (is this a duplicate of\n// the fix for #1079?)\nif(element.nodeName==='text'){element.style.position='absolute';}return{x:element.offsetLeft,y:element.offsetTop,width:element.offsetWidth,height:element.offsetHeight};},/**\n             * VML override private method to update elements based on internal\n             * properties based on SVG transform\n             */htmlUpdateTransform:function htmlUpdateTransform(){// aligning non added elements is expensive\nif(!this.added){this.alignOnAdd=true;return;}var wrapper=this,renderer=wrapper.renderer,elem=wrapper.element,translateX=wrapper.translateX||0,translateY=wrapper.translateY||0,x=wrapper.x||0,y=wrapper.y||0,align=wrapper.textAlign||'left',alignCorrection={left:0,center:0.5,right:1}[align],styles=wrapper.styles;// apply translate\ncss(elem,{marginLeft:translateX,marginTop:translateY});if(wrapper.shadows){// used in labels/tooltip\neach(wrapper.shadows,function(shadow){css(shadow,{marginLeft:translateX+1,marginTop:translateY+1});});}// apply inversion\nif(wrapper.inverted){// wrapper is a group\neach(elem.childNodes,function(child){renderer.invertChild(child,elem);});}if(elem.tagName==='SPAN'){var rotation=wrapper.rotation,baseline,textWidth=pInt(wrapper.textWidth),whiteSpace=styles&&styles.whiteSpace,currentTextTransform=[rotation,align,elem.innerHTML,wrapper.textWidth,wrapper.textAlign].join(',');// Do the calculations and DOM access only if properties changed\nif(currentTextTransform!==wrapper.cTT){baseline=renderer.fontMetrics(elem.style.fontSize).b;// Renderer specific handling of span rotation\nif(defined(rotation)){wrapper.setSpanRotation(rotation,alignCorrection,baseline);}// Reset multiline/ellipsis in order to read width (#4928,\n// #5417)\ncss(elem,{width:'',whiteSpace:whiteSpace||'nowrap'});// Update textWidth\nif(elem.offsetWidth>textWidth&&/[ \\-]/.test(elem.textContent||elem.innerText)){// #983, #1254\ncss(elem,{width:textWidth+'px',display:'block',whiteSpace:whiteSpace||'normal'// #3331\n});}wrapper.getSpanCorrection(elem.offsetWidth,baseline,alignCorrection,rotation,align);}// apply position with correction\ncss(elem,{left:x+(wrapper.xCorr||0)+'px',top:y+(wrapper.yCorr||0)+'px'});// Force reflow in webkit to apply the left and top on useHTML\n// element (#1249)\nif(isWebKit){// Assigned to baseline for lint purpose\nbaseline=elem.offsetHeight;}// record current text transform\nwrapper.cTT=currentTextTransform;}},/**\n             * Set the rotation of an individual HTML span\n             */setSpanRotation:function setSpanRotation(rotation,alignCorrection,baseline){var rotationStyle={},cssTransformKey=isMS?'-ms-transform':isWebKit?'-webkit-transform':isFirefox?'MozTransform':win.opera?'-o-transform':'';rotationStyle[cssTransformKey]=rotationStyle.transform='rotate('+rotation+'deg)';rotationStyle[cssTransformKey+(isFirefox?'Origin':'-origin')]=rotationStyle.transformOrigin=alignCorrection*100+'% '+baseline+'px';css(this.element,rotationStyle);},/**\n             * Get the correction in X and Y positioning as the element is rotated.\n             */getSpanCorrection:function getSpanCorrection(width,baseline,alignCorrection){this.xCorr=-width*alignCorrection;this.yCorr=-baseline;}});// Extend SvgRenderer for useHTML option.\nextend(SVGRenderer.prototype,/** @lends SVGRenderer.prototype */{/**\n             * Create HTML text node. This is used by the VML renderer as well as the\n             * SVG renderer through the useHTML option.\n             *\n             * @param {String} str\n             * @param {Number} x\n             * @param {Number} y\n             */html:function html(str,x,y){var wrapper=this.createElement('span'),element=wrapper.element,renderer=wrapper.renderer,isSVG=renderer.isSVG,addSetters=function addSetters(element,style){// These properties are set as attributes on the SVG group, and\n// as identical CSS properties on the div. (#3542)\neach(['opacity','visibility'],function(prop){wrap(element,prop+'Setter',function(proceed,value,key,elem){proceed.call(this,value,key,elem);style[key]=value;});});};// Text setter\nwrapper.textSetter=function(value){if(value!==element.innerHTML){delete this.bBox;}element.innerHTML=this.textStr=value;wrapper.htmlUpdateTransform();};// Add setters for the element itself (#4938)\nif(isSVG){// #4938, only for HTML within SVG\naddSetters(wrapper,wrapper.element.style);}// Various setters which rely on update transform\nwrapper.xSetter=wrapper.ySetter=wrapper.alignSetter=wrapper.rotationSetter=function(value,key){if(key==='align'){// Do not overwrite the SVGElement.align method. Same as VML.\nkey='textAlign';}wrapper[key]=value;wrapper.htmlUpdateTransform();};// Set the default attributes\nwrapper.attr({text:str,x:Math.round(x),y:Math.round(y)}).css({fontFamily:this.style.fontFamily,fontSize:this.style.fontSize,position:'absolute'});// Keep the whiteSpace style outside the wrapper.styles collection\nelement.style.whiteSpace='nowrap';// Use the HTML specific .css method\nwrapper.css=wrapper.htmlCss;// This is specific for HTML within SVG\nif(isSVG){wrapper.add=function(svgGroupWrapper){var htmlGroup,container=renderer.box.parentNode,parentGroup,parents=[];this.parentGroup=svgGroupWrapper;// Create a mock group to hold the HTML elements\nif(svgGroupWrapper){htmlGroup=svgGroupWrapper.div;if(!htmlGroup){// Read the parent chain into an array and read from top\n// down\nparentGroup=svgGroupWrapper;while(parentGroup){parents.push(parentGroup);// Move up to the next parent group\nparentGroup=parentGroup.parentGroup;}// Ensure dynamically updating position when any parent\n// is translated\neach(parents.reverse(),function(parentGroup){var htmlGroupStyle,cls=attr(parentGroup.element,'class');if(cls){cls={className:cls};}// else null\n// Create a HTML div and append it to the parent div\n// to emulate the SVG group structure\nhtmlGroup=parentGroup.div=parentGroup.div||createElement('div',cls,{position:'absolute',left:(parentGroup.translateX||0)+'px',top:(parentGroup.translateY||0)+'px',display:parentGroup.display,opacity:parentGroup.opacity,// #5075\npointerEvents:parentGroup.styles&&parentGroup.styles.pointerEvents// #5595\n// the top group is appended to container\n},htmlGroup||container);// Shortcut\nhtmlGroupStyle=htmlGroup.style;// Set listeners to update the HTML div's position\n// whenever the SVG group position is changed.\nextend(parentGroup,{classSetter:function classSetter(value){this.element.setAttribute('class',value);htmlGroup.className=value;},on:function on(){if(parents[0].div){// #6418\nwrapper.on.apply({element:parents[0].div},arguments);}return parentGroup;},translateXSetter:function translateXSetter(value,key){htmlGroupStyle.left=value+'px';parentGroup[key]=value;parentGroup.doTransform=true;},translateYSetter:function translateYSetter(value,key){htmlGroupStyle.top=value+'px';parentGroup[key]=value;parentGroup.doTransform=true;}});addSetters(parentGroup,htmlGroupStyle);});}}else{htmlGroup=container;}htmlGroup.appendChild(element);// Shared with VML:\nwrapper.added=true;if(wrapper.alignOnAdd){wrapper.htmlUpdateTransform();}return wrapper;};}return wrapper;}});})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var VMLRenderer,VMLRendererExtension,VMLElement,createElement=H.createElement,css=H.css,defined=H.defined,deg2rad=H.deg2rad,discardElement=H.discardElement,doc=H.doc,each=H.each,erase=H.erase,extend=H.extend,extendClass=H.extendClass,isArray=H.isArray,isNumber=H.isNumber,isObject=H.isObject,merge=H.merge,noop=H.noop,pick=H.pick,pInt=H.pInt,svg=H.svg,SVGElement=H.SVGElement,SVGRenderer=H.SVGRenderer,win=H.win;/* ****************************************************************************\n         *                                                                            *\n         * START OF INTERNET EXPLORER <= 8 SPECIFIC CODE                              *\n         *                                                                            *\n         * For applications and websites that don't need IE support, like platform    *\n         * targeted mobile apps and web apps, this code can be removed.               *\n         *                                                                            *\n         *****************************************************************************//**\n         * @constructor\n         */if(!svg){/**\n             * The VML element wrapper.\n             */VMLElement={docMode8:doc&&doc.documentMode===8,/**\n                 * Initialize a new VML element wrapper. It builds the markup as a string\n                 * to minimize DOM traffic.\n                 * @param {Object} renderer\n                 * @param {Object} nodeName\n                 */init:function init(renderer,nodeName){var wrapper=this,markup=['<',nodeName,' filled=\"f\" stroked=\"f\"'],style=['position: ','absolute',';'],isDiv=nodeName==='div';// divs and shapes need size\nif(nodeName==='shape'||isDiv){style.push('left:0;top:0;width:1px;height:1px;');}style.push('visibility: ',isDiv?'hidden':'visible');markup.push(' style=\"',style.join(''),'\"/>');// create element with default attributes and style\nif(nodeName){markup=isDiv||nodeName==='span'||nodeName==='img'?markup.join(''):renderer.prepVML(markup);wrapper.element=createElement(markup);}wrapper.renderer=renderer;},/**\n                 * Add the node to the given parent\n                 * @param {Object} parent\n                 */add:function add(parent){var wrapper=this,renderer=wrapper.renderer,element=wrapper.element,box=renderer.box,inverted=parent&&parent.inverted,// get the parent node\nparentNode=parent?parent.element||parent:box;if(parent){this.parentGroup=parent;}// if the parent group is inverted, apply inversion on all children\nif(inverted){// only on groups\nrenderer.invertChild(element,parentNode);}// append it\nparentNode.appendChild(element);// align text after adding to be able to read offset\nwrapper.added=true;if(wrapper.alignOnAdd&&!wrapper.deferUpdateTransform){wrapper.updateTransform();}// fire an event for internal hooks\nif(wrapper.onAdd){wrapper.onAdd();}// IE8 Standards can't set the class name before the element is appended\nif(this.className){this.attr('class',this.className);}return wrapper;},/**\n                 * VML always uses htmlUpdateTransform\n                 */updateTransform:SVGElement.prototype.htmlUpdateTransform,/**\n                 * Set the rotation of a span with oldIE's filter\n                 */setSpanRotation:function setSpanRotation(){// Adjust for alignment and rotation. Rotation of useHTML content is not yet implemented\n// but it can probably be implemented for Firefox 3.5+ on user request. FF3.5+\n// has support for CSS3 transform. The getBBox method also needs to be updated\n// to compensate for the rotation, like it currently does for SVG.\n// Test case: http://jsfiddle.net/highcharts/Ybt44/\nvar rotation=this.rotation,costheta=Math.cos(rotation*deg2rad),sintheta=Math.sin(rotation*deg2rad);css(this.element,{filter:rotation?['progid:DXImageTransform.Microsoft.Matrix(M11=',costheta,', M12=',-sintheta,', M21=',sintheta,', M22=',costheta,', sizingMethod=\\'auto expand\\')'].join(''):'none'});},/**\n                 * Get the positioning correction for the span after rotating.\n                 */getSpanCorrection:function getSpanCorrection(width,baseline,alignCorrection,rotation,align){var costheta=rotation?Math.cos(rotation*deg2rad):1,sintheta=rotation?Math.sin(rotation*deg2rad):0,height=pick(this.elemHeight,this.element.offsetHeight),quad,nonLeft=align&&align!=='left';// correct x and y\nthis.xCorr=costheta<0&&-width;this.yCorr=sintheta<0&&-height;// correct for baseline and corners spilling out after rotation\nquad=costheta*sintheta<0;this.xCorr+=sintheta*baseline*(quad?1-alignCorrection:alignCorrection);this.yCorr-=costheta*baseline*(rotation?quad?alignCorrection:1-alignCorrection:1);// correct for the length/height of the text\nif(nonLeft){this.xCorr-=width*alignCorrection*(costheta<0?-1:1);if(rotation){this.yCorr-=height*alignCorrection*(sintheta<0?-1:1);}css(this.element,{textAlign:align});}},/**\n                 * Converts a subset of an SVG path definition to its VML counterpart. Takes an array\n                 * as the parameter and returns a string.\n                 */pathToVML:function pathToVML(value){// convert paths\nvar i=value.length,path=[];while(i--){// Multiply by 10 to allow subpixel precision.\n// Substracting half a pixel seems to make the coordinates\n// align with SVG, but this hasn't been tested thoroughly\nif(isNumber(value[i])){path[i]=Math.round(value[i]*10)-5;}else if(value[i]==='Z'){// close the path\npath[i]='x';}else{path[i]=value[i];// When the start X and end X coordinates of an arc are too close,\n// they are rounded to the same value above. In this case, substract or\n// add 1 from the end X and Y positions. #186, #760, #1371, #1410.\nif(value.isArc&&(value[i]==='wa'||value[i]==='at')){// Start and end X\nif(path[i+5]===path[i+7]){path[i+7]+=value[i+7]>value[i+5]?1:-1;}// Start and end Y\nif(path[i+6]===path[i+8]){path[i+8]+=value[i+8]>value[i+6]?1:-1;}}}}// Loop up again to handle path shortcuts (#2132)\n/*while (i++ < path.length) {\n                    \tif (path[i] === 'H') { // horizontal line to\n                    \t\tpath[i] = 'L';\n                    \t\tpath.splice(i + 2, 0, path[i - 1]);\n                    \t} else if (path[i] === 'V') { // vertical line to\n                    \t\tpath[i] = 'L';\n                    \t\tpath.splice(i + 1, 0, path[i - 2]);\n                    \t}\n                    }*/return path.join(' ')||'x';},/**\n                 * Set the element's clipping to a predefined rectangle\n                 *\n                 * @param {String} id The id of the clip rectangle\n                 */clip:function clip(clipRect){var wrapper=this,clipMembers,cssRet;if(clipRect){clipMembers=clipRect.members;erase(clipMembers,wrapper);// Ensure unique list of elements (#1258)\nclipMembers.push(wrapper);wrapper.destroyClip=function(){erase(clipMembers,wrapper);};cssRet=clipRect.getCSS(wrapper);}else{if(wrapper.destroyClip){wrapper.destroyClip();}cssRet={clip:wrapper.docMode8?'inherit':'rect(auto)'};// #1214\n}return wrapper.css(cssRet);},/**\n                 * Set styles for the element\n                 * @param {Object} styles\n                 */css:SVGElement.prototype.htmlCss,/**\n                 * Removes a child either by removeChild or move to garbageBin.\n                 * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.\n                 */safeRemoveChild:function safeRemoveChild(element){// discardElement will detach the node from its parent before attaching it\n// to the garbage bin. Therefore it is important that the node is attached and have parent.\nif(element.parentNode){discardElement(element);}},/**\n                 * Extend element.destroy by removing it from the clip members array\n                 */destroy:function destroy(){if(this.destroyClip){this.destroyClip();}return SVGElement.prototype.destroy.apply(this);},/**\n                 * Add an event listener. VML override for normalizing event parameters.\n                 * @param {String} eventType\n                 * @param {Function} handler\n                 */on:function on(eventType,handler){// simplest possible event model for internal use\nthis.element['on'+eventType]=function(){var evt=win.event;evt.target=evt.srcElement;handler(evt);};return this;},/**\n                 * In stacked columns, cut off the shadows so that they don't overlap\n                 */cutOffPath:function cutOffPath(path,length){var len;path=path.split(/[ ,]/);// The extra comma tricks the trailing comma remover in \"gulp scripts\" task\nlen=path.length;if(len===9||len===11){path[len-4]=path[len-2]=pInt(path[len-2])-10*length;}return path.join(' ');},/**\n                 * Apply a drop shadow by copying elements and giving them different strokes\n                 * @param {Boolean|Object} shadowOptions\n                 */shadow:function shadow(shadowOptions,group,cutOff){var shadows=[],i,element=this.element,renderer=this.renderer,shadow,elemStyle=element.style,markup,path=element.path,strokeWidth,modifiedPath,shadowWidth,shadowElementOpacity;// some times empty paths are not strings\nif(path&&typeof path.value!=='string'){path='x';}modifiedPath=path;if(shadowOptions){shadowWidth=pick(shadowOptions.width,3);shadowElementOpacity=(shadowOptions.opacity||0.15)/shadowWidth;for(i=1;i<=3;i++){strokeWidth=shadowWidth*2+1-2*i;// Cut off shadows for stacked column items\nif(cutOff){modifiedPath=this.cutOffPath(path.value,strokeWidth+0.5);}markup=['<shape isShadow=\"true\" strokeweight=\"',strokeWidth,'\" filled=\"false\" path=\"',modifiedPath,'\" coordsize=\"10 10\" style=\"',element.style.cssText,'\" />'];shadow=createElement(renderer.prepVML(markup),null,{left:pInt(elemStyle.left)+pick(shadowOptions.offsetX,1),top:pInt(elemStyle.top)+pick(shadowOptions.offsetY,1)});if(cutOff){shadow.cutOff=strokeWidth+1;}// apply the opacity\nmarkup=['<stroke color=\"',shadowOptions.color||'#000000','\" opacity=\"',shadowElementOpacity*i,'\"/>'];createElement(renderer.prepVML(markup),null,null,shadow);// insert it\nif(group){group.element.appendChild(shadow);}else{element.parentNode.insertBefore(shadow,element);}// record it\nshadows.push(shadow);}this.shadows=shadows;}return this;},updateShadows:noop,// Used in SVG only\nsetAttr:function setAttr(key,value){if(this.docMode8){// IE8 setAttribute bug\nthis.element[key]=value;}else{this.element.setAttribute(key,value);}},classSetter:function classSetter(value){// IE8 Standards mode has problems retrieving the className unless set like this.\n// IE8 Standards can't set the class name before the element is appended.\n(this.added?this.element:this).className=value;},dashstyleSetter:function dashstyleSetter(value,key,element){var strokeElem=element.getElementsByTagName('stroke')[0]||createElement(this.renderer.prepVML(['<stroke/>']),null,null,element);strokeElem[key]=value||'solid';this[key]=value;/* because changing stroke-width will change the dash length\n\t\t\t\tand cause an epileptic effect */},dSetter:function dSetter(value,key,element){var i,shadows=this.shadows;value=value||[];this.d=value.join&&value.join(' ');// used in getter for animation\nelement.path=value=this.pathToVML(value);// update shadows\nif(shadows){i=shadows.length;while(i--){shadows[i].path=shadows[i].cutOff?this.cutOffPath(value,shadows[i].cutOff):value;}}this.setAttr(key,value);},fillSetter:function fillSetter(value,key,element){var nodeName=element.nodeName;if(nodeName==='SPAN'){// text color\nelement.style.color=value;}else if(nodeName!=='IMG'){// #1336\nelement.filled=value!=='none';this.setAttr('fillcolor',this.renderer.color(value,element,key,this));}},'fill-opacitySetter':function fillOpacitySetter(value,key,element){createElement(this.renderer.prepVML(['<',key.split('-')[0],' opacity=\"',value,'\"/>']),null,null,element);},opacitySetter:noop,// Don't bother - animation is too slow and filters introduce artifacts\nrotationSetter:function rotationSetter(value,key,element){var style=element.style;this[key]=style[key]=value;// style is for #1873\n// Correction for the 1x1 size of the shape container. Used in gauge needles.\nstyle.left=-Math.round(Math.sin(value*deg2rad)+1)+'px';style.top=Math.round(Math.cos(value*deg2rad))+'px';},strokeSetter:function strokeSetter(value,key,element){this.setAttr('strokecolor',this.renderer.color(value,element,key,this));},'stroke-widthSetter':function strokeWidthSetter(value,key,element){element.stroked=!!value;// VML \"stroked\" attribute\nthis[key]=value;// used in getter, issue #113\nif(isNumber(value)){value+='px';}this.setAttr('strokeweight',value);},titleSetter:function titleSetter(value,key){this.setAttr(key,value);},visibilitySetter:function visibilitySetter(value,key,element){// Handle inherited visibility\nif(value==='inherit'){value='visible';}// Let the shadow follow the main element\nif(this.shadows){each(this.shadows,function(shadow){shadow.style[key]=value;});}// Instead of toggling the visibility CSS property, move the div out of the viewport.\n// This works around #61 and #586\nif(element.nodeName==='DIV'){value=value==='hidden'?'-999em':0;// In order to redraw, IE7 needs the div to be visible when tucked away\n// outside the viewport. So the visibility is actually opposite of\n// the expected value. This applies to the tooltip only.\nif(!this.docMode8){element.style[key]=value?'visible':'hidden';}key='top';}element.style[key]=value;},xSetter:function xSetter(value,key,element){this[key]=value;// used in getter\nif(key==='x'){key='left';}else if(key==='y'){key='top';}/* else {\n                    \t\t\t\tvalue = Math.max(0, value); // don't set width or height below zero (#311)\n                    \t\t\t}*/// clipping rectangle special\nif(this.updateClipping){this[key]=value;// the key is now 'left' or 'top' for 'x' and 'y'\nthis.updateClipping();}else{// normal\nelement.style[key]=value;}},zIndexSetter:function zIndexSetter(value,key,element){element.style[key]=value;}};VMLElement['stroke-opacitySetter']=VMLElement['fill-opacitySetter'];H.VMLElement=VMLElement=extendClass(SVGElement,VMLElement);// Some shared setters\nVMLElement.prototype.ySetter=VMLElement.prototype.widthSetter=VMLElement.prototype.heightSetter=VMLElement.prototype.xSetter;/**\n             * The VML renderer\n             */VMLRendererExtension={// inherit SVGRenderer\nElement:VMLElement,isIE8:win.navigator.userAgent.indexOf('MSIE 8.0')>-1,/**\n                 * Initialize the VMLRenderer\n                 * @param {Object} container\n                 * @param {Number} width\n                 * @param {Number} height\n                 */init:function init(container,width,height){var renderer=this,boxWrapper,box,css;renderer.alignedObjects=[];boxWrapper=renderer.createElement('div').css({position:'relative'});box=boxWrapper.element;container.appendChild(boxWrapper.element);// generate the containing box\nrenderer.isVML=true;renderer.box=box;renderer.boxWrapper=boxWrapper;renderer.gradients={};renderer.cache={};// Cache for numerical bounding boxes\nrenderer.cacheKeys=[];renderer.imgCount=0;renderer.setSize(width,height,false);// The only way to make IE6 and IE7 print is to use a global namespace. However,\n// with IE8 the only way to make the dynamic shapes visible in screen and print mode\n// seems to be to add the xmlns attribute and the behaviour style inline.\nif(!doc.namespaces.hcv){doc.namespaces.add('hcv','urn:schemas-microsoft-com:vml');// Setup default CSS (#2153, #2368, #2384)\ncss='hcv\\\\:fill, hcv\\\\:path, hcv\\\\:shape, hcv\\\\:stroke'+'{ behavior:url(#default#VML); display: inline-block; } ';try{doc.createStyleSheet().cssText=css;}catch(e){doc.styleSheets[0].cssText+=css;}}},/**\n                 * Detect whether the renderer is hidden. This happens when one of the parent elements\n                 * has display: none\n                 */isHidden:function isHidden(){return!this.box.offsetWidth;},/**\n                 * Define a clipping rectangle. In VML it is accomplished by storing the values\n                 * for setting the CSS style to all associated members.\n                 *\n                 * @param {Number} x\n                 * @param {Number} y\n                 * @param {Number} width\n                 * @param {Number} height\n                 */clipRect:function clipRect(x,y,width,height){// create a dummy element\nvar clipRect=this.createElement(),isObj=isObject(x);// mimic a rectangle with its style object for automatic updating in attr\nreturn extend(clipRect,{members:[],count:0,left:(isObj?x.x:x)+1,top:(isObj?x.y:y)+1,width:(isObj?x.width:width)-1,height:(isObj?x.height:height)-1,getCSS:function getCSS(wrapper){var element=wrapper.element,nodeName=element.nodeName,isShape=nodeName==='shape',inverted=wrapper.inverted,rect=this,top=rect.top-(isShape?element.offsetTop:0),left=rect.left,right=left+rect.width,bottom=top+rect.height,ret={clip:'rect('+Math.round(inverted?left:top)+'px,'+Math.round(inverted?bottom:right)+'px,'+Math.round(inverted?right:bottom)+'px,'+Math.round(inverted?top:left)+'px)'};// issue 74 workaround\nif(!inverted&&wrapper.docMode8&&nodeName==='DIV'){extend(ret,{width:right+'px',height:bottom+'px'});}return ret;},// used in attr and animation to update the clipping of all members\nupdateClipping:function updateClipping(){each(clipRect.members,function(member){// Member.element is falsy on deleted series, like in\n// stock/members/series-remove demo. Should be removed\n// from members, but this will do.\nif(member.element){member.css(clipRect.getCSS(member));}});}});},/**\n                 * Take a color and return it if it's a string, make it a gradient if it's a\n                 * gradient configuration object, and apply opacity.\n                 *\n                 * @param {Object} color The color or config object\n                 */color:function color(_color,elem,prop,wrapper){var renderer=this,colorObject,regexRgba=/^rgba/,markup,fillType,ret='none';// Check for linear or radial gradient\nif(_color&&_color.linearGradient){fillType='gradient';}else if(_color&&_color.radialGradient){fillType='pattern';}if(fillType){var stopColor,stopOpacity,gradient=_color.linearGradient||_color.radialGradient,x1,y1,x2,y2,opacity1,opacity2,color1,color2,fillAttr='',stops=_color.stops,firstStop,lastStop,colors=[],addFillNode=function addFillNode(){// Add the fill subnode. When colors attribute is used, the meanings of opacity and o:opacity2\n// are reversed.\nmarkup=['<fill colors=\"'+colors.join(',')+'\" opacity=\"',opacity2,'\" o:opacity2=\"',opacity1,'\" type=\"',fillType,'\" ',fillAttr,'focus=\"100%\" method=\"any\" />'];createElement(renderer.prepVML(markup),null,null,elem);};// Extend from 0 to 1\nfirstStop=stops[0];lastStop=stops[stops.length-1];if(firstStop[0]>0){stops.unshift([0,firstStop[1]]);}if(lastStop[0]<1){stops.push([1,lastStop[1]]);}// Compute the stops\neach(stops,function(stop,i){if(regexRgba.test(stop[1])){colorObject=H.color(stop[1]);stopColor=colorObject.get('rgb');stopOpacity=colorObject.get('a');}else{stopColor=stop[1];stopOpacity=1;}// Build the color attribute\ncolors.push(stop[0]*100+'% '+stopColor);// Only start and end opacities are allowed, so we use the first and the last\nif(!i){opacity1=stopOpacity;color2=stopColor;}else{opacity2=stopOpacity;color1=stopColor;}});// Apply the gradient to fills only.\nif(prop==='fill'){// Handle linear gradient angle\nif(fillType==='gradient'){x1=gradient.x1||gradient[0]||0;y1=gradient.y1||gradient[1]||0;x2=gradient.x2||gradient[2]||0;y2=gradient.y2||gradient[3]||0;fillAttr='angle=\"'+(90-Math.atan((y2-y1)/(// y vector\nx2-x1)// x vector\n)*180/Math.PI)+'\"';addFillNode();// Radial (circular) gradient\n}else{var r=gradient.r,sizex=r*2,sizey=r*2,cx=gradient.cx,cy=gradient.cy,radialReference=elem.radialReference,bBox,applyRadialGradient=function applyRadialGradient(){if(radialReference){bBox=wrapper.getBBox();cx+=(radialReference[0]-bBox.x)/bBox.width-0.5;cy+=(radialReference[1]-bBox.y)/bBox.height-0.5;sizex*=radialReference[2]/bBox.width;sizey*=radialReference[2]/bBox.height;}fillAttr='src=\"'+H.getOptions().global.VMLRadialGradientURL+'\" '+'size=\"'+sizex+','+sizey+'\" '+'origin=\"0.5,0.5\" '+'position=\"'+cx+','+cy+'\" '+'color2=\"'+color2+'\" ';addFillNode();};// Apply radial gradient\nif(wrapper.added){applyRadialGradient();}else{// We need to know the bounding box to get the size and position right\nwrapper.onAdd=applyRadialGradient;}// The fill element's color attribute is broken in IE8 standards mode, so we\n// need to set the parent shape's fillcolor attribute instead.\nret=color1;}// Gradients are not supported for VML stroke, return the first color. #722.\n}else{ret=stopColor;}// If the color is an rgba color, split it and add a fill node\n// to hold the opacity component\n}else if(regexRgba.test(_color)&&elem.tagName!=='IMG'){colorObject=H.color(_color);wrapper[prop+'-opacitySetter'](colorObject.get('a'),prop,elem);ret=colorObject.get('rgb');}else{var propNodes=elem.getElementsByTagName(prop);// 'stroke' or 'fill' node\nif(propNodes.length){propNodes[0].opacity=1;propNodes[0].type='solid';}ret=_color;}return ret;},/**\n                 * Take a VML string and prepare it for either IE8 or IE6/IE7.\n                 * @param {Array} markup A string array of the VML markup to prepare\n                 */prepVML:function prepVML(markup){var vmlStyle='display:inline-block;behavior:url(#default#VML);',isIE8=this.isIE8;markup=markup.join('');if(isIE8){// add xmlns and style inline\nmarkup=markup.replace('/>',' xmlns=\"urn:schemas-microsoft-com:vml\" />');if(markup.indexOf('style=\"')===-1){markup=markup.replace('/>',' style=\"'+vmlStyle+'\" />');}else{markup=markup.replace('style=\"','style=\"'+vmlStyle);}}else{// add namespace\nmarkup=markup.replace('<','<hcv:');}return markup;},/**\n                 * Create rotated and aligned text\n                 * @param {String} str\n                 * @param {Number} x\n                 * @param {Number} y\n                 */text:SVGRenderer.prototype.html,/**\n                 * Create and return a path element\n                 * @param {Array} path\n                 */path:function path(_path2){var attr={// subpixel precision down to 0.1 (width and height = 1px)\ncoordsize:'10 10'};if(isArray(_path2)){attr.d=_path2;}else if(isObject(_path2)){// attributes\nextend(attr,_path2);}// create the shape\nreturn this.createElement('shape').attr(attr);},/**\n                 * Create and return a circle element. In VML circles are implemented as\n                 * shapes, which is faster than v:oval\n                 * @param {Number} x\n                 * @param {Number} y\n                 * @param {Number} r\n                 */circle:function circle(x,y,r){var circle=this.symbol('circle');if(isObject(x)){r=x.r;y=x.y;x=x.x;}circle.isCircle=true;// Causes x and y to mean center (#1682)\ncircle.r=r;return circle.attr({x:x,y:y});},/**\n                 * Create a group using an outer div and an inner v:group to allow rotating\n                 * and flipping. A simple v:group would have problems with positioning\n                 * child HTML elements and CSS clip.\n                 *\n                 * @param {String} name The name of the group\n                 */g:function g(name){var wrapper,attribs;// set the class name\nif(name){attribs={'className':'highcharts-'+name,'class':'highcharts-'+name};}// the div to hold HTML and clipping\nwrapper=this.createElement('div').attr(attribs);return wrapper;},/**\n                 * VML override to create a regular HTML image\n                 * @param {String} src\n                 * @param {Number} x\n                 * @param {Number} y\n                 * @param {Number} width\n                 * @param {Number} height\n                 */image:function image(src,x,y,width,height){var obj=this.createElement('img').attr({src:src});if(arguments.length>1){obj.attr({x:x,y:y,width:width,height:height});}return obj;},/**\n                 * For rectangles, VML uses a shape for rect to overcome bugs and rotation problems\n                 */createElement:function createElement(nodeName){return nodeName==='rect'?this.symbol(nodeName):SVGRenderer.prototype.createElement.call(this,nodeName);},/**\n                 * In the VML renderer, each child of an inverted div (group) is inverted\n                 * @param {Object} element\n                 * @param {Object} parentNode\n                 */invertChild:function invertChild(element,parentNode){var ren=this,parentStyle=parentNode.style,imgStyle=element.tagName==='IMG'&&element.style;// #1111\ncss(element,{flip:'x',left:pInt(parentStyle.width)-(imgStyle?pInt(imgStyle.top):1),top:pInt(parentStyle.height)-(imgStyle?pInt(imgStyle.left):1),rotation:-90});// Recursively invert child elements, needed for nested composite\n// shapes like box plots and error bars. #1680, #1806.\neach(element.childNodes,function(child){ren.invertChild(child,element);});},/**\n                 * Symbol definitions that override the parent SVG renderer's symbols\n                 *\n                 */symbols:{// VML specific arc function\narc:function arc(x,y,w,h,options){var start=options.start,end=options.end,radius=options.r||w||h,innerRadius=options.innerR,cosStart=Math.cos(start),sinStart=Math.sin(start),cosEnd=Math.cos(end),sinEnd=Math.sin(end),ret;if(end-start===0){// no angle, don't show it.\nreturn['x'];}ret=['wa',// clockwise arc to\nx-radius,// left\ny-radius,// top\nx+radius,// right\ny+radius,// bottom\nx+radius*cosStart,// start x\ny+radius*sinStart,// start y\nx+radius*cosEnd,// end x\ny+radius*sinEnd// end y\n];if(options.open&&!innerRadius){ret.push('e','M',x,// - innerRadius,\ny// - innerRadius\n);}ret.push('at',// anti clockwise arc to\nx-innerRadius,// left\ny-innerRadius,// top\nx+innerRadius,// right\ny+innerRadius,// bottom\nx+innerRadius*cosEnd,// start x\ny+innerRadius*sinEnd,// start y\nx+innerRadius*cosStart,// end x\ny+innerRadius*sinStart,// end y\n'x',// finish path\n'e'// close\n);ret.isArc=true;return ret;},// Add circle symbol path. This performs significantly faster than v:oval.\ncircle:function circle(x,y,w,h,wrapper){if(wrapper&&defined(wrapper.r)){w=h=2*wrapper.r;}// Center correction, #1682\nif(wrapper&&wrapper.isCircle){x-=w/2;y-=h/2;}// Return the path\nreturn['wa',// clockwisearcto\nx,// left\ny,// top\nx+w,// right\ny+h,// bottom\nx+w,// start x\ny+h/2,// start y\nx+w,// end x\ny+h/2,// end y\n//'x', // finish path\n'e'// close\n];},/**\n                     * Add rectangle symbol path which eases rotation and omits arcsize problems\n                     * compared to the built-in VML roundrect shape. When borders are not rounded,\n                     * use the simpler square path, else use the callout path without the arrow.\n                     */rect:function rect(x,y,w,h,options){return SVGRenderer.prototype.symbols[!defined(options)||!options.r?'square':'callout'].call(0,x,y,w,h,options);}}};H.VMLRenderer=VMLRenderer=function VMLRenderer(){this.init.apply(this,arguments);};VMLRenderer.prototype=merge(SVGRenderer.prototype,VMLRendererExtension);// general renderer\nH.Renderer=VMLRenderer;}// This method is used with exporting in old IE, when emulating SVG (see #2314)\nSVGRenderer.prototype.measureSpanWidth=function(text,styles){var measuringSpan=doc.createElement('span'),offsetWidth,textNode=doc.createTextNode(text);measuringSpan.appendChild(textNode);css(measuringSpan,styles);this.box.appendChild(measuringSpan);offsetWidth=measuringSpan.offsetWidth;discardElement(measuringSpan);// #2463\nreturn offsetWidth;};/* ****************************************************************************\n         *                                                                            *\n         * END OF INTERNET EXPLORER <= 8 SPECIFIC CODE                                *\n         *                                                                            *\n         *****************************************************************************/})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var color=H.color,each=H.each,getTZOffset=H.getTZOffset,isTouchDevice=H.isTouchDevice,merge=H.merge,pick=H.pick,svg=H.svg,win=H.win;/* ****************************************************************************\n         * Handle the options                                                         *\n         *****************************************************************************//**\n         * @optionparent\n         */H.defaultOptions={/**\n             * An array containing the default colors for the chart's series. When\n             * all colors are used, new colors are pulled from the start again.\n             *\n             * Default colors can also be set on a series or series.type basis,\n             * see [column.colors](#plotOptions.column.colors), [pie.colors](#plotOptions.\n             * pie.colors).\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the colors option doesn't exist. Instead, colors\n             * are defined in CSS and applied either through series or point class\n             * names, or through the [chart.colorCount](#chart.colorCount) option.\n             *\n             *\n             * ### Legacy\n             *\n             * In Highcharts 3.x, the default colors were:\n             *\n             * <pre>colors: ['#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce',\n             *\n             * '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a']</pre>\n             *\n             * In Highcharts 2.x, the default colors were:\n             *\n             * <pre>colors: ['#4572A7', '#AA4643', '#89A54E', '#80699B', '#3D96AE',\n             *\n             *    '#DB843D', '#92A8CD', '#A47D7C', '#B5CA92']</pre>\n             *\n             * @type {Array<Color>}\n             * @sample {highcharts} highcharts/chart/colors/ Assign a global color theme\n             * @default [ \"#7cb5ec\" , \"#434348\" , \"#90ed7d\" , \"#f7a35c\" , \"#8085e9\" ,\n             *          \"#f15c80\" , \"#e4d354\" , \"#2b908f\" , \"#f45b5b\" , \"#91e8e1\"]\n             * @product highcharts highstock highmaps\n             */colors:'#7cb5ec #434348 #90ed7d #f7a35c #8085e9 #f15c80 #e4d354 #2b908f #f45b5b #91e8e1'.split(' '),/**\n             */symbols:['circle','diamond','square','triangle','triangle-down'],lang:{/**\n                 * The loading text that appears when the chart is set into the loading\n                 * state following a call to `chart.showLoading`.\n                 *\n                 * @type {String}\n                 * @default Loading...\n                 * @product highcharts highstock highmaps\n                 */loading:'Loading...',/**\n                 * An array containing the months names. Corresponds to the `%B` format\n                 * in `Highcharts.dateFormat()`.\n                 *\n                 * @type {Array<String>}\n                 * @default [ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" ,\n                 *          \"June\" , \"July\" , \"August\" , \"September\" , \"October\" ,\n                 *          \"November\" , \"December\"]\n                 * @product highcharts highstock highmaps\n                 */months:['January','February','March','April','May','June','July','August','September','October','November','December'],/**\n                 * An array containing the months names in abbreviated form. Corresponds\n                 * to the `%b` format in `Highcharts.dateFormat()`.\n                 *\n                 * @type {Array<String>}\n                 * @default [ \"Jan\" , \"Feb\" , \"Mar\" , \"Apr\" , \"May\" , \"Jun\" ,\n                 *          \"Jul\" , \"Aug\" , \"Sep\" , \"Oct\" , \"Nov\" , \"Dec\"]\n                 */shortMonths:['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],/**\n                 * An array containing the weekday names.\n                 *\n                 * @type {Array<String>}\n                 * @default [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n                 *          \"Friday\", \"Saturday\"]\n                 * @product highcharts highstock highmaps\n                 */weekdays:['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],// invalidDate: '',\n/**\n                 * The default decimal point used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments.\n                 *\n                 * @type {String}\n                 * @default .\n                 * @since 1.2.2\n                 * @product highcharts highstock highmaps\n                 */decimalPoint:'.',/**\n                 * [Metric prefixes](http://en.wikipedia.org/wiki/Metric_prefix) used\n                 * to shorten high numbers in axis labels. Replacing any of the positions\n                 * with `null` causes the full number to be written. Setting `numericSymbols`\n                 * to `null` disables shortening altogether.\n                 *\n                 * @type {Array<String>}\n                 * @sample {highcharts} highcharts/lang/numericsymbols/ Replacing the symbols with text\n                 * @sample {highstock} highcharts/lang/numericsymbols/ Replacing the symbols with text\n                 * @default [ \"k\" , \"M\" , \"G\" , \"T\" , \"P\" , \"E\"]\n                 * @since 2.3.0\n                 * @product highcharts highstock highmaps\n                 */numericSymbols:['k','M','G','T','P','E'],// SI prefixes used in axis labels\n/**\n                 * The text for the label appearing when a chart is zoomed.\n                 *\n                 * @type {String}\n                 * @default Reset zoom\n                 * @since 1.2.4\n                 * @product highcharts highstock highmaps\n                 */resetZoom:'Reset zoom',/**\n                 * The tooltip title for the label appearing when a chart is zoomed.\n                 *\n                 * @type {String}\n                 * @default Reset zoom level 1:1\n                 * @since 1.2.4\n                 * @product highcharts highstock highmaps\n                 */resetZoomTitle:'Reset zoom level 1:1',/**\n                 * The default thousands separator used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Since\n                 * Highcharts 4.1 it defaults to a single space character, which is\n                 * compatible with ISO and works across Anglo-American and continental\n                 * European languages.\n                 *\n                 * The default is a single space.\n                 *\n                 * @type {String}\n                 * @default\n                 * @since 1.2.2\n                 * @product highcharts highstock highmaps\n                 */thousandsSep:' '},/**\n             * Global options that don't apply to each chart. These options, like\n             * the `lang` options, must be set using the `Highcharts.setOptions`\n             * method.\n             *\n             * <pre>Highcharts.setOptions({\n             * global: {\n             * useUTC: false\n             * }\n             * });</pre>\n             *\n             * @product highcharts highstock highmaps\n             */global:{/**\n                 * Whether to use UTC time for axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`. Advantages of using UTC\n                 * is that the time displays equally regardless of the user agent's\n                 * time zone settings. Local time can be used when the data is loaded\n                 * in real time or when correct Daylight Saving Time transitions are\n                 * required.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/global/useutc-true/ True by default\n                 * @sample {highcharts} highcharts/global/useutc-false/ False\n                 * @default true\n                 * @product highcharts highstock highmaps\n                 */useUTC:true,//timezoneOffset: 0,\n/**\n                 * Path to the pattern image required by VML browsers in order to\n                 * draw radial gradients.\n                 *\n                 * @type {String}\n                 * @default {highcharts} http://code.highcharts.com/{version}/gfx/vml-radial-gradient.png\n                 * @default {highstock} http://code.highcharts.com/highstock/{version}/gfx/vml-radial-gradient.png\n                 * @default {highmaps} http://code.highcharts.com/{version}/gfx/vml-radial-gradient.png\n                 * @since 2.3.0\n                 * @product highcharts highstock highmaps\n                 */VMLRadialGradientURL:'http://code.highcharts.com/5.0.14/gfx/vml-radial-gradient.png'},chart:{/**\n                 * When using multiple axis, the ticks of two or more opposite axes\n                 * will automatically be aligned by adding ticks to the axis or axes\n                 * with the least ticks, as if `tickAmount` were specified.\n                 *\n                 * This can be prevented by setting `alignTicks` to false. If the grid\n                 * lines look messy, it's a good idea to hide them for the secondary\n                 * axis by setting `gridLineWidth` to 0.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/alignticks-true/ True by default\n                 * @sample {highcharts} highcharts/chart/alignticks-false/ False\n                 * @sample {highstock} stock/chart/alignticks-true/\n                 *         True by default\n                 * @sample {highstock} stock/chart/alignticks-false/\n                 *         False\n                 * @default true\n                 * @product highcharts highstock\n                 * @apioption chart.alignTicks\n                 *//**\n                 * Set the overall animation for all chart updating. Animation can be\n                 * disabled throughout the chart by setting it to false here. It can\n                 * be overridden for each individual API method as a function parameter.\n                 * The only animation not affected by this option is the initial series\n                 * animation, see [plotOptions.series.animation](#plotOptions.series.\n                 * animation).\n                 *\n                 * The animation can either be set as a boolean or a configuration\n                 * object. If `true`, it will use the 'swing' jQuery easing and a\n                 * duration of 500 ms. If used as a configuration object, the following\n                 * properties are supported:\n                 *\n                 * <dl>\n                 *\n                 * <dt>duration</dt>\n                 *\n                 * <dd>The duration of the animation in milliseconds.</dd>\n                 *\n                 * <dt>easing</dt>\n                 *\n                 * <dd>A string reference to an easing function set on the `Math` object.\n                 * See [the easing demo](http://jsfiddle.net/gh/get/library/pure/\n                 * highcharts/highcharts/tree/master/samples/highcharts/plotoptions/\n                 * series-animation-easing/).</dd>\n                 *\n                 * </dl>\n                 *\n                 * @type {Boolean|Object}\n                 * @sample {highcharts} highcharts/chart/animation-none/\n                 *         Updating with no animation\n                 * @sample {highcharts} highcharts/chart/animation-duration/\n                 *         With a longer duration\n                 * @sample {highcharts} highcharts/chart/animation-easing/\n                 *         With a jQuery UI easing\n                 * @sample {highmaps} maps/chart/animation-none/\n                 *         Updating with no animation\n                 * @sample {highmaps} maps/chart/animation-duration/\n                 *         With a longer duration\n                 * @default true\n                 * @apioption chart.animation\n                 *//**\n                 * A CSS class name to apply to the charts container `div`, allowing\n                 * unique CSS styling for each chart.\n                 *\n                 * @type {String}\n                 * @apioption chart.className\n                 *//**\n                 * Event listeners for the chart.\n                 *\n                 * @apioption chart.events\n                 *//**\n                 * Fires when a series is added to the chart after load time, using\n                 * the `addSeries` method. One parameter, `event`, is passed to the\n                 * function, containing common event information.\n                 * Through `event.options` you can access the series options that was\n                 * passed to the `addSeries` method. Returning false prevents the series\n                 * from being added.\n                 *\n                 * @type {Function}\n                 * @context Chart\n                 * @sample {highcharts} highcharts/chart/events-addseries/ Alert on add series\n                 * @sample {highstock} stock/chart/events-addseries/ Alert on add series\n                 * @since 1.2.0\n                 * @apioption chart.events.addSeries\n                 *//**\n                 * Fires when clicking on the plot background. One parameter, `event`,\n                 * is passed to the function, containing common event information.\n                 *\n                 * Information on the clicked spot can be found through `event.xAxis`\n                 * and `event.yAxis`, which are arrays containing the axes of each dimension\n                 * and each axis' value at the clicked spot. The primary axes are `event.\n                 * xAxis[0]` and `event.yAxis[0]`. Remember the unit of a datetime axis\n                 * is milliseconds since 1970-01-01 00:00:00.\n                 *\n                 * <pre>click: function(e) {\n                 * console.log(\n                 * Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value),\n                 * e.yAxis[0].value\n                 * )\n                 * }</pre>\n                 *\n                 * @type {Function}\n                 * @context Chart\n                 * @sample {highcharts} highcharts/chart/events-click/\n                 *         Alert coordinates on click\n                 * @sample {highcharts} highcharts/chart/events-container/\n                 *         Alternatively, attach event to container\n                 * @sample {highstock} stock/chart/events-click/\n                 *         Alert coordinates on click\n                 * @sample {highstock} highcharts/chart/events-container/\n                 *         Alternatively, attach event to container\n                 * @sample {highmaps} maps/chart/events-click/\n                 *         Record coordinates on click\n                 * @sample {highmaps} highcharts/chart/events-container/\n                 *         Alternatively, attach event to container\n                 * @since 1.2.0\n                 * @apioption chart.events.click\n                 *//**\n                 * Fires when the chart is finished loading. Since v4.2.2, it also waits\n                 * for images to be loaded, for example from point markers. One parameter,\n                 * `event`, is passed to the function, containing common event information.\n                 *\n                 * There is also a second parameter to the chart constructor where a\n                 * callback function can be passed to be executed on chart.load.\n                 *\n                 * @type {Function}\n                 * @context Chart\n                 * @sample {highcharts} highcharts/chart/events-load/\n                 *         Alert on chart load\n                 * @sample {highstock} stock/chart/events-load/\n                 *         Alert on chart load\n                 * @sample {highmaps} maps/chart/events-load/\n                 *         Add series on chart load\n                 * @apioption chart.events.load\n                 *//**\n                 * Fires when the chart is redrawn, either after a call to chart.redraw()\n                 * or after an axis, series or point is modified with the `redraw` option\n                 * set to true. One parameter, `event`, is passed to the function, containing common event information.\n                 *\n                 * @type {Function}\n                 * @context Chart\n                 * @sample {highcharts} highcharts/chart/events-redraw/\n                 *         Alert on chart redraw\n                 * @sample {highstock} stock/chart/events-redraw/\n                 *         Alert on chart redraw when adding a series or moving the\n                 *         zoomed range\n                 * @sample {highmaps} maps/chart/events-redraw/\n                 *         Set subtitle on chart redraw\n                 * @since 1.2.0\n                 * @apioption chart.events.redraw\n                 *//**\n                 * Fires after initial load of the chart (directly after the `load`\n                 * event), and after each redraw (directly after the `redraw` event).\n                 *\n                 * @type {Function}\n                 * @context Chart\n                 * @since 5.0.7\n                 * @apioption chart.events.render\n                 *//**\n                 * Fires when an area of the chart has been selected. Selection is enabled\n                 * by setting the chart's zoomType. One parameter, `event`, is passed\n                 * to the function, containing common event information. The default action for the selection event is to\n                 * zoom the chart to the selected area. It can be prevented by calling\n                 * `event.preventDefault()`.\n                 *\n                 * Information on the selected area can be found through `event.xAxis`\n                 * and `event.yAxis`, which are arrays containing the axes of each dimension\n                 * and each axis' min and max values. The primary axes are `event.xAxis[0]`\n                 * and `event.yAxis[0]`. Remember the unit of a datetime axis is milliseconds\n                 * since 1970-01-01 00:00:00.\n                 *\n                 * <pre>selection: function(event) {\n                 * // log the min and max of the primary, datetime x-axis\n                 * console.log(\n                 * Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', event.xAxis[0].min),\n                 *\n                 * Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', event.xAxis[0].max)\n                 * );\n                 * // log the min and max of the y axis\n                 * console.log(event.yAxis[0].min, event.yAxis[0].max);\n                 * }</pre>\n                 *\n                 * @type {Function}\n                 * @sample {highcharts} highcharts/chart/events-selection/\n                 *         Report on selection and reset\n                 * @sample {highcharts} highcharts/chart/events-selection-points/\n                 *         Select a range of points through a drag selection\n                 * @sample {highstock} stock/chart/events-selection/\n                 *         Report on selection and reset\n                 * @sample {highstock} highcharts/chart/events-selection-points/\n                 *         Select a range of points through a drag selection (Highcharts)\n                 * @apioption chart.events.selection\n                 *//**\n                 * The margin between the outer edge of the chart and the plot area.\n                 * The numbers in the array designate top, right, bottom and left\n                 * respectively. Use the options `marginTop`, `marginRight`,\n                 * `marginBottom` and `marginLeft` for shorthand setting of one option.\n                 *\n                 * By default there is no margin. The actual space is dynamically calculated\n                 * from the offset of axis labels, axis title, title, subtitle and legend\n                 * in addition to the `spacingTop`, `spacingRight`, `spacingBottom`\n                 * and `spacingLeft` options.\n                 *\n                 * @type {Array}\n                 * @sample {highcharts} highcharts/chart/margins-zero/\n                 *         Zero margins\n                 * @sample {highstock} stock/chart/margin-zero/\n                 *         Zero margins\n                 *\n                 * @defaults {all} null\n                 * @apioption chart.margin\n                 *//**\n                 * The margin between the bottom outer edge of the chart and the plot\n                 * area. Use this to set a fixed pixel value for the margin as opposed\n                 * to the default dynamic margin. See also `spacingBottom`.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/marginbottom/\n                 *         100px bottom margin\n                 * @sample {highstock} stock/chart/marginbottom/\n                 *         100px bottom margin\n                 * @sample {highmaps} maps/chart/margin/\n                 *         100px margins\n                 * @since 2.0\n                 * @apioption chart.marginBottom\n                 *//**\n                 * The margin between the left outer edge of the chart and the plot\n                 * area. Use this to set a fixed pixel value for the margin as opposed\n                 * to the default dynamic margin. See also `spacingLeft`.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/marginleft/\n                 *         150px left margin\n                 * @sample {highstock} stock/chart/marginleft/\n                 *         150px left margin\n                 * @sample {highmaps} maps/chart/margin/\n                 *         100px margins\n                 * @default null\n                 * @since 2.0\n                 * @apioption chart.marginLeft\n                 *//**\n                 * The margin between the right outer edge of the chart and the plot\n                 * area. Use this to set a fixed pixel value for the margin as opposed\n                 * to the default dynamic margin. See also `spacingRight`.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/marginright/\n                 *         100px right margin\n                 * @sample {highstock} stock/chart/marginright/\n                 *         100px right margin\n                 * @sample {highmaps} maps/chart/margin/\n                 *         100px margins\n                 * @default null\n                 * @since 2.0\n                 * @apioption chart.marginRight\n                 *//**\n                 * The margin between the top outer edge of the chart and the plot area.\n                 * Use this to set a fixed pixel value for the margin as opposed to\n                 * the default dynamic margin. See also `spacingTop`.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/margintop/ 100px top margin\n                 * @sample {highstock} stock/chart/margintop/\n                 *         100px top margin\n                 * @sample {highmaps} maps/chart/margin/\n                 *         100px margins\n                 * @default null\n                 * @since 2.0\n                 * @apioption chart.marginTop\n                 *//**\n                 * Allows setting a key to switch between zooming and panning. Can be\n                 * one of `alt`, `ctrl`, `meta` (the command key on Mac and Windows\n                 * key on Windows) or `shift`. The keys are mapped directly to the key\n                 * properties of the click event argument (`event.altKey`, `event.ctrlKey`,\n                 * `event.metaKey` and `event.shiftKey`).\n                 *\n                 * @validvalue [null, \"alt\", \"ctrl\", \"meta\", \"shift\"]\n                 * @type {String}\n                 * @since 4.0.3\n                 * @product highcharts\n                 * @apioption chart.panKey\n                 *//**\n                 * Allow panning in a chart. Best used with [panKey](#chart.panKey)\n                 * to combine zooming and panning.\n                 *\n                 * On touch devices, when the [tooltip.followTouchMove](#tooltip.followTouchMove)\n                 * option is `true` (default), panning requires two fingers. To allow\n                 * panning with one finger, set `followTouchMove` to `false`.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/pankey/ Zooming and panning\n                 * @default {highcharts} false\n                 * @default {highstock} true\n                 * @since 4.0.3\n                 * @product highcharts highstock\n                 * @apioption chart.panning\n                 *//**\n                 * Equivalent to [zoomType](#chart.zoomType), but for multitouch gestures\n                 * only. By default, the `pinchType` is the same as the `zoomType` setting.\n                 * However, pinching can be enabled separately in some cases, for example\n                 * in stock charts where a mouse drag pans the chart, while pinching\n                 * is enabled. When [tooltip.followTouchMove](#tooltip.followTouchMove)\n                 * is true, pinchType only applies to two-finger touches.\n                 *\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @type {String}\n                 * @default {highcharts} null\n                 * @default {highstock} x\n                 * @since 3.0\n                 * @product highcharts highstock\n                 * @apioption chart.pinchType\n                 *//**\n                 * The corner radius of the outer chart border.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/borderradius/ 20px radius\n                 * @sample {highstock} stock/chart/border/ 10px radius\n                 * @sample {highmaps} maps/chart/border/ Border options\n                 * @default 0\n                 * @product highcharts highstock highmaps\n                 */borderRadius:0,/**\n                 * Alias of `type`.\n                 *\n                 * @validvalue [\"line\", \"spline\", \"column\", \"area\", \"areaspline\", \"pie\"]\n                 * @type {String}\n                 * @deprecated\n                 * @sample {highcharts} highcharts/chart/defaultseriestype/ Bar\n                 * @default line\n                 * @product highcharts\n                 */defaultSeriesType:'line',/**\n                 * If true, the axes will scale to the remaining visible series once\n                 * one series is hidden. If false, hiding and showing a series will\n                 * not affect the axes or the other series. For stacks, once one series\n                 * within the stack is hidden, the rest of the stack will close in\n                 * around it even if the axis is not affected.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/ignorehiddenseries-true/\n                 *         True by default\n                 * @sample {highcharts} highcharts/chart/ignorehiddenseries-false/\n                 *         False\n                 * @sample {highcharts} highcharts/chart/ignorehiddenseries-true-stacked/\n                 *         True with stack\n                 * @sample {highstock} stock/chart/ignorehiddenseries-true/\n                 *         True by default\n                 * @sample {highstock} stock/chart/ignorehiddenseries-false/\n                 *         False\n                 * @default true\n                 * @since 1.2.0\n                 * @product highcharts highstock\n                 */ignoreHiddenSeries:true,/**\n                 * Whether to invert the axes so that the x axis is vertical and y axis\n                 * is horizontal. When `true`, the x axis is [reversed](#xAxis.reversed)\n                 * by default.\n                 *\n                 * @productdesc {highcharts}\n                 * If a bar series is present in the chart, it will be inverted\n                 * automatically. Inverting the chart doesn't have an effect if there\n                 * are no cartesian series in the chart, or if the chart is\n                 * [polar](#chart.polar).\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/inverted/\n                 *         Inverted line\n                 * @sample {highstock} stock/navigator/inverted/\n                 *         Inverted stock chart\n                 * @default false\n                 * @product highcharts highstock\n                 * @apioption chart.inverted\n                 *//**\n                 * The distance between the outer edge of the chart and the content,\n                 * like title or legend, or axis title and labels if present. The\n                 * numbers in the array designate top, right, bottom and left respectively.\n                 * Use the options spacingTop, spacingRight, spacingBottom and spacingLeft\n                 * options for shorthand setting of one option.\n                 *\n                 * @type {Array<Number>}\n                 * @see [chart.margin](#chart.margin)\n                 * @default [10, 10, 15, 10]\n                 * @since 3.0.6\n                 * @product highcharts highstock highmaps\n                 */spacing:[10,10,15,10],/**\n                 * The button that appears after a selection zoom, allowing the user\n                 * to reset zoom.\n                 *\n                 * @product highcharts highstock highmaps\n                 */resetZoomButton:{/**\n                     * A collection of attributes for the button. The object takes SVG\n                     * attributes like `fill`, `stroke`, `stroke-width` or `r`, the border\n                     * radius. The theme also supports `style`, a collection of CSS properties\n                     * for the text. Equivalent attributes for the hover state are given\n                     * in `theme.states.hover`.\n                     *\n                     * @type {Object}\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-theme/ Theming the button\n                     * @sample {highstock} highcharts/chart/resetzoombutton-theme/ Theming the button\n                     * @since 2.2\n                     * @product highcharts highstock highmaps\n                     */theme:{/**\n                         */zIndex:20},/**\n                     * The position of the button.\n                     *\n                     * @type {Object}\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @since 2.2\n                     * @product highcharts highstock highmaps\n                     */position:{/**\n                         * The horizontal alignment of the button.\n                         *\n                         * @type {String}\n                         */align:'right',/**\n                         * The horizontal offset of the button.\n                         *\n                         * @type {Number}\n                         */x:-10,/**\n                         * The vertical alignment of the button.\n                         *\n                         * @validvalue [\"top\", \"middle\", \"bottom\"]\n                         * @type {String}\n                         * @default top\n                         * @apioption chart.resetZoomButton.position.verticalAlign\n                         *//**\n                         * The vertical offset of the button.\n                         *\n                         * @type {Number}\n                         */y:10/**\n                     * What frame the button should be placed related to. Can be either\n                     * `plot` or `chart`\n                     *\n                     * @validvalue [\"plot\", \"chart\"]\n                     * @type {String}\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     * @default plot\n                     * @since 2.2\n                     * @apioption chart.resetZoomButton.relativeTo\n                     */}},/**\n                 * An explicit width for the chart. By default (when `null`) the width\n                 * is calculated from the offset width of the containing element.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/width/ 800px wide\n                 * @sample {highstock} stock/chart/width/ 800px wide\n                 * @sample {highmaps} maps/chart/size/ Chart with explicit size\n                 * @default null\n                 * @product highcharts highstock highmaps\n                 */width:null,/**\n                 * An explicit height for the chart. If a _number_, the height is\n                 * given in pixels. If given a _percentage string_ (for example `'56%'`),\n                 * the height is given as the percentage of the actual chart width.\n                 * This allows for preserving the aspect ratio across responsive\n                 * sizes.\n                 *\n                 * By default (when `null`) the height is calculated from the offset\n                 * height of the containing element, or 400 pixels if the containing\n                 * element's height is 0.\n                 *\n                 * @type {Number|String}\n                 * @sample {highcharts} highcharts/chart/height/\n                 *         500px height\n                 * @sample {highstock} stock/chart/height/\n                 *         300px height\n                 * @sample {highmaps} maps/chart/size/\n                 *         Chart with explicit size\n                 * @sample highcharts/chart/height-percent/\n                 *         Highcharts with percentage height\n                 * @default null\n                 * @product highcharts highstock highmaps\n                 */height:null,/**\n                 * The color of the outer chart border.\n                 *\n                 * @type {Color}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke is set with the `.highcharts-background`\n                 * class.\n                 * @sample {highcharts} highcharts/chart/bordercolor/ Brown border\n                 * @sample {highstock} stock/chart/border/ Brown border\n                 * @sample {highmaps} maps/chart/border/ Border options\n                 * @default #335cad\n                 * @product highcharts highstock highmaps\n                 */borderColor:'#335cad',/**\n                 * The pixel width of the outer chart border.\n                 *\n                 * @type {Number}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke is set with the `.highcharts-background`\n                 * class.\n                 * @sample {highcharts} highcharts/chart/borderwidth/ 5px border\n                 * @sample {highstock} stock/chart/border/\n                 *         2px border\n                 * @sample {highmaps} maps/chart/border/\n                 *         Border options\n                 * @default 0\n                 * @apioption chart.borderWidth\n                 *///style: {\n//\tfontFamily: '\"Lucida Grande\", \"Lucida Sans Unicode\", Verdana, Arial, Helvetica, sans-serif', // default font\n//\tfontSize: '12px'\n//},\n/**\n                 * The background color or gradient for the outer chart area.\n                 *\n                 * @type {Color}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the background is set with the `.highcharts-\n                 * background` class.\n                 * @sample {highcharts} highcharts/chart/backgroundcolor-color/ Color\n                 * @sample {highcharts} highcharts/chart/backgroundcolor-gradient/ Gradient\n                 * @sample {highstock} stock/chart/backgroundcolor-color/\n                 *         Color\n                 * @sample {highstock} stock/chart/backgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highmaps} maps/chart/backgroundcolor-color/\n                 *         Color\n                 * @sample {highmaps} maps/chart/backgroundcolor-gradient/\n                 *         Gradient\n                 * @default #FFFFFF\n                 * @product highcharts highstock highmaps\n                 */backgroundColor:'#ffffff',/**\n                 * The background color or gradient for the plot area.\n                 *\n                 * @type {Color}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the plot background is set with the `.highcharts-\n                 * plot-background` class.\n                 * @sample {highcharts} highcharts/chart/plotbackgroundcolor-color/\n                 *         Color\n                 * @sample {highcharts} highcharts/chart/plotbackgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highstock} stock/chart/plotbackgroundcolor-color/\n                 *         Color\n                 * @sample {highstock} stock/chart/plotbackgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highmaps} maps/chart/plotbackgroundcolor-color/\n                 *         Color\n                 * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/\n                 *         Gradient\n                 * @default null\n                 * @apioption chart.plotBackgroundColor\n                 *//**\n                 * The URL for an image to use as the plot background. To set an image\n                 * as the background for the entire chart, set a CSS background image\n                 * to the container element. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export server.\n                 *\n                 * @type {String}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), a plot background image can be set with the\n                 * `.highcharts-plot-background` class and a [custom pattern](http://www.\n                 * highcharts.com/docs/chart-design-and-style/gradients-shadows-and-\n                 * patterns).\n                 * @sample {highcharts} highcharts/chart/plotbackgroundimage/ Skies\n                 * @sample {highstock} stock/chart/plotbackgroundimage/ Skies\n                 * @default null\n                 * @apioption chart.plotBackgroundImage\n                 *//**\n                 * The color of the inner chart or plot area border.\n                 *\n                 * @type {Color}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), a plot border stroke can be set with the `.\n                 * highcharts-plot-border` class.\n                 * @sample {highcharts} highcharts/chart/plotbordercolor/ Blue border\n                 * @sample {highstock} stock/chart/plotborder/ Blue border\n                 * @sample {highmaps} maps/chart/plotborder/ Plot border options\n                 * @default #cccccc\n                 * @product highcharts highstock highmaps\n                 */plotBorderColor:'#cccccc'/**\n                 * The pixel width of the plot area border.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/plotborderwidth/ 1px border\n                 * @sample {highstock} stock/chart/plotborder/\n                 *         2px border\n                 * @sample {highmaps} maps/chart/plotborder/\n                 *         Plot border options\n                 * @default 0\n                 * @apioption chart.plotBorderWidth\n                 *//**\n                 * Whether to apply a drop shadow to the plot area. Requires that\n                 * plotBackgroundColor be set. The shadow can be an object configuration\n                 * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n                 *\n                 * @type {Boolean|Object}\n                 * @sample {highcharts} highcharts/chart/plotshadow/ Plot shadow\n                 * @sample {highstock} stock/chart/plotshadow/\n                 *         Plot shadow\n                 * @sample {highmaps} maps/chart/plotborder/\n                 *         Plot border options\n                 * @default false\n                 * @apioption chart.plotShadow\n                 *//**\n                 * When true, cartesian charts like line, spline, area and column are\n                 * transformed into the polar coordinate system. Requires `highcharts-\n                 * more.js`.\n                 *\n                 * @type {Boolean}\n                 * @default false\n                 * @since 2.3.0\n                 * @product highcharts\n                 * @apioption chart.polar\n                 *//**\n                 * Whether to reflow the chart to fit the width of the container div\n                 * on resizing the window.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/reflow-true/ True by default\n                 * @sample {highcharts} highcharts/chart/reflow-false/ False\n                 * @sample {highstock} stock/chart/reflow-true/\n                 *         True by default\n                 * @sample {highstock} stock/chart/reflow-false/\n                 *         False\n                 * @sample {highmaps} maps/chart/reflow-true/\n                 *         True by default\n                 * @sample {highmaps} maps/chart/reflow-false/\n                 *         False\n                 * @default true\n                 * @since 2.1\n                 * @apioption chart.reflow\n                 *//**\n                 * The HTML element where the chart will be rendered. If it is a string,\n                 * the element by that id is used. The HTML element can also be passed\n                 * by direct reference, or as the first argument of the chart constructor,\n                 *  in which case the option is not needed.\n                 *\n                 * @type {String|Object}\n                 * @sample {highcharts} highcharts/chart/reflow-true/\n                 *         String\n                 * @sample {highcharts} highcharts/chart/renderto-object/\n                 *         Object reference\n                 * @sample {highcharts} highcharts/chart/renderto-jquery/\n                 *         Object reference through jQuery\n                 * @sample {highstock} stock/chart/renderto-string/\n                 *         String\n                 * @sample {highstock} stock/chart/renderto-object/\n                 *         Object reference\n                 * @sample {highstock} stock/chart/renderto-jquery/\n                 *         Object reference through jQuery\n                 * @apioption chart.renderTo\n                 *//**\n                 * The background color of the marker square when selecting (zooming\n                 * in on) an area of the chart.\n                 *\n                 * @type {Color}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the selection marker fill is set with the\n                 * `.highcharts-selection-marker` class.\n                 * @default rgba(51,92,173,0.25)\n                 * @since 2.1.7\n                 * @apioption chart.selectionMarkerFill\n                 *//**\n                 * Whether to apply a drop shadow to the outer chart area. Requires\n                 * that backgroundColor be set. The shadow can be an object configuration\n                 * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n                 *\n                 * @type {Boolean|Object}\n                 * @sample {highcharts} highcharts/chart/shadow/ Shadow\n                 * @sample {highstock} stock/chart/shadow/\n                 *         Shadow\n                 * @sample {highmaps} maps/chart/border/\n                 *         Chart border and shadow\n                 * @default false\n                 * @apioption chart.shadow\n                 *//**\n                 * Whether to show the axes initially. This only applies to empty charts\n                 * where series are added dynamically, as axes are automatically added\n                 * to cartesian series.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/showaxes-false/ False by default\n                 * @sample {highcharts} highcharts/chart/showaxes-true/ True\n                 * @since 1.2.5\n                 * @product highcharts\n                 * @apioption chart.showAxes\n                 *//**\n                 * The space between the bottom edge of the chart and the content (plot\n                 * area, axis title and labels, title, subtitle or legend in top position).\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/spacingbottom/\n                 *         Spacing bottom set to 100\n                 * @sample {highstock} stock/chart/spacingbottom/\n                 *         Spacing bottom set to 100\n                 * @sample {highmaps} maps/chart/spacing/\n                 *         Spacing 100 all around\n                 * @default 15\n                 * @since 2.1\n                 * @apioption chart.spacingBottom\n                 *//**\n                 * The space between the left edge of the chart and the content (plot\n                 * area, axis title and labels, title, subtitle or legend in top position).\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/spacingleft/\n                 *         Spacing left set to 100\n                 * @sample {highstock} stock/chart/spacingleft/\n                 *         Spacing left set to 100\n                 * @sample {highmaps} maps/chart/spacing/\n                 *         Spacing 100 all around\n                 * @default 10\n                 * @since 2.1\n                 * @apioption chart.spacingLeft\n                 *//**\n                 * The space between the right edge of the chart and the content (plot\n                 * area, axis title and labels, title, subtitle or legend in top\n                 * position).\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/spacingright-100/\n                 *         Spacing set to 100\n                 * @sample {highcharts} highcharts/chart/spacingright-legend/\n                 *         Legend in right position with default spacing\n                 * @sample {highstock} stock/chart/spacingright/\n                 *         Spacing set to 100\n                 * @sample {highmaps} maps/chart/spacing/\n                 *         Spacing 100 all around\n                 * @default 10\n                 * @since 2.1\n                 * @apioption chart.spacingRight\n                 *//**\n                 * The space between the top edge of the chart and the content (plot\n                 * area, axis title and labels, title, subtitle or legend in top\n                 * position).\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/spacingtop-100/\n                 * A top spacing of 100\n                 * @sample {highcharts} highcharts/chart/spacingtop-10/\n                 *         Floating chart title makes the plot area align to the default\n                 *         spacingTop of 10.\n                 * @sample {highstock} stock/chart/spacingtop/\n                 *         A top spacing of 100\n                 * @sample {highmaps} maps/chart/spacing/\n                 *         Spacing 100 all around\n                 * @default 10\n                 * @since 2.1\n                 * @apioption chart.spacingTop\n                 *//**\n                 * Additional CSS styles to apply inline to the container `div`. Note\n                 * that since the default font styles are applied in the renderer, it\n                 * is ignorant of the individual chart options and must be set globally.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), general chart styles can be set with the `.highcharts-\n                 * root` class.\n                 * @sample {highcharts} highcharts/chart/style-serif-font/\n                 *         Using a serif type font\n                 * @sample {highcharts} highcharts/css/em/\n                 *         Styled mode with relative font sizes\n                 * @sample {highstock} stock/chart/style/\n                 *         Using a serif type font\n                 * @sample {highmaps} maps/chart/style-serif-font/\n                 *         Using a serif type font\n                 * @default {\"fontFamily\":\"\\\"Lucida Grande\\\", \\\"Lucida Sans Unicode\\\", Verdana, Arial, Helvetica, sans-serif\",\"fontSize\":\"12px\"}\n                 * @apioption chart.style\n                 *//**\n                 * The default series type for the chart. Can be any of the chart types\n                 * listed under [plotOptions](#plotOptions).\n                 *\n                 * @validvalue [\"line\", \"spline\", \"column\", \"bar\", \"area\", \"areaspline\", \"pie\", \"arearange\", \"areasplinerange\", \"boxplot\", \"bubble\", \"columnrange\", \"errorbar\", \"funnel\", \"gauge\", \"heatmap\", \"polygon\", \"pyramid\", \"scatter\", \"solidgauge\", \"treemap\", \"waterfall\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/chart/type-bar/ Bar\n                 * @sample {highstock} stock/chart/type/\n                 *         Areaspline\n                 * @sample {highmaps} maps/chart/type-mapline/\n                 *         Mapline\n                 * @default {highcharts} line\n                 * @default {highstock} line\n                 * @default {highmaps} map\n                 * @since 2.1.0\n                 * @apioption chart.type\n                 *//**\n                 * Decides in what dimensions the user can zoom by dragging the mouse.\n                 * Can be one of `x`, `y` or `xy`.\n                 *\n                 * @validvalue [null, \"x\", \"y\", \"xy\"]\n                 * @type {String}\n                 * @see [panKey](#chart.panKey)\n                 * @sample {highcharts} highcharts/chart/zoomtype-none/ None by default\n                 * @sample {highcharts} highcharts/chart/zoomtype-x/ X\n                 * @sample {highcharts} highcharts/chart/zoomtype-y/ Y\n                 * @sample {highcharts} highcharts/chart/zoomtype-xy/ Xy\n                 * @sample {highstock} stock/demo/basic-line/ None by default\n                 * @sample {highstock} stock/chart/zoomtype-x/ X\n                 * @sample {highstock} stock/chart/zoomtype-y/ Y\n                 * @sample {highstock} stock/chart/zoomtype-xy/ Xy\n                 * @product highcharts highstock\n                 * @apioption chart.zoomType\n                 */},/**\n             * The chart's main title.\n             *\n             * @sample {highmaps} maps/title/title/ Title options demonstrated\n             * @product highcharts highstock highmaps\n             */title:{/**\n                 * The title of the chart. To disable the title, set the `text` to\n                 * `null`.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/title/text/ Custom title\n                 * @sample {highstock} stock/chart/title-text/ Custom title\n                 * @default {highcharts} Chart title\n                 * @default {highstock} null\n                 * @default {highmaps} Chart title\n                 * @product highcharts highstock highmaps\n                 */text:'Chart title',/**\n                 * The horizontal alignment of the title. Can be one of \"left\", \"center\"\n                 * and \"right\".\n                 *\n                 * @validvalue [\"left\", \"center\", \"right\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/title/align/ Aligned to the plot area (x = 70px     = margin left - spacing left)\n                 * @sample {highstock} stock/chart/title-align/ Aligned to the plot area (x = 50px     = margin left - spacing left)\n                 * @default center\n                 * @since 2.0\n                 * @product highcharts highstock highmaps\n                 */align:'center',// floating: false,\n/**\n                 * The margin between the title and the plot area, or if a subtitle\n                 * is present, the margin between the subtitle and the plot area.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/title/margin-50/ A chart title margin of 50\n                 * @sample {highcharts} highcharts/title/margin-subtitle/ The same margin applied with a subtitle\n                 * @sample {highstock} stock/chart/title-margin/ A chart title margin of 50\n                 * @default 15\n                 * @since 2.1\n                 * @product highcharts highstock highmaps\n                 */margin:15,// x: 0,\n// verticalAlign: 'top',\n// y: null,\n// style: {}, // defined inline\n/**\n                 * Adjustment made to the title width, normally to reserve space for\n                 * the exporting burger menu.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/title/widthadjust/ Wider menu, greater padding\n                 * @sample {highstock} highcharts/title/widthadjust/ Wider menu, greater padding\n                 * @sample {highmaps} highcharts/title/widthadjust/ Wider menu, greater padding\n                 * @default -44\n                 * @since 4.2.5\n                 * @product highcharts highstock highmaps\n                 */widthAdjust:-44},/**\n             * The chart's subtitle. This can be used both to display a subtitle below\n             * the main title, and to display random text anywhere in the chart. The\n             * subtitle can be updated after chart initialization through the\n             * `Chart.setTitle` method.\n             *\n             * @sample {highmaps} maps/title/subtitle/ Subtitle options demonstrated\n             * @product highcharts highstock highmaps\n             */subtitle:{/**\n                 * The subtitle of the chart.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/subtitle/text/ Custom subtitle\n                 * @sample {highcharts} highcharts/subtitle/text-formatted/ Formatted and linked text.\n                 * @sample {highstock} stock/chart/subtitle-text Custom subtitle\n                 * @sample {highstock} stock/chart/subtitle-text-formatted Formatted and linked text.\n                 * @product highcharts highstock highmaps\n                 */text:'',/**\n                 * The horizontal alignment of the subtitle. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @validvalue [\"left\", \"center\", \"right\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/subtitle/align/ Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote Footnote at bottom right of plot area\n                 * @default center\n                 * @since 2.0\n                 * @product highcharts highstock highmaps\n                 */align:'center',// floating: false\n// x: 0,\n// verticalAlign: 'top',\n// y: null,\n// style: {}, // defined inline\n/**\n                 * Adjustment made to the subtitle width, normally to reserve space\n                 * for the exporting burger menu.\n                 *\n                 * @type {Number}\n                 * @see [title.widthAdjust](#title.widthAdjust)\n                 * @sample {highcharts} highcharts/title/widthadjust/ Wider menu, greater padding\n                 * @sample {highstock} highcharts/title/widthadjust/ Wider menu, greater padding\n                 * @sample {highmaps} highcharts/title/widthadjust/ Wider menu, greater padding\n                 * @default -44\n                 * @since 4.2.5\n                 * @product highcharts highstock highmaps\n                 */widthAdjust:-44},/**\n             * The plotOptions is a wrapper object for config objects for each series\n             * type. The config objects for each series can also be overridden for\n             * each series item as given in the series array.\n             *\n             * Configuration options for the series are given in three levels. Options\n             * for all series in a chart are given in the [plotOptions.series](#plotOptions.\n             * series) object. Then options for all series of a specific type are\n             * given in the plotOptions of that type, for example plotOptions.line.\n             * Next, options for one single series are given in [the series array](#series).\n             *\n             * @product highcharts highstock highmaps\n             */plotOptions:{},/**\n             * HTML labels that can be positioned anywhere in the chart area.\n             *\n             * @product highcharts highstock highmaps\n             */labels:{//items: [],\n/**\n                 * Shared CSS styles for all labels.\n                 *\n                 * @type {CSSObject}\n                 * @default { \"color\": \"#333333\" }\n                 * @product highcharts highstock highmaps\n                 */style:{//font: defaultFont,\n/**\n                     */position:'absolute',/**\n                     */color:'#333333'}},/**\n             * The legend is a box containing a symbol and name for each series\n             * item or point item in the chart. Each series (or points in case\n             * of pie charts) is represented by a symbol and its name in the legend.\n             *\n             * It is possible to override the symbol creator function and\n             * create [custom legend symbols](http://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/studies/legend-\n             * custom-symbol/).\n             *\n             * @productdesc {highmaps}\n             * A Highmaps legend by default contains one legend item per series, but if\n             * a `colorAxis` is defined, the axis will be displayed in the legend.\n             * Either as a gradient, or as multiple legend items for `dataClasses`.\n             */legend:{/**\n                 * Enable or disable the legend.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/legend/enabled-false/ Legend disabled\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/enabled-false/ Legend disabled\n                 * @default {highstock} false\n                 * @default {highmaps} true\n                 * @product highcharts highstock highmaps\n                 */enabled:true,/**\n                 * The horizontal alignment of the legend box within the chart area.\n                 * Valid values are `left`, `center` and `right`.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * @validvalue [\"left\", \"center\", \"right\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/legend/align/ Legend at the right of the chart\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/alignment/ Legend alignment\n                 * @default center\n                 * @since 2.0\n                 * @product highcharts highstock highmaps\n                 */align:'center',//floating: false,\n/**\n                 * The layout of the legend items. Can be one of \"horizontal\" or \"vertical\".\n                 *\n                 * @validvalue [\"horizontal\", \"vertical\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/ Horizontal by default\n                 * @sample {highcharts} highcharts/legend/layout-vertical/ Vertical\n                 * @sample {highstock} stock/legend/layout-horizontal/ Horizontal by default\n                 * @sample {highmaps} maps/legend/padding-itemmargin/ Vertical with data classes\n                 * @sample {highmaps} maps/legend/layout-vertical/ Vertical with color axis gradient\n                 * @default horizontal\n                 * @product highcharts highstock highmaps\n                 */layout:'horizontal',/**\n                 * Callback function to format each of the series' labels. The `this`\n                 * keyword refers to the series object, or the point object in case\n                 * of pie charts. By default the series or point name is printed.\n                 *\n                 * @productdesc {highmaps}\n                 *              In Highmaps the context can also be a data class in case\n                 *              of a `colorAxis`.\n                 *\n                 * @type {Function}\n                 * @sample {highcharts} highcharts/legend/labelformatter/ Add text\n                 * @sample {highmaps} maps/legend/labelformatter/ Data classes with label formatter\n                 * @context {Series|Point}\n                 */labelFormatter:function labelFormatter(){return this.name;},//borderWidth: 0,\n/**\n                 * The color of the drawn border around the legend.\n                 *\n                 * @type {Color}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the legend border stroke can be applied with\n                 * the `.highcharts-legend-box` class.\n                 * @sample {highcharts} highcharts/legend/bordercolor/ Brown border\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/border-background/ Border and background options\n                 * @default #999999\n                 * @product highcharts highstock highmaps\n                 */borderColor:'#999999',/**\n                 * The border corner radius of the legend.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/borderradius-default/ Square by default\n                 * @sample {highcharts} highcharts/legend/borderradius-round/ 5px rounded\n                 * @sample {highmaps} maps/legend/border-background/ Border and background options\n                 * @default 0\n                 * @product highcharts highstock highmaps\n                 */borderRadius:0,/**\n                 * Options for the paging or navigation appearing when the legend\n                 * is overflown. Navigation works well on screen, but not in static\n                 * exported images. One way of working around that is to [increase\n                 * the chart height in export](http://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/legend/navigation-\n                 * enabled-false/).\n                 *\n                 * @product highcharts highstock highmaps\n                 */navigation:{/**\n                     * The color for the active up or down arrow in the legend page navigation.\n                     *\n                     * @type {Color}\n                     * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the active arrow be styled with the `.highcharts-\n                     * legend-nav-active` class.\n                     * @sample {highcharts} highcharts/legend/navigation/ Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/ Legend page navigation demonstrated\n                     * @default #003399\n                     * @since 2.2.4\n                     * @product highcharts highstock highmaps\n                     */activeColor:'#003399',/**\n                     * The color of the inactive up or down arrow in the legend page\n                     * navigation. .\n                     *\n                     * @type {Color}\n                     * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the inactive arrow be styled with the `.highcharts-\n                     * legend-nav-inactive` class.\n                     * @sample {highcharts} highcharts/legend/navigation/ Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/ Legend page navigation demonstrated\n                     * @default {highcharts} #cccccc\n                     * @default {highstock} #cccccc\n                     * @default {highmaps} ##cccccc\n                     * @since 2.2.4\n                     * @product highcharts highstock highmaps\n                     */inactiveColor:'#cccccc'// animation: true,\n// arrowSize: 12\n// style: {} // text styles\n},// margin: 20,\n// reversed: false,\n// backgroundColor: null,\n/*style: {\n                \tpadding: '5px'\n                },*//**\n                 * CSS styles for each legend item. Only a subset of CSS is supported,\n                 * notably those options related to text. The default `textOverflow`\n                 * property makes long texts truncate. Set it to `null` to wrap text\n                 * instead. A `width` property can be added to control the text width.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the legend items can be styled with the `.\n                 * highcharts-legend-item` class.\n                 * @sample {highcharts} highcharts/legend/itemstyle/ Bold black text\n                 * @sample {highmaps} maps/legend/itemstyle/ Item text styles\n                 * @default { \"color\": \"#333333\", \"cursor\": \"pointer\", \"fontSize\": \"12px\", \"fontWeight\": \"bold\", \"textOverflow\": \"ellipsis\" }\n                 * @product highcharts highstock highmaps\n                 */itemStyle:{/**\n                     */color:'#333333',/**\n                     */fontSize:'12px',/**\n                     */fontWeight:'bold',/**\n                     */textOverflow:'ellipsis'},/**\n                 * CSS styles for each legend item in hover mode. Only a subset of\n                 * CSS is supported, notably those options related to text. Properties\n                 * are inherited from `style` unless overridden here.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the hovered legend items can be styled with\n                 * the `.highcharts-legend-item:hover` pesudo-class.\n                 * @sample {highcharts} highcharts/legend/itemhoverstyle/ Red on hover\n                 * @sample {highmaps} maps/legend/itemstyle/ Item text styles\n                 * @default { \"color\": \"#000000\" }\n                 * @product highcharts highstock highmaps\n                 */itemHoverStyle:{//cursor: 'pointer', removed as of #601\n/**\n                     */color:'#000000'},/**\n                 * CSS styles for each legend item when the corresponding series or\n                 * point is hidden. Only a subset of CSS is supported, notably those\n                 * options related to text. Properties are inherited from `style`\n                 * unless overridden here.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the hidden legend items can be styled with\n                 * the `.highcharts-legend-item-hidden` class.\n                 * @sample {highcharts} highcharts/legend/itemhiddenstyle/ Darker gray color\n                 * @default { \"color\": \"#cccccc\" }\n                 * @product highcharts highstock highmaps\n                 */itemHiddenStyle:{/**\n                     */color:'#cccccc'},/**\n                 * Whether to apply a drop shadow to the legend. A `backgroundColor`\n                 * also needs to be applied for this to take effect. The shadow can be\n                 * an object configuration containing `color`, `offsetX`, `offsetY`,\n                 * `opacity` and `width`.\n                 *\n                 * @type {Boolean|Object}\n                 * @sample {highcharts} highcharts/legend/shadow/\n                 *         White background and drop shadow\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 * @default false\n                 * @product highcharts highstock highmaps\n                 */shadow:false,/**\n                 */itemCheckboxStyle:{/**\n                     */position:'absolute',/**\n                     */width:'13px',// for IE precision\n/**\n                     */height:'13px'},// itemWidth: undefined,\n/**\n                 * When this is true, the legend symbol width will be the same as\n                 * the symbol height, which in turn defaults to the font size of the\n                 * legend items.\n                 *\n                 * @type {Boolean}\n                 * @default true\n                 * @since 5.0.0\n                 * @product highcharts highstock highmaps\n                 */squareSymbol:true,/**\n                 * The pixel height of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to the font size of legend items.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a vertical color\n                 * axis, the height defaults to 200.\n                 *\n                 * @type {Number}\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         No distance between data classes\n                 * @since 3.0.8\n                 * @apioption legend.symbolHeight\n                 *//**\n                 * The border radius of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to half the `symbolHeight`.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/symbolradius/ Round symbols\n                 * @sample {highstock} highcharts/legend/symbolradius/ Round symbols\n                 * @sample {highmaps} highcharts/legend/symbolradius/ Round symbols\n                 * @since 3.0.8\n                 * @apioption legend.symbolRadius\n                 *//**\n                 * The pixel width of the legend item symbol. When the `squareSymbol`\n                 * option is set, this defaults to the `symbolHeight`, otherwise 16.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a horizontal color\n                 * axis, the width defaults to 200.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/symbolwidth/\n                 *         Greater symbol width and padding\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 * @apioption legend.symbolWidth\n                 *//**\n                 * Whether to [use HTML](http://www.highcharts.com/docs/chart-concepts/labels-\n                 * and-string-formatting#html) to render the legend item texts. Prior\n                 * to 4.1.7, when using HTML, [legend.navigation](#legend.navigation)\n                 * was disabled.\n                 *\n                 * @type {Boolean}\n                 * @default false\n                 * @apioption legend.useHTML\n                 *//**\n                 * The width of the legend box.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/width/ Aligned to the plot area\n                 * @default null\n                 * @since 2.0\n                 * @apioption legend.width\n                 *//**\n                 * The pixel padding between the legend item symbol and the legend\n                 * item text.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/symbolpadding/ Greater symbol width and padding\n                 * @default 5\n                 * @product highcharts highstock highmaps\n                 */symbolPadding:5,/**\n                 * The vertical alignment of the legend box. Can be one of `top`,\n                 * `middle` or `bottom`. Vertical position can be further determined\n                 * by the `y` option.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * @validvalue [\"top\", \"middle\", \"bottom\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/legend/verticalalign/ Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/alignment/ Legend alignment\n                 * @default bottom\n                 * @since 2.0\n                 * @product highcharts highstock highmaps\n                 */verticalAlign:'bottom',// width: undefined,\n/**\n                 * The x offset of the legend relative to its horizontal alignment\n                 * `align` within chart.spacingLeft and chart.spacingRight. Negative\n                 * x moves it to the left, positive x moves it to the right.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/width/ Aligned to the plot area\n                 * @default 0\n                 * @since 2.0\n                 * @product highcharts highstock highmaps\n                 */x:0,/**\n                 * The vertical offset of the legend relative to it's vertical alignment\n                 * `verticalAlign` within chart.spacingTop and chart.spacingBottom.\n                 *  Negative y moves it up, positive y moves it down.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/verticalalign/ Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/alignment/ Legend alignment\n                 * @default 0\n                 * @since 2.0\n                 * @product highcharts highstock highmaps\n                 */y:0,/**\n                 * A title to be added on top of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/title/ Legend title\n                 * @sample {highmaps} maps/legend/alignment/ Legend with title\n                 * @since 3.0\n                 * @product highcharts highstock highmaps\n                 */title:{//text: null,\n/**\n                     * Generic CSS styles for the legend title.\n                     *\n                     * @type {CSSObject}\n                     * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the legend title is styled with the `.highcharts-\n                     * legend-title` class.\n                     * @default {\"fontWeight\":\"bold\"}\n                     * @since 3.0\n                     * @product highcharts highstock highmaps\n                     */style:{/**\n                         */fontWeight:'bold'}}},/**\n             * The loading options control the appearance of the loading screen\n             * that covers the plot area on chart operations. This screen only\n             * appears after an explicit call to `chart.showLoading()`. It is a\n             * utility for developers to communicate to the end user that something\n             * is going on, for example while retrieving new data via an XHR connection.\n             * The \"Loading...\" text itself is not part of this configuration\n             * object, but part of the `lang` object.\n             *\n             * @product highcharts highstock highmaps\n             */loading:{/**\n                 * The duration in milliseconds of the fade out effect.\n                 *\n                 * @type {Number}\n                 * @sample highcharts/loading/hideduration/ Fade in and out over a second\n                 * @default 100\n                 * @since 1.2.0\n                 * @apioption loading.hideDuration\n                 *//**\n                 * The duration in milliseconds of the fade in effect.\n                 *\n                 * @type {Number}\n                 * @sample highcharts/loading/hideduration/ Fade in and out over a second\n                 * @default 100\n                 * @since 1.2.0\n                 * @apioption loading.showDuration\n                 *//**\n                 * CSS styles for the loading label `span`.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the loading label is styled with the\n                 * `.highcharts-legend-loading-inner` class.\n                 * @sample {highcharts|highmaps} highcharts/loading/labelstyle/ Vertically centered\n                 * @sample {highstock} stock/loading/general/ Label styles\n                 * @default { \"fontWeight\": \"bold\", \"position\": \"relative\", \"top\": \"45%\" }\n                 * @since 1.2.0\n                 * @product highcharts highstock highmaps\n                 */labelStyle:{fontWeight:'bold',position:'relative',top:'45%'},/**\n                 * CSS styles for the loading screen that covers the plot area.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the loading label is styled with the `.highcharts-\n                 * legend-loading` class.\n                 * @sample {highcharts|highmaps} highcharts/loading/style/ Gray plot area, white text\n                 * @sample {highstock} stock/loading/general/ Gray plot area, white text\n                 * @default { \"position\": \"absolute\", \"backgroundColor\": \"#ffffff\", \"opacity\": 0.5, \"textAlign\": \"center\" }\n                 * @since 1.2.0\n                 */style:{position:'absolute',backgroundColor:'#ffffff',opacity:0.5,textAlign:'center'}},/**\n             * Options for the tooltip that appears when the user hovers over a\n             * series or point.\n             *\n             * @product highcharts highstock highmaps\n             */tooltip:{/**\n                 * Enable or disable the tooltip.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/tooltip/enabled/ Disabled\n                 * @sample {highcharts} highcharts/plotoptions/series-point-events-mouseover/ Disable tooltip and show values on chart instead\n                 * @default true\n                 * @product highcharts highstock highmaps\n                 */enabled:true,/**\n                 * Enable or disable animation of the tooltip. In slow legacy IE browsers\n                 * the animation is disabled by default.\n                 *\n                 * @type {Boolean}\n                 * @default true\n                 * @since 2.3.0\n                 * @product highcharts highstock highmaps\n                 */animation:svg,//crosshairs: null,\n/**\n                 * The radius of the rounded border corners.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ 5px by default\n                 * @sample {highcharts} highcharts/tooltip/borderradius-0/ Square borders\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and border demo\n                 * @default 3\n                 * @product highcharts highstock highmaps\n                 */borderRadius:3,/**\n                 * For series on a datetime axes, the date format in the tooltip's\n                 * header will by default be guessed based on the closest data points.\n                 * This member gives the default string representations used for\n                 * each unit. For an overview of the replacement codes, see [dateFormat](#Highcharts.\n                 * dateFormat).\n                 *\n                 * Defaults to:\n                 *\n                 * <pre>{\n                 * millisecond:\"%A, %b %e, %H:%M:%S.%L\",\n                 * second:\"%A, %b %e, %H:%M:%S\",\n                 * minute:\"%A, %b %e, %H:%M\",\n                 * hour:\"%A, %b %e, %H:%M\",\n                 * day:\"%A, %b %e, %Y\",\n                 * week:\"Week from %A, %b %e, %Y\",\n                 * month:\"%B %Y\",\n                 * year:\"%Y\"\n                 * }</pre>\n                 *\n                 * @type {Object}\n                 * @see [xAxis.dateTimeLabelFormats](#xAxis.dateTimeLabelFormats)\n                 * @product highcharts highstock\n                 */dateTimeLabelFormats:{/**\n                     */millisecond:'%A, %b %e, %H:%M:%S.%L',/**\n                     */second:'%A, %b %e, %H:%M:%S',/**\n                     */minute:'%A, %b %e, %H:%M',/**\n                     */hour:'%A, %b %e, %H:%M',/**\n                     */day:'%A, %b %e, %Y',/**\n                     */week:'Week from %A, %b %e, %Y',/**\n                     */month:'%B %Y',/**\n                     */year:'%Y'},/**\n                 * A string to append to the tooltip format.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/tooltip/footerformat/ A table for value alignment\n                 * @sample {highmaps} maps/tooltip/format/ Format demo\n                 * @default false\n                 * @since 2.2\n                 * @product highcharts highmaps\n                 */footerFormat:'',//formatter: defaultFormatter,\n/* todo: em font-size when finished comparing against HC4\n                headerFormat: '<span style=\"font-size: 0.85em\">{point.key}</span><br/>',\n                *//**\n                 * Padding inside the tooltip, in pixels.\n                 *\n                 * @type {Number}\n                 * @default 8\n                 * @since 5.0.0\n                 * @product highcharts highstock highmaps\n                 */padding:8,//shape: 'callout',\n//shared: false,\n/**\n                 * Proximity snap for graphs or single points. It defaults to 10 for\n                 * mouse-powered devices and 25 for touch devices.\n                 *\n                 * Note that in most cases the whole plot area captures the mouse\n                 * movement, and in these cases `tooltip.snap` doesn't make sense.\n                 * This applies when [stickyTracking](#plotOptions.series.stickyTracking)\n                 * is `true` (default) and when the tooltip is [shared](#tooltip.shared)\n                 * or [split](#tooltip.split).\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ 10 px by default\n                 * @sample {highcharts} highcharts/tooltip/snap-50/ 50 px on graph\n                 * @default 10/25\n                 * @since 1.2.0\n                 * @product highcharts highstock\n                 */snap:isTouchDevice?25:10,/**\n                 * The background color or gradient for the tooltip.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke width is set in the `.highcharts-\n                 * tooltip-box` class.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-solid/ Yellowish background\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-gradient/ Gradient\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/ Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/ Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/ Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/ Tooltip in styled mode\n                 * @default rgba(247,247,247,0.85)\n                 * @product highcharts highstock highmaps\n                 */backgroundColor:color('#f7f7f7').setOpacity(0.85).get(),/**\n                 * The pixel width of the tooltip border.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke width is set in the `.highcharts-\n                 * tooltip-box` class.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ 2px by default\n                 * @sample {highcharts} highcharts/tooltip/borderwidth/ No border (shadow only)\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/ Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/ Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/ Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/ Tooltip in styled mode\n                 * @default 1\n                 * @product highcharts highstock highmaps\n                 */borderWidth:1,/**\n                 * The HTML of the tooltip header line. Variables are enclosed by\n                 * curly brackets. Available variables are `point.key`, `series.name`,\n                 * `series.color` and other members from the `point` and `series`\n                 * objects. The `point.key` variable contains the category name, x\n                 * value or datetime string depending on the type of axis. For datetime\n                 * axes, the `point.key` date format can be set using tooltip.xDateFormat.\n                 *\n                 *\n                 * Defaults to `<span style=\"font-size: 10px\">{point.key}</span><br/>`\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/tooltip/footerformat/ A HTML table in the tooltip\n                 * @sample {highstock} highcharts/tooltip/footerformat/ A HTML table in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/ Format demo\n                 * @product highcharts highstock highmaps\n                 */headerFormat:'<span style=\"font-size: 10px\">{point.key}</span><br/>',/**\n                 * The HTML of the point's line in the tooltip. Variables are enclosed\n                 * by curly brackets. Available variables are point.x, point.y, series.\n                 * name and series.color and other properties on the same form. Furthermore,\n                 * point.y can be extended by the `tooltip.valuePrefix` and `tooltip.\n                 * valueSuffix` variables. This can also be overridden for each series,\n                 * which makes it a good hook for displaying units.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the dot is colored by a class name rather\n                 * than the point color.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/tooltip/pointformat/ A different point format with value suffix\n                 * @sample {highmaps} maps/tooltip/format/ Format demo\n                 * @default <span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>\n                 * @since 2.2\n                 * @product highcharts highstock highmaps\n                 */pointFormat:'<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>',/**\n                 * Whether to apply a drop shadow to the tooltip.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ True by default\n                 * @sample {highcharts} highcharts/tooltip/shadow/ False\n                 * @sample {highmaps} maps/tooltip/positioner/ Fixed tooltip position, border and shadow disabled\n                 * @default true\n                 * @product highcharts highstock highmaps\n                 */shadow:true,/**\n                 * CSS styles for the tooltip. The tooltip can also be styled through\n                 * the CSS class `.highcharts-tooltip`.\n                 *\n                 * @type {CSSObject}\n                 * @sample {highcharts} highcharts/tooltip/style/ Greater padding, bold text\n                 * @default { \"color\": \"#333333\", \"cursor\": \"default\", \"fontSize\": \"12px\", \"pointerEvents\": \"none\", \"whiteSpace\": \"nowrap\" }\n                 * @product highcharts highstock highmaps\n                 */style:{/**\n                     */color:'#333333',/**\n                     */cursor:'default',/**\n                     */fontSize:'12px',/**\n                     */pointerEvents:'none',// #1686 http://caniuse.com/#feat=pointer-events\n/**\n                     */whiteSpace:'nowrap'//xDateFormat: '%A, %b %e, %Y',\n//valueDecimals: null,\n//valuePrefix: '',\n//valueSuffix: ''\n}},/**\n             * Highchart by default puts a credits label in the lower right corner\n             * of the chart. This can be changed using these options.\n             *\n             * @product highcharts highstock highmaps\n             */credits:{/**\n                 * Whether to show the credits text.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/credits/enabled-false/ Credits disabled\n                 * @sample {highstock} stock/credits/enabled/ Credits disabled\n                 * @sample {highmaps} maps/credits/enabled-false/ Credits disabled\n                 * @default true\n                 * @product highcharts highstock highmaps\n                 */enabled:true,/**\n                 * The URL for the credits label.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/credits/href/ Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/ Custom URL and text\n                 * @default {highcharts} http://www.highcharts.com\n                 * @default {highstock} \"http://www.highcharts.com\"\n                 * @default {highmaps} http://www.highcharts.com\n                 * @product highcharts highstock highmaps\n                 */href:'http://www.highcharts.com',/**\n                 * Position configuration for the credits label.\n                 *\n                 * @type {Object}\n                 * @sample {highcharts} highcharts/credits/position-left/ Left aligned\n                 * @sample {highcharts} highcharts/credits/position-left/ Left aligned\n                 * @sample {highmaps} maps/credits/customized/ Left aligned\n                 * @sample {highmaps} maps/credits/customized/ Left aligned\n                 * @since 2.1\n                 * @product highcharts highstock highmaps\n                 */position:{/**\n                     * Horizontal alignment of the credits.\n                     *\n                     * @validvalue [\"left\", \"center\", \"right\"]\n                     * @type {String}\n                     * @default right\n                     * @product highcharts highstock highmaps\n                     */align:'right',/**\n                     * Horizontal pixel offset of the credits.\n                     *\n                     * @type {Number}\n                     * @default -10\n                     * @product highcharts highstock highmaps\n                     */x:-10,/**\n                     * Vertical alignment of the credits.\n                     *\n                     * @validvalue [\"top\", \"middle\", \"bottom\"]\n                     * @type {String}\n                     * @default bottom\n                     * @product highcharts highstock highmaps\n                     */verticalAlign:'bottom',/**\n                     * Vertical pixel offset of the credits.\n                     *\n                     * @type {Number}\n                     * @default -5\n                     * @product highcharts highstock highmaps\n                     */y:-5},/**\n                 * CSS styles for the credits label.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), credits styles can be set with the `.highcharts-\n                 * credits` class.\n                 * @default { \"cursor\": \"pointer\", \"color\": \"#999999\", \"fontSize\": \"10px\" }\n                 * @product highcharts highstock highmaps\n                 */style:{/**\n                     */cursor:'pointer',/**\n                     */color:'#999999',/**\n                     */fontSize:'9px'},/**\n                 * The text for the credits label.\n                 *\n                 * @productdesc {highmaps}\n                 * If a map is loaded as GeoJSON, the text defaults to `Highcharts @\n                 * {map-credits}`. Otherwise, it defaults to `Highcharts.com`.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/credits/href/ Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/ Custom URL and text\n                 * @default {highcharts|highstock} Highcharts.com\n                 */text:'Highcharts.com'}};/**\n         * Sets the getTimezoneOffset function. If the timezone option is set, a default\n         * getTimezoneOffset function with that timezone is returned. If not, the\n         * specified getTimezoneOffset function is returned. If neither are specified,\n         * undefined is returned.\n         * @return {function} a getTimezoneOffset function or undefined\n         */function getTimezoneOffsetOption(){var globalOptions=H.defaultOptions.global,moment=win.moment;if(globalOptions.timezone){if(!moment){// getTimezoneOffset-function stays undefined because it depends on\n// Moment.js\nH.error(25);}else{return function(timestamp){return-moment.tz(timestamp,globalOptions.timezone).utcOffset();};}}// If not timezone is set, look for the getTimezoneOffset callback\nreturn globalOptions.useUTC&&globalOptions.getTimezoneOffset;}/**\n         * Set the time methods globally based on the useUTC option. Time method can be\n         *   either local time or UTC (default). It is called internally on initiating\n         *   Highcharts and after running `Highcharts.setOptions`.\n         *\n         * @private\n         */function setTimeMethods(){var globalOptions=H.defaultOptions.global,Date,useUTC=globalOptions.useUTC,GET=useUTC?'getUTC':'get',SET=useUTC?'setUTC':'set';H.Date=Date=globalOptions.Date||win.Date;// Allow using a different Date class\nDate.hcTimezoneOffset=useUTC&&globalOptions.timezoneOffset;Date.hcGetTimezoneOffset=getTimezoneOffsetOption();Date.hcMakeTime=function(year,month,date,hours,minutes,seconds){var d;if(useUTC){d=Date.UTC.apply(0,arguments);d+=getTZOffset(d);}else{d=new Date(year,month,pick(date,1),pick(hours,0),pick(minutes,0),pick(seconds,0)).getTime();}return d;};each(['Minutes','Hours','Day','Date','Month','FullYear'],function(s){Date['hcGet'+s]=GET+s;});each(['Milliseconds','Seconds','Minutes','Hours','Date','Month','FullYear'],function(s){Date['hcSet'+s]=SET+s;});}/**\n         * Merge the default options with custom options and return the new options\n         * structure. Commonly used for defining reusable templates.\n         *\n         * @function #setOptions\n         * @memberOf  Highcharts\n         * @sample highcharts/global/useutc-false Setting a global option\n         * @sample highcharts/members/setoptions Applying a global theme\n         * @param {Object} options The new custom chart options.\n         * @returns {Object} Updated options.\n         */H.setOptions=function(options){// Copy in the default options\nH.defaultOptions=merge(true,H.defaultOptions,options);// Apply UTC\nsetTimeMethods();return H.defaultOptions;};/**\n         * Get the updated default options. Until 3.0.7, merely exposing defaultOptions for outside modules\n         * wasn't enough because the setOptions method created a new object.\n         */H.getOptions=function(){return H.defaultOptions;};// Series defaults\nH.defaultPlotOptions=H.defaultOptions.plotOptions;// set the default time methods\nsetTimeMethods();})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var correctFloat=H.correctFloat,defined=H.defined,destroyObjectProperties=H.destroyObjectProperties,isNumber=H.isNumber,merge=H.merge,pick=H.pick,deg2rad=H.deg2rad;/**\n         * The Tick class\n         */H.Tick=function(axis,pos,type,noLabel){this.axis=axis;this.pos=pos;this.type=type||'';this.isNew=true;this.isNewLabel=true;if(!type&&!noLabel){this.addLabel();}};H.Tick.prototype={/**\n             * Write the tick label\n             */addLabel:function addLabel(){var tick=this,axis=tick.axis,options=axis.options,chart=axis.chart,categories=axis.categories,names=axis.names,pos=tick.pos,labelOptions=options.labels,str,tickPositions=axis.tickPositions,isFirst=pos===tickPositions[0],isLast=pos===tickPositions[tickPositions.length-1],value=categories?pick(categories[pos],names[pos],pos):pos,label=tick.label,tickPositionInfo=tickPositions.info,dateTimeLabelFormat;// Set the datetime label format. If a higher rank is set for this position, use that. If not,\n// use the general format.\nif(axis.isDatetimeAxis&&tickPositionInfo){dateTimeLabelFormat=options.dateTimeLabelFormats[tickPositionInfo.higherRanks[pos]||tickPositionInfo.unitName];}// set properties for access in render method\ntick.isFirst=isFirst;tick.isLast=isLast;// get the string\nstr=axis.labelFormatter.call({axis:axis,chart:chart,isFirst:isFirst,isLast:isLast,dateTimeLabelFormat:dateTimeLabelFormat,value:axis.isLog?correctFloat(axis.lin2log(value)):value,pos:pos});// prepare CSS\n//css = width && { width: Math.max(1, Math.round(width - 2 * (labelOptions.padding || 10))) + 'px' };\n// first call\nif(!defined(label)){tick.label=label=defined(str)&&labelOptions.enabled?chart.renderer.text(str,0,0,labelOptions.useHTML)// without position absolute, IE export sometimes is wrong\n.css(merge(labelOptions.style)).add(axis.labelGroup):null;tick.labelLength=label&&label.getBBox().width;// Un-rotated length\ntick.rotation=0;// Base value to detect change for new calls to getBBox\n// update\n}else if(label){label.attr({text:str});}},/**\n             * Get the offset height or width of the label\n             */getLabelSize:function getLabelSize(){return this.label?this.label.getBBox()[this.axis.horiz?'height':'width']:0;},/**\n             * Handle the label overflow by adjusting the labels to the left and right edge, or\n             * hide them if they collide into the neighbour label.\n             */handleOverflow:function handleOverflow(xy){var axis=this.axis,pxPos=xy.x,chartWidth=axis.chart.chartWidth,spacing=axis.chart.spacing,leftBound=pick(axis.labelLeft,Math.min(axis.pos,spacing[3])),rightBound=pick(axis.labelRight,Math.max(axis.pos+axis.len,chartWidth-spacing[1])),label=this.label,rotation=this.rotation,factor={left:0,center:0.5,right:1}[axis.labelAlign],labelWidth=label.getBBox().width,slotWidth=axis.getSlotWidth(),modifiedSlotWidth=slotWidth,xCorrection=factor,goRight=1,leftPos,rightPos,textWidth,css={};// Check if the label overshoots the chart spacing box. If it does, move it.\n// If it now overshoots the slotWidth, add ellipsis.\nif(!rotation){leftPos=pxPos-factor*labelWidth;rightPos=pxPos+(1-factor)*labelWidth;if(leftPos<leftBound){modifiedSlotWidth=xy.x+modifiedSlotWidth*(1-factor)-leftBound;}else if(rightPos>rightBound){modifiedSlotWidth=rightBound-xy.x+modifiedSlotWidth*factor;goRight=-1;}modifiedSlotWidth=Math.min(slotWidth,modifiedSlotWidth);// #4177\nif(modifiedSlotWidth<slotWidth&&axis.labelAlign==='center'){xy.x+=goRight*(slotWidth-modifiedSlotWidth-xCorrection*(slotWidth-Math.min(labelWidth,modifiedSlotWidth)));}// If the label width exceeds the available space, set a text width to be\n// picked up below. Also, if a width has been set before, we need to set a new\n// one because the reported labelWidth will be limited by the box (#3938).\nif(labelWidth>modifiedSlotWidth||axis.autoRotation&&(label.styles||{}).width){textWidth=modifiedSlotWidth;}// Add ellipsis to prevent rotated labels to be clipped against the edge of the chart\n}else if(rotation<0&&pxPos-factor*labelWidth<leftBound){textWidth=Math.round(pxPos/Math.cos(rotation*deg2rad)-leftBound);}else if(rotation>0&&pxPos+factor*labelWidth>rightBound){textWidth=Math.round((chartWidth-pxPos)/Math.cos(rotation*deg2rad));}if(textWidth){css.width=textWidth;if(!(axis.options.labels.style||{}).textOverflow){css.textOverflow='ellipsis';}label.css(css);}},/**\n             * Get the x and y position for ticks and labels\n             */getPosition:function getPosition(horiz,pos,tickmarkOffset,old){var axis=this.axis,chart=axis.chart,cHeight=old&&chart.oldChartHeight||chart.chartHeight;return{x:horiz?axis.translate(pos+tickmarkOffset,null,null,old)+axis.transB:axis.left+axis.offset+(axis.opposite?(old&&chart.oldChartWidth||chart.chartWidth)-axis.right-axis.left:0),y:horiz?cHeight-axis.bottom+axis.offset-(axis.opposite?axis.height:0):cHeight-axis.translate(pos+tickmarkOffset,null,null,old)-axis.transB};},/**\n             * Get the x, y position of the tick label\n             */getLabelPosition:function getLabelPosition(x,y,label,horiz,labelOptions,tickmarkOffset,index,step){var axis=this.axis,transA=axis.transA,reversed=axis.reversed,staggerLines=axis.staggerLines,rotCorr=axis.tickRotCorr||{x:0,y:0},yOffset=labelOptions.y,line;if(!defined(yOffset)){if(axis.side===0){yOffset=label.rotation?-8:-label.getBBox().height;}else if(axis.side===2){yOffset=rotCorr.y+8;}else{// #3140, #3140\nyOffset=Math.cos(label.rotation*deg2rad)*(rotCorr.y-label.getBBox(false,0).height/2);}}x=x+labelOptions.x+rotCorr.x-(tickmarkOffset&&horiz?tickmarkOffset*transA*(reversed?-1:1):0);y=y+yOffset-(tickmarkOffset&&!horiz?tickmarkOffset*transA*(reversed?1:-1):0);// Correct for staggered labels\nif(staggerLines){line=index/(step||1)%staggerLines;if(axis.opposite){line=staggerLines-line-1;}y+=line*(axis.labelOffset/staggerLines);}return{x:x,y:Math.round(y)};},/**\n             * Extendible method to return the path of the marker\n             */getMarkPath:function getMarkPath(x,y,tickLength,tickWidth,horiz,renderer){return renderer.crispLine(['M',x,y,'L',x+(horiz?0:-tickLength),y+(horiz?tickLength:0)],tickWidth);},/**\n             * Renders the gridLine.\n             * @param  {Boolean} old         Whether or not the tick is old\n             * @param  {number} opacity      The opacity of the grid line\n             * @param  {number} reverseCrisp Modifier for avoiding overlapping 1 or -1\n             * @return {undefined}\n             */renderGridLine:function renderGridLine(old,opacity,reverseCrisp){var tick=this,axis=tick.axis,options=axis.options,gridLine=tick.gridLine,gridLinePath,attribs={},pos=tick.pos,type=tick.type,tickmarkOffset=axis.tickmarkOffset,renderer=axis.chart.renderer;var gridPrefix=type?type+'Grid':'grid',gridLineWidth=options[gridPrefix+'LineWidth'],gridLineColor=options[gridPrefix+'LineColor'],dashStyle=options[gridPrefix+'LineDashStyle'];if(!gridLine){attribs.stroke=gridLineColor;attribs['stroke-width']=gridLineWidth;if(dashStyle){attribs.dashstyle=dashStyle;}if(!type){attribs.zIndex=1;}if(old){attribs.opacity=0;}tick.gridLine=gridLine=renderer.path().attr(attribs).addClass('highcharts-'+(type?type+'-':'')+'grid-line').add(axis.gridGroup);}// If the parameter 'old' is set, the current call will be followed\n// by another call, therefore do not do any animations this time\nif(!old&&gridLine){gridLinePath=axis.getPlotLinePath(pos+tickmarkOffset,gridLine.strokeWidth()*reverseCrisp,old,true);if(gridLinePath){gridLine[tick.isNew?'attr':'animate']({d:gridLinePath,opacity:opacity});}}},/**\n             * Renders the tick mark.\n             * @param  {Object} xy           The position vector of the mark\n             * @param  {number} xy.x         The x position of the mark\n             * @param  {number} xy.y         The y position of the mark\n             * @param  {number} opacity      The opacity of the mark\n             * @param  {number} reverseCrisp Modifier for avoiding overlapping 1 or -1\n             * @return {undefined}\n             */renderMark:function renderMark(xy,opacity,reverseCrisp){var tick=this,axis=tick.axis,options=axis.options,renderer=axis.chart.renderer,type=tick.type,tickPrefix=type?type+'Tick':'tick',tickSize=axis.tickSize(tickPrefix),mark=tick.mark,isNewMark=!mark,x=xy.x,y=xy.y;var tickWidth=pick(options[tickPrefix+'Width'],!type&&axis.isXAxis?1:0),// X axis defaults to 1\ntickColor=options[tickPrefix+'Color'];if(tickSize){// negate the length\nif(axis.opposite){tickSize[0]=-tickSize[0];}// First time, create it\nif(isNewMark){tick.mark=mark=renderer.path().addClass('highcharts-'+(type?type+'-':'')+'tick').add(axis.axisGroup);mark.attr({stroke:tickColor,'stroke-width':tickWidth});}mark[isNewMark?'attr':'animate']({d:tick.getMarkPath(x,y,tickSize[0],mark.strokeWidth()*reverseCrisp,axis.horiz,renderer),opacity:opacity});}},/**\n             * Renders the tick label.\n             * Note: The label should already be created in init(), so it should only\n             * have to be moved into place.\n             * @param  {Object} xy      The position vector of the label\n             * @param  {number} xy.x    The x position of the label\n             * @param  {number} xy.y    The y position of the label\n             * @param  {Boolean} old    Whether or not the tick is old\n             * @param  {number} opacity The opacity of the label\n             * @param  {number} index   The index of the tick\n             * @return {undefined}\n             */renderLabel:function renderLabel(xy,old,opacity,index){var tick=this,axis=tick.axis,horiz=axis.horiz,options=axis.options,label=tick.label,labelOptions=options.labels,step=labelOptions.step,tickmarkOffset=axis.tickmarkOffset,show=true,x=xy.x,y=xy.y;if(label&&isNumber(x)){label.xy=xy=tick.getLabelPosition(x,y,label,horiz,labelOptions,tickmarkOffset,index,step);// Apply show first and show last. If the tick is both first and\n// last, it is a single centered tick, in which case we show the\n// label anyway (#2100).\nif(tick.isFirst&&!tick.isLast&&!pick(options.showFirstLabel,1)||tick.isLast&&!tick.isFirst&&!pick(options.showLastLabel,1)){show=false;// Handle label overflow and show or hide accordingly\n}else if(horiz&&!axis.isRadial&&!labelOptions.step&&!labelOptions.rotation&&!old&&opacity!==0){tick.handleOverflow(xy);}// apply step\nif(step&&index%step){// show those indices dividable by step\nshow=false;}// Set the new position, and show or hide\nif(show&&isNumber(xy.y)){xy.opacity=opacity;label[tick.isNewLabel?'attr':'animate'](xy);tick.isNewLabel=false;}else{label.attr('y',-9999);// #1338\ntick.isNewLabel=true;}tick.isNew=false;}},/**\n             * Put everything in place\n             *\n             * @param index {Number}\n             * @param old {Boolean} Use old coordinates to prepare an animation into new\n             *                      position\n             */render:function render(index,old,opacity){var tick=this,axis=tick.axis,horiz=axis.horiz,pos=tick.pos,tickmarkOffset=axis.tickmarkOffset,xy=tick.getPosition(horiz,pos,tickmarkOffset,old),x=xy.x,y=xy.y,reverseCrisp=horiz&&x===axis.pos+axis.len||!horiz&&y===axis.pos?-1:1;// #1480, #1687\nopacity=pick(opacity,1);this.isActive=true;// Create the grid line\nthis.renderGridLine(old,opacity,reverseCrisp);// create the tick mark\nthis.renderMark(xy,opacity,reverseCrisp);// the label is created on init - now move it into place\nthis.renderLabel(xy,old,opacity,index);},/**\n             * Destructor for the tick prototype\n             */destroy:function destroy(){destroyObjectProperties(this,this.axis);}};})(Highcharts);var Axis=function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var addEvent=H.addEvent,animObject=H.animObject,arrayMax=H.arrayMax,arrayMin=H.arrayMin,color=H.color,correctFloat=H.correctFloat,defaultOptions=H.defaultOptions,defined=H.defined,deg2rad=H.deg2rad,destroyObjectProperties=H.destroyObjectProperties,each=H.each,extend=H.extend,fireEvent=H.fireEvent,format=H.format,getMagnitude=H.getMagnitude,grep=H.grep,inArray=H.inArray,isArray=H.isArray,isNumber=H.isNumber,isString=H.isString,merge=H.merge,normalizeTickInterval=H.normalizeTickInterval,objectEach=H.objectEach,pick=H.pick,removeEvent=H.removeEvent,splat=H.splat,syncTimeout=H.syncTimeout,Tick=H.Tick;/**\n         * Create a new axis object. Called internally when instanciating a new chart or\n         * adding axes by {@link Highcharts.Chart#addAxis}.\n         *\n         * A chart can have from 0 axes (pie chart) to multiples. In a normal, single\n         * series cartesian chart, there is one X axis and one Y axis.\n         *\n         * The X axis or axes are referenced by {@link Highcharts.Chart.xAxis}, which is\n         * an array of Axis objects. If there is only one axis, it can be referenced\n         * through `chart.xAxis[0]`, and multiple axes have increasing indices. The same\n         * pattern goes for Y axes.\n         *\n         * If you need to get the axes from a series object, use the `series.xAxis` and\n         * `series.yAxis` properties. These are not arrays, as one series can only be\n         * associated to one X and one Y axis.\n         *\n         * A third way to reference the axis programmatically is by `id`. Add an `id` in\n         * the axis configuration options, and get the axis by\n         * {@link Highcharts.Chart#get}.\n         *\n         * Configuration options for the axes are given in options.xAxis and\n         * options.yAxis.\n         *\n         * @class Highcharts.Axis\n         * @memberOf Highcharts\n         * @param {Highcharts.Chart} chart - The Chart instance to apply the axis on.\n         * @param {Object} options - Axis options\n         */var Axis=function Axis(){this.init.apply(this,arguments);};H.extend(Axis.prototype,/** @lends Highcharts.Axis.prototype */{/**\n             * The X axis or category axis. Normally this is the horizontal axis,\n             * though if the chart is inverted this is the vertical axis. In case of\n             * multiple axes, the xAxis node is an array of configuration objects.\n             *\n             * See [../class-reference/Highcharts.Axis](the Axis object) for\n             * programmatic access to the axis.\n             *\n             * @productdesc {highmaps}\n             * In Highmaps, the axis is hidden, but it is used behind the scenes to\n             * control features like zooming and panning. Zooming is in effect the same\n             * as setting the extremes of one of the exes.\n             *\n             * @optionparent xAxis\n             */defaultOptions:{// allowDecimals: null,\n// alternateGridColor: null,\n// categories: [],\n/**\n                 * For a datetime axis, the scale will automatically adjust to the\n                 * appropriate unit. This member gives the default string representations\n                 * used for each unit. For intermediate values, different units may\n                 * be used, for example the `day` unit can be used on midnight and\n                 * `hour` unit be used for intermediate values on the same axis. For\n                 * an overview of the replacement codes, see [dateFormat](#Highcharts.\n                 * dateFormat). Defaults to:\n                 *\n                 * <pre>{\n                 * millisecond: '%H:%M:%S.%L',\n                 * second: '%H:%M:%S',\n                 * minute: '%H:%M',\n                 * hour: '%H:%M',\n                 * day: '%e. %b',\n                 * week: '%e. %b',\n                 * month: '%b \\'%y',\n                 * year: '%Y'\n                 * }</pre>\n                 *\n                 * @type {Object}\n                 * @sample {highcharts} highcharts/xaxis/datetimelabelformats/ Different day format on X axis\n                 * @sample {highstock} stock/xaxis/datetimelabelformats/ More information in x axis labels\n                 * @product highcharts highstock\n                 */dateTimeLabelFormats:{/**\n                     */millisecond:'%H:%M:%S.%L',/**\n                     */second:'%H:%M:%S',/**\n                     */minute:'%H:%M',/**\n                     */hour:'%H:%M',/**\n                     */day:'%e. %b',/**\n                     */week:'%e. %b',/**\n                     */month:'%b \\'%y',/**\n                     */year:'%Y'},/**\n                 * Whether to force the axis to end on a tick. Use this option with\n                 * the `maxPadding` option to control the axis end.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/reflow-true/ True by default\n                 * @sample {highcharts} highcharts/yaxis/endontick/ False\n                 * @sample {highstock} stock/demo/basic-line/ True by default\n                 * @sample {highstock} stock/xaxis/endontick/ False\n                 * @default false\n                 * @since 1.2.0\n                 * @product highcharts highstock highmaps\n                 */endOnTick:false,// reversed: false,\n/**\n                 * The axis labels show the number or category for each tick.\n                 *\n                 * @productdesc {highmaps}\n                 * X and Y axis labels are by default disabled in Highmaps, but the\n                 * functionality is inherited from Highcharts and used on `colorAxis`,\n                 * and can be enabled on X and Y axes too.\n                 */labels:{/**\n                     * Enable or disable the axis labels.\n                     *\n                     * @type {Boolean}\n                     * @sample {highcharts} highcharts/xaxis/labels-enabled/ X axis labels disabled\n                     * @sample {highstock} stock/xaxis/labels-enabled/ X axis labels disabled\n                     * @default {highstock} true\n                     * @default {highmaps} false\n                     * @product highcharts highstock highmaps\n                     */enabled:true,// rotation: 0,\n// align: 'center',\n// step: null,\n/**\n                     * CSS styles for the label. Use `whiteSpace: 'nowrap'` to prevent\n                     * wrapping of category labels. Use `textOverflow: 'none'` to prevent\n                     * ellipsis (dots).\n                     *\n                     * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the labels are styled with the `.highcharts-\n                     * axis-labels` class.\n                     *\n                     * @type {CSSObject}\n                     * @sample {highcharts} highcharts/xaxis/labels-style/ Red X axis labels\n                     * @default { \"color\": \"#666666\", \"cursor\": \"default\", \"fontSize\": \"11px\" }\n                     * @product highcharts highstock highmaps\n                     */style:{/**\n                         */color:'#666666',/**\n                         */cursor:'default',/**\n                         */fontSize:'11px'},/**\n                     * The x position offset of the label relative to the tick position\n                     * on the axis.\n                     *\n                     * @type {Number}\n                     * @sample {highcharts} highcharts/xaxis/labels-x/ Y axis labels placed on grid lines\n                     * @default 0\n                     * @product highcharts highstock highmaps\n                     */x:0//y: undefined\n/*formatter: function () {\n                    \treturn this.value;\n                    },*/},//linkedTo: null,\n//max: undefined,\n//min: undefined,\n/**\n                 * Padding of the min value relative to the length of the axis. A\n                 * padding of 0.05 will make a 100px axis 5px longer. This is useful\n                 * when you don't want the lowest data value to appear on the edge\n                 * of the plot area. When the axis' `min` option is set or a min extreme\n                 * is set using `axis.setExtremes()`, the minPadding will be ignored.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/minpadding/ Min padding of 0.2\n                 * @sample {highstock} stock/xaxis/minpadding-maxpadding/ Greater min- and maxPadding\n                 * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/ Add some padding\n                 * @default {highcharts} 0.01\n                 * @default {highstock} 0\n                 * @default {highmaps} 0\n                 * @since 1.2.0\n                 * @product highcharts highstock highmaps\n                 */minPadding:0.01,/**\n                 * Padding of the max value relative to the length of the axis. A\n                 * padding of 0.05 will make a 100px axis 5px longer. This is useful\n                 * when you don't want the highest data value to appear on the edge\n                 * of the plot area. When the axis' `max` option is set or a max extreme\n                 * is set using `axis.setExtremes()`, the maxPadding will be ignored.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/maxpadding/ Max padding of 0.25 on y axis\n                 * @sample {highstock} stock/xaxis/minpadding-maxpadding/ Greater min- and maxPadding\n                 * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/ Add some padding\n                 * @default {highcharts} 0.01\n                 * @default {highstock} 0\n                 * @default {highmaps} 0\n                 * @since 1.2.0\n                 * @product highcharts highstock highmaps\n                 */maxPadding:0.01,//minRange: null,\n//minorTickInterval: null,\n/**\n                 * The pixel length of the minor tick marks.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/minorticklength/ 10px on Y axis\n                 * @sample {highstock} stock/xaxis/minorticks/ 10px on Y axis\n                 * @default 2\n                 * @product highcharts highstock highmaps\n                 */minorTickLength:2,/**\n                 * The position of the minor tick marks relative to the axis line.\n                 *  Can be one of `inside` and `outside`.\n                 *\n                 * @validvalue [\"inside\", \"outside\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/yaxis/minortickposition-outside/ Outside by default\n                 * @sample {highcharts} highcharts/yaxis/minortickposition-inside/ Inside\n                 * @sample {highstock} stock/xaxis/minorticks/ Inside\n                 * @default outside\n                 * @product highcharts highstock highmaps\n                 */minorTickPosition:'outside',// inside or outside\n//opposite: false,\n//offset: 0,\n//plotBands: [{\n//\tevents: {},\n//\tzIndex: 1,\n//\tlabels: { align, x, verticalAlign, y, style, rotation, textAlign }\n//}],\n//plotLines: [{\n//\tevents: {}\n//  dashStyle: {}\n//\tzIndex:\n//\tlabels: { align, x, verticalAlign, y, style, rotation, textAlign }\n//}],\n//reversed: false,\n// showFirstLabel: true,\n// showLastLabel: true,\n/**\n                 * For datetime axes, this decides where to put the tick between weeks.\n                 *  0 = Sunday, 1 = Monday.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/xaxis/startofweek-monday/ Monday by default\n                 * @sample {highcharts} highcharts/xaxis/startofweek-sunday/ Sunday\n                 * @sample {highstock} stock/xaxis/startofweek-1 Monday by default\n                 * @sample {highstock} stock/xaxis/startofweek-0 Sunday\n                 * @default 1\n                 * @product highcharts highstock\n                 */startOfWeek:1,/**\n                 * Whether to force the axis to start on a tick. Use this option with\n                 * the `minPadding` option to control the axis start.\n                 *\n                 * @productdesc {highstock}\n                 * In Highstock, `startOnTick` is always false when the navigator is\n                 * enabled, to prevent jumpy scrolling.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/xaxis/startontick-false/ False by default\n                 * @sample {highcharts} highcharts/xaxis/startontick-true/ True\n                 * @sample {highstock} stock/xaxis/endontick/ False for Y axis\n                 * @default false\n                 * @since 1.2.0\n                 */startOnTick:false,//tickInterval: null,\n/**\n                 * The pixel length of the main tick marks.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/xaxis/ticklength/ 20 px tick length on the X axis\n                 * @sample {highstock} stock/xaxis/ticks/ Formatted ticks on X axis\n                 * @default 10\n                 * @product highcharts highstock highmaps\n                 */tickLength:10,/**\n                 * For categorized axes only. If `on` the tick mark is placed in the\n                 * center of the category, if `between` the tick mark is placed between\n                 * categories. The default is `between` if the `tickInterval` is 1,\n                 *  else `on`.\n                 *\n                 * @validvalue [null, \"on\", \"between\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/xaxis/tickmarkplacement-between/ \"between\" by default\n                 * @sample {highcharts} highcharts/xaxis/tickmarkplacement-on/ \"on\"\n                 * @default null\n                 * @product highcharts\n                 */tickmarkPlacement:'between',// on or between\n/**\n                 * If tickInterval is `null` this option sets the approximate pixel\n                 * interval of the tick marks. Not applicable to categorized axis.\n                 *\n                 *\n                 * The tick interval is also influenced by the [minTickInterval](#xAxis.\n                 * minTickInterval) option, that, by default prevents ticks from being\n                 * denser than the data points.\n                 *\n                 * Defaults to `72` for the Y axis and `100` for the X axis.\n                 *\n                 * @type {Number}\n                 * @see [tickInterval](#xAxis.tickInterval), [tickPositioner](#xAxis.tickPositioner),\n                 *  [tickPositions](#xAxis.tickPositions)-\n                 * @sample {highcharts} highcharts/xaxis/tickpixelinterval-50/ 50 px on X axis\n                 * @sample {highstock} stock/xaxis/tickpixelinterval/ 200 px on X axis\n                 * @product highcharts highstock highmaps\n                 */tickPixelInterval:100,/**\n                 * The position of the major tick marks relative to the axis line.\n                 *  Can be one of `inside` and `outside`.\n                 *\n                 * @validvalue [\"inside\", \"outside\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/xaxis/tickposition-outside/ \"outside\" by default\n                 * @sample {highcharts} highcharts/xaxis/tickposition-inside/ \"inside\"\n                 * @sample {highstock} stock/xaxis/ticks/ Formatted ticks on X axis\n                 * @default {highcharts} outside\n                 * @default {highstock} \"outside\"\n                 * @default {highmaps} outside\n                 * @product highcharts highstock highmaps\n                 */tickPosition:'outside',/**\n                 * The axis title, showing next to the axis line.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, the axis is hidden by default, but adding an axis title\n                 * is still possible. X axis and Y axis titles will appear at the bottom\n                 * and left by default.\n                 */title:{//text: null,\n/**\n                     * Alignment of the title relative to the axis values. Possible values\n                     * are \"low\", \"middle\" or \"high\".\n                     *\n                     * @validvalue [\"low\", \"middle\", \"high\"]\n                     * @type {String}\n                     * @sample {highcharts} highcharts/xaxis/title-align-low/ \"low\"\n                     * @sample {highcharts} highcharts/xaxis/title-align-center/ \"middle\" by default\n                     * @sample {highcharts} highcharts/xaxis/title-align-high/ \"high\"\n                     * @sample {highcharts} highcharts/yaxis/title-offset/ Place the Y axis title on top of the axis\n                     * @sample {highstock} stock/xaxis/title-align/ Aligned to \"high\" value\n                     * @default {highcharts} middle\n                     * @default {highstock} \"middle\"\n                     * @default {highmaps} middle\n                     * @product highcharts highstock highmaps\n                     */align:'middle',// low, middle or high\n//margin: 0 for horizontal, 10 for vertical axes,\n// reserveSpace: true,\n//rotation: 0,\n//side: 'outside',\n/**\n                     * CSS styles for the title. If the title text is longer than the\n                     * axis length, it will wrap to multiple lines by default. This can\n                     * be customized by setting `textOverflow: 'ellipsis'`, by\n                     * setting a specific `width` or by setting `wordSpace: 'nowrap'`.\n                     *\n                     *\n                     * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the stroke width is given in the\n                     * `.highcharts-axis-title` class.\n                     *\n                     * @type {CSSObject}\n                     * @sample {highcharts} highcharts/xaxis/title-style/ Red\n                     * @sample {highcharts} highcharts/css/axis/ Styled mode\n                     * @default { \"color\": \"#666666\" }\n                     * @product highcharts highstock highmaps\n                     */style:{/**\n                         */color:'#666666'//x: 0,\n//y: 0\n}},/**\n                 * The type of axis. Can be one of `linear`, `logarithmic`, `datetime`\n                 * or `category`. In a datetime axis, the numbers are given in milliseconds,\n                 * and tick marks are placed on appropriate values like full hours\n                 * or days. In a category axis, the [point names](#series<line>.data.\n                 * name) of the chart's series are used for categories, if not a [categories](#xAxis.\n                 * categories) array is defined.\n                 *\n                 * @validvalue [\"linear\", \"logarithmic\", \"datetime\", \"category\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/xaxis/type-linear/ Linear\n                 * @sample {highcharts} highcharts/yaxis/type-log/ Logarithmic\n                 * @sample {highcharts} highcharts/yaxis/type-log-minorgrid/ Logarithmic with minor grid lines\n                 * @sample {highcharts} highcharts/xaxis/type-log-both/ Logarithmic on two axes\n                 * @sample {highcharts} highcharts/yaxis/type-log-negative/ Logarithmic with extension to emulate negative values\n                 * @default linear\n                 * @product highcharts\n                 */type:'linear',// linear, logarithmic or datetime\n//visible: true\n/**\n                 * Color of the minor, secondary grid lines.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke width is given in the `.highcharts-\n                 * minor-grid-line` class.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/yaxis/minorgridlinecolor/ Bright grey lines from Y axis\n                 * @sample {highcharts} highcharts/css/axis-grid/ Styled mode\n                 * @sample {highstock} stock/xaxis/minorgridlinecolor/ Bright grey lines from Y axis\n                 * @sample {highstock} highcharts/css/axis-grid/ Styled mode\n                 * @default #f2f2f2\n                 * @product highcharts highstock highmaps\n                 */minorGridLineColor:'#f2f2f2',// minorGridLineDashStyle: null,\n/**\n                 * Width of the minor, secondary grid lines.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke width is given in the `.highcharts-\n                 * grid-line` class.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/minorgridlinewidth/ 2px lines from Y axis\n                 * @sample {highcharts} highcharts/css/axis-grid/ Styled mode\n                 * @sample {highstock} stock/xaxis/minorgridlinewidth/ 2px lines from Y axis\n                 * @sample {highstock} highcharts/css/axis-grid/ Styled mode\n                 * @default 1\n                 * @product highcharts highstock highmaps\n                 */minorGridLineWidth:1,/**\n                 * Color for the minor tick marks.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/yaxis/minortickcolor/ Black tick marks on Y axis\n                 * @sample {highstock} stock/xaxis/minorticks/ Black tick marks on Y axis\n                 * @default #999999\n                 * @product highcharts highstock highmaps\n                 */minorTickColor:'#999999',//minorTickWidth: 0,\n/**\n                 * The color of the line marking the axis itself.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the line stroke is given in the `.highcharts-\n                 * axis-line` or `.highcharts-xaxis-line` class.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, the axis line is hidden by default.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/yaxis/linecolor/ A red line on Y axis\n                 * @sample {highcharts} highcharts/css/axis/ Axes in styled mode\n                 * @sample {highstock} stock/xaxis/linecolor/ A red line on X axis\n                 * @sample {highstock} highcharts/css/axis/ Axes in styled mode\n                 * @default #ccd6eb\n                 * @product highcharts highstock highmaps\n                 */lineColor:'#ccd6eb',/**\n                 * The width of the line marking the axis itself.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke width is given in the `.highcharts-\n                 * axis-line` or `.highcharts-xaxis-line` class.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/linecolor/ A 1px line on Y axis\n                 * @sample {highcharts} highcharts/css/axis/ Axes in styled mode\n                 * @sample {highstock} stock/xaxis/linewidth/ A 2px line on X axis\n                 * @sample {highstock} highcharts/css/axis/ Axes in styled mode\n                 * @default {highcharts} 1\n                 * @default {highstock} 1\n                 * @default {highmaps} 0\n                 * @product highcharts highstock highmaps\n                 */lineWidth:1,/**\n                 * Color of the grid lines extending the ticks across the plot area.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke is given in the `.highcharts-grid-\n                 * line` class.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, the grid lines are hidden by default.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/yaxis/gridlinecolor/ Green lines\n                 * @sample {highcharts} highcharts/css/axis-grid/ Styled mode\n                 * @sample {highstock} stock/xaxis/gridlinecolor/ Green lines\n                 * @sample {highstock} highcharts/css/axis-grid/ Styled mode\n                 * @default #e6e6e6\n                 * @product highcharts highstock highmaps\n                 */gridLineColor:'#e6e6e6',// gridLineDashStyle: 'solid',\n// gridLineWidth: 0,\n/**\n                 * Color for the main tick marks.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke is given in the `.highcharts-tick`\n                 * class.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/xaxis/tickcolor/ Red ticks on X axis\n                 * @sample {highcharts} highcharts/css/axis-grid/ Styled mode\n                 * @sample {highstock} stock/xaxis/ticks/ Formatted ticks on X axis\n                 * @sample {highstock} highcharts/css/axis-grid/ Styled mode\n                 * @default #ccd6eb\n                 * @product highcharts highstock highmaps\n                 */tickColor:'#ccd6eb'// tickWidth: 1\n},/**\n             * This option set extends the defaultOptions for Y axes.\n             * @extends xAxis\n             * @optionparent yAxis\n             */defaultYAxisOptions:{/**\n                 * Whether to force the axis to end on a tick. Use this option with\n                 * the `maxPadding` option to control the axis end.\n                 *\n                 * @productdesc {highstock}\n                 * In Highstock, `endOnTick` is always false when the navigator is\n                 * enabled, to prevent jumpy scrolling.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/reflow-true/ True by default\n                 * @sample {highcharts} highcharts/yaxis/endontick-false/ False\n                 * @sample {highcharts} highcharts/yaxis/endontick-log-false/ False\n                 * @sample {highstock} stock/demo/basic-line/ True by default\n                 * @sample {highstock} stock/xaxis/endontick/ False\n                 * @default true\n                 * @since 1.2.0\n                 * @product highcharts highstock\n                 */endOnTick:true,/**\n                 */tickPixelInterval:72,/**\n                 * Whether to show the last tick label. Defaults to `true` on cartesian\n                 * charts, and `false` on polar charts.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/xaxis/showlastlabel-true/ Set to true on X axis\n                 * @sample {highstock} stock/xaxis/showfirstlabel/ Labels below plot lines on Y axis\n                 * @default false\n                 * @product highcharts highstock\n                 */showLastLabel:true,/**\n                 * @extends xAxis.labels\n                 * @product highcharts highstock highmaps\n                 */labels:{/**\n                     * The x position offset of the label relative to the tick position\n                     * on the axis. Defaults to -15 for left axis, 15 for right axis.\n                     *\n                     * @type {Number}\n                     * @sample {highcharts} highcharts/xaxis/labels-x/ Y axis labels placed on grid lines\n                     * @default 0\n                     * @product highcharts highstock highmaps\n                     */x:-8},/**\n                 * Padding of the max value relative to the length of the axis. A\n                 * padding of 0.05 will make a 100px axis 5px longer. This is useful\n                 * when you don't want the highest data value to appear on the edge\n                 * of the plot area. When the axis' `max` option is set or a max extreme\n                 * is set using `axis.setExtremes()`, the maxPadding will be ignored.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/maxpadding-02/ Max padding of 0.2\n                 * @sample {highstock} stock/xaxis/minpadding-maxpadding/ Greater min- and maxPadding\n                 * @default 0.05\n                 * @since 1.2.0\n                 * @product highcharts highstock\n                 */maxPadding:0.05,/**\n                 * Padding of the min value relative to the length of the axis. A\n                 * padding of 0.05 will make a 100px axis 5px longer. This is useful\n                 * when you don't want the lowest data value to appear on the edge\n                 * of the plot area. When the axis' `min` option is set or a max extreme\n                 * is set using `axis.setExtremes()`, the maxPadding will be ignored.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/minpadding/ Min padding of 0.2\n                 * @sample {highstock} stock/xaxis/minpadding-maxpadding/ Greater min- and maxPadding\n                 * @default 0.05\n                 * @since 1.2.0\n                 * @product highcharts highstock\n                 */minPadding:0.05,/**\n                 * Whether to force the axis to start on a tick. Use this option with\n                 * the `maxPadding` option to control the axis start.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/xaxis/startontick-false/ False by default\n                 * @sample {highcharts} highcharts/xaxis/startontick-true/ True\n                 * @sample {highstock} stock/xaxis/endontick/ False for Y axis\n                 * @default true\n                 * @since 1.2.0\n                 * @product highcharts highstock\n                 */startOnTick:true,/**\n                 * @extends xAxis.title\n                 * @product highcharts highstock highmaps\n                 */title:{/**\n                     * The rotation of the text in degrees. 0 is horizontal, 270 is vertical\n                     * reading from bottom to top.\n                     *\n                     * @type {Number}\n                     * @sample {highcharts} highcharts/yaxis/title-offset/ Horizontal\n                     * @default 270\n                     * @product highcharts highstock highmaps\n                     */rotation:270,/**\n                     * The actual text of the axis title. Horizontal texts can contain\n                     * HTML, but rotated texts are painted using vector techniques and\n                     * must be clean text. The Y axis title is disabled by setting the\n                     * `text` option to `null`.\n                     *\n                     * @type {String}\n                     * @sample {highcharts} highcharts/xaxis/title-text/ Custom HTML\n                     * @default Values\n                     * @product highcharts\n                     */text:'Values'},/**\n                 * The stack labels show the total value for each bar in a stacked\n                 * column or bar chart. The label will be placed on top of positive\n                 * columns and below negative columns. In case of an inverted column\n                 * chart or a bar chart the label is placed to the right of positive\n                 * bars and to the left of negative bars.\n                 *\n                 * @product highcharts\n                 */stackLabels:{/**\n                     * Allow the stack labels to overlap.\n                     *\n                     * @type {Boolean}\n                     * @sample {highcharts} highcharts/yaxis/stacklabels-allowoverlap-false/\n                     *         Default false\n                     * @since 5.0.13\n                     * @product highcharts\n                     */allowOverlap:false,/**\n                     * Enable or disable the stack total labels.\n                     *\n                     * @type {Boolean}\n                     * @sample {highcharts} highcharts/yaxis/stacklabels-enabled/ Enabled stack total labels\n                     * @since 2.1.5\n                     * @product highcharts\n                     */enabled:false,//align: dynamic,\n//y: dynamic,\n//x: dynamic,\n//verticalAlign: dynamic,\n//textAlign: dynamic,\n//rotation: 0,\n/**\n                     * Callback JavaScript function to format the label. The value is\n                     * given by `this.total`. Defaults to:\n                     *\n                     * <pre>function() {\n                     * return this.total;\n                     * }</pre>\n                     *\n                     * @type {Function}\n                     * @sample {highcharts} highcharts/yaxis/stacklabels-formatter/ Added units to stack total value\n                     * @since 2.1.5\n                     * @product highcharts\n                     */formatter:function formatter(){return H.numberFormat(this.total,-1);},/**\n                     * CSS styles for the label.\n                     *\n                     * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the styles are set in the `.highcharts-stack-\n                     * label` class.\n                     *\n                     * @type {CSSObject}\n                     * @sample {highcharts} highcharts/yaxis/stacklabels-style/ Red stack total labels\n                     * @default { \"color\": \"#000000\", \"fontSize\": \"11px\", \"fontWeight\": \"bold\", \"textShadow\": \"1px 1px contrast, -1px -1px contrast, -1px 1px contrast, 1px -1px contrast\" }\n                     * @since 2.1.5\n                     * @product highcharts\n                     */style:{/**\n                         */fontSize:'11px',/**\n                         */fontWeight:'bold',/**\n                         */color:'#000000',/**\n                         */textOutline:'1px contrast'}},/**\n                 * The width of the grid lines extending the ticks across the plot\n                 * area.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, the grid lines are hidden by default.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/gridlinewidth/ 2px lines\n                 * @sample {highstock} stock/xaxis/gridlinewidth/ 2px lines\n                 * @default 1\n                 * @product highcharts highstock\n                 */gridLineWidth:1,/**\n                 * The width of the line marking the axis itself.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/linecolor/ A 1px line on Y axis\n                 * @sample {highstock} stock/xaxis/linewidth/ A 2px line on X axis\n                 * @default 0\n                 * @product highcharts highstock\n                 */lineWidth:0// tickWidth: 0\n},/**\n             * These options extend the defaultOptions for left axes.\n             *\n             * @private\n             * @type {Object}\n             */defaultLeftAxisOptions:{labels:{x:-15},title:{rotation:270}},/**\n             * These options extend the defaultOptions for right axes.\n             *\n             * @private\n             * @type {Object}\n             */defaultRightAxisOptions:{labels:{x:15},title:{rotation:90}},/**\n             * These options extend the defaultOptions for bottom axes.\n             *\n             * @private\n             * @type {Object}\n             */defaultBottomAxisOptions:{labels:{autoRotation:[-45],x:0// overflow: undefined,\n// staggerLines: null\n},title:{rotation:0}},/**\n             * These options extend the defaultOptions for top axes.\n             *\n             * @private\n             * @type {Object}\n             */defaultTopAxisOptions:{labels:{autoRotation:[-45],x:0// overflow: undefined\n// staggerLines: null\n},title:{rotation:0}},/**\n             * Overrideable function to initialize the axis.\n             *\n             * @see {@link Axis}\n             */init:function init(chart,userOptions){var isXAxis=userOptions.isX,axis=this;/**\n                 * The Chart that the axis belongs to.\n                 *\n                 * @name chart\n                 * @memberOf Axis\n                 * @type {Chart}\n                 */axis.chart=chart;/**\n                 * Whether the axis is horizontal.\n                 *\n                 * @name horiz\n                 * @memberOf Axis\n                 * @type {Boolean}\n                 */axis.horiz=chart.inverted&&!axis.isZAxis?!isXAxis:isXAxis;// Flag, isXAxis\naxis.isXAxis=isXAxis;/**\n                 * The collection where the axis belongs, for example `xAxis`, `yAxis`\n                 * or `colorAxis`. Corresponds to properties on Chart, for example\n                 * {@link Chart.xAxis}.\n                 *\n                 * @name coll\n                 * @memberOf Axis\n                 * @type {String}\n                 */axis.coll=axis.coll||(isXAxis?'xAxis':'yAxis');axis.opposite=userOptions.opposite;// needed in setOptions\n/**\n                 * The side on which the axis is rendered. 0 is top, 1 is right, 2 is\n                 * bottom and 3 is left.\n                 *\n                 * @name side\n                 * @memberOf Axis\n                 * @type {Number}\n                 */axis.side=userOptions.side||(axis.horiz?axis.opposite?0:2:// top : bottom\naxis.opposite?1:3);// right : left\naxis.setOptions(userOptions);var options=this.options,type=options.type,isDatetimeAxis=type==='datetime';axis.labelFormatter=options.labels.formatter||axis.defaultLabelFormatter;// can be overwritten by dynamic format\n// Flag, stagger lines or not\naxis.userOptions=userOptions;//axis.axisTitleMargin = undefined,// = options.title.margin,\naxis.minPixelPadding=0;/**\n                 * Whether the axis is reversed. Based on the `axis.reversed`,\n                 * option, but inverted charts have reversed xAxis by default.\n                 *\n                 * @name reversed\n                 * @memberOf Axis\n                 * @type {Boolean}\n                 */axis.reversed=options.reversed;axis.visible=options.visible!==false;axis.zoomEnabled=options.zoomEnabled!==false;// Initial categories\naxis.hasNames=type==='category'||options.categories===true;axis.categories=options.categories||axis.hasNames;axis.names=axis.names||[];// Preserve on update (#3830)\n// Elements\n//axis.axisGroup = undefined;\n//axis.gridGroup = undefined;\n//axis.axisTitle = undefined;\n//axis.axisLine = undefined;\n// Placeholder for plotlines and plotbands groups\naxis.plotLinesAndBandsGroups={};// Shorthand types\naxis.isLog=type==='logarithmic';axis.isDatetimeAxis=isDatetimeAxis;axis.positiveValuesOnly=axis.isLog&&!axis.allowNegativeLog;// Flag, if axis is linked to another axis\naxis.isLinked=defined(options.linkedTo);// Linked axis.\n//axis.linkedParent = undefined;\n// Major ticks\naxis.ticks={};axis.labelEdge=[];// Minor ticks\naxis.minorTicks={};// List of plotLines/Bands\naxis.plotLinesAndBands=[];// Alternate bands\naxis.alternateBands={};// Axis metrics\n//axis.left = undefined;\n//axis.top = undefined;\n//axis.width = undefined;\n//axis.height = undefined;\n//axis.bottom = undefined;\n//axis.right = undefined;\n//axis.transA = undefined;\n//axis.transB = undefined;\n//axis.oldTransA = undefined;\naxis.len=0;//axis.oldMin = undefined;\n//axis.oldMax = undefined;\n//axis.oldUserMin = undefined;\n//axis.oldUserMax = undefined;\n//axis.oldAxisLength = undefined;\naxis.minRange=axis.userMinRange=options.minRange||options.maxZoom;axis.range=options.range;axis.offset=options.offset||0;// Dictionary for stacks\naxis.stacks={};axis.oldStacks={};axis.stacksTouched=0;// Min and max in the data\n//axis.dataMin = undefined,\n//axis.dataMax = undefined,\n/**\n                 * The maximum value of the axis. In a logarithmic axis, this is the\n                 * logarithm of the real value, and the real value can be obtained from\n                 * {@link Axis#getExtremes}.\n                 *\n                 * @name max\n                 * @memberOf Axis\n                 * @type {Number}\n                 */axis.max=null;/**\n                 * The minimum value of the axis. In a logarithmic axis, this is the\n                 * logarithm of the real value, and the real value can be obtained from\n                 * {@link Axis#getExtremes}.\n                 *\n                 * @name min\n                 * @memberOf Axis\n                 * @type {Number}\n                 */axis.min=null;// User set min and max\n//axis.userMin = undefined,\n//axis.userMax = undefined,\n/**\n                 * The processed crosshair options.\n                 *\n                 * @name crosshair\n                 * @memberOf Axis\n                 * @type {AxisCrosshairOptions}\n                 */axis.crosshair=pick(options.crosshair,splat(chart.options.tooltip.crosshairs)[isXAxis?0:1],false);var events=axis.options.events;// Register. Don't add it again on Axis.update().\nif(inArray(axis,chart.axes)===-1){//\nif(isXAxis){// #2713\nchart.axes.splice(chart.xAxis.length,0,axis);}else{chart.axes.push(axis);}chart[axis.coll].push(axis);}/**\n                 * All series associated to the axis.\n                 *\n                 * @name series\n                 * @memberOf Axis\n                 * @type {Array.<Series>}\n                 */axis.series=axis.series||[];// populated by Series\n// Reversed axis\nif(chart.inverted&&!axis.isZAxis&&isXAxis&&axis.reversed===undefined){axis.reversed=true;}// register event listeners\nobjectEach(events,function(event,eventType){addEvent(axis,eventType,event);});// extend logarithmic axis\naxis.lin2log=options.linearToLogConverter||axis.lin2log;if(axis.isLog){axis.val2lin=axis.log2lin;axis.lin2val=axis.lin2log;}},/**\n             * Merge and set options.\n             *\n             * @private\n             */setOptions:function setOptions(userOptions){this.options=merge(this.defaultOptions,this.coll==='yAxis'&&this.defaultYAxisOptions,[this.defaultTopAxisOptions,this.defaultRightAxisOptions,this.defaultBottomAxisOptions,this.defaultLeftAxisOptions][this.side],merge(defaultOptions[this.coll],// if set in setOptions (#1053)\nuserOptions));},/**\n             * The default label formatter. The context is a special config object for\n             * the label. In apps, use the {@link\n             * https://api.highcharts.com/highcharts/xAxis.labels.formatter|\n             * labels.formatter} instead except when a modification is needed.\n             *\n             * @private\n             */defaultLabelFormatter:function defaultLabelFormatter(){var axis=this.axis,value=this.value,categories=axis.categories,dateTimeLabelFormat=this.dateTimeLabelFormat,lang=defaultOptions.lang,numericSymbols=lang.numericSymbols,numSymMagnitude=lang.numericSymbolMagnitude||1000,i=numericSymbols&&numericSymbols.length,multi,ret,formatOption=axis.options.labels.format,// make sure the same symbol is added for all labels on a linear\n// axis\nnumericSymbolDetector=axis.isLog?Math.abs(value):axis.tickInterval;if(formatOption){ret=format(formatOption,this);}else if(categories){ret=value;}else if(dateTimeLabelFormat){// datetime axis\nret=H.dateFormat(dateTimeLabelFormat,value);}else if(i&&numericSymbolDetector>=1000){// Decide whether we should add a numeric symbol like k (thousands)\n// or M (millions). If we are to enable this in tooltip or other\n// places as well, we can move this logic to the numberFormatter and\n// enable it by a parameter.\nwhile(i--&&ret===undefined){multi=Math.pow(numSymMagnitude,i+1);if(numericSymbolDetector>=multi&&value*10%multi===0&&numericSymbols[i]!==null&&value!==0){// #5480\nret=H.numberFormat(value/multi,-1)+numericSymbols[i];}}}if(ret===undefined){if(Math.abs(value)>=10000){// add thousands separators\nret=H.numberFormat(value,-1);}else{// small numbers\nret=H.numberFormat(value,-1,undefined,'');// #2466\n}}return ret;},/**\n             * Get the minimum and maximum for the series of each axis. The function\n             * analyzes the axis series and updates `this.dataMin` and `this.dataMax`.\n             *\n             * @private\n             */getSeriesExtremes:function getSeriesExtremes(){var axis=this,chart=axis.chart;axis.hasVisibleSeries=false;// Reset properties in case we're redrawing (#3353)\naxis.dataMin=axis.dataMax=axis.threshold=null;axis.softThreshold=!axis.isXAxis;if(axis.buildStacks){axis.buildStacks();}// loop through this axis' series\neach(axis.series,function(series){if(series.visible||!chart.options.chart.ignoreHiddenSeries){var seriesOptions=series.options,xData,threshold=seriesOptions.threshold,seriesDataMin,seriesDataMax;axis.hasVisibleSeries=true;// Validate threshold in logarithmic axes\nif(axis.positiveValuesOnly&&threshold<=0){threshold=null;}// Get dataMin and dataMax for X axes\nif(axis.isXAxis){xData=series.xData;if(xData.length){// If xData contains values which is not numbers, then\n// filter them out. To prevent performance hit, we only\n// do this after we have already found seriesDataMin\n// because in most cases all data is valid. #5234.\nseriesDataMin=arrayMin(xData);if(!isNumber(seriesDataMin)&&!(seriesDataMin instanceof Date)// #5010\n){xData=grep(xData,function(x){return isNumber(x);});seriesDataMin=arrayMin(xData);// Do it again with valid data\n}axis.dataMin=Math.min(pick(axis.dataMin,xData[0]),seriesDataMin);axis.dataMax=Math.max(pick(axis.dataMax,xData[0]),arrayMax(xData));}// Get dataMin and dataMax for Y axes, as well as handle\n// stacking and processed data\n}else{// Get this particular series extremes\nseries.getExtremes();seriesDataMax=series.dataMax;seriesDataMin=series.dataMin;// Get the dataMin and dataMax so far. If percentage is\n// used, the min and max are always 0 and 100. If\n// seriesDataMin and seriesDataMax is null, then series\n// doesn't have active y data, we continue with nulls\nif(defined(seriesDataMin)&&defined(seriesDataMax)){axis.dataMin=Math.min(pick(axis.dataMin,seriesDataMin),seriesDataMin);axis.dataMax=Math.max(pick(axis.dataMax,seriesDataMax),seriesDataMax);}// Adjust to threshold\nif(defined(threshold)){axis.threshold=threshold;}// If any series has a hard threshold, it takes precedence\nif(!seriesOptions.softThreshold||axis.positiveValuesOnly){axis.softThreshold=false;}}}});},/**\n             * Translate from axis value to pixel position on the chart, or back. Use\n             * the `toPixels` and `toValue` functions in applications.\n             *\n             * @private\n             */translate:function translate(val,backwards,cvsCoord,old,handleLog,pointPlacement){var axis=this.linkedParent||this,// #1417\nsign=1,cvsOffset=0,localA=old?axis.oldTransA:axis.transA,localMin=old?axis.oldMin:axis.min,returnValue,minPixelPadding=axis.minPixelPadding,doPostTranslate=(axis.isOrdinal||axis.isBroken||axis.isLog&&handleLog)&&axis.lin2val;if(!localA){localA=axis.transA;}// In vertical axes, the canvas coordinates start from 0 at the top like in\n// SVG.\nif(cvsCoord){sign*=-1;// canvas coordinates inverts the value\ncvsOffset=axis.len;}// Handle reversed axis\nif(axis.reversed){sign*=-1;cvsOffset-=sign*(axis.sector||axis.len);}// From pixels to value\nif(backwards){// reverse translation\nval=val*sign+cvsOffset;val-=minPixelPadding;returnValue=val/localA+localMin;// from chart pixel to value\nif(doPostTranslate){// log and ordinal axes\nreturnValue=axis.lin2val(returnValue);}// From value to pixels\n}else{if(doPostTranslate){// log and ordinal axes\nval=axis.val2lin(val);}returnValue=sign*(val-localMin)*localA+cvsOffset+sign*minPixelPadding+(isNumber(pointPlacement)?localA*pointPlacement:0);}return returnValue;},/**\n             * Translate a value in terms of axis units into pixels within the chart.\n             *\n             * @param  {Number} value\n             *         A value in terms of axis units.\n             * @param  {Boolean} paneCoordinates\n             *         Whether to return the pixel coordinate relative to the chart or\n             *         just the axis/pane itself.\n             * @return {Number} Pixel position of the value on the chart or axis.\n             */toPixels:function toPixels(value,paneCoordinates){return this.translate(value,false,!this.horiz,null,true)+(paneCoordinates?0:this.pos);},/**\n             * Translate a pixel position along the axis to a value in terms of axis\n             * units.\n             * @param  {Number} pixel\n             *         The pixel value coordinate.\n             * @param  {Boolean} paneCoordiantes\n             *         Whether the input pixel is relative to the chart or just the\n             *         axis/pane itself.\n             * @return {Number} The axis value.\n             */toValue:function toValue(pixel,paneCoordinates){return this.translate(pixel-(paneCoordinates?0:this.pos),true,!this.horiz,null,true);},/**\n             * Create the path for a plot line that goes from the given value on\n             * this axis, across the plot to the opposite side. Also used internally for\n             * grid lines and crosshairs.\n             *\n             * @param  {Number} value\n             *         Axis value.\n             * @param  {Number} [lineWidth=1]\n             *         Used for calculation crisp line coordinates.\n             * @param  {Boolean} [old=false]\n             *         Use old coordinates (for resizing and rescaling).\n             * @param  {Boolean} [force=false]\n             *         If `false`, the function will return null when it falls outside\n             *         the axis bounds.\n             * @param  {Number} [translatedValue]\n             *         If given, return the plot line path of a pixel position on the\n             *         axis.\n             *\n             * @return {Array.<String|Number>}\n             *         The SVG path definition for the plot line.\n             */getPlotLinePath:function getPlotLinePath(value,lineWidth,old,force,translatedValue){var axis=this,chart=axis.chart,axisLeft=axis.left,axisTop=axis.top,x1,y1,x2,y2,cHeight=old&&chart.oldChartHeight||chart.chartHeight,cWidth=old&&chart.oldChartWidth||chart.chartWidth,skip,transB=axis.transB,/**\n                     * Check if x is between a and b. If not, either move to a/b or skip,\n                     * depending on the force parameter.\n                     */between=function between(x,a,b){if(x<a||x>b){if(force){x=Math.min(Math.max(a,x),b);}else{skip=true;}}return x;};translatedValue=pick(translatedValue,axis.translate(value,null,null,old));x1=x2=Math.round(translatedValue+transB);y1=y2=Math.round(cHeight-translatedValue-transB);if(!isNumber(translatedValue)){// no min or max\nskip=true;}else if(axis.horiz){y1=axisTop;y2=cHeight-axis.bottom;x1=x2=between(x1,axisLeft,axisLeft+axis.width);}else{x1=axisLeft;x2=cWidth-axis.right;y1=y2=between(y1,axisTop,axisTop+axis.height);}return skip&&!force?null:chart.renderer.crispLine(['M',x1,y1,'L',x2,y2],lineWidth||1);},/**\n             * Internal function to et the tick positions of a linear axis to round\n             * values like whole tens or every five.\n             *\n             * @param  {Number} tickInterval\n             *         The normalized tick interval\n             * @param  {Number} min\n             *         Axis minimum.\n             * @param  {Number} max\n             *         Axis maximum.\n             *\n             * @return {Array.<Number>}\n             *         An array of axis values where ticks should be placed.\n             */getLinearTickPositions:function getLinearTickPositions(tickInterval,min,max){var pos,lastPos,roundedMin=correctFloat(Math.floor(min/tickInterval)*tickInterval),roundedMax=correctFloat(Math.ceil(max/tickInterval)*tickInterval),tickPositions=[];// For single points, add a tick regardless of the relative position\n// (#2662, #6274)\nif(this.single){return[min];}// Populate the intermediate values\npos=roundedMin;while(pos<=roundedMax){// Place the tick on the rounded value\ntickPositions.push(pos);// Always add the raw tickInterval, not the corrected one.\npos=correctFloat(pos+tickInterval);// If the interval is not big enough in the current min - max range to actually increase\n// the loop variable, we need to break out to prevent endless loop. Issue #619\nif(pos===lastPos){break;}// Record the last value\nlastPos=pos;}return tickPositions;},/**\n             * Internal function to return the minor tick positions. For logarithmic\n             * axes, the same logic as for major ticks is reused.\n             *\n             * @return {Array.<Number>}\n             *         An array of axis values where ticks should be placed.\n             */getMinorTickPositions:function getMinorTickPositions(){var axis=this,options=axis.options,tickPositions=axis.tickPositions,minorTickInterval=axis.minorTickInterval,minorTickPositions=[],pos,pointRangePadding=axis.pointRangePadding||0,min=axis.min-pointRangePadding,// #1498\nmax=axis.max+pointRangePadding,// #1498\nrange=max-min;// If minor ticks get too dense, they are hard to read, and may cause long running script. So we don't draw them.\nif(range&&range/minorTickInterval<axis.len/3){// #3875\nif(axis.isLog){// For each interval in the major ticks, compute the minor ticks\n// separately.\neach(this.paddedTicks,function(pos,i,paddedTicks){if(i){minorTickPositions.push.apply(minorTickPositions,axis.getLogTickPositions(minorTickInterval,paddedTicks[i-1],paddedTicks[i],true));}});}else if(axis.isDatetimeAxis&&options.minorTickInterval==='auto'){// #1314\nminorTickPositions=minorTickPositions.concat(axis.getTimeTicks(axis.normalizeTimeTickInterval(minorTickInterval),min,max,options.startOfWeek));}else{for(pos=min+(tickPositions[0]-min)%minorTickInterval;pos<=max;pos+=minorTickInterval){// Very, very, tight grid lines (#5771)\nif(pos===minorTickPositions[0]){break;}minorTickPositions.push(pos);}}}if(minorTickPositions.length!==0){axis.trimTicks(minorTickPositions);// #3652 #3743 #1498 #6330\n}return minorTickPositions;},/**\n             * Adjust the min and max for the minimum range. Keep in mind that the series data is\n             * not yet processed, so we don't have information on data cropping and grouping, or\n             * updated axis.pointRange or series.pointRange. The data can't be processed until\n             * we have finally established min and max.\n             *\n             * @private\n             */adjustForMinRange:function adjustForMinRange(){var axis=this,options=axis.options,min=axis.min,max=axis.max,zoomOffset,spaceAvailable,closestDataRange,i,distance,xData,loopLength,minArgs,maxArgs,minRange;// Set the automatic minimum range based on the closest point distance\nif(axis.isXAxis&&axis.minRange===undefined&&!axis.isLog){if(defined(options.min)||defined(options.max)){axis.minRange=null;// don't do this again\n}else{// Find the closest distance between raw data points, as opposed to\n// closestPointRange that applies to processed points (cropped and grouped)\neach(axis.series,function(series){xData=series.xData;loopLength=series.xIncrement?1:xData.length-1;for(i=loopLength;i>0;i--){distance=xData[i]-xData[i-1];if(closestDataRange===undefined||distance<closestDataRange){closestDataRange=distance;}}});axis.minRange=Math.min(closestDataRange*5,axis.dataMax-axis.dataMin);}}// if minRange is exceeded, adjust\nif(max-min<axis.minRange){spaceAvailable=axis.dataMax-axis.dataMin>=axis.minRange;minRange=axis.minRange;zoomOffset=(minRange-max+min)/2;// if min and max options have been set, don't go beyond it\nminArgs=[min-zoomOffset,pick(options.min,min-zoomOffset)];if(spaceAvailable){// if space is available, stay within the data range\nminArgs[2]=axis.isLog?axis.log2lin(axis.dataMin):axis.dataMin;}min=arrayMax(minArgs);maxArgs=[min+minRange,pick(options.max,min+minRange)];if(spaceAvailable){// if space is availabe, stay within the data range\nmaxArgs[2]=axis.isLog?axis.log2lin(axis.dataMax):axis.dataMax;}max=arrayMin(maxArgs);// now if the max is adjusted, adjust the min back\nif(max-min<minRange){minArgs[0]=max-minRange;minArgs[1]=pick(options.min,max-minRange);min=arrayMax(minArgs);}}// Record modified extremes\naxis.min=min;axis.max=max;},/**\n             * Find the closestPointRange across all series.\n             *\n             * @private\n             */getClosest:function getClosest(){var ret;if(this.categories){ret=1;}else{each(this.series,function(series){var seriesClosest=series.closestPointRange,visible=series.visible||!series.chart.options.chart.ignoreHiddenSeries;if(!series.noSharedTooltip&&defined(seriesClosest)&&visible){ret=defined(ret)?Math.min(ret,seriesClosest):seriesClosest;}});}return ret;},/**\n             * When a point name is given and no x, search for the name in the existing\n             * categories, or if categories aren't provided, search names or create a\n             * new category (#2522).\n             *\n             * @private\n             *\n             * @param  {Point}\n             *         The point to inspect.\n             *\n             * @return {Number}\n             *         The X value that the point is given.\n             */nameToX:function nameToX(point){var explicitCategories=isArray(this.categories),names=explicitCategories?this.categories:this.names,nameX=point.options.x,x;point.series.requireSorting=false;if(!defined(nameX)){nameX=this.options.uniqueNames===false?point.series.autoIncrement():inArray(point.name,names);}if(nameX===-1){// The name is not found in currenct categories\nif(!explicitCategories){x=names.length;}}else{x=nameX;}// Write the last point's name to the names array\nif(x!==undefined){this.names[x]=point.name;}return x;},/**\n             * When changes have been done to series data, update the axis.names.\n             *\n             * @private\n             */updateNames:function updateNames(){var axis=this;if(this.names.length>0){this.names.length=0;this.minRange=this.userMinRange;// Reset\neach(this.series||[],function(series){// Reset incrementer (#5928)\nseries.xIncrement=null;// When adding a series, points are not yet generated\nif(!series.points||series.isDirtyData){series.processData();series.generatePoints();}each(series.points,function(point,i){var x;if(point.options){x=axis.nameToX(point);if(x!==undefined&&x!==point.x){point.x=x;series.xData[i]=x;}}});});}},/**\n             * Update translation information.\n             *\n             * @private\n             */setAxisTranslation:function setAxisTranslation(saveOld){var axis=this,range=axis.max-axis.min,pointRange=axis.axisPointRange||0,closestPointRange,minPointOffset=0,pointRangePadding=0,linkedParent=axis.linkedParent,ordinalCorrection,hasCategories=!!axis.categories,transA=axis.transA,isXAxis=axis.isXAxis;// Adjust translation for padding. Y axis with categories need to go through the same (#1784).\nif(isXAxis||hasCategories||pointRange){// Get the closest points\nclosestPointRange=axis.getClosest();if(linkedParent){minPointOffset=linkedParent.minPointOffset;pointRangePadding=linkedParent.pointRangePadding;}else{each(axis.series,function(series){var seriesPointRange=hasCategories?1:isXAxis?pick(series.options.pointRange,closestPointRange,0):axis.axisPointRange||0,// #2806\npointPlacement=series.options.pointPlacement;pointRange=Math.max(pointRange,seriesPointRange);if(!axis.single){// minPointOffset is the value padding to the left of the axis in order to make\n// room for points with a pointRange, typically columns. When the pointPlacement option\n// is 'between' or 'on', this padding does not apply.\nminPointOffset=Math.max(minPointOffset,isString(pointPlacement)?0:seriesPointRange/2);// Determine the total padding needed to the length of the axis to make room for the\n// pointRange. If the series' pointPlacement is 'on', no padding is added.\npointRangePadding=Math.max(pointRangePadding,pointPlacement==='on'?0:seriesPointRange);}});}// Record minPointOffset and pointRangePadding\nordinalCorrection=axis.ordinalSlope&&closestPointRange?axis.ordinalSlope/closestPointRange:1;// #988, #1853\naxis.minPointOffset=minPointOffset=minPointOffset*ordinalCorrection;axis.pointRangePadding=pointRangePadding=pointRangePadding*ordinalCorrection;// pointRange means the width reserved for each point, like in a column chart\naxis.pointRange=Math.min(pointRange,range);// closestPointRange means the closest distance between points. In columns\n// it is mostly equal to pointRange, but in lines pointRange is 0 while closestPointRange\n// is some other value\nif(isXAxis){axis.closestPointRange=closestPointRange;}}// Secondary values\nif(saveOld){axis.oldTransA=transA;}axis.translationSlope=axis.transA=transA=axis.options.staticScale||axis.len/(range+pointRangePadding||1);axis.transB=axis.horiz?axis.left:axis.bottom;// translation addend\naxis.minPixelPadding=transA*minPointOffset;},minFromRange:function minFromRange(){return this.max-this.range;},/**\n             * Set the tick positions to round values and optionally extend the extremes\n             * to the nearest tick.\n             *\n             * @private\n             */setTickInterval:function setTickInterval(secondPass){var axis=this,chart=axis.chart,options=axis.options,isLog=axis.isLog,log2lin=axis.log2lin,isDatetimeAxis=axis.isDatetimeAxis,isXAxis=axis.isXAxis,isLinked=axis.isLinked,maxPadding=options.maxPadding,minPadding=options.minPadding,length,linkedParentExtremes,tickIntervalOption=options.tickInterval,minTickInterval,tickPixelIntervalOption=options.tickPixelInterval,categories=axis.categories,threshold=axis.threshold,softThreshold=axis.softThreshold,thresholdMin,thresholdMax,hardMin,hardMax;if(!isDatetimeAxis&&!categories&&!isLinked){this.getTickAmount();}// Min or max set either by zooming/setExtremes or initial options\nhardMin=pick(axis.userMin,options.min);hardMax=pick(axis.userMax,options.max);// Linked axis gets the extremes from the parent axis\nif(isLinked){axis.linkedParent=chart[axis.coll][options.linkedTo];linkedParentExtremes=axis.linkedParent.getExtremes();axis.min=pick(linkedParentExtremes.min,linkedParentExtremes.dataMin);axis.max=pick(linkedParentExtremes.max,linkedParentExtremes.dataMax);if(options.type!==axis.linkedParent.options.type){H.error(11,1);// Can't link axes of different type\n}// Initial min and max from the extreme data values\n}else{// Adjust to hard threshold\nif(!softThreshold&&defined(threshold)){if(axis.dataMin>=threshold){thresholdMin=threshold;minPadding=0;}else if(axis.dataMax<=threshold){thresholdMax=threshold;maxPadding=0;}}axis.min=pick(hardMin,thresholdMin,axis.dataMin);axis.max=pick(hardMax,thresholdMax,axis.dataMax);}if(isLog){if(axis.positiveValuesOnly&&!secondPass&&Math.min(axis.min,pick(axis.dataMin,axis.min))<=0){// #978\nH.error(10,1);// Can't plot negative values on log axis\n}// The correctFloat cures #934, float errors on full tens. But it\n// was too aggressive for #4360 because of conversion back to lin,\n// therefore use precision 15.\naxis.min=correctFloat(log2lin(axis.min),15);axis.max=correctFloat(log2lin(axis.max),15);}// handle zoomed range\nif(axis.range&&defined(axis.max)){axis.userMin=axis.min=hardMin=Math.max(axis.dataMin,axis.minFromRange());// #618, #6773\naxis.userMax=hardMax=axis.max;axis.range=null;// don't use it when running setExtremes\n}// Hook for Highstock Scroller. Consider combining with beforePadding.\nfireEvent(axis,'foundExtremes');// Hook for adjusting this.min and this.max. Used by bubble series.\nif(axis.beforePadding){axis.beforePadding();}// adjust min and max for the minimum range\naxis.adjustForMinRange();// Pad the values to get clear of the chart's edges. To avoid tickInterval taking the padding\n// into account, we do this after computing tick interval (#1337).\nif(!categories&&!axis.axisPointRange&&!axis.usePercentage&&!isLinked&&defined(axis.min)&&defined(axis.max)){length=axis.max-axis.min;if(length){if(!defined(hardMin)&&minPadding){axis.min-=length*minPadding;}if(!defined(hardMax)&&maxPadding){axis.max+=length*maxPadding;}}}// Handle options for floor, ceiling, softMin and softMax (#6359)\nif(isNumber(options.softMin)){axis.min=Math.min(axis.min,options.softMin);}if(isNumber(options.softMax)){axis.max=Math.max(axis.max,options.softMax);}if(isNumber(options.floor)){axis.min=Math.max(axis.min,options.floor);}if(isNumber(options.ceiling)){axis.max=Math.min(axis.max,options.ceiling);}// When the threshold is soft, adjust the extreme value only if\n// the data extreme and the padded extreme land on either side of the threshold. For example,\n// a series of [0, 1, 2, 3] would make the yAxis add a tick for -1 because of the\n// default minPadding and startOnTick options. This is prevented by the softThreshold\n// option.\nif(softThreshold&&defined(axis.dataMin)){threshold=threshold||0;if(!defined(hardMin)&&axis.min<threshold&&axis.dataMin>=threshold){axis.min=threshold;}else if(!defined(hardMax)&&axis.max>threshold&&axis.dataMax<=threshold){axis.max=threshold;}}// get tickInterval\nif(axis.min===axis.max||axis.min===undefined||axis.max===undefined){axis.tickInterval=1;}else if(isLinked&&!tickIntervalOption&&tickPixelIntervalOption===axis.linkedParent.options.tickPixelInterval){axis.tickInterval=tickIntervalOption=axis.linkedParent.tickInterval;}else{axis.tickInterval=pick(tickIntervalOption,this.tickAmount?(axis.max-axis.min)/Math.max(this.tickAmount-1,1):undefined,categories?// for categoried axis, 1 is default, for linear axis use tickPix\n1:// don't let it be more than the data range\n(axis.max-axis.min)*tickPixelIntervalOption/Math.max(axis.len,tickPixelIntervalOption));}// Now we're finished detecting min and max, crop and group series data. This\n// is in turn needed in order to find tick positions in ordinal axes.\nif(isXAxis&&!secondPass){each(axis.series,function(series){series.processData(axis.min!==axis.oldMin||axis.max!==axis.oldMax);});}// set the translation factor used in translate function\naxis.setAxisTranslation(true);// hook for ordinal axes and radial axes\nif(axis.beforeSetTickPositions){axis.beforeSetTickPositions();}// hook for extensions, used in Highstock ordinal axes\nif(axis.postProcessTickInterval){axis.tickInterval=axis.postProcessTickInterval(axis.tickInterval);}// In column-like charts, don't cramp in more ticks than there are points (#1943, #4184)\nif(axis.pointRange&&!tickIntervalOption){axis.tickInterval=Math.max(axis.pointRange,axis.tickInterval);}// Before normalizing the tick interval, handle minimum tick interval. This applies only if tickInterval is not defined.\nminTickInterval=pick(options.minTickInterval,axis.isDatetimeAxis&&axis.closestPointRange);if(!tickIntervalOption&&axis.tickInterval<minTickInterval){axis.tickInterval=minTickInterval;}// for linear axes, get magnitude and normalize the interval\nif(!isDatetimeAxis&&!isLog&&!tickIntervalOption){axis.tickInterval=normalizeTickInterval(axis.tickInterval,null,getMagnitude(axis.tickInterval),// If the tick interval is between 0.5 and 5 and the axis max is in the order of\n// thousands, chances are we are dealing with years. Don't allow decimals. #3363.\npick(options.allowDecimals,!(axis.tickInterval>0.5&&axis.tickInterval<5&&axis.max>1000&&axis.max<9999)),!!this.tickAmount);}// Prevent ticks from getting so close that we can't draw the labels\nif(!this.tickAmount){axis.tickInterval=axis.unsquish();}this.setTickPositions();},/**\n             * Now we have computed the normalized tickInterval, get the tick positions\n             */setTickPositions:function setTickPositions(){var options=this.options,tickPositions,tickPositionsOption=options.tickPositions,tickPositioner=options.tickPositioner,startOnTick=options.startOnTick,endOnTick=options.endOnTick;// Set the tickmarkOffset\nthis.tickmarkOffset=this.categories&&options.tickmarkPlacement==='between'&&this.tickInterval===1?0.5:0;// #3202\n// get minorTickInterval\nthis.minorTickInterval=options.minorTickInterval==='auto'&&this.tickInterval?this.tickInterval/5:options.minorTickInterval;// When there is only one point, or all points have the same value on\n// this axis, then min and max are equal and tickPositions.length is 0\n// or 1. In this case, add some padding in order to center the point,\n// but leave it with one tick. #1337.\nthis.single=this.min===this.max&&defined(this.min)&&!this.tickAmount&&(// Data is on integer (#6563)\nparseInt(this.min,10)===this.min||// Between integers and decimals are not allowed (#6274)\noptions.allowDecimals!==false);// Find the tick positions\nthis.tickPositions=tickPositions=tickPositionsOption&&tickPositionsOption.slice();// Work on a copy (#1565)\nif(!tickPositions){if(this.isDatetimeAxis){tickPositions=this.getTimeTicks(this.normalizeTimeTickInterval(this.tickInterval,options.units),this.min,this.max,options.startOfWeek,this.ordinalPositions,this.closestPointRange,true);}else if(this.isLog){tickPositions=this.getLogTickPositions(this.tickInterval,this.min,this.max);}else{tickPositions=this.getLinearTickPositions(this.tickInterval,this.min,this.max);}// Too dense ticks, keep only the first and last (#4477)\nif(tickPositions.length>this.len){tickPositions=[tickPositions[0],tickPositions.pop()];}this.tickPositions=tickPositions;// Run the tick positioner callback, that allows modifying auto tick positions.\nif(tickPositioner){tickPositioner=tickPositioner.apply(this,[this.min,this.max]);if(tickPositioner){this.tickPositions=tickPositions=tickPositioner;}}}// Reset min/max or remove extremes based on start/end on tick\nthis.paddedTicks=tickPositions.slice(0);// Used for logarithmic minor\nthis.trimTicks(tickPositions,startOnTick,endOnTick);if(!this.isLinked){// Substract half a unit (#2619, #2846, #2515, #3390),\n// but not in case of multiple ticks (#6897)\nif(this.single&&tickPositions.length<2){this.min-=0.5;this.max+=0.5;}if(!tickPositionsOption&&!tickPositioner){this.adjustTickAmount();}}},/**\n             * Handle startOnTick and endOnTick by either adapting to padding min/max or\n             * rounded min/max. Also handle single data points.\n             *\n             * @private\n             */trimTicks:function trimTicks(tickPositions,startOnTick,endOnTick){var roundedMin=tickPositions[0],roundedMax=tickPositions[tickPositions.length-1],minPointOffset=this.minPointOffset||0;if(!this.isLinked){if(startOnTick&&roundedMin!==-Infinity){// #6502\nthis.min=roundedMin;}else{while(this.min-minPointOffset>tickPositions[0]){tickPositions.shift();}}if(endOnTick){this.max=roundedMax;}else{while(this.max+minPointOffset<tickPositions[tickPositions.length-1]){tickPositions.pop();}}// If no tick are left, set one tick in the middle (#3195)\nif(tickPositions.length===0&&defined(roundedMin)){tickPositions.push((roundedMax+roundedMin)/2);}}},/**\n             * Check if there are multiple axes in the same pane.\n             *\n             * @private\n             * @return {Boolean}\n             *         True if there are other axes.\n             */alignToOthers:function alignToOthers(){var others={},// Whether there is another axis to pair with this one\nhasOther,options=this.options;if(// Only if alignTicks is true\nthis.chart.options.chart.alignTicks!==false&&options.alignTicks!==false&&// Don't try to align ticks on a log axis, they are not evenly\n// spaced (#6021)\n!this.isLog){each(this.chart[this.coll],function(axis){var otherOptions=axis.options,horiz=axis.horiz,key=[horiz?otherOptions.left:otherOptions.top,otherOptions.width,otherOptions.height,otherOptions.pane].join(',');if(axis.series.length){// #4442\nif(others[key]){hasOther=true;// #4201\n}else{others[key]=1;}}});}return hasOther;},/**\n             * Find the max ticks of either the x and y axis collection, and record it\n             * in `this.tickAmount`.\n             *\n             * @private\n             */getTickAmount:function getTickAmount(){var options=this.options,tickAmount=options.tickAmount,tickPixelInterval=options.tickPixelInterval;if(!defined(options.tickInterval)&&this.len<tickPixelInterval&&!this.isRadial&&!this.isLog&&options.startOnTick&&options.endOnTick){tickAmount=2;}if(!tickAmount&&this.alignToOthers()){// Add 1 because 4 tick intervals require 5 ticks (including first and last)\ntickAmount=Math.ceil(this.len/tickPixelInterval)+1;}// For tick amounts of 2 and 3, compute five ticks and remove the intermediate ones. This\n// prevents the axis from adding ticks that are too far away from the data extremes.\nif(tickAmount<4){this.finalTickAmt=tickAmount;tickAmount=5;}this.tickAmount=tickAmount;},/**\n             * When using multiple axes, adjust the number of ticks to match the highest\n             * number of ticks in that group.\n             *\n             * @private\n             */adjustTickAmount:function adjustTickAmount(){var tickInterval=this.tickInterval,tickPositions=this.tickPositions,tickAmount=this.tickAmount,finalTickAmt=this.finalTickAmt,currentTickAmount=tickPositions&&tickPositions.length,i,len;if(currentTickAmount<tickAmount){while(tickPositions.length<tickAmount){tickPositions.push(correctFloat(tickPositions[tickPositions.length-1]+tickInterval));}this.transA*=(currentTickAmount-1)/(tickAmount-1);this.max=tickPositions[tickPositions.length-1];// We have too many ticks, run second pass to try to reduce ticks\n}else if(currentTickAmount>tickAmount){this.tickInterval*=2;this.setTickPositions();}// The finalTickAmt property is set in getTickAmount\nif(defined(finalTickAmt)){i=len=tickPositions.length;while(i--){if(finalTickAmt===3&&i%2===1||// Remove every other tick\nfinalTickAmt<=2&&i>0&&i<len-1// Remove all but first and last\n){tickPositions.splice(i,1);}}this.finalTickAmt=undefined;}},/**\n             * Set the scale based on data min and max, user set min and max or options.\n             *\n             * @private\n             */setScale:function setScale(){var axis=this,isDirtyData,isDirtyAxisLength;axis.oldMin=axis.min;axis.oldMax=axis.max;axis.oldAxisLength=axis.len;// set the new axisLength\naxis.setAxisSize();//axisLength = horiz ? axisWidth : axisHeight;\nisDirtyAxisLength=axis.len!==axis.oldAxisLength;// is there new data?\neach(axis.series,function(series){if(series.isDirtyData||series.isDirty||series.xAxis.isDirty){// when x axis is dirty, we need new data extremes for y as well\nisDirtyData=true;}});// do we really need to go through all this?\nif(isDirtyAxisLength||isDirtyData||axis.isLinked||axis.forceRedraw||axis.userMin!==axis.oldUserMin||axis.userMax!==axis.oldUserMax||axis.alignToOthers()){if(axis.resetStacks){axis.resetStacks();}axis.forceRedraw=false;// get data extremes if needed\naxis.getSeriesExtremes();// get fixed positions based on tickInterval\naxis.setTickInterval();// record old values to decide whether a rescale is necessary later on (#540)\naxis.oldUserMin=axis.userMin;axis.oldUserMax=axis.userMax;// Mark as dirty if it is not already set to dirty and extremes have changed. #595.\nif(!axis.isDirty){axis.isDirty=isDirtyAxisLength||axis.min!==axis.oldMin||axis.max!==axis.oldMax;}}else if(axis.cleanStacks){axis.cleanStacks();}},/**\n             * Set the minimum and maximum of the axes after render time. If the\n             * `startOnTick` and `endOnTick` options are true, the minimum and maximum\n             * values are rounded off to the nearest tick. To prevent this, these\n             * options can be set to false before calling setExtremes. Also, setExtremes\n             * will not allow a range lower than the `minRange` option, which by default\n             * is the range of five points.\n             *\n             * @param  {Number} [newMin]\n             *         The new minimum value.\n             * @param  {Number} [newMax]\n             *         The new maximum value.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart or wait for an explicit call to\n             *         {@link Highcharts.Chart#redraw}\n             * @param  {AnimationOptions} [animation=true]\n             *         Enable or modify animations.\n             * @param  {Object} [eventArguments]\n             *         Arguments to be accessed in event handler.\n             *\n             * @sample highcharts/members/axis-setextremes/\n             *         Set extremes from a button\n             * @sample highcharts/members/axis-setextremes-datetime/\n             *         Set extremes on a datetime axis\n             * @sample highcharts/members/axis-setextremes-off-ticks/\n             *         Set extremes off ticks\n             * @sample stock/members/axis-setextremes/\n             *         Set extremes in Highstock\n             * @sample maps/members/axis-setextremes/\n             *         Set extremes in Highmaps\n             */setExtremes:function setExtremes(newMin,newMax,redraw,animation,eventArguments){var axis=this,chart=axis.chart;redraw=pick(redraw,true);// defaults to true\neach(axis.series,function(serie){delete serie.kdTree;});// Extend the arguments with min and max\neventArguments=extend(eventArguments,{min:newMin,max:newMax});// Fire the event\nfireEvent(axis,'setExtremes',eventArguments,function(){// the default event handler\naxis.userMin=newMin;axis.userMax=newMax;axis.eventArgs=eventArguments;if(redraw){chart.redraw(animation);}});},/**\n             * Overridable method for zooming chart. Pulled out in a separate method to\n             * allow overriding in stock charts.\n             *\n             * @private\n             */zoom:function zoom(newMin,newMax){var dataMin=this.dataMin,dataMax=this.dataMax,options=this.options,min=Math.min(dataMin,pick(options.min,dataMin)),max=Math.max(dataMax,pick(options.max,dataMax));if(newMin!==this.min||newMax!==this.max){// #5790\n// Prevent pinch zooming out of range. Check for defined is for #1946. #1734.\nif(!this.allowZoomOutside){// #6014, sometimes newMax will be smaller than min (or newMin will be larger than max).\nif(defined(dataMin)){if(newMin<min){newMin=min;}if(newMin>max){newMin=max;}}if(defined(dataMax)){if(newMax<min){newMax=min;}if(newMax>max){newMax=max;}}}// In full view, displaying the reset zoom button is not required\nthis.displayBtn=newMin!==undefined||newMax!==undefined;// Do it\nthis.setExtremes(newMin,newMax,false,undefined,{trigger:'zoom'});}return true;},/**\n             * Update the axis metrics.\n             *\n             * @private\n             */setAxisSize:function setAxisSize(){var chart=this.chart,options=this.options,offsets=options.offsets||[0,0,0,0],// top / right / bottom / left\nhoriz=this.horiz,// Check for percentage based input values. Rounding fixes problems\n// with column overflow and plot line filtering (#4898, #4899)\nwidth=this.width=Math.round(H.relativeLength(pick(options.width,chart.plotWidth-offsets[3]+offsets[1]),chart.plotWidth)),height=this.height=Math.round(H.relativeLength(pick(options.height,chart.plotHeight-offsets[0]+offsets[2]),chart.plotHeight)),top=this.top=Math.round(H.relativeLength(pick(options.top,chart.plotTop+offsets[0]),chart.plotHeight,chart.plotTop)),left=this.left=Math.round(H.relativeLength(pick(options.left,chart.plotLeft+offsets[3]),chart.plotWidth,chart.plotLeft));// Expose basic values to use in Series object and navigator\nthis.bottom=chart.chartHeight-height-top;this.right=chart.chartWidth-width-left;// Direction agnostic properties\nthis.len=Math.max(horiz?width:height,0);// Math.max fixes #905\nthis.pos=horiz?left:top;// distance from SVG origin\n},/**\n             * The returned object literal from the {@link Highcharts.Axis#getExtremes}\n             * function.\n             * @typedef {Object} Extremes\n             * @property {Number} dataMax\n             *         The maximum value of the axis' associated series.\n             * @property {Number} dataMin\n             *         The minimum value of the axis' associated series.\n             * @property {Number} max\n             *         The maximum axis value, either automatic or set manually. If the\n             *         `max` option is not set, `maxPadding` is 0 and `endOnTick` is\n             *         false, this value will be the same as `dataMax`.\n             * @property {Number} min\n             *         The minimum axis value, either automatic or set manually. If the\n             *         `min` option is not set, `minPadding` is 0 and `startOnTick` is\n             *         false, this value will be the same as `dataMin`.\n             *//**\n             * Get the current extremes for the axis.\n             *\n             * @returns {Extremes}\n             * An object containing extremes information.\n             *\n             * @sample  members/axis-getextremes/\n             *          Report extremes by click on a button\n             * @sample  maps/members/axis-getextremes/\n             *          Get extremes in Highmaps\n             */getExtremes:function getExtremes(){var axis=this,isLog=axis.isLog,lin2log=axis.lin2log;return{min:isLog?correctFloat(lin2log(axis.min)):axis.min,max:isLog?correctFloat(lin2log(axis.max)):axis.max,dataMin:axis.dataMin,dataMax:axis.dataMax,userMin:axis.userMin,userMax:axis.userMax};},/**\n             * Get the zero plane either based on zero or on the min or max value.\n             * Used in bar and area plots.\n             *\n             * @param  {Number} threshold\n             *         The threshold in axis values.\n             *\n             * @return {Number}\n             *         The translated threshold position in terms of pixels, and\n             *         corrected to stay within the axis bounds.\n             */getThreshold:function getThreshold(threshold){var axis=this,isLog=axis.isLog,lin2log=axis.lin2log,realMin=isLog?lin2log(axis.min):axis.min,realMax=isLog?lin2log(axis.max):axis.max;if(threshold===null){threshold=realMin;}else if(realMin>threshold){threshold=realMin;}else if(realMax<threshold){threshold=realMax;}return axis.translate(threshold,0,1,0,1);},/**\n             * Compute auto alignment for the axis label based on which side the axis is\n             * on and the given rotation for the label.\n             *\n             * @param  {Number} rotation\n             *         The rotation in degrees as set by either the `rotation` or\n             *         `autoRotation` options.\n             * @private\n             */autoLabelAlign:function autoLabelAlign(rotation){var ret,angle=(pick(rotation,0)-this.side*90+720)%360;if(angle>15&&angle<165){ret='right';}else if(angle>195&&angle<345){ret='left';}else{ret='center';}return ret;},/**\n             * Get the tick length and width for the axis based on axis options.\n             *\n             * @private\n             *\n             * @param  {String} prefix\n             *         'tick' or 'minorTick'\n             * @return {Array.<Number>}\n             *         An array of tickLength and tickWidth\n             */tickSize:function tickSize(prefix){var options=this.options,tickLength=options[prefix+'Length'],tickWidth=pick(options[prefix+'Width'],prefix==='tick'&&this.isXAxis?1:0);// X axis defaults to 1\nif(tickWidth&&tickLength){// Negate the length\nif(options[prefix+'Position']==='inside'){tickLength=-tickLength;}return[tickLength,tickWidth];}},/**\n             * Return the size of the labels.\n             *\n             * @private\n             */labelMetrics:function labelMetrics(){var index=this.tickPositions&&this.tickPositions[0]||0;return this.chart.renderer.fontMetrics(this.options.labels.style&&this.options.labels.style.fontSize,this.ticks[index]&&this.ticks[index].label);},/**\n             * Prevent the ticks from getting so close we can't draw the labels. On a\n             * horizontal axis, this is handled by rotating the labels, removing ticks\n             * and adding ellipsis. On a vertical axis remove ticks and add ellipsis.\n             *\n             * @private\n             */unsquish:function unsquish(){var labelOptions=this.options.labels,horiz=this.horiz,tickInterval=this.tickInterval,newTickInterval=tickInterval,slotSize=this.len/(((this.categories?1:0)+this.max-this.min)/tickInterval),rotation,rotationOption=labelOptions.rotation,labelMetrics=this.labelMetrics(),step,bestScore=Number.MAX_VALUE,autoRotation,// Return the multiple of tickInterval that is needed to avoid collision\ngetStep=function getStep(spaceNeeded){var step=spaceNeeded/(slotSize||1);step=step>1?Math.ceil(step):1;return step*tickInterval;};if(horiz){autoRotation=!labelOptions.staggerLines&&!labelOptions.step&&(// #3971\ndefined(rotationOption)?[rotationOption]:slotSize<pick(labelOptions.autoRotationLimit,80)&&labelOptions.autoRotation);if(autoRotation){// Loop over the given autoRotation options, and determine which gives the best score. The\n// best score is that with the lowest number of steps and a rotation closest to horizontal.\neach(autoRotation,function(rot){var score;if(rot===rotationOption||rot&&rot>=-90&&rot<=90){// #3891\nstep=getStep(Math.abs(labelMetrics.h/Math.sin(deg2rad*rot)));score=step+Math.abs(rot/360);if(score<bestScore){bestScore=score;rotation=rot;newTickInterval=step;}}});}}else if(!labelOptions.step){// #4411\nnewTickInterval=getStep(labelMetrics.h);}this.autoRotation=autoRotation;this.labelRotation=pick(rotation,rotationOption);return newTickInterval;},/**\n             * Get the general slot width for labels/categories on this axis. This may\n             * change between the pre-render (from Axis.getOffset) and the final tick\n             * rendering and placement.\n             *\n             * @private\n             * @return {Number}\n             *         The pixel width allocated to each axis label.\n             */getSlotWidth:function getSlotWidth(){// #5086, #1580, #1931\nvar chart=this.chart,horiz=this.horiz,labelOptions=this.options.labels,slotCount=Math.max(this.tickPositions.length-(this.categories?0:1),1),marginLeft=chart.margin[3];return horiz&&(labelOptions.step||0)<2&&!labelOptions.rotation&&// #4415\n(this.staggerLines||1)*this.len/slotCount||!horiz&&(marginLeft&&marginLeft-chart.spacing[3]||chart.chartWidth*0.33);},/**\n             * Render the axis labels and determine whether ellipsis or rotation need\n             * to be applied.\n             *\n             * @private\n             */renderUnsquish:function renderUnsquish(){var chart=this.chart,renderer=chart.renderer,tickPositions=this.tickPositions,ticks=this.ticks,labelOptions=this.options.labels,horiz=this.horiz,slotWidth=this.getSlotWidth(),innerWidth=Math.max(1,Math.round(slotWidth-2*(labelOptions.padding||5))),attr={},labelMetrics=this.labelMetrics(),textOverflowOption=labelOptions.style&&labelOptions.style.textOverflow,css,maxLabelLength=0,label,i,pos;// Set rotation option unless it is \"auto\", like in gauges\nif(!isString(labelOptions.rotation)){attr.rotation=labelOptions.rotation||0;// #4443\n}// Get the longest label length\neach(tickPositions,function(tick){tick=ticks[tick];if(tick&&tick.labelLength>maxLabelLength){maxLabelLength=tick.labelLength;}});this.maxLabelLength=maxLabelLength;// Handle auto rotation on horizontal axis\nif(this.autoRotation){// Apply rotation only if the label is too wide for the slot, and\n// the label is wider than its height.\nif(maxLabelLength>innerWidth&&maxLabelLength>labelMetrics.h){attr.rotation=this.labelRotation;}else{this.labelRotation=0;}// Handle word-wrap or ellipsis on vertical axis\n}else if(slotWidth){// For word-wrap or ellipsis\ncss={width:innerWidth+'px'};if(!textOverflowOption){css.textOverflow='clip';// On vertical axis, only allow word wrap if there is room for more lines.\ni=tickPositions.length;while(!horiz&&i--){pos=tickPositions[i];label=ticks[pos].label;if(label){// Reset ellipsis in order to get the correct bounding box (#4070)\nif(label.styles&&label.styles.textOverflow==='ellipsis'){label.css({textOverflow:'clip'});// Set the correct width in order to read the bounding box height (#4678, #5034)\n}else if(ticks[pos].labelLength>slotWidth){label.css({width:slotWidth+'px'});}if(label.getBBox().height>this.len/tickPositions.length-(labelMetrics.h-labelMetrics.f)){label.specCss={textOverflow:'ellipsis'};}}}}}// Add ellipsis if the label length is significantly longer than ideal\nif(attr.rotation){css={width:(maxLabelLength>chart.chartHeight*0.5?chart.chartHeight*0.33:chart.chartHeight)+'px'};if(!textOverflowOption){css.textOverflow='ellipsis';}}// Set the explicit or automatic label alignment\nthis.labelAlign=labelOptions.align||this.autoLabelAlign(this.labelRotation);if(this.labelAlign){attr.align=this.labelAlign;}// Apply general and specific CSS\neach(tickPositions,function(pos){var tick=ticks[pos],label=tick&&tick.label;if(label){label.attr(attr);// This needs to go before the CSS in old IE (#4502)\nif(css){label.css(merge(css,label.specCss));}delete label.specCss;tick.rotation=attr.rotation;}});// Note: Why is this not part of getLabelPosition?\nthis.tickRotCorr=renderer.rotCorr(labelMetrics.b,this.labelRotation||0,this.side!==0);},/**\n             * Return true if the axis has associated data.\n             *\n             * @return {Boolean}\n             *         True if the axis has associated visible series and those series\n             *         have either valid data points or explicit `min` and `max`\n             *         settings.\n             */hasData:function hasData(){return this.hasVisibleSeries||defined(this.min)&&defined(this.max)&&!!this.tickPositions;},/**\n             * Adds the title defined in axis.options.title.\n             * @param {Boolean} display - whether or not to display the title\n             */addTitle:function addTitle(display){var axis=this,renderer=axis.chart.renderer,horiz=axis.horiz,opposite=axis.opposite,options=axis.options,axisTitleOptions=options.title,textAlign;if(!axis.axisTitle){textAlign=axisTitleOptions.textAlign;if(!textAlign){textAlign=(horiz?{low:'left',middle:'center',high:'right'}:{low:opposite?'right':'left',middle:'center',high:opposite?'left':'right'})[axisTitleOptions.align];}axis.axisTitle=renderer.text(axisTitleOptions.text,0,0,axisTitleOptions.useHTML).attr({zIndex:7,rotation:axisTitleOptions.rotation||0,align:textAlign}).addClass('highcharts-axis-title').css(axisTitleOptions.style).add(axis.axisGroup);axis.axisTitle.isNew=true;}// Max width defaults to the length of the axis\nif(!axisTitleOptions.style.width&&!axis.isRadial){axis.axisTitle.css({width:axis.len});}// hide or show the title depending on whether showEmpty is set\naxis.axisTitle[display?'show':'hide'](true);},/**\n             * Generates a tick for initial positioning.\n             *\n             * @private\n             * @param  {number} pos\n             *         The tick position in axis values.\n             * @param  {number} i\n             *         The index of the tick in {@link Axis.tickPositions}.\n             */generateTick:function generateTick(pos){var ticks=this.ticks;if(!ticks[pos]){ticks[pos]=new Tick(this,pos);}else{ticks[pos].addLabel();// update labels depending on tick interval\n}},/**\n             * Render the tick labels to a preliminary position to get their sizes.\n             *\n             * @private\n             */getOffset:function getOffset(){var axis=this,chart=axis.chart,renderer=chart.renderer,options=axis.options,tickPositions=axis.tickPositions,ticks=axis.ticks,horiz=axis.horiz,side=axis.side,invertedSide=chart.inverted&&!axis.isZAxis?[1,0,3,2][side]:side,hasData,showAxis,titleOffset=0,titleOffsetOption,titleMargin=0,axisTitleOptions=options.title,labelOptions=options.labels,labelOffset=0,// reset\nlabelOffsetPadded,axisOffset=chart.axisOffset,clipOffset=chart.clipOffset,clip,directionFactor=[-1,1,1,-1][side],className=options.className,axisParent=axis.axisParent,// Used in color axis\nlineHeightCorrection,tickSize=this.tickSize('tick');// For reuse in Axis.render\nhasData=axis.hasData();axis.showAxis=showAxis=hasData||pick(options.showEmpty,true);// Set/reset staggerLines\naxis.staggerLines=axis.horiz&&labelOptions.staggerLines;// Create the axisGroup and gridGroup elements on first iteration\nif(!axis.axisGroup){axis.gridGroup=renderer.g('grid').attr({zIndex:options.gridZIndex||1}).addClass('highcharts-'+this.coll.toLowerCase()+'-grid '+(className||'')).add(axisParent);axis.axisGroup=renderer.g('axis').attr({zIndex:options.zIndex||2}).addClass('highcharts-'+this.coll.toLowerCase()+' '+(className||'')).add(axisParent);axis.labelGroup=renderer.g('axis-labels').attr({zIndex:labelOptions.zIndex||7}).addClass('highcharts-'+axis.coll.toLowerCase()+'-labels '+(className||'')).add(axisParent);}if(hasData||axis.isLinked){// Generate ticks\neach(tickPositions,function(pos,i){// i is not used here, but may be used in overrides\naxis.generateTick(pos,i);});axis.renderUnsquish();// Left side must be align: right and right side must have align: left for labels\nif(labelOptions.reserveSpace!==false&&(side===0||side===2||{1:'left',3:'right'}[side]===axis.labelAlign||axis.labelAlign==='center')){each(tickPositions,function(pos){// get the highest offset\nlabelOffset=Math.max(ticks[pos].getLabelSize(),labelOffset);});}if(axis.staggerLines){labelOffset*=axis.staggerLines;axis.labelOffset=labelOffset*(axis.opposite?-1:1);}}else{// doesn't have data\nobjectEach(ticks,function(tick,n){tick.destroy();delete ticks[n];});}if(axisTitleOptions&&axisTitleOptions.text&&axisTitleOptions.enabled!==false){axis.addTitle(showAxis);if(showAxis&&axisTitleOptions.reserveSpace!==false){axis.titleOffset=titleOffset=axis.axisTitle.getBBox()[horiz?'height':'width'];titleOffsetOption=axisTitleOptions.offset;titleMargin=defined(titleOffsetOption)?0:pick(axisTitleOptions.margin,horiz?5:10);}}// Render the axis line\naxis.renderLine();// handle automatic or user set offset\naxis.offset=directionFactor*pick(options.offset,axisOffset[side]);axis.tickRotCorr=axis.tickRotCorr||{x:0,y:0};// polar\nif(side===0){lineHeightCorrection=-axis.labelMetrics().h;}else if(side===2){lineHeightCorrection=axis.tickRotCorr.y;}else{lineHeightCorrection=0;}// Find the padded label offset\nlabelOffsetPadded=Math.abs(labelOffset)+titleMargin;if(labelOffset){labelOffsetPadded-=lineHeightCorrection;labelOffsetPadded+=directionFactor*(horiz?pick(labelOptions.y,axis.tickRotCorr.y+directionFactor*8):labelOptions.x);}axis.axisTitleMargin=pick(titleOffsetOption,labelOffsetPadded);axisOffset[side]=Math.max(axisOffset[side],axis.axisTitleMargin+titleOffset+directionFactor*axis.offset,labelOffsetPadded,// #3027\nhasData&&tickPositions.length&&tickSize?tickSize[0]+directionFactor*axis.offset:0// #4866\n);// Decide the clipping needed to keep the graph inside the plot area and\n// axis lines\nclip=Math.floor(axis.axisLine.strokeWidth()/2)*2;// #4308, #4371\nif(options.offset>0){clip-=options.offset*2;}clipOffset[invertedSide]=Math.max(clipOffset[invertedSide]||clip,clip);},/**\n             * Internal function to get the path for the axis line. Extended for polar\n             * charts.\n             *\n             * @param  {Number} lineWidth\n             *         The line width in pixels.\n             * @return {Array}\n             *         The SVG path definition in array form.\n             */getLinePath:function getLinePath(lineWidth){var chart=this.chart,opposite=this.opposite,offset=this.offset,horiz=this.horiz,lineLeft=this.left+(opposite?this.width:0)+offset,lineTop=chart.chartHeight-this.bottom-(opposite?this.height:0)+offset;if(opposite){lineWidth*=-1;// crispify the other way - #1480, #1687\n}return chart.renderer.crispLine(['M',horiz?this.left:lineLeft,horiz?lineTop:this.top,'L',horiz?chart.chartWidth-this.right:lineLeft,horiz?lineTop:chart.chartHeight-this.bottom],lineWidth);},/**\n             * Render the axis line. Called internally when rendering and redrawing the\n             * axis.\n             */renderLine:function renderLine(){if(!this.axisLine){this.axisLine=this.chart.renderer.path().addClass('highcharts-axis-line').add(this.axisGroup);this.axisLine.attr({stroke:this.options.lineColor,'stroke-width':this.options.lineWidth,zIndex:7});}},/**\n             * Position the axis title.\n             *\n             * @private\n             *\n             * @return {Object}\n             *         X and Y positions for the title.\n             */getTitlePosition:function getTitlePosition(){// compute anchor points for each of the title align options\nvar horiz=this.horiz,axisLeft=this.left,axisTop=this.top,axisLength=this.len,axisTitleOptions=this.options.title,margin=horiz?axisLeft:axisTop,opposite=this.opposite,offset=this.offset,xOption=axisTitleOptions.x||0,yOption=axisTitleOptions.y||0,axisTitle=this.axisTitle,fontMetrics=this.chart.renderer.fontMetrics(axisTitleOptions.style&&axisTitleOptions.style.fontSize,axisTitle),// The part of a multiline text that is below the baseline of the\n// first line. Subtract 1 to preserve pixel-perfectness from the\n// old behaviour (v5.0.12), where only one line was allowed.\ntextHeightOvershoot=Math.max(axisTitle.getBBox(null,0).height-fontMetrics.h-1,0),// the position in the length direction of the axis\nalongAxis={low:margin+(horiz?0:axisLength),middle:margin+axisLength/2,high:margin+(horiz?axisLength:0)}[axisTitleOptions.align],// the position in the perpendicular direction of the axis\noffAxis=(horiz?axisTop+this.height:axisLeft)+(horiz?1:-1)*(// horizontal axis reverses the margin\nopposite?-1:1)*// so does opposite axes\nthis.axisTitleMargin+[-textHeightOvershoot,// top\ntextHeightOvershoot,// right\nfontMetrics.f,// bottom\n-textHeightOvershoot// left\n][this.side];return{x:horiz?alongAxis+xOption:offAxis+(opposite?this.width:0)+offset+xOption,y:horiz?offAxis+yOption-(opposite?this.height:0)+offset:alongAxis+yOption};},/**\n             * Render a minor tick into the given position. If a minor tick already\n             * exists in this position, move it.\n             *\n             * @param  {number} pos\n             *         The position in axis values.\n             */renderMinorTick:function renderMinorTick(pos){var slideInTicks=this.chart.hasRendered&&isNumber(this.oldMin),minorTicks=this.minorTicks;if(!minorTicks[pos]){minorTicks[pos]=new Tick(this,pos,'minor');}// Render new ticks in old position\nif(slideInTicks&&minorTicks[pos].isNew){minorTicks[pos].render(null,true);}minorTicks[pos].render(null,false,1);},/**\n             * Render a major tick into the given position. If a tick already exists\n             * in this position, move it.\n             *\n             * @param  {number} pos\n             *         The position in axis values.\n             * @param  {number} i\n             *         The tick index.\n             */renderTick:function renderTick(pos,i){var isLinked=this.isLinked,ticks=this.ticks,slideInTicks=this.chart.hasRendered&&isNumber(this.oldMin);// Linked axes need an extra check to find out if\nif(!isLinked||pos>=this.min&&pos<=this.max){if(!ticks[pos]){ticks[pos]=new Tick(this,pos);}// render new ticks in old position\nif(slideInTicks&&ticks[pos].isNew){ticks[pos].render(i,true,0.1);}ticks[pos].render(i);}},/**\n             * Render the axis.\n             *\n             * @private\n             */render:function render(){var axis=this,chart=axis.chart,renderer=chart.renderer,options=axis.options,isLog=axis.isLog,lin2log=axis.lin2log,isLinked=axis.isLinked,tickPositions=axis.tickPositions,axisTitle=axis.axisTitle,ticks=axis.ticks,minorTicks=axis.minorTicks,alternateBands=axis.alternateBands,stackLabelOptions=options.stackLabels,alternateGridColor=options.alternateGridColor,tickmarkOffset=axis.tickmarkOffset,axisLine=axis.axisLine,showAxis=axis.showAxis,animation=animObject(renderer.globalAnimation),from,to;// Reset\naxis.labelEdge.length=0;//axis.justifyToPlot = overflow === 'justify';\naxis.overlap=false;// Mark all elements inActive before we go over and mark the active ones\neach([ticks,minorTicks,alternateBands],function(coll){objectEach(coll,function(tick){tick.isActive=false;});});// If the series has data draw the ticks. Else only the line and title\nif(axis.hasData()||isLinked){// minor ticks\nif(axis.minorTickInterval&&!axis.categories){each(axis.getMinorTickPositions(),function(pos){axis.renderMinorTick(pos);});}// Major ticks. Pull out the first item and render it last so that\n// we can get the position of the neighbour label. #808.\nif(tickPositions.length){// #1300\neach(tickPositions,function(pos,i){axis.renderTick(pos,i);});// In a categorized axis, the tick marks are displayed between labels. So\n// we need to add a tick mark and grid line at the left edge of the X axis.\nif(tickmarkOffset&&(axis.min===0||axis.single)){if(!ticks[-1]){ticks[-1]=new Tick(axis,-1,null,true);}ticks[-1].render(-1);}}// alternate grid color\nif(alternateGridColor){each(tickPositions,function(pos,i){to=tickPositions[i+1]!==undefined?tickPositions[i+1]+tickmarkOffset:axis.max-tickmarkOffset;if(i%2===0&&pos<axis.max&&to<=axis.max+(chart.polar?-tickmarkOffset:tickmarkOffset)){// #2248, #4660\nif(!alternateBands[pos]){alternateBands[pos]=new H.PlotLineOrBand(axis);}from=pos+tickmarkOffset;// #949\nalternateBands[pos].options={from:isLog?lin2log(from):from,to:isLog?lin2log(to):to,color:alternateGridColor};alternateBands[pos].render();alternateBands[pos].isActive=true;}});}// custom plot lines and bands\nif(!axis._addedPlotLB){// only first time\neach((options.plotLines||[]).concat(options.plotBands||[]),function(plotLineOptions){axis.addPlotBandOrLine(plotLineOptions);});axis._addedPlotLB=true;}}// end if hasData\n// Remove inactive ticks\neach([ticks,minorTicks,alternateBands],function(coll){var i,forDestruction=[],delay=animation.duration,destroyInactiveItems=function destroyInactiveItems(){i=forDestruction.length;while(i--){// When resizing rapidly, the same items may be destroyed in different timeouts,\n// or the may be reactivated\nif(coll[forDestruction[i]]&&!coll[forDestruction[i]].isActive){coll[forDestruction[i]].destroy();delete coll[forDestruction[i]];}}};objectEach(coll,function(tick,pos){if(!tick.isActive){// Render to zero opacity\ntick.render(pos,false,0);tick.isActive=false;forDestruction.push(pos);}});// When the objects are finished fading out, destroy them\nsyncTimeout(destroyInactiveItems,coll===alternateBands||!chart.hasRendered||!delay?0:delay);});// Set the axis line path\nif(axisLine){axisLine[axisLine.isPlaced?'animate':'attr']({d:this.getLinePath(axisLine.strokeWidth())});axisLine.isPlaced=true;// Show or hide the line depending on options.showEmpty\naxisLine[showAxis?'show':'hide'](true);}if(axisTitle&&showAxis){var titleXy=axis.getTitlePosition();if(isNumber(titleXy.y)){axisTitle[axisTitle.isNew?'attr':'animate'](titleXy);axisTitle.isNew=false;}else{axisTitle.attr('y',-9999);axisTitle.isNew=true;}}// Stacked totals:\nif(stackLabelOptions&&stackLabelOptions.enabled){axis.renderStackTotals();}// End stacked totals\naxis.isDirty=false;},/**\n             * Redraw the axis to reflect changes in the data or axis extremes. Called\n             * internally from {@link Chart#redraw}.\n             *\n             * @private\n             */redraw:function redraw(){if(this.visible){// render the axis\nthis.render();// move plot lines and bands\neach(this.plotLinesAndBands,function(plotLine){plotLine.render();});}// mark associated series as dirty and ready for redraw\neach(this.series,function(series){series.isDirty=true;});},// Properties to survive after destroy, needed for Axis.update (#4317,\n// #5773, #5881).\nkeepProps:['extKey','hcEvents','names','series','userMax','userMin'],/**\n             * Destroys an Axis instance. See {@link Axis#remove} for the API endpoint\n             * to fully remove the axis.\n             *\n             * @private\n             * @param  {Boolean} keepEvents\n             *         Whether to preserve events, used internally in Axis.update.\n             */destroy:function destroy(keepEvents){var axis=this,stacks=axis.stacks,plotLinesAndBands=axis.plotLinesAndBands,plotGroup,i;// Remove the events\nif(!keepEvents){removeEvent(axis);}// Destroy each stack total\nobjectEach(stacks,function(stack,stackKey){destroyObjectProperties(stack);stacks[stackKey]=null;});// Destroy collections\neach([axis.ticks,axis.minorTicks,axis.alternateBands],function(coll){destroyObjectProperties(coll);});if(plotLinesAndBands){i=plotLinesAndBands.length;while(i--){// #1975\nplotLinesAndBands[i].destroy();}}// Destroy local variables\neach(['stackTotalGroup','axisLine','axisTitle','axisGroup','gridGroup','labelGroup','cross'],function(prop){if(axis[prop]){axis[prop]=axis[prop].destroy();}});// Destroy each generated group for plotlines and plotbands\nfor(plotGroup in axis.plotLinesAndBandsGroups){axis.plotLinesAndBandsGroups[plotGroup]=axis.plotLinesAndBandsGroups[plotGroup].destroy();}// Delete all properties and fall back to the prototype.\nobjectEach(axis,function(val,key){if(inArray(key,axis.keepProps)===-1){delete axis[key];}});},/**\n             * Internal function to draw a crosshair.\n             *\n             * @param  {PointerEvent} [e]\n             *         The event arguments from the modified pointer event, extended\n             *         with `chartX` and `chartY`\n             * @param  {Point} [point]\n             *         The Point object if the crosshair snaps to points.\n             */drawCrosshair:function drawCrosshair(e,point){var path,options=this.crosshair,snap=pick(options.snap,true),pos,categorized,graphic=this.cross;// Use last available event when updating non-snapped crosshairs without\n// mouse interaction (#5287)\nif(!e){e=this.cross&&this.cross.e;}if(// Disabled in options\n!this.crosshair||// Snap\n(defined(point)||!snap)===false){this.hideCrosshair();}else{// Get the path\nif(!snap){pos=e&&(this.horiz?e.chartX-this.pos:this.len-e.chartY+this.pos);}else if(defined(point)){pos=this.isXAxis?point.plotX:this.len-point.plotY;// #3834\n}if(defined(pos)){path=this.getPlotLinePath(// First argument, value, only used on radial\npoint&&(this.isXAxis?point.x:pick(point.stackY,point.y)),null,null,null,pos// Translated position\n)||null;// #3189\n}if(!defined(path)){this.hideCrosshair();return;}categorized=this.categories&&!this.isRadial;// Draw the cross\nif(!graphic){this.cross=graphic=this.chart.renderer.path().addClass('highcharts-crosshair highcharts-crosshair-'+(categorized?'category ':'thin ')+options.className).attr({zIndex:pick(options.zIndex,2)}).add();// Presentational attributes\ngraphic.attr({'stroke':options.color||(categorized?color('#ccd6eb').setOpacity(0.25).get():'#cccccc'),'stroke-width':pick(options.width,1)});if(options.dashStyle){graphic.attr({dashstyle:options.dashStyle});}}graphic.show().attr({d:path});if(categorized&&!options.width){graphic.attr({'stroke-width':this.transA});}this.cross.e=e;}},/**\n             *\tHide the crosshair if visible.\n             */hideCrosshair:function hideCrosshair(){if(this.cross){this.cross.hide();}}});// end Axis\nH.Axis=Axis;return Axis;}(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var Axis=H.Axis,Date=H.Date,dateFormat=H.dateFormat,defaultOptions=H.defaultOptions,defined=H.defined,each=H.each,extend=H.extend,getMagnitude=H.getMagnitude,getTZOffset=H.getTZOffset,normalizeTickInterval=H.normalizeTickInterval,pick=H.pick,timeUnits=H.timeUnits;/**\n         * Set the tick positions to a time unit that makes sense, for example\n         * on the first of each month or on every Monday. Return an array\n         * with the time positions. Used in datetime axes as well as for grouping\n         * data on a datetime axis.\n         *\n         * @param {Object} normalizedInterval The interval in axis values (ms) and the count\n         * @param {Number} min The minimum in axis values\n         * @param {Number} max The maximum in axis values\n         * @param {Number} startOfWeek\n         */Axis.prototype.getTimeTicks=function(normalizedInterval,min,max,startOfWeek){var tickPositions=[],i,higherRanks={},useUTC=defaultOptions.global.useUTC,minYear,// used in months and years as a basis for Date.UTC()\n// When crossing DST, use the max. Resolves #6278.\nminDate=new Date(min-Math.max(getTZOffset(min),getTZOffset(max))),makeTime=Date.hcMakeTime,interval=normalizedInterval.unitRange,count=normalizedInterval.count,baseOffset,// #6797\nvariableDayLength;if(defined(min)){// #1300\nminDate[Date.hcSetMilliseconds](interval>=timeUnits.second?0:// #3935\ncount*Math.floor(minDate.getMilliseconds()/count));// #3652, #3654\nif(interval>=timeUnits.second){// second\nminDate[Date.hcSetSeconds](interval>=timeUnits.minute?0:// #3935\ncount*Math.floor(minDate.getSeconds()/count));}if(interval>=timeUnits.minute){// minute\nminDate[Date.hcSetMinutes](interval>=timeUnits.hour?0:count*Math.floor(minDate[Date.hcGetMinutes]()/count));}if(interval>=timeUnits.hour){// hour\nminDate[Date.hcSetHours](interval>=timeUnits.day?0:count*Math.floor(minDate[Date.hcGetHours]()/count));}if(interval>=timeUnits.day){// day\nminDate[Date.hcSetDate](interval>=timeUnits.month?1:count*Math.floor(minDate[Date.hcGetDate]()/count));}if(interval>=timeUnits.month){// month\nminDate[Date.hcSetMonth](interval>=timeUnits.year?0:count*Math.floor(minDate[Date.hcGetMonth]()/count));minYear=minDate[Date.hcGetFullYear]();}if(interval>=timeUnits.year){// year\nminYear-=minYear%count;minDate[Date.hcSetFullYear](minYear);}// week is a special case that runs outside the hierarchy\nif(interval===timeUnits.week){// get start of current week, independent of count\nminDate[Date.hcSetDate](minDate[Date.hcGetDate]()-minDate[Date.hcGetDay]()+pick(startOfWeek,1));}// Get basics for variable time spans\nminYear=minDate[Date.hcGetFullYear]();var minMonth=minDate[Date.hcGetMonth](),minDateDate=minDate[Date.hcGetDate](),minHours=minDate[Date.hcGetHours]();// Handle local timezone offset\nif(Date.hcTimezoneOffset||Date.hcGetTimezoneOffset){// Detect whether we need to take the DST crossover into\n// consideration. If we're crossing over DST, the day length may be\n// 23h or 25h and we need to compute the exact clock time for each\n// tick instead of just adding hours. This comes at a cost, so first\n// we found out if it is needed. #4951.\nvariableDayLength=(!useUTC||!!Date.hcGetTimezoneOffset)&&(// Long range, assume we're crossing over.\nmax-min>4*timeUnits.month||// Short range, check if min and max are in different time\n// zones.\ngetTZOffset(min)!==getTZOffset(max));// Adjust minDate to the offset date\nminDate=minDate.getTime();baseOffset=getTZOffset(minDate);minDate=new Date(minDate+baseOffset);}// Iterate and add tick positions at appropriate values\nvar time=minDate.getTime();i=1;while(time<max){tickPositions.push(time);// if the interval is years, use Date.UTC to increase years\nif(interval===timeUnits.year){time=makeTime(minYear+i*count,0);// if the interval is months, use Date.UTC to increase months\n}else if(interval===timeUnits.month){time=makeTime(minYear,minMonth+i*count);// if we're using global time, the interval is not fixed as it jumps\n// one hour at the DST crossover\n}else if(variableDayLength&&(interval===timeUnits.day||interval===timeUnits.week)){time=makeTime(minYear,minMonth,minDateDate+i*count*(interval===timeUnits.day?1:7));}else if(variableDayLength&&interval===timeUnits.hour){// corrected by the start date time zone offset (baseOffset)\n// to hide duplicated label (#6797)\ntime=makeTime(minYear,minMonth,minDateDate,minHours+i*count,0,0,baseOffset)-baseOffset;// else, the interval is fixed and we use simple addition\n}else{time+=interval*count;}i++;}// push the last time\ntickPositions.push(time);// Handle higher ranks. Mark new days if the time is on midnight\n// (#950, #1649, #1760, #3349). Use a reasonable dropout threshold to\n// prevent looping over dense data grouping (#6156).\nif(interval<=timeUnits.hour&&tickPositions.length<10000){each(tickPositions,function(time){if(// Speed optimization, no need to run dateFormat unless\n// we're on a full or half hour\ntime%1800000===0&&// Check for local or global midnight\ndateFormat('%H%M%S%L',time)==='000000000'){higherRanks[time]='day';}});}}// record information on the chosen unit - for dynamic label formatter\ntickPositions.info=extend(normalizedInterval,{higherRanks:higherRanks,totalRange:interval*count});return tickPositions;};/**\n         * Get a normalized tick interval for dates. Returns a configuration object with\n         * unit range (interval), count and name. Used to prepare data for getTimeTicks.\n         * Previously this logic was part of getTimeTicks, but as getTimeTicks now runs\n         * of segments in stock charts, the normalizing logic was extracted in order to\n         * prevent it for running over again for each segment having the same interval.\n         * #662, #697.\n         */Axis.prototype.normalizeTimeTickInterval=function(tickInterval,unitsOption){var units=unitsOption||[['millisecond',// unit name\n[1,2,5,10,20,25,50,100,200,500]// allowed multiples\n],['second',[1,2,5,10,15,30]],['minute',[1,2,5,10,15,30]],['hour',[1,2,3,4,6,8,12]],['day',[1,2]],['week',[1,2]],['month',[1,2,3,4,6]],['year',null]],unit=units[units.length-1],// default unit is years\ninterval=timeUnits[unit[0]],multiples=unit[1],count,i;// loop through the units to find the one that best fits the tickInterval\nfor(i=0;i<units.length;i++){unit=units[i];interval=timeUnits[unit[0]];multiples=unit[1];if(units[i+1]){// lessThan is in the middle between the highest multiple and the next unit.\nvar lessThan=(interval*multiples[multiples.length-1]+timeUnits[units[i+1][0]])/2;// break and keep the current unit\nif(tickInterval<=lessThan){break;}}}// prevent 2.5 years intervals, though 25, 250 etc. are allowed\nif(interval===timeUnits.year&&tickInterval<5*interval){multiples=[1,2,5];}// get the count\ncount=normalizeTickInterval(tickInterval/interval,multiples,unit[0]==='year'?Math.max(getMagnitude(tickInterval/interval),1):1// #1913, #2360\n);return{unitRange:interval,count:count,unitName:unit[0]};};})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var Axis=H.Axis,getMagnitude=H.getMagnitude,map=H.map,normalizeTickInterval=H.normalizeTickInterval,pick=H.pick;/**\n         * Methods defined on the Axis prototype\n         *//**\n         * Set the tick positions of a logarithmic axis\n         */Axis.prototype.getLogTickPositions=function(interval,min,max,minor){var axis=this,options=axis.options,axisLength=axis.len,lin2log=axis.lin2log,log2lin=axis.log2lin,// Since we use this method for both major and minor ticks,\n// use a local variable and return the result\npositions=[];// Reset\nif(!minor){axis._minorAutoInterval=null;}// First case: All ticks fall on whole logarithms: 1, 10, 100 etc.\nif(interval>=0.5){interval=Math.round(interval);positions=axis.getLinearTickPositions(interval,min,max);// Second case: We need intermediary ticks. For example\n// 1, 2, 4, 6, 8, 10, 20, 40 etc.\n}else if(interval>=0.08){var roundedMin=Math.floor(min),intermediate,i,j,len,pos,lastPos,break2;if(interval>0.3){intermediate=[1,2,4];}else if(interval>0.15){// 0.2 equals five minor ticks per 1, 10, 100 etc\nintermediate=[1,2,4,6,8];}else{// 0.1 equals ten minor ticks per 1, 10, 100 etc\nintermediate=[1,2,3,4,5,6,7,8,9];}for(i=roundedMin;i<max+1&&!break2;i++){len=intermediate.length;for(j=0;j<len&&!break2;j++){pos=log2lin(lin2log(i)*intermediate[j]);if(pos>min&&(!minor||lastPos<=max)&&lastPos!==undefined){// #1670, lastPos is #3113\npositions.push(lastPos);}if(lastPos>max){break2=true;}lastPos=pos;}}// Third case: We are so deep in between whole logarithmic values that\n// we might as well handle the tick positions like a linear axis. For\n// example 1.01, 1.02, 1.03, 1.04.\n}else{var realMin=lin2log(min),realMax=lin2log(max),tickIntervalOption=options[minor?'minorTickInterval':'tickInterval'],filteredTickIntervalOption=tickIntervalOption==='auto'?null:tickIntervalOption,tickPixelIntervalOption=options.tickPixelInterval/(minor?5:1),totalPixelLength=minor?axisLength/axis.tickPositions.length:axisLength;interval=pick(filteredTickIntervalOption,axis._minorAutoInterval,(realMax-realMin)*tickPixelIntervalOption/(totalPixelLength||1));interval=normalizeTickInterval(interval,null,getMagnitude(interval));positions=map(axis.getLinearTickPositions(interval,realMin,realMax),log2lin);if(!minor){axis._minorAutoInterval=interval/5;}}// Set the axis-level tickInterval variable\nif(!minor){axis.tickInterval=interval;}return positions;};Axis.prototype.log2lin=function(num){return Math.log(num)/Math.LN10;};Axis.prototype.lin2log=function(num){return Math.pow(10,num);};})(Highcharts);(function(H,Axis){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var arrayMax=H.arrayMax,arrayMin=H.arrayMin,defined=H.defined,destroyObjectProperties=H.destroyObjectProperties,each=H.each,erase=H.erase,merge=H.merge,pick=H.pick;/*\n         * The object wrapper for plot lines and plot bands\n         * @param {Object} options\n         */H.PlotLineOrBand=function(axis,options){this.axis=axis;if(options){this.options=options;this.id=options.id;}};H.PlotLineOrBand.prototype={/**\n             * Render the plot line or plot band. If it is already existing,\n             * move it.\n             */render:function render(){var plotLine=this,axis=plotLine.axis,horiz=axis.horiz,options=plotLine.options,optionsLabel=options.label,label=plotLine.label,to=options.to,from=options.from,value=options.value,isBand=defined(from)&&defined(to),isLine=defined(value),svgElem=plotLine.svgElem,isNew=!svgElem,path=[],color=options.color,zIndex=pick(options.zIndex,0),events=options.events,attribs={'class':'highcharts-plot-'+(isBand?'band ':'line ')+(options.className||'')},groupAttribs={},renderer=axis.chart.renderer,groupName=isBand?'bands':'lines',group,log2lin=axis.log2lin;// logarithmic conversion\nif(axis.isLog){from=log2lin(from);to=log2lin(to);value=log2lin(value);}// Set the presentational attributes\nif(isLine){attribs={stroke:color,'stroke-width':options.width};if(options.dashStyle){attribs.dashstyle=options.dashStyle;}}else if(isBand){// plot band\nif(color){attribs.fill=color;}if(options.borderWidth){attribs.stroke=options.borderColor;attribs['stroke-width']=options.borderWidth;}}// Grouping and zIndex\ngroupAttribs.zIndex=zIndex;groupName+='-'+zIndex;group=axis.plotLinesAndBandsGroups[groupName];if(!group){axis.plotLinesAndBandsGroups[groupName]=group=renderer.g('plot-'+groupName).attr(groupAttribs).add();}// Create the path\nif(isNew){plotLine.svgElem=svgElem=renderer.path().attr(attribs).add(group);}// Set the path or return\nif(isLine){path=axis.getPlotLinePath(value,svgElem.strokeWidth());}else if(isBand){// plot band\npath=axis.getPlotBandPath(from,to,options);}else{return;}// common for lines and bands\nif(isNew&&path&&path.length){svgElem.attr({d:path});// events\nif(events){H.objectEach(events,function(event,eventType){svgElem.on(eventType,function(e){events[eventType].apply(plotLine,[e]);});});}}else if(svgElem){if(path){svgElem.show();svgElem.animate({d:path});}else{svgElem.hide();if(label){plotLine.label=label=label.destroy();}}}// the plot band/line label\nif(optionsLabel&&defined(optionsLabel.text)&&path&&path.length&&axis.width>0&&axis.height>0&&!path.flat){// apply defaults\noptionsLabel=merge({align:horiz&&isBand&&'center',x:horiz?!isBand&&4:10,verticalAlign:!horiz&&isBand&&'middle',y:horiz?isBand?16:10:isBand?6:-4,rotation:horiz&&!isBand&&90},optionsLabel);this.renderLabel(optionsLabel,path,isBand,zIndex);}else if(label){// move out of sight\nlabel.hide();}// chainable\nreturn plotLine;},/**\n             * Render and align label for plot line or band.\n             */renderLabel:function renderLabel(optionsLabel,path,isBand,zIndex){var plotLine=this,label=plotLine.label,renderer=plotLine.axis.chart.renderer,attribs,xs,ys,x,y;// add the SVG element\nif(!label){attribs={align:optionsLabel.textAlign||optionsLabel.align,rotation:optionsLabel.rotation,'class':'highcharts-plot-'+(isBand?'band':'line')+'-label '+(optionsLabel.className||'')};attribs.zIndex=zIndex;plotLine.label=label=renderer.text(optionsLabel.text,0,0,optionsLabel.useHTML).attr(attribs).add();label.css(optionsLabel.style);}// get the bounding box and align the label\n// #3000 changed to better handle choice between plotband or plotline\nxs=[path[1],path[4],isBand?path[6]:path[1]];ys=[path[2],path[5],isBand?path[7]:path[2]];x=arrayMin(xs);y=arrayMin(ys);label.align(optionsLabel,false,{x:x,y:y,width:arrayMax(xs)-x,height:arrayMax(ys)-y});label.show();},/**\n             * Remove the plot line or band\n             */destroy:function destroy(){// remove it from the lookup\nerase(this.axis.plotLinesAndBands,this);delete this.axis;destroyObjectProperties(this);}};/**\n         * Object with members for extending the Axis prototype\n         * @todo Extend directly instead of adding object to Highcharts first\n         */H.extend(Axis.prototype,/** @lends Highcharts.Axis.prototype */{/**\n             * Internal function to create the SVG path definition for a plot band.\n             *\n             * @param  {Number} from\n             *         The axis value to start from.\n             * @param  {Number} to\n             *         The axis value to end on.\n             *\n             * @return {Array.<String|Number>}\n             *         The SVG path definition in array form.\n             */getPlotBandPath:function getPlotBandPath(from,to){var toPath=this.getPlotLinePath(to,null,null,true),path=this.getPlotLinePath(from,null,null,true),// #4964 check if chart is inverted or plotband is on yAxis\nhoriz=this.horiz,plus=1,outside=from<this.min&&to<this.min||from>this.max&&to>this.max;if(path&&toPath){// Flat paths don't need labels (#3836)\nif(outside){path.flat=path.toString()===toPath.toString();plus=0;}// Add 1 pixel, when coordinates are the same\npath.push(horiz&&toPath[4]===path[4]?toPath[4]+plus:toPath[4],!horiz&&toPath[5]===path[5]?toPath[5]+plus:toPath[5],horiz&&toPath[1]===path[1]?toPath[1]+plus:toPath[1],!horiz&&toPath[2]===path[2]?toPath[2]+plus:toPath[2]);}else{// outside the axis area\npath=null;}return path;},/**\n             * Add a plot band after render time.\n             *\n             * @param  {AxisPlotBandsOptions} options\n             *         A configuration object for the plot band, as defined in {@link\n             *         https://api.highcharts.com/highcharts/xAxis.plotBands|\n             *         xAxis.plotBands}.\n             * @return {Object}\n             *         The added plot band.\n             * @sample highcharts/members/axis-addplotband/\n             *         Toggle the plot band from a button\n             */addPlotBand:function addPlotBand(options){return this.addPlotBandOrLine(options,'plotBands');},/**\n             * Add a plot line after render time.\n             *\n             * @param  {AxisPlotLinesOptions} options\n             *         A configuration object for the plot line, as defined in {@link\n             *         https://api.highcharts.com/highcharts/xAxis.plotLines|\n             *         xAxis.plotLines}.\n             * @return {Object}\n             *         The added plot line.\n             * @sample highcharts/members/axis-addplotline/\n             *         Toggle the plot line from a button\n             */addPlotLine:function addPlotLine(options){return this.addPlotBandOrLine(options,'plotLines');},/**\n             * Add a plot band or plot line after render time. Called from addPlotBand\n             * and addPlotLine internally.\n             *\n             * @private\n             * @param  options {AxisPlotLinesOptions|AxisPlotBandsOptions}\n             *         The plotBand or plotLine configuration object.\n             */addPlotBandOrLine:function addPlotBandOrLine(options,coll){var obj=new H.PlotLineOrBand(this,options).render(),userOptions=this.userOptions;if(obj){// #2189\n// Add it to the user options for exporting and Axis.update\nif(coll){userOptions[coll]=userOptions[coll]||[];userOptions[coll].push(options);}this.plotLinesAndBands.push(obj);}return obj;},/**\n             * Remove a plot band or plot line from the chart by id. Called internally\n             * from `removePlotBand` and `removePlotLine`.\n             *\n             * @private\n             * @param {String} id\n             */removePlotBandOrLine:function removePlotBandOrLine(id){var plotLinesAndBands=this.plotLinesAndBands,options=this.options,userOptions=this.userOptions,i=plotLinesAndBands.length;while(i--){if(plotLinesAndBands[i].id===id){plotLinesAndBands[i].destroy();}}each([options.plotLines||[],userOptions.plotLines||[],options.plotBands||[],userOptions.plotBands||[]],function(arr){i=arr.length;while(i--){if(arr[i].id===id){erase(arr,arr[i]);}}});},/**\n             * Remove a plot band by its id.\n             *\n             * @param  {String} id\n             *         The plot band's `id` as given in the original configuration\n             *         object or in the `addPlotBand` option.\n             * @sample highcharts/members/axis-removeplotband/\n             *         Remove plot band by id\n             * @sample highcharts/members/axis-addplotband/\n             *         Toggle the plot band from a button\n             */removePlotBand:function removePlotBand(id){this.removePlotBandOrLine(id);},/**\n             * Remove a plot line by its id.\n             * @param  {String} id\n             *         The plot line's `id` as given in the original configuration\n             *         object or in the `addPlotLine` option.\n             * @sample highcharts/xaxis/plotlines-id/\n             *         Remove plot line by id\n             * @sample highcharts/members/axis-addplotline/\n             *         Toggle the plot line from a button\n             */removePlotLine:function removePlotLine(id){this.removePlotBandOrLine(id);}});})(Highcharts,Axis);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var dateFormat=H.dateFormat,each=H.each,extend=H.extend,format=H.format,isNumber=H.isNumber,map=H.map,merge=H.merge,pick=H.pick,splat=H.splat,syncTimeout=H.syncTimeout,timeUnits=H.timeUnits;/**\n         * The tooltip object\n         * @param {Object} chart The chart instance\n         * @param {Object} options Tooltip options\n         */H.Tooltip=function(){this.init.apply(this,arguments);};H.Tooltip.prototype={init:function init(chart,options){// Save the chart and options\nthis.chart=chart;this.options=options;// Keep track of the current series\n//this.currentSeries = undefined;\n// List of crosshairs\nthis.crosshairs=[];// Current values of x and y when animating\nthis.now={x:0,y:0};// The tooltip is initially hidden\nthis.isHidden=true;// Public property for getting the shared state.\nthis.split=options.split&&!chart.inverted;this.shared=options.shared||this.split;},/**\n             * Destroy the single tooltips in a split tooltip.\n             * If the tooltip is active then it is not destroyed, unless forced to.\n             * @param  {boolean} force Force destroy all tooltips.\n             * @return {undefined}\n             */cleanSplit:function cleanSplit(force){each(this.chart.series,function(series){var tt=series&&series.tt;if(tt){if(!tt.isActive||force){series.tt=tt.destroy();}else{tt.isActive=false;}}});},/**\n             * Create the Tooltip label element if it doesn't exist, then return the\n             * label.\n             */getLabel:function getLabel(){var renderer=this.chart.renderer,options=this.options;if(!this.label){// Create the label\nif(this.split){this.label=renderer.g('tooltip');}else{this.label=renderer.label('',0,0,options.shape||'callout',null,null,options.useHTML,null,'tooltip').attr({padding:options.padding,r:options.borderRadius});this.label.attr({'fill':options.backgroundColor,'stroke-width':options.borderWidth})// #2301, #2657\n.css(options.style).shadow(options.shadow);}this.label.attr({zIndex:8}).add();}return this.label;},update:function update(options){this.destroy();// Update user options (#6218)\nmerge(true,this.chart.options.tooltip.userOptions,options);this.init(this.chart,merge(true,this.options,options));},/**\n             * Destroy the tooltip and its elements.\n             */destroy:function destroy(){// Destroy and clear local variables\nif(this.label){this.label=this.label.destroy();}if(this.split&&this.tt){this.cleanSplit(this.chart,true);this.tt=this.tt.destroy();}clearTimeout(this.hideTimer);clearTimeout(this.tooltipTimeout);},/**\n             * Provide a soft movement for the tooltip\n             *\n             * @param {Number} x\n             * @param {Number} y\n             * @private\n             */move:function move(x,y,anchorX,anchorY){var tooltip=this,now=tooltip.now,animate=tooltip.options.animation!==false&&!tooltip.isHidden&&(// When we get close to the target position, abort animation and land on the right place (#3056)\nMath.abs(x-now.x)>1||Math.abs(y-now.y)>1),skipAnchor=tooltip.followPointer||tooltip.len>1;// Get intermediate values for animation\nextend(now,{x:animate?(2*now.x+x)/3:x,y:animate?(now.y+y)/2:y,anchorX:skipAnchor?undefined:animate?(2*now.anchorX+anchorX)/3:anchorX,anchorY:skipAnchor?undefined:animate?(now.anchorY+anchorY)/2:anchorY});// Move to the intermediate value\ntooltip.getLabel().attr(now);// Run on next tick of the mouse tracker\nif(animate){// Never allow two timeouts\nclearTimeout(this.tooltipTimeout);// Set the fixed interval ticking for the smooth tooltip\nthis.tooltipTimeout=setTimeout(function(){// The interval function may still be running during destroy,\n// so check that the chart is really there before calling.\nif(tooltip){tooltip.move(x,y,anchorX,anchorY);}},32);}},/**\n             * Hide the tooltip\n             */hide:function hide(delay){var tooltip=this;clearTimeout(this.hideTimer);// disallow duplicate timers (#1728, #1766)\ndelay=pick(delay,this.options.hideDelay,500);if(!this.isHidden){this.hideTimer=syncTimeout(function(){tooltip.getLabel()[delay?'fadeOut':'hide']();tooltip.isHidden=true;},delay);}},/**\n             * Extendable method to get the anchor position of the tooltip\n             * from a point or set of points\n             */getAnchor:function getAnchor(points,mouseEvent){var ret,chart=this.chart,inverted=chart.inverted,plotTop=chart.plotTop,plotLeft=chart.plotLeft,plotX=0,plotY=0,yAxis,xAxis;points=splat(points);// Pie uses a special tooltipPos\nret=points[0].tooltipPos;// When tooltip follows mouse, relate the position to the mouse\nif(this.followPointer&&mouseEvent){if(mouseEvent.chartX===undefined){mouseEvent=chart.pointer.normalize(mouseEvent);}ret=[mouseEvent.chartX-chart.plotLeft,mouseEvent.chartY-plotTop];}// When shared, use the average position\nif(!ret){each(points,function(point){yAxis=point.series.yAxis;xAxis=point.series.xAxis;plotX+=point.plotX+(!inverted&&xAxis?xAxis.left-plotLeft:0);plotY+=(point.plotLow?(point.plotLow+point.plotHigh)/2:point.plotY)+(!inverted&&yAxis?yAxis.top-plotTop:0);// #1151\n});plotX/=points.length;plotY/=points.length;ret=[inverted?chart.plotWidth-plotY:plotX,this.shared&&!inverted&&points.length>1&&mouseEvent?mouseEvent.chartY-plotTop:// place shared tooltip next to the mouse (#424)\ninverted?chart.plotHeight-plotX:plotY];}return map(ret,Math.round);},/**\n             * Place the tooltip in a chart without spilling over\n             * and not covering the point it self.\n             */getPosition:function getPosition(boxWidth,boxHeight,point){var chart=this.chart,distance=this.distance,ret={},h=point.h||0,// #4117\nswapped,first=['y',chart.chartHeight,boxHeight,point.plotY+chart.plotTop,chart.plotTop,chart.plotTop+chart.plotHeight],second=['x',chart.chartWidth,boxWidth,point.plotX+chart.plotLeft,chart.plotLeft,chart.plotLeft+chart.plotWidth],// The far side is right or bottom\npreferFarSide=!this.followPointer&&pick(point.ttBelow,!chart.inverted===!!point.negative),// #4984\n/**\n                     * Handle the preferred dimension. When the preferred dimension is tooltip\n                     * on top or bottom of the point, it will look for space there.\n                     */firstDimension=function firstDimension(dim,outerSize,innerSize,point,min,max){var roomLeft=innerSize<point-distance,roomRight=point+distance+innerSize<outerSize,alignedLeft=point-distance-innerSize,alignedRight=point+distance;if(preferFarSide&&roomRight){ret[dim]=alignedRight;}else if(!preferFarSide&&roomLeft){ret[dim]=alignedLeft;}else if(roomLeft){ret[dim]=Math.min(max-innerSize,alignedLeft-h<0?alignedLeft:alignedLeft-h);}else if(roomRight){ret[dim]=Math.max(min,alignedRight+h+innerSize>outerSize?alignedRight:alignedRight+h);}else{return false;}},/**\n                     * Handle the secondary dimension. If the preferred dimension is tooltip\n                     * on top or bottom of the point, the second dimension is to align the tooltip\n                     * above the point, trying to align center but allowing left or right\n                     * align within the chart box.\n                     */secondDimension=function secondDimension(dim,outerSize,innerSize,point){var retVal;// Too close to the edge, return false and swap dimensions\nif(point<distance||point>outerSize-distance){retVal=false;// Align left/top\n}else if(point<innerSize/2){ret[dim]=1;// Align right/bottom\n}else if(point>outerSize-innerSize/2){ret[dim]=outerSize-innerSize-2;// Align center\n}else{ret[dim]=point-innerSize/2;}return retVal;},/**\n                     * Swap the dimensions\n                     */swap=function swap(count){var temp=first;first=second;second=temp;swapped=count;},run=function run(){if(firstDimension.apply(0,first)!==false){if(secondDimension.apply(0,second)===false&&!swapped){swap(true);run();}}else if(!swapped){swap(true);run();}else{ret.x=ret.y=0;}};// Under these conditions, prefer the tooltip on the side of the point\nif(chart.inverted||this.len>1){swap();}run();return ret;},/**\n             * In case no user defined formatter is given, this will be used. Note that the context\n             * here is an object holding point, series, x, y etc.\n             *\n             * @returns {String|Array<String>}\n             */defaultFormatter:function defaultFormatter(tooltip){var items=this.points||splat(this),s;// Build the header\ns=[tooltip.tooltipFooterHeaderFormatter(items[0])];// build the values\ns=s.concat(tooltip.bodyFormatter(items));// footer\ns.push(tooltip.tooltipFooterHeaderFormatter(items[0],true));return s;},/**\n             * Refresh the tooltip's text and position.\n             * @param {Object|Array} pointOrPoints Rither a point or an array of points\n             */refresh:function refresh(pointOrPoints,mouseEvent){var tooltip=this,label,options=tooltip.options,x,y,point=pointOrPoints,anchor,textConfig={},text,pointConfig=[],formatter=options.formatter||tooltip.defaultFormatter,shared=tooltip.shared,currentSeries;if(!options.enabled){return;}clearTimeout(this.hideTimer);// get the reference point coordinates (pie charts use tooltipPos)\ntooltip.followPointer=splat(point)[0].series.tooltipOptions.followPointer;anchor=tooltip.getAnchor(point,mouseEvent);x=anchor[0];y=anchor[1];// shared tooltip, array is sent over\nif(shared&&!(point.series&&point.series.noSharedTooltip)){each(point,function(item){item.setState('hover');pointConfig.push(item.getLabelConfig());});textConfig={x:point[0].category,y:point[0].y};textConfig.points=pointConfig;point=point[0];// single point tooltip\n}else{textConfig=point.getLabelConfig();}this.len=pointConfig.length;// #6128\ntext=formatter.call(textConfig,tooltip);// register the current series\ncurrentSeries=point.series;this.distance=pick(currentSeries.tooltipOptions.distance,16);// update the inner HTML\nif(text===false){this.hide();}else{label=tooltip.getLabel();// show it\nif(tooltip.isHidden){label.attr({opacity:1}).show();}// update text\nif(tooltip.split){this.renderSplit(text,pointOrPoints);}else{// Prevent the tooltip from flowing over the chart box (#6659)\nif(!options.style.width){label.css({width:this.chart.spacingBox.width});}label.attr({text:text&&text.join?text.join(''):text});// Set the stroke color of the box to reflect the point\nlabel.removeClass(/highcharts-color-[\\d]+/g).addClass('highcharts-color-'+pick(point.colorIndex,currentSeries.colorIndex));label.attr({stroke:options.borderColor||point.color||currentSeries.color||'#666666'});tooltip.updatePosition({plotX:x,plotY:y,negative:point.negative,ttBelow:point.ttBelow,h:anchor[2]||0});}this.isHidden=false;}},/**\n             * Render the split tooltip. Loops over each point's text and adds\n             * a label next to the point, then uses the distribute function to\n             * find best non-overlapping positions.\n             */renderSplit:function renderSplit(labels,points){var tooltip=this,boxes=[],chart=this.chart,ren=chart.renderer,rightAligned=true,options=this.options,headerHeight=0,tooltipLabel=this.getLabel();// Create the individual labels for header and points, ignore footer\neach(labels.slice(0,points.length+1),function(str,i){if(str!==false){var point=points[i-1]||// Item 0 is the header. Instead of this, we could also\n// use the crosshair label\n{isHeader:true,plotX:points[0].plotX},owner=point.series||tooltip,tt=owner.tt,series=point.series||{},colorClass='highcharts-color-'+pick(point.colorIndex,series.colorIndex,'none'),target,x,bBox,boxWidth;// Store the tooltip referance on the series\nif(!tt){owner.tt=tt=ren.label(null,null,null,'callout').addClass('highcharts-tooltip-box '+colorClass).attr({'padding':options.padding,'r':options.borderRadius,'fill':options.backgroundColor,'stroke':options.borderColor||point.color||series.color||'#333333','stroke-width':options.borderWidth}).add(tooltipLabel);}tt.isActive=true;tt.attr({text:str});tt.css(options.style).shadow(options.shadow);// Get X position now, so we can move all to the other side in\n// case of overflow\nbBox=tt.getBBox();boxWidth=bBox.width+tt.strokeWidth();if(point.isHeader){headerHeight=bBox.height;x=Math.max(0,// No left overflow\nMath.min(point.plotX+chart.plotLeft-boxWidth/2,// No right overflow (#5794)\nchart.chartWidth-boxWidth));}else{x=point.plotX+chart.plotLeft-pick(options.distance,16)-boxWidth;}// If overflow left, we don't use this x in the next loop\nif(x<0){rightAligned=false;}// Prepare for distribution\ntarget=(point.series&&point.series.yAxis&&point.series.yAxis.pos)+(point.plotY||0);target-=chart.plotTop;boxes.push({target:point.isHeader?chart.plotHeight+headerHeight:target,rank:point.isHeader?1:0,size:owner.tt.getBBox().height+1,point:point,x:x,tt:tt});}});// Clean previous run (for missing points)\nthis.cleanSplit();// Distribute and put in place\nH.distribute(boxes,chart.plotHeight+headerHeight);each(boxes,function(box){var point=box.point,series=point.series;// Put the label in place\nbox.tt.attr({visibility:box.pos===undefined?'hidden':'inherit',x:rightAligned||point.isHeader?box.x:point.plotX+chart.plotLeft+pick(options.distance,16),y:box.pos+chart.plotTop,anchorX:point.isHeader?point.plotX+chart.plotLeft:point.plotX+series.xAxis.pos,anchorY:point.isHeader?box.pos+chart.plotTop-15:point.plotY+series.yAxis.pos});});},/**\n             * Find the new position and perform the move\n             */updatePosition:function updatePosition(point){var chart=this.chart,label=this.getLabel(),pos=(this.options.positioner||this.getPosition).call(this,label.width,label.height,point);// do the move\nthis.move(Math.round(pos.x),Math.round(pos.y||0),// can be undefined (#3977)\npoint.plotX+chart.plotLeft,point.plotY+chart.plotTop);},/**\n             * Get the optimal date format for a point, based on a range.\n             * @param  {number} range - The time range\n             * @param  {number|Date} date - The date of the point in question\n             * @param  {number} startOfWeek - An integer representing the first day of\n             * the week, where 0 is Sunday\n             * @param  {Object} dateTimeLabelFormats - A map of time units to formats\n             * @return {string} - the optimal date format for a point\n             */getDateFormat:function getDateFormat(range,date,startOfWeek,dateTimeLabelFormats){var dateStr=dateFormat('%m-%d %H:%M:%S.%L',date),format,n,blank='01-01 00:00:00.000',strpos={millisecond:15,second:12,minute:9,hour:6,day:3},lastN='millisecond';// for sub-millisecond data, #4223\nfor(n in timeUnits){// If the range is exactly one week and we're looking at a Sunday/Monday, go for the week format\nif(range===timeUnits.week&&+dateFormat('%w',date)===startOfWeek&&dateStr.substr(6)===blank.substr(6)){n='week';break;}// The first format that is too great for the range\nif(timeUnits[n]>range){n=lastN;break;}// If the point is placed every day at 23:59, we need to show\n// the minutes as well. #2637.\nif(strpos[n]&&dateStr.substr(strpos[n])!==blank.substr(strpos[n])){break;}// Weeks are outside the hierarchy, only apply them on Mondays/Sundays like in the first condition\nif(n!=='week'){lastN=n;}}if(n){format=dateTimeLabelFormats[n];}return format;},/**\n             * Get the best X date format based on the closest point range on the axis.\n             */getXDateFormat:function getXDateFormat(point,options,xAxis){var xDateFormat,dateTimeLabelFormats=options.dateTimeLabelFormats,closestPointRange=xAxis&&xAxis.closestPointRange;if(closestPointRange){xDateFormat=this.getDateFormat(closestPointRange,point.x,xAxis.options.startOfWeek,dateTimeLabelFormats);}else{xDateFormat=dateTimeLabelFormats.day;}return xDateFormat||dateTimeLabelFormats.year;// #2546, 2581\n},/**\n             * Format the footer/header of the tooltip\n             * #3397: abstraction to enable formatting of footer and header\n             */tooltipFooterHeaderFormatter:function tooltipFooterHeaderFormatter(labelConfig,isFooter){var footOrHead=isFooter?'footer':'header',series=labelConfig.series,tooltipOptions=series.tooltipOptions,xDateFormat=tooltipOptions.xDateFormat,xAxis=series.xAxis,isDateTime=xAxis&&xAxis.options.type==='datetime'&&isNumber(labelConfig.key),formatString=tooltipOptions[footOrHead+'Format'];// Guess the best date format based on the closest point distance (#568, #3418)\nif(isDateTime&&!xDateFormat){xDateFormat=this.getXDateFormat(labelConfig,tooltipOptions,xAxis);}// Insert the footer date format if any\nif(isDateTime&&xDateFormat){formatString=formatString.replace('{point.key}','{point.key:'+xDateFormat+'}');}return format(formatString,{point:labelConfig,series:series});},/**\n             * Build the body (lines) of the tooltip by iterating over the items and returning one entry for each item,\n             * abstracting this functionality allows to easily overwrite and extend it.\n             */bodyFormatter:function bodyFormatter(items){return map(items,function(item){var tooltipOptions=item.series.tooltipOptions;return(tooltipOptions.pointFormatter||item.point.tooltipFormatter).call(item.point,tooltipOptions.pointFormat);});}};})(Highcharts);(function(Highcharts){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var H=Highcharts,addEvent=H.addEvent,attr=H.attr,charts=H.charts,color=H.color,css=H.css,defined=H.defined,each=H.each,extend=H.extend,find=H.find,fireEvent=H.fireEvent,isObject=H.isObject,offset=H.offset,pick=H.pick,removeEvent=H.removeEvent,splat=H.splat,Tooltip=H.Tooltip,win=H.win;/**\n         * The mouse and touch tracker object. Each {@link Chart} item has one\n         * assosiated Pointer item that can be accessed from the  {@link Chart.pointer}\n         * property.\n         *\n         * @class\n         * @param  {Chart} chart\n         *         The Chart instance.\n         * @param  {Options} options\n         *         The root options object. The pointer uses options from the chart and\n         *         tooltip structures.\n         */Highcharts.Pointer=function(chart,options){this.init(chart,options);};Highcharts.Pointer.prototype={/**\n             * Initialize the Pointer.\n             *\n             * @private\n             */init:function init(chart,options){// Store references\nthis.options=options;this.chart=chart;// Do we need to handle click on a touch device?\nthis.runChartClick=options.chart.events&&!!options.chart.events.click;this.pinchDown=[];this.lastValidTouch={};if(Tooltip){chart.tooltip=new Tooltip(chart,options.tooltip);this.followTouchMove=pick(options.tooltip.followTouchMove,true);}this.setDOMEvents();},/**\n             * Resolve the zoomType option, this is reset on all touch start and mouse\n             * down events.\n             *\n             * @private\n             */zoomOption:function zoomOption(e){var chart=this.chart,options=chart.options.chart,zoomType=options.zoomType||'',inverted=chart.inverted,zoomX,zoomY;// Look for the pinchType option\nif(/touch/.test(e.type)){zoomType=pick(options.pinchType,zoomType);}this.zoomX=zoomX=/x/.test(zoomType);this.zoomY=zoomY=/y/.test(zoomType);this.zoomHor=zoomX&&!inverted||zoomY&&inverted;this.zoomVert=zoomY&&!inverted||zoomX&&inverted;this.hasZoom=zoomX||zoomY;},/**\n             * @typedef  {Object} PointerEvent\n             *           A native browser mouse or touch event, extended with position\n             *           information relative to the {@link Chart.container}.\n             * @property {Number} chartX\n             *           The X coordinate of the pointer interaction relative to the\n             *           chart.\n             * @property {Number} chartY\n             *           The Y coordinate of the pointer interaction relative to the\n             *           chart.\n             *\n             *//**\n             * Takes a browser event object and extends it with custom Highcharts\n             * properties `chartX` and `chartY` in order to work on the internal\n             * coordinate system.\n             *\n             * @param  {Object} e\n             *         The event object in standard browsers.\n             *\n             * @return {PointerEvent}\n             *         A browser event with extended properties `chartX` and `chartY`.\n             */normalize:function normalize(e,chartPosition){var chartX,chartY,ePos;// IE normalizing\ne=e||win.event;if(!e.target){e.target=e.srcElement;}// iOS (#2757)\nePos=e.touches?e.touches.length?e.touches.item(0):e.changedTouches[0]:e;// Get mouse position\nif(!chartPosition){this.chartPosition=chartPosition=offset(this.chart.container);}// chartX and chartY\nif(ePos.pageX===undefined){// IE < 9. #886.\nchartX=Math.max(e.x,e.clientX-chartPosition.left);// #2005, #2129: the second case is\n// for IE10 quirks mode within framesets\nchartY=e.y;}else{chartX=ePos.pageX-chartPosition.left;chartY=ePos.pageY-chartPosition.top;}return extend(e,{chartX:Math.round(chartX),chartY:Math.round(chartY)});},/**\n             * Get the click position in terms of axis values.\n             *\n             * @param  {PointerEvent} e\n             *         A pointer event, extended with `chartX` and `chartY`\n             *         properties.\n             */getCoordinates:function getCoordinates(e){var coordinates={xAxis:[],yAxis:[]};each(this.chart.axes,function(axis){coordinates[axis.isXAxis?'xAxis':'yAxis'].push({axis:axis,value:axis.toValue(e[axis.horiz?'chartX':'chartY'])});});return coordinates;},/**\n             * Finds the closest point to a set of coordinates, using the k-d-tree\n             * algorithm.\n             *\n             * @param  {Array.<Series>} series\n             *         All the series to search in.\n             * @param  {boolean} shared\n             *         Whether it is a shared tooltip or not.\n             * @param  {object} coordinates\n             *         Chart coordinates of the pointer.\n             * @param  {number} coordinates.chartX\n             * @param  {number} coordinates.chartY\n             *\n             * @return {Point|undefined} The point closest to given coordinates.\n             */findNearestKDPoint:function findNearestKDPoint(series,shared,coordinates){var closest,sort=function sort(p1,p2){var isCloserX=p1.distX-p2.distX,isCloser=p1.dist-p2.dist,isAbove=(p2.series.group&&p2.series.group.zIndex)-(p1.series.group&&p1.series.group.zIndex),result;// We have two points which are not in the same place on xAxis\n// and shared tooltip:\nif(isCloserX!==0&&shared){// #5721\nresult=isCloserX;// Points are not exactly in the same place on x/yAxis:\n}else if(isCloser!==0){result=isCloser;// The same xAxis and yAxis position, sort by z-index:\n}else if(isAbove!==0){result=isAbove;// The same zIndex, sort by array index:\n}else{result=p1.series.index>p2.series.index?-1:1;}return result;};each(series,function(s){var noSharedTooltip=s.noSharedTooltip&&shared,compareX=!noSharedTooltip&&s.options.findNearestPointBy.indexOf('y')<0,point=s.searchPoint(coordinates,compareX);if(// Check that we actually found a point on the series.\nisObject(point,true)&&(// Use the new point if it is closer.\n!isObject(closest,true)||sort(closest,point)>0)){closest=point;}});return closest;},getPointFromEvent:function getPointFromEvent(e){var target=e.target,point;while(target&&!point){point=target.point;target=target.parentNode;}return point;},getChartCoordinatesFromPoint:function getChartCoordinatesFromPoint(point,inverted){var series=point.series,xAxis=series.xAxis,yAxis=series.yAxis;if(xAxis&&yAxis){return inverted?{chartX:xAxis.len+xAxis.pos-point.clientX,chartY:yAxis.len+yAxis.pos-point.plotY}:{chartX:point.clientX+xAxis.pos,chartY:point.plotY+yAxis.pos};}},/**\n             * Calculates what is the current hovered point/points and series.\n             *\n             * @private\n             *\n             * @param  {undefined|Point} existingHoverPoint\n             *         The point currrently beeing hovered.\n             * @param  {undefined|Series} existingHoverSeries\n             *         The series currently beeing hovered.\n             * @param  {Array.<Series>} series\n             *         All the series in the chart.\n             * @param  {boolean} isDirectTouch\n             *         Is the pointer directly hovering the point.\n             * @param  {boolean} shared\n             *         Whether it is a shared tooltip or not.\n             * @param  {object} coordinates\n             *         Chart coordinates of the pointer.\n             * @param  {number} coordinates.chartX\n             * @param  {number} coordinates.chartY\n             *\n             * @return {object}\n             *         Object containing resulting hover data.\n             */getHoverData:function getHoverData(existingHoverPoint,existingHoverSeries,series,isDirectTouch,shared,coordinates){var hoverPoint,hoverPoints=[],hoverSeries=existingHoverSeries,useExisting=!!(isDirectTouch&&existingHoverPoint),notSticky=hoverSeries&&!hoverSeries.stickyTracking,filter=function filter(s){return s.visible&&!(!shared&&s.directTouch)&&// #3821\npick(s.options.enableMouseTracking,true);},// Which series to look in for the hover point\nsearchSeries=notSticky?// Only search on hovered series if it has stickyTracking false\n[hoverSeries]:// Filter what series to look in.\nH.grep(series,function(s){return filter(s)&&s.stickyTracking;});// Use existing hovered point or find the one closest to coordinates.\nhoverPoint=useExisting?existingHoverPoint:this.findNearestKDPoint(searchSeries,shared,coordinates);// Assign hover series\nhoverSeries=hoverPoint&&hoverPoint.series;// If we have a hoverPoint, assign hoverPoints.\nif(hoverPoint){// When tooltip is shared, it displays more than one point\nif(shared&&!hoverSeries.noSharedTooltip){searchSeries=H.grep(series,function(s){return filter(s)&&!s.noSharedTooltip;});// Get all points with the same x value as the hoverPoint\neach(searchSeries,function(s){var point=find(s.points,function(p){return p.x===hoverPoint.x;});if(isObject(point)&&!point.isNull){hoverPoints.push(point);}});}else{hoverPoints.push(hoverPoint);}}return{hoverPoint:hoverPoint,hoverSeries:hoverSeries,hoverPoints:hoverPoints};},/**\n             * With line type charts with a single tracker, get the point closest to the\n             * mouse. Run Point.onMouseOver and display tooltip for the point or points.\n             *\n             * @private\n             */runPointActions:function runPointActions(e,p){var pointer=this,chart=pointer.chart,series=chart.series,tooltip=chart.tooltip,shared=tooltip?tooltip.shared:false,hoverPoint=p||chart.hoverPoint,hoverSeries=hoverPoint&&hoverPoint.series||chart.hoverSeries,// onMouseOver or already hovering a series with directTouch\nisDirectTouch=!!p||hoverSeries&&hoverSeries.directTouch&&pointer.isDirectTouch,hoverData=this.getHoverData(hoverPoint,hoverSeries,series,isDirectTouch,shared,e),useSharedTooltip,followPointer,anchor,points;// Update variables from hoverData.\nhoverPoint=hoverData.hoverPoint;points=hoverData.hoverPoints;hoverSeries=hoverData.hoverSeries;followPointer=hoverSeries&&hoverSeries.tooltipOptions.followPointer;useSharedTooltip=shared&&hoverSeries&&!hoverSeries.noSharedTooltip;// Refresh tooltip for kdpoint if new hover point or tooltip was hidden\n// #3926, #4200\nif(hoverPoint&&(// !(hoverSeries && hoverSeries.directTouch) &&\nhoverPoint!==chart.hoverPoint||tooltip&&tooltip.isHidden)){each(chart.hoverPoints||[],function(p){if(H.inArray(p,points)===-1){p.setState();}});// Do mouseover on all points (#3919, #3985, #4410, #5622)\neach(points||[],function(p){p.setState('hover');});// set normal state to previous series\nif(chart.hoverSeries!==hoverSeries){hoverSeries.onMouseOver();}// If tracking is on series in stead of on each point,\n// fire mouseOver on hover point. // #4448\nif(chart.hoverPoint){chart.hoverPoint.firePointEvent('mouseOut');}hoverPoint.firePointEvent('mouseOver');chart.hoverPoints=points;chart.hoverPoint=hoverPoint;// Draw tooltip if necessary\nif(tooltip){tooltip.refresh(useSharedTooltip?points:hoverPoint,e);}// Update positions (regardless of kdpoint or hoverPoint)\n}else if(followPointer&&tooltip&&!tooltip.isHidden){anchor=tooltip.getAnchor([{}],e);tooltip.updatePosition({plotX:anchor[0],plotY:anchor[1]});}// Start the event listener to pick up the tooltip and crosshairs\nif(!pointer.unDocMouseMove){pointer.unDocMouseMove=addEvent(chart.container.ownerDocument,'mousemove',function(e){var chart=charts[H.hoverChartIndex];if(chart){chart.pointer.onDocumentMouseMove(e);}});}// Issues related to crosshair #4927, #5269 #5066, #5658\neach(chart.axes,function drawAxisCrosshair(axis){var snap=pick(axis.crosshair.snap,true),point=!snap?undefined:H.find(points,function(p){return p.series[axis.coll]===axis;});// Axis has snapping crosshairs, and one of the hover points belongs\n// to axis. Always call drawCrosshair when it is not snap.\nif(point||!snap){axis.drawCrosshair(e,point);// Axis has snapping crosshairs, but no hover point belongs to axis\n}else{axis.hideCrosshair();}});},/**\n             * Reset the tracking by hiding the tooltip, the hover series state and the\n             * hover point\n             *\n             * @param allowMove {Boolean}\n             *        Instead of destroying the tooltip altogether, allow moving it if\n             *        possible.\n             */reset:function reset(allowMove,delay){var pointer=this,chart=pointer.chart,hoverSeries=chart.hoverSeries,hoverPoint=chart.hoverPoint,hoverPoints=chart.hoverPoints,tooltip=chart.tooltip,tooltipPoints=tooltip&&tooltip.shared?hoverPoints:hoverPoint;// Check if the points have moved outside the plot area (#1003, #4736, #5101)\nif(allowMove&&tooltipPoints){each(splat(tooltipPoints),function(point){if(point.series.isCartesian&&point.plotX===undefined){allowMove=false;}});}// Just move the tooltip, #349\nif(allowMove){if(tooltip&&tooltipPoints){tooltip.refresh(tooltipPoints);if(hoverPoint){// #2500\nhoverPoint.setState(hoverPoint.state,true);each(chart.axes,function(axis){if(axis.crosshair){axis.drawCrosshair(null,hoverPoint);}});}}// Full reset\n}else{if(hoverPoint){hoverPoint.onMouseOut();}if(hoverPoints){each(hoverPoints,function(point){point.setState();});}if(hoverSeries){hoverSeries.onMouseOut();}if(tooltip){tooltip.hide(delay);}if(pointer.unDocMouseMove){pointer.unDocMouseMove=pointer.unDocMouseMove();}// Remove crosshairs\neach(chart.axes,function(axis){axis.hideCrosshair();});pointer.hoverX=chart.hoverPoints=chart.hoverPoint=null;}},/**\n             * Scale series groups to a certain scale and translation.\n             *\n             * @private\n             */scaleGroups:function scaleGroups(attribs,clip){var chart=this.chart,seriesAttribs;// Scale each series\neach(chart.series,function(series){seriesAttribs=attribs||series.getPlotBox();// #1701\nif(series.xAxis&&series.xAxis.zoomEnabled&&series.group){series.group.attr(seriesAttribs);if(series.markerGroup){series.markerGroup.attr(seriesAttribs);series.markerGroup.clip(clip?chart.clipRect:null);}if(series.dataLabelsGroup){series.dataLabelsGroup.attr(seriesAttribs);}}});// Clip\nchart.clipRect.attr(clip||chart.clipBox);},/**\n             * Start a drag operation.\n             *\n             * @private\n             */dragStart:function dragStart(e){var chart=this.chart;// Record the start position\nchart.mouseIsDown=e.type;chart.cancelClick=false;chart.mouseDownX=this.mouseDownX=e.chartX;chart.mouseDownY=this.mouseDownY=e.chartY;},/**\n             * Perform a drag operation in response to a mousemove event while the mouse\n             * is down.\n             *\n             * @private\n             */drag:function drag(e){var chart=this.chart,chartOptions=chart.options.chart,chartX=e.chartX,chartY=e.chartY,zoomHor=this.zoomHor,zoomVert=this.zoomVert,plotLeft=chart.plotLeft,plotTop=chart.plotTop,plotWidth=chart.plotWidth,plotHeight=chart.plotHeight,clickedInside,size,selectionMarker=this.selectionMarker,mouseDownX=this.mouseDownX,mouseDownY=this.mouseDownY,panKey=chartOptions.panKey&&e[chartOptions.panKey+'Key'];// If the device supports both touch and mouse (like IE11), and we are touch-dragging\n// inside the plot area, don't handle the mouse event. #4339.\nif(selectionMarker&&selectionMarker.touch){return;}// If the mouse is outside the plot area, adjust to cooordinates\n// inside to prevent the selection marker from going outside\nif(chartX<plotLeft){chartX=plotLeft;}else if(chartX>plotLeft+plotWidth){chartX=plotLeft+plotWidth;}if(chartY<plotTop){chartY=plotTop;}else if(chartY>plotTop+plotHeight){chartY=plotTop+plotHeight;}// determine if the mouse has moved more than 10px\nthis.hasDragged=Math.sqrt(Math.pow(mouseDownX-chartX,2)+Math.pow(mouseDownY-chartY,2));if(this.hasDragged>10){clickedInside=chart.isInsidePlot(mouseDownX-plotLeft,mouseDownY-plotTop);// make a selection\nif(chart.hasCartesianSeries&&(this.zoomX||this.zoomY)&&clickedInside&&!panKey){if(!selectionMarker){this.selectionMarker=selectionMarker=chart.renderer.rect(plotLeft,plotTop,zoomHor?1:plotWidth,zoomVert?1:plotHeight,0).attr({fill:chartOptions.selectionMarkerFill||color('#335cad').setOpacity(0.25).get(),'class':'highcharts-selection-marker','zIndex':7}).add();}}// adjust the width of the selection marker\nif(selectionMarker&&zoomHor){size=chartX-mouseDownX;selectionMarker.attr({width:Math.abs(size),x:(size>0?0:size)+mouseDownX});}// adjust the height of the selection marker\nif(selectionMarker&&zoomVert){size=chartY-mouseDownY;selectionMarker.attr({height:Math.abs(size),y:(size>0?0:size)+mouseDownY});}// panning\nif(clickedInside&&!selectionMarker&&chartOptions.panning){chart.pan(e,chartOptions.panning);}}},/**\n             * On mouse up or touch end across the entire document, drop the selection.\n             *\n             * @private\n             */drop:function drop(e){var pointer=this,chart=this.chart,hasPinched=this.hasPinched;if(this.selectionMarker){var selectionData={originalEvent:e,// #4890\nxAxis:[],yAxis:[]},selectionBox=this.selectionMarker,selectionLeft=selectionBox.attr?selectionBox.attr('x'):selectionBox.x,selectionTop=selectionBox.attr?selectionBox.attr('y'):selectionBox.y,selectionWidth=selectionBox.attr?selectionBox.attr('width'):selectionBox.width,selectionHeight=selectionBox.attr?selectionBox.attr('height'):selectionBox.height,runZoom;// a selection has been made\nif(this.hasDragged||hasPinched){// record each axis' min and max\neach(chart.axes,function(axis){if(axis.zoomEnabled&&defined(axis.min)&&(hasPinched||pointer[{xAxis:'zoomX',yAxis:'zoomY'}[axis.coll]])){// #859, #3569\nvar horiz=axis.horiz,minPixelPadding=e.type==='touchend'?axis.minPixelPadding:0,// #1207, #3075\nselectionMin=axis.toValue((horiz?selectionLeft:selectionTop)+minPixelPadding),selectionMax=axis.toValue((horiz?selectionLeft+selectionWidth:selectionTop+selectionHeight)-minPixelPadding);selectionData[axis.coll].push({axis:axis,min:Math.min(selectionMin,selectionMax),// for reversed axes\nmax:Math.max(selectionMin,selectionMax)});runZoom=true;}});if(runZoom){fireEvent(chart,'selection',selectionData,function(args){chart.zoom(extend(args,hasPinched?{animation:false}:null));});}}this.selectionMarker=this.selectionMarker.destroy();// Reset scaling preview\nif(hasPinched){this.scaleGroups();}}// Reset all\nif(chart){// it may be destroyed on mouse up - #877\ncss(chart.container,{cursor:chart._cursor});chart.cancelClick=this.hasDragged>10;// #370\nchart.mouseIsDown=this.hasDragged=this.hasPinched=false;this.pinchDown=[];}},onContainerMouseDown:function onContainerMouseDown(e){e=this.normalize(e);this.zoomOption(e);// issue #295, dragging not always working in Firefox\n// if (e.preventDefault) {\n//     e.preventDefault();\n// }\nthis.dragStart(e);},onDocumentMouseUp:function onDocumentMouseUp(e){if(charts[H.hoverChartIndex]){charts[H.hoverChartIndex].pointer.drop(e);}},/**\n             * Special handler for mouse move that will hide the tooltip when the mouse\n             * leaves the plotarea. Issue #149 workaround. The mouseleave event does not\n             * always fire.\n             *\n             * @private\n             */onDocumentMouseMove:function onDocumentMouseMove(e){var chart=this.chart,chartPosition=this.chartPosition;e=this.normalize(e,chartPosition);// If we're outside, hide the tooltip\nif(chartPosition&&!this.inClass(e.target,'highcharts-tracker')&&!chart.isInsidePlot(e.chartX-chart.plotLeft,e.chartY-chart.plotTop)){this.reset();}},/**\n             * When mouse leaves the container, hide the tooltip.\n             *\n             * @private\n             */onContainerMouseLeave:function onContainerMouseLeave(e){var chart=charts[H.hoverChartIndex];if(chart&&(e.relatedTarget||e.toElement)){// #4886, MS Touch end fires mouseleave but with no related target\nchart.pointer.reset();chart.pointer.chartPosition=null;// also reset the chart position, used in #149 fix\n}},// The mousemove, touchmove and touchstart event handler\nonContainerMouseMove:function onContainerMouseMove(e){var chart=this.chart;if(!defined(H.hoverChartIndex)||!charts[H.hoverChartIndex]||!charts[H.hoverChartIndex].mouseIsDown){H.hoverChartIndex=chart.index;}e=this.normalize(e);// e.returnValue = false; // #2251, #3224\nif(chart.mouseIsDown==='mousedown'){this.drag(e);}// Show the tooltip and run mouse over events (#977)\nif((this.inClass(e.target,'highcharts-tracker')||chart.isInsidePlot(e.chartX-chart.plotLeft,e.chartY-chart.plotTop))&&!chart.openMenu){this.runPointActions(e);}},/**\n             * Utility to detect whether an element has, or has a parent with, a specific\n             * class name. Used on detection of tracker objects and on deciding whether\n             * hovering the tooltip should cause the active series to mouse out.\n             *\n             * @param  {SVGDOMElement|HTMLDOMElement} element\n             *         The element to investigate.\n             * @param  {String} className\n             *         The class name to look for.\n             *\n             * @return {Boolean}\n             *         True if either the element or one of its parents has the given\n             *         class name.\n             */inClass:function inClass(element,className){var elemClassName;while(element){elemClassName=attr(element,'class');if(elemClassName){if(elemClassName.indexOf(className)!==-1){return true;}if(elemClassName.indexOf('highcharts-container')!==-1){return false;}}element=element.parentNode;}},onTrackerMouseOut:function onTrackerMouseOut(e){var series=this.chart.hoverSeries,relatedTarget=e.relatedTarget||e.toElement;this.isDirectTouch=false;if(series&&relatedTarget&&!series.stickyTracking&&!this.inClass(relatedTarget,'highcharts-tooltip')&&(!this.inClass(relatedTarget,'highcharts-series-'+series.index)||// #2499, #4465\n!this.inClass(relatedTarget,'highcharts-tracker')// #5553\n)){series.onMouseOut();}},onContainerClick:function onContainerClick(e){var chart=this.chart,hoverPoint=chart.hoverPoint,plotLeft=chart.plotLeft,plotTop=chart.plotTop;e=this.normalize(e);if(!chart.cancelClick){// On tracker click, fire the series and point events. #783, #1583\nif(hoverPoint&&this.inClass(e.target,'highcharts-tracker')){// the series click event\nfireEvent(hoverPoint.series,'click',extend(e,{point:hoverPoint}));// the point click event\nif(chart.hoverPoint){// it may be destroyed (#1844)\nhoverPoint.firePointEvent('click',e);}// When clicking outside a tracker, fire a chart event\n}else{extend(e,this.getCoordinates(e));// fire a click event in the chart\nif(chart.isInsidePlot(e.chartX-plotLeft,e.chartY-plotTop)){fireEvent(chart,'click',e);}}}},/**\n             * Set the JS DOM events on the container and document. This method should contain\n             * a one-to-one assignment between methods and their handlers. Any advanced logic should\n             * be moved to the handler reflecting the event's name.\n             *\n             * @private\n             */setDOMEvents:function setDOMEvents(){var pointer=this,container=pointer.chart.container,ownerDoc=container.ownerDocument;container.onmousedown=function(e){pointer.onContainerMouseDown(e);};container.onmousemove=function(e){pointer.onContainerMouseMove(e);};container.onclick=function(e){pointer.onContainerClick(e);};addEvent(container,'mouseleave',pointer.onContainerMouseLeave);if(H.chartCount===1){addEvent(ownerDoc,'mouseup',pointer.onDocumentMouseUp);}if(H.hasTouch){container.ontouchstart=function(e){pointer.onContainerTouchStart(e);};container.ontouchmove=function(e){pointer.onContainerTouchMove(e);};if(H.chartCount===1){addEvent(ownerDoc,'touchend',pointer.onDocumentTouchEnd);}}},/**\n             * Destroys the Pointer object and disconnects DOM events.\n             */destroy:function destroy(){var pointer=this,ownerDoc=this.chart.container.ownerDocument;if(pointer.unDocMouseMove){pointer.unDocMouseMove();}removeEvent(pointer.chart.container,'mouseleave',pointer.onContainerMouseLeave);if(!H.chartCount){removeEvent(ownerDoc,'mouseup',pointer.onDocumentMouseUp);if(H.hasTouch){removeEvent(ownerDoc,'touchend',pointer.onDocumentTouchEnd);}}// memory and CPU leak\nclearInterval(pointer.tooltipTimeout);H.objectEach(pointer,function(val,prop){pointer[prop]=null;});}};})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var charts=H.charts,each=H.each,extend=H.extend,map=H.map,noop=H.noop,pick=H.pick,Pointer=H.Pointer;/* Support for touch devices */extend(Pointer.prototype,/** @lends Pointer.prototype */{/**\n             * Run translation operations\n             */pinchTranslate:function pinchTranslate(pinchDown,touches,transform,selectionMarker,clip,lastValidTouch){if(this.zoomHor){this.pinchTranslateDirection(true,pinchDown,touches,transform,selectionMarker,clip,lastValidTouch);}if(this.zoomVert){this.pinchTranslateDirection(false,pinchDown,touches,transform,selectionMarker,clip,lastValidTouch);}},/**\n             * Run translation operations for each direction (horizontal and vertical) independently\n             */pinchTranslateDirection:function pinchTranslateDirection(horiz,pinchDown,touches,transform,selectionMarker,clip,lastValidTouch,forcedScale){var chart=this.chart,xy=horiz?'x':'y',XY=horiz?'X':'Y',sChartXY='chart'+XY,wh=horiz?'width':'height',plotLeftTop=chart['plot'+(horiz?'Left':'Top')],selectionWH,selectionXY,clipXY,scale=forcedScale||1,inverted=chart.inverted,bounds=chart.bounds[horiz?'h':'v'],singleTouch=pinchDown.length===1,touch0Start=pinchDown[0][sChartXY],touch0Now=touches[0][sChartXY],touch1Start=!singleTouch&&pinchDown[1][sChartXY],touch1Now=!singleTouch&&touches[1][sChartXY],outOfBounds,transformScale,scaleKey,setScale=function setScale(){// Don't zoom if fingers are too close on this axis\nif(!singleTouch&&Math.abs(touch0Start-touch1Start)>20){scale=forcedScale||Math.abs(touch0Now-touch1Now)/Math.abs(touch0Start-touch1Start);}clipXY=(plotLeftTop-touch0Now)/scale+touch0Start;selectionWH=chart['plot'+(horiz?'Width':'Height')]/scale;};// Set the scale, first pass\nsetScale();selectionXY=clipXY;// the clip position (x or y) is altered if out of bounds, the selection position is not\n// Out of bounds\nif(selectionXY<bounds.min){selectionXY=bounds.min;outOfBounds=true;}else if(selectionXY+selectionWH>bounds.max){selectionXY=bounds.max-selectionWH;outOfBounds=true;}// Is the chart dragged off its bounds, determined by dataMin and dataMax?\nif(outOfBounds){// Modify the touchNow position in order to create an elastic drag movement. This indicates\n// to the user that the chart is responsive but can't be dragged further.\ntouch0Now-=0.8*(touch0Now-lastValidTouch[xy][0]);if(!singleTouch){touch1Now-=0.8*(touch1Now-lastValidTouch[xy][1]);}// Set the scale, second pass to adapt to the modified touchNow positions\nsetScale();}else{lastValidTouch[xy]=[touch0Now,touch1Now];}// Set geometry for clipping, selection and transformation\nif(!inverted){clip[xy]=clipXY-plotLeftTop;clip[wh]=selectionWH;}scaleKey=inverted?horiz?'scaleY':'scaleX':'scale'+XY;transformScale=inverted?1/scale:scale;selectionMarker[wh]=selectionWH;selectionMarker[xy]=selectionXY;transform[scaleKey]=scale;transform['translate'+XY]=transformScale*plotLeftTop+(touch0Now-transformScale*touch0Start);},/**\n             * Handle touch events with two touches\n             */pinch:function pinch(e){var self=this,chart=self.chart,pinchDown=self.pinchDown,touches=e.touches,touchesLength=touches.length,lastValidTouch=self.lastValidTouch,hasZoom=self.hasZoom,selectionMarker=self.selectionMarker,transform={},fireClickEvent=touchesLength===1&&(self.inClass(e.target,'highcharts-tracker')&&chart.runTrackerClick||self.runChartClick),clip={};// Don't initiate panning until the user has pinched. This prevents us from\n// blocking page scrolling as users scroll down a long page (#4210).\nif(touchesLength>1){self.initiated=true;}// On touch devices, only proceed to trigger click if a handler is defined\nif(hasZoom&&self.initiated&&!fireClickEvent){e.preventDefault();}// Normalize each touch\nmap(touches,function(e){return self.normalize(e);});// Register the touch start position\nif(e.type==='touchstart'){each(touches,function(e,i){pinchDown[i]={chartX:e.chartX,chartY:e.chartY};});lastValidTouch.x=[pinchDown[0].chartX,pinchDown[1]&&pinchDown[1].chartX];lastValidTouch.y=[pinchDown[0].chartY,pinchDown[1]&&pinchDown[1].chartY];// Identify the data bounds in pixels\neach(chart.axes,function(axis){if(axis.zoomEnabled){var bounds=chart.bounds[axis.horiz?'h':'v'],minPixelPadding=axis.minPixelPadding,min=axis.toPixels(pick(axis.options.min,axis.dataMin)),max=axis.toPixels(pick(axis.options.max,axis.dataMax)),absMin=Math.min(min,max),absMax=Math.max(min,max);// Store the bounds for use in the touchmove handler\nbounds.min=Math.min(axis.pos,absMin-minPixelPadding);bounds.max=Math.max(axis.pos+axis.len,absMax+minPixelPadding);}});self.res=true;// reset on next move\n// Optionally move the tooltip on touchmove\n}else if(self.followTouchMove&&touchesLength===1){this.runPointActions(self.normalize(e));// Event type is touchmove, handle panning and pinching\n}else if(pinchDown.length){// can be 0 when releasing, if touchend fires first\n// Set the marker\nif(!selectionMarker){self.selectionMarker=selectionMarker=extend({destroy:noop,touch:true},chart.plotBox);}self.pinchTranslate(pinchDown,touches,transform,selectionMarker,clip,lastValidTouch);self.hasPinched=hasZoom;// Scale and translate the groups to provide visual feedback during pinching\nself.scaleGroups(transform,clip);if(self.res){self.res=false;this.reset(false,0);}}},/**\n             * General touch handler shared by touchstart and touchmove.\n             */touch:function touch(e,start){var chart=this.chart,hasMoved,pinchDown,isInside;if(chart.index!==H.hoverChartIndex){this.onContainerMouseLeave({relatedTarget:true});}H.hoverChartIndex=chart.index;if(e.touches.length===1){e=this.normalize(e);isInside=chart.isInsidePlot(e.chartX-chart.plotLeft,e.chartY-chart.plotTop);if(isInside&&!chart.openMenu){// Run mouse events and display tooltip etc\nif(start){this.runPointActions(e);}// Android fires touchmove events after the touchstart even if the\n// finger hasn't moved, or moved only a pixel or two. In iOS however,\n// the touchmove doesn't fire unless the finger moves more than ~4px.\n// So we emulate this behaviour in Android by checking how much it\n// moved, and cancelling on small distances. #3450.\nif(e.type==='touchmove'){pinchDown=this.pinchDown;hasMoved=pinchDown[0]?Math.sqrt(// #5266\nMath.pow(pinchDown[0].chartX-e.chartX,2)+Math.pow(pinchDown[0].chartY-e.chartY,2))>=4:false;}if(pick(hasMoved,true)){this.pinch(e);}}else if(start){// Hide the tooltip on touching outside the plot area (#1203)\nthis.reset();}}else if(e.touches.length===2){this.pinch(e);}},onContainerTouchStart:function onContainerTouchStart(e){this.zoomOption(e);this.touch(e,true);},onContainerTouchMove:function onContainerTouchMove(e){this.touch(e);},onDocumentTouchEnd:function onDocumentTouchEnd(e){if(charts[H.hoverChartIndex]){charts[H.hoverChartIndex].pointer.drop(e);}}});})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var addEvent=H.addEvent,charts=H.charts,css=H.css,doc=H.doc,extend=H.extend,hasTouch=H.hasTouch,noop=H.noop,Pointer=H.Pointer,removeEvent=H.removeEvent,win=H.win,wrap=H.wrap;if(!hasTouch&&(win.PointerEvent||win.MSPointerEvent)){// The touches object keeps track of the points being touched at all times\nvar touches={},hasPointerEvent=!!win.PointerEvent,getWebkitTouches=function getWebkitTouches(){var fake=[];fake.item=function(i){return this[i];};H.objectEach(touches,function(touch){fake.push({pageX:touch.pageX,pageY:touch.pageY,target:touch.target});});return fake;},translateMSPointer=function translateMSPointer(e,method,wktype,func){var p;if((e.pointerType==='touch'||e.pointerType===e.MSPOINTER_TYPE_TOUCH)&&charts[H.hoverChartIndex]){func(e);p=charts[H.hoverChartIndex].pointer;p[method]({type:wktype,target:e.currentTarget,preventDefault:noop,touches:getWebkitTouches()});}};/**\n             * Extend the Pointer prototype with methods for each event handler and more\n             */extend(Pointer.prototype,/** @lends Pointer.prototype */{onContainerPointerDown:function onContainerPointerDown(e){translateMSPointer(e,'onContainerTouchStart','touchstart',function(e){touches[e.pointerId]={pageX:e.pageX,pageY:e.pageY,target:e.currentTarget};});},onContainerPointerMove:function onContainerPointerMove(e){translateMSPointer(e,'onContainerTouchMove','touchmove',function(e){touches[e.pointerId]={pageX:e.pageX,pageY:e.pageY};if(!touches[e.pointerId].target){touches[e.pointerId].target=e.currentTarget;}});},onDocumentPointerUp:function onDocumentPointerUp(e){translateMSPointer(e,'onDocumentTouchEnd','touchend',function(e){delete touches[e.pointerId];});},/**\n                 * Add or remove the MS Pointer specific events\n                 */batchMSEvents:function batchMSEvents(fn){fn(this.chart.container,hasPointerEvent?'pointerdown':'MSPointerDown',this.onContainerPointerDown);fn(this.chart.container,hasPointerEvent?'pointermove':'MSPointerMove',this.onContainerPointerMove);fn(doc,hasPointerEvent?'pointerup':'MSPointerUp',this.onDocumentPointerUp);}});// Disable default IE actions for pinch and such on chart element\nwrap(Pointer.prototype,'init',function(proceed,chart,options){proceed.call(this,chart,options);if(this.hasZoom){// #4014\ncss(chart.container,{'-ms-touch-action':'none','touch-action':'none'});}});// Add IE specific touch events to chart\nwrap(Pointer.prototype,'setDOMEvents',function(proceed){proceed.apply(this);if(this.hasZoom||this.followTouchMove){this.batchMSEvents(addEvent);}});// Destroy MS events also\nwrap(Pointer.prototype,'destroy',function(proceed){this.batchMSEvents(removeEvent);proceed.call(this);});}})(Highcharts);(function(Highcharts){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var H=Highcharts,addEvent=H.addEvent,css=H.css,discardElement=H.discardElement,defined=H.defined,each=H.each,isFirefox=H.isFirefox,marginNames=H.marginNames,merge=H.merge,pick=H.pick,setAnimation=H.setAnimation,stableSort=H.stableSort,win=H.win,wrap=H.wrap;/**\n         * The overview of the chart's series. The legend object is instanciated\n         * internally in the chart constructor, and available from `chart.legend`. Each\n         * chart has only one legend.\n         *\n         * @class\n         */Highcharts.Legend=function(chart,options){this.init(chart,options);};Highcharts.Legend.prototype={/**\n             * Initialize the legend.\n             *\n             * @private\n             */init:function init(chart,options){this.chart=chart;this.setOptions(options);if(options.enabled){// Render it\nthis.render();// move checkboxes\naddEvent(this.chart,'endResize',function(){this.legend.positionCheckboxes();});}},setOptions:function setOptions(options){var padding=pick(options.padding,8);this.options=options;this.itemStyle=options.itemStyle;this.itemHiddenStyle=merge(this.itemStyle,options.itemHiddenStyle);this.itemMarginTop=options.itemMarginTop||0;this.padding=padding;this.initialItemY=padding-5;// 5 is pixels above the text\nthis.maxItemWidth=0;this.itemHeight=0;this.symbolWidth=pick(options.symbolWidth,16);this.pages=[];},/**\n             * Update the legend with new options. Equivalent to running `chart.update`\n             * with a legend configuration option.\n             * @param  {LegendOptions} options\n             *         Legend options.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart.\n             *\n             * @sample highcharts/legend/legend-update/\n             *         Legend update\n             */update:function update(options,redraw){var chart=this.chart;this.setOptions(merge(true,this.options,options));this.destroy();chart.isDirtyLegend=chart.isDirtyBox=true;if(pick(redraw,true)){chart.redraw();}},/**\n             * Set the colors for the legend item.\n             *\n             * @private\n             * @param  {Series|Point} item\n             *         A Series or Point instance\n             * @param  {Boolean} visible\n             *         Dimmed or colored\n             */colorizeItem:function colorizeItem(item,visible){item.legendGroup[visible?'removeClass':'addClass']('highcharts-legend-item-hidden');var legend=this,options=legend.options,legendItem=item.legendItem,legendLine=item.legendLine,legendSymbol=item.legendSymbol,hiddenColor=legend.itemHiddenStyle.color,textColor=visible?options.itemStyle.color:hiddenColor,symbolColor=visible?item.color||hiddenColor:hiddenColor,markerOptions=item.options&&item.options.marker,symbolAttr={fill:symbolColor};if(legendItem){legendItem.css({fill:textColor,color:textColor// #1553, oldIE\n});}if(legendLine){legendLine.attr({stroke:symbolColor});}if(legendSymbol){// Apply marker options\nif(markerOptions&&legendSymbol.isMarker){// #585\nsymbolAttr=item.pointAttribs();if(!visible){symbolAttr.stroke=symbolAttr.fill=hiddenColor;// #6769\n}}legendSymbol.attr(symbolAttr);}},/**\n             * Position the legend item.\n             *\n             * @private\n             * @param {Series|Point} item\n             *        The item to position\n             */positionItem:function positionItem(item){var legend=this,options=legend.options,symbolPadding=options.symbolPadding,ltr=!options.rtl,legendItemPos=item._legendItemPos,itemX=legendItemPos[0],itemY=legendItemPos[1],checkbox=item.checkbox,legendGroup=item.legendGroup;if(legendGroup&&legendGroup.element){legendGroup.translate(ltr?itemX:legend.legendWidth-itemX-2*symbolPadding-4,itemY);}if(checkbox){checkbox.x=itemX;checkbox.y=itemY;}},/**\n             * Destroy a single legend item, used internally on removing series items.\n             *\n             * @param {Series|Point} item\n             *        The item to remove\n             */destroyItem:function destroyItem(item){var checkbox=item.checkbox;// destroy SVG elements\neach(['legendItem','legendLine','legendSymbol','legendGroup'],function(key){if(item[key]){item[key]=item[key].destroy();}});if(checkbox){discardElement(item.checkbox);}},/**\n             * Destroy the legend. Used internally. To reflow objects, `chart.redraw`\n             * must be called after destruction.\n             */destroy:function destroy(){function destroyItems(key){if(this[key]){this[key]=this[key].destroy();}}// Destroy items\neach(this.getAllItems(),function(item){each(['legendItem','legendGroup'],destroyItems,item);});// Destroy legend elements\neach(['clipRect','up','down','pager','nav','box','title','group'],destroyItems,this);this.display=null;// Reset in .render on update.\n},/**\n             * Position the checkboxes after the width is determined.\n             *\n             * @private\n             */positionCheckboxes:function positionCheckboxes(scrollOffset){var alignAttr=this.group&&this.group.alignAttr,translateY,clipHeight=this.clipHeight||this.legendHeight,titleHeight=this.titleHeight;if(alignAttr){translateY=alignAttr.translateY;each(this.allItems,function(item){var checkbox=item.checkbox,top;if(checkbox){top=translateY+titleHeight+checkbox.y+(scrollOffset||0)+3;css(checkbox,{left:alignAttr.translateX+item.checkboxOffset+checkbox.x-20+'px',top:top+'px',display:top>translateY-6&&top<translateY+clipHeight-6?'':'none'});}});}},/**\n             * Render the legend title on top of the legend.\n             *\n             * @private\n             */renderTitle:function renderTitle(){var options=this.options,padding=this.padding,titleOptions=options.title,titleHeight=0,bBox;if(titleOptions.text){if(!this.title){this.title=this.chart.renderer.label(titleOptions.text,padding-3,padding-4,null,null,null,options.useHTML,null,'legend-title').attr({zIndex:1}).css(titleOptions.style).add(this.group);}bBox=this.title.getBBox();titleHeight=bBox.height;this.offsetWidth=bBox.width;// #1717\nthis.contentGroup.attr({translateY:titleHeight});}this.titleHeight=titleHeight;},/**\n             * Set the legend item text.\n             *\n             * @param  {Series|Point} item\n             *         The item for which to update the text in the legend.\n             */setText:function setText(item){var options=this.options;item.legendItem.attr({text:options.labelFormat?H.format(options.labelFormat,item):options.labelFormatter.call(item)});},/**\n             * Render a single specific legend item. Called internally from the `render`\n             * function.\n             *\n             * @private\n             * @param {Series|Point} item\n             *        The item to render.\n             */renderItem:function renderItem(item){var legend=this,chart=legend.chart,renderer=chart.renderer,options=legend.options,horizontal=options.layout==='horizontal',symbolWidth=legend.symbolWidth,symbolPadding=options.symbolPadding,itemStyle=legend.itemStyle,itemHiddenStyle=legend.itemHiddenStyle,padding=legend.padding,itemDistance=horizontal?pick(options.itemDistance,20):0,ltr=!options.rtl,itemHeight,widthOption=options.width,itemMarginBottom=options.itemMarginBottom||0,itemMarginTop=legend.itemMarginTop,bBox,itemWidth,li=item.legendItem,isSeries=!item.series,series=!isSeries&&item.series.drawLegendSymbol?item.series:item,seriesOptions=series.options,showCheckbox=legend.createCheckboxForItem&&seriesOptions&&seriesOptions.showCheckbox,// full width minus text width\nitemExtraWidth=symbolWidth+symbolPadding+itemDistance+(showCheckbox?20:0),useHTML=options.useHTML,fontSize=12,itemClassName=item.options.className;if(!li){// generate it once, later move it\n// Generate the group box, a group to hold the symbol and text. Text\n// is to be appended in Legend class.\nitem.legendGroup=renderer.g('legend-item').addClass('highcharts-'+series.type+'-series '+'highcharts-color-'+item.colorIndex+(itemClassName?' '+itemClassName:'')+(isSeries?' highcharts-series-'+item.index:'')).attr({zIndex:1}).add(legend.scrollGroup);// Generate the list item text and add it to the group\nitem.legendItem=li=renderer.text('',ltr?symbolWidth+symbolPadding:-symbolPadding,legend.baseline||0,useHTML)// merge to prevent modifying original (#1021)\n.css(merge(item.visible?itemStyle:itemHiddenStyle)).attr({align:ltr?'left':'right',zIndex:2}).add(item.legendGroup);// Get the baseline for the first item - the font size is equal for\n// all\nif(!legend.baseline){fontSize=itemStyle.fontSize;legend.fontMetrics=renderer.fontMetrics(fontSize,li);legend.baseline=legend.fontMetrics.f+3+itemMarginTop;li.attr('y',legend.baseline);}// Draw the legend symbol inside the group box\nlegend.symbolHeight=options.symbolHeight||legend.fontMetrics.f;series.drawLegendSymbol(legend,item);if(legend.setItemEvents){legend.setItemEvents(item,li,useHTML);}// add the HTML checkbox on top\nif(showCheckbox){legend.createCheckboxForItem(item);}}// Colorize the items\nlegend.colorizeItem(item,item.visible);// Take care of max width and text overflow (#6659)\nif(!itemStyle.width){li.css({width:(options.itemWidth||options.width||chart.spacingBox.width)-itemExtraWidth});}// Always update the text\nlegend.setText(item);// calculate the positions for the next line\nbBox=li.getBBox();itemWidth=item.checkboxOffset=options.itemWidth||item.legendItemWidth||bBox.width+itemExtraWidth;legend.itemHeight=itemHeight=Math.round(item.legendItemHeight||bBox.height||legend.symbolHeight);// If the item exceeds the width, start a new line\nif(horizontal&&legend.itemX-padding+itemWidth>(widthOption||chart.spacingBox.width-2*padding-options.x)){legend.itemX=padding;legend.itemY+=itemMarginTop+legend.lastLineHeight+itemMarginBottom;legend.lastLineHeight=0;// reset for next line (#915, #3976)\n}// If the item exceeds the height, start a new column\n/*if (!horizontal && legend.itemY + options.y +\n                \t\titemHeight > chart.chartHeight - spacingTop - spacingBottom) {\n                \tlegend.itemY = legend.initialItemY;\n                \tlegend.itemX += legend.maxItemWidth;\n                \tlegend.maxItemWidth = 0;\n                }*/// Set the edge positions\nlegend.maxItemWidth=Math.max(legend.maxItemWidth,itemWidth);legend.lastItemY=itemMarginTop+legend.itemY+itemMarginBottom;legend.lastLineHeight=Math.max(// #915\nitemHeight,legend.lastLineHeight);// cache the position of the newly generated or reordered items\nitem._legendItemPos=[legend.itemX,legend.itemY];// advance\nif(horizontal){legend.itemX+=itemWidth;}else{legend.itemY+=itemMarginTop+itemHeight+itemMarginBottom;legend.lastLineHeight=itemHeight;}// the width of the widest item\nlegend.offsetWidth=widthOption||Math.max((horizontal?legend.itemX-padding-(item.checkbox?// decrease by itemDistance only when no checkbox #4853\n0:itemDistance):itemWidth)+padding,legend.offsetWidth);},/**\n             * Get all items, which is one item per series for most series and one\n             * item per point for pie series and its derivatives.\n             *\n             * @return {Array.<Series|Point>}\n             *         The current items in the legend.\n             */getAllItems:function getAllItems(){var allItems=[];each(this.chart.series,function(series){var seriesOptions=series&&series.options;// Handle showInLegend. If the series is linked to another series,\n// defaults to false.\nif(series&&pick(seriesOptions.showInLegend,!defined(seriesOptions.linkedTo)?undefined:false,true)){// Use points or series for the legend item depending on\n// legendType\nallItems=allItems.concat(series.legendItems||(seriesOptions.legendType==='point'?series.data:series));}});return allItems;},/**\n             * Adjust the chart margins by reserving space for the legend on only one\n             * side of the chart. If the position is set to a corner, top or bottom is\n             * reserved for horizontal legends and left or right for vertical ones.\n             *\n             * @private\n             */adjustMargins:function adjustMargins(margin,spacing){var chart=this.chart,options=this.options,// Use the first letter of each alignment option in order to detect\n// the side. (#4189 - use charAt(x) notation instead of [x] for IE7)\nalignment=options.align.charAt(0)+options.verticalAlign.charAt(0)+options.layout.charAt(0);if(!options.floating){each([/(lth|ct|rth)/,/(rtv|rm|rbv)/,/(rbh|cb|lbh)/,/(lbv|lm|ltv)/],function(alignments,side){if(alignments.test(alignment)&&!defined(margin[side])){// Now we have detected on which side of the chart we should\n// reserve space for the legend\nchart[marginNames[side]]=Math.max(chart[marginNames[side]],chart.legend[(side+1)%2?'legendHeight':'legendWidth']+[1,-1,-1,1][side]*options[side%2?'x':'y']+pick(options.margin,12)+spacing[side]);}});}},/**\n             * Render the legend. This method can be called both before and after\n             * `chart.render`. If called after, it will only rearrange items instead\n             * of creating new ones. Called internally on initial render and after\n             * redraws.\n             */render:function render(){var legend=this,chart=legend.chart,renderer=chart.renderer,legendGroup=legend.group,allItems,display,legendWidth,legendHeight,box=legend.box,options=legend.options,padding=legend.padding;legend.itemX=padding;legend.itemY=legend.initialItemY;legend.offsetWidth=0;legend.lastItemY=0;if(!legendGroup){legend.group=legendGroup=renderer.g('legend').attr({zIndex:7}).add();legend.contentGroup=renderer.g().attr({zIndex:1})// above background\n.add(legendGroup);legend.scrollGroup=renderer.g().add(legend.contentGroup);}legend.renderTitle();// add each series or point\nallItems=legend.getAllItems();// sort by legendIndex\nstableSort(allItems,function(a,b){return(a.options&&a.options.legendIndex||0)-(b.options&&b.options.legendIndex||0);});// reversed legend\nif(options.reversed){allItems.reverse();}legend.allItems=allItems;legend.display=display=!!allItems.length;// render the items\nlegend.lastLineHeight=0;each(allItems,function(item){legend.renderItem(item);});// Get the box\nlegendWidth=(options.width||legend.offsetWidth)+padding;legendHeight=legend.lastItemY+legend.lastLineHeight+legend.titleHeight;legendHeight=legend.handleOverflow(legendHeight);legendHeight+=padding;// Draw the border and/or background\nif(!box){legend.box=box=renderer.rect().addClass('highcharts-legend-box').attr({r:options.borderRadius}).add(legendGroup);box.isNew=true;}// Presentational\nbox.attr({stroke:options.borderColor,'stroke-width':options.borderWidth||0,fill:options.backgroundColor||'none'}).shadow(options.shadow);if(legendWidth>0&&legendHeight>0){box[box.isNew?'attr':'animate'](box.crisp({x:0,y:0,width:legendWidth,height:legendHeight},box.strokeWidth()));box.isNew=false;}// hide the border if no items\nbox[display?'show':'hide']();legend.legendWidth=legendWidth;legend.legendHeight=legendHeight;// Now that the legend width and height are established, put the items\n// in the final position\neach(allItems,function(item){legend.positionItem(item);});// 1.x compatibility: positioning based on style\n/*var props = ['left', 'right', 'top', 'bottom'],\n                \tprop,\n                \ti = 4;\n                while (i--) {\n                \tprop = props[i];\n                \tif (options.style[prop] && options.style[prop] !== 'auto') {\n                \t\toptions[i < 2 ? 'align' : 'verticalAlign'] = prop;\n                \t\toptions[i < 2 ? 'x' : 'y'] =\n                \t\t\tpInt(options.style[prop]) * (i % 2 ? -1 : 1);\n                \t}\n                }*/if(display){legendGroup.align(merge(options,{width:legendWidth,height:legendHeight}),true,'spacingBox');}if(!chart.isResizing){this.positionCheckboxes();}},/**\n             * Set up the overflow handling by adding navigation with up and down arrows\n             * below the legend.\n             *\n             * @private\n             */handleOverflow:function handleOverflow(legendHeight){var legend=this,chart=this.chart,renderer=chart.renderer,options=this.options,optionsY=options.y,alignTop=options.verticalAlign==='top',padding=this.padding,spaceHeight=chart.spacingBox.height+(alignTop?-optionsY:optionsY)-padding,maxHeight=options.maxHeight,clipHeight,clipRect=this.clipRect,navOptions=options.navigation,animation=pick(navOptions.animation,true),arrowSize=navOptions.arrowSize||12,nav=this.nav,pages=this.pages,lastY,allItems=this.allItems,clipToHeight=function clipToHeight(height){if(typeof height==='number'){clipRect.attr({height:height});}else if(clipRect){// Reset (#5912)\nlegend.clipRect=clipRect.destroy();legend.contentGroup.clip();}// useHTML\nif(legend.contentGroup.div){legend.contentGroup.div.style.clip=height?'rect('+padding+'px,9999px,'+(padding+height)+'px,0)':'auto';}};// Adjust the height\nif(options.layout==='horizontal'&&options.verticalAlign!=='middle'&&!options.floating){spaceHeight/=2;}if(maxHeight){spaceHeight=Math.min(spaceHeight,maxHeight);}// Reset the legend height and adjust the clipping rectangle\npages.length=0;if(legendHeight>spaceHeight&&navOptions.enabled!==false){this.clipHeight=clipHeight=Math.max(spaceHeight-20-this.titleHeight-padding,0);this.currentPage=pick(this.currentPage,1);this.fullHeight=legendHeight;// Fill pages with Y positions so that the top of each a legend item\n// defines the scroll top for each page (#2098)\neach(allItems,function(item,i){var y=item._legendItemPos[1],h=Math.round(item.legendItem.getBBox().height),len=pages.length;if(!len||y-pages[len-1]>clipHeight&&(lastY||y)!==pages[len-1]){pages.push(lastY||y);len++;}if(i===allItems.length-1&&y+h-pages[len-1]>clipHeight){pages.push(y);}if(y!==lastY){lastY=y;}});// Only apply clipping if needed. Clipping causes blurred legend in\n// PDF export (#1787)\nif(!clipRect){clipRect=legend.clipRect=renderer.clipRect(0,padding,9999,0);legend.contentGroup.clip(clipRect);}clipToHeight(clipHeight);// Add navigation elements\nif(!nav){this.nav=nav=renderer.g().attr({zIndex:1}).add(this.group);this.up=renderer.symbol('triangle',0,0,arrowSize,arrowSize).on('click',function(){legend.scroll(-1,animation);}).add(nav);this.pager=renderer.text('',15,10).addClass('highcharts-legend-navigation').css(navOptions.style).add(nav);this.down=renderer.symbol('triangle-down',0,0,arrowSize,arrowSize).on('click',function(){legend.scroll(1,animation);}).add(nav);}// Set initial position\nlegend.scroll(0);legendHeight=spaceHeight;// Reset\n}else if(nav){clipToHeight();this.nav=nav.destroy();// #6322\nthis.scrollGroup.attr({translateY:1});this.clipHeight=0;// #1379\n}return legendHeight;},/**\n             * Scroll the legend by a number of pages.\n             * @param  {Number} scrollBy\n             *         The number of pages to scroll.\n             * @param  {AnimationOptions} animation\n             *         Whether and how to apply animation.\n             */scroll:function scroll(scrollBy,animation){var pages=this.pages,pageCount=pages.length,currentPage=this.currentPage+scrollBy,clipHeight=this.clipHeight,navOptions=this.options.navigation,pager=this.pager,padding=this.padding,scrollOffset;// When resizing while looking at the last page\nif(currentPage>pageCount){currentPage=pageCount;}if(currentPage>0){if(animation!==undefined){setAnimation(animation,this.chart);}this.nav.attr({translateX:padding,translateY:clipHeight+this.padding+7+this.titleHeight,visibility:'visible'});this.up.attr({'class':currentPage===1?'highcharts-legend-nav-inactive':'highcharts-legend-nav-active'});pager.attr({text:currentPage+'/'+pageCount});this.down.attr({'x':18+this.pager.getBBox().width,// adjust to text width\n'class':currentPage===pageCount?'highcharts-legend-nav-inactive':'highcharts-legend-nav-active'});this.up.attr({fill:currentPage===1?navOptions.inactiveColor:navOptions.activeColor}).css({cursor:currentPage===1?'default':'pointer'});this.down.attr({fill:currentPage===pageCount?navOptions.inactiveColor:navOptions.activeColor}).css({cursor:currentPage===pageCount?'default':'pointer'});scrollOffset=-pages[currentPage-1]+this.initialItemY;this.scrollGroup.animate({translateY:scrollOffset});this.currentPage=currentPage;this.positionCheckboxes(scrollOffset);}}};/*\n         * LegendSymbolMixin\n         */H.LegendSymbolMixin={/**\n             * Get the series' symbol in the legend\n             *\n             * @param {Object} legend The legend object\n             * @param {Object} item The series (this) or point\n             */drawRectangle:function drawRectangle(legend,item){var options=legend.options,symbolHeight=legend.symbolHeight,square=options.squareSymbol,symbolWidth=square?symbolHeight:legend.symbolWidth;item.legendSymbol=this.chart.renderer.rect(square?(legend.symbolWidth-symbolHeight)/2:0,legend.baseline-symbolHeight+1,// #3988\nsymbolWidth,symbolHeight,pick(legend.options.symbolRadius,symbolHeight/2)).addClass('highcharts-point').attr({zIndex:3}).add(item.legendGroup);},/**\n             * Get the series' symbol in the legend. This method should be overridable\n             * to create custom symbols through\n             * Highcharts.seriesTypes[type].prototype.drawLegendSymbols.\n             *\n             * @param {Object} legend The legend object\n             */drawLineMarker:function drawLineMarker(legend){var options=this.options,markerOptions=options.marker,radius,legendSymbol,symbolWidth=legend.symbolWidth,symbolHeight=legend.symbolHeight,generalRadius=symbolHeight/2,renderer=this.chart.renderer,legendItemGroup=this.legendGroup,verticalCenter=legend.baseline-Math.round(legend.fontMetrics.b*0.3),attr={};// Draw the line\nattr={'stroke-width':options.lineWidth||0};if(options.dashStyle){attr.dashstyle=options.dashStyle;}this.legendLine=renderer.path(['M',0,verticalCenter,'L',symbolWidth,verticalCenter]).addClass('highcharts-graph').attr(attr).add(legendItemGroup);// Draw the marker\nif(markerOptions&&markerOptions.enabled!==false){// Do not allow the marker to be larger than the symbolHeight\nradius=Math.min(pick(markerOptions.radius,generalRadius),generalRadius);// Restrict symbol markers size\nif(this.symbol.indexOf('url')===0){markerOptions=merge(markerOptions,{width:symbolHeight,height:symbolHeight});radius=0;}this.legendSymbol=legendSymbol=renderer.symbol(this.symbol,symbolWidth/2-radius,verticalCenter-radius,2*radius,2*radius,markerOptions).addClass('highcharts-point').add(legendItemGroup);legendSymbol.isMarker=true;}}};// Workaround for #2030, horizontal legend items not displaying in IE11 Preview,\n// and for #2580, a similar drawing flaw in Firefox 26.\n// Explore if there's a general cause for this. The problem may be related\n// to nested group elements, as the legend item texts are within 4 group\n// elements.\nif(/Trident\\/7\\.0/.test(win.navigator.userAgent)||isFirefox){wrap(Highcharts.Legend.prototype,'positionItem',function(proceed,item){var legend=this,// If chart destroyed in sync, this is undefined (#2030)\nrunPositionItem=function runPositionItem(){if(item._legendItemPos){proceed.call(legend,item);}};// Do it now, for export and to get checkbox placement\nrunPositionItem();// Do it after to work around the core issue\nsetTimeout(runPositionItem);});}})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var addEvent=H.addEvent,animate=H.animate,animObject=H.animObject,attr=H.attr,doc=H.doc,Axis=H.Axis,// @todo add as requirement\ncreateElement=H.createElement,defaultOptions=H.defaultOptions,discardElement=H.discardElement,charts=H.charts,css=H.css,defined=H.defined,each=H.each,extend=H.extend,find=H.find,fireEvent=H.fireEvent,getStyle=H.getStyle,grep=H.grep,isNumber=H.isNumber,isObject=H.isObject,isString=H.isString,Legend=H.Legend,// @todo add as requirement\nmarginNames=H.marginNames,merge=H.merge,objectEach=H.objectEach,Pointer=H.Pointer,// @todo add as requirement\npick=H.pick,pInt=H.pInt,removeEvent=H.removeEvent,seriesTypes=H.seriesTypes,splat=H.splat,svg=H.svg,syncTimeout=H.syncTimeout,win=H.win,Renderer=H.Renderer;/**\n         * The Chart class. The recommended constructor is {@link Highcharts#chart}.\n         * @class Highcharts.Chart\n         * @param  {String|HTMLDOMElement} renderTo\n         *         The DOM element to render to, or its id.\n         * @param  {Options} options\n         *         The chart options structure.\n         * @param  {Function} [callback]\n         *         Function to run when the chart has loaded and and all external images\n         *         are loaded. Defining a {@link\n         *         https://api.highcharts.com/highcharts/chart.events.load|chart.event.load}\n         *         handler is equivalent.\n         *\n         * @example\n         * var chart = Highcharts.chart('container', {\n         * \t   title: {\n         * \t   \t   text: 'My chart'\n         * \t   },\n         * \t   series: [{\n         * \t       data: [1, 3, 2, 4]\n         * \t   }]\n         * })\n         */var Chart=H.Chart=function(){this.getArgs.apply(this,arguments);};/**\n         * Factory function for basic charts.\n         *\n         * @function #chart\n         * @memberOf Highcharts\n         * @param  {String|HTMLDOMElement} renderTo - The DOM element to render to, or\n         * its id.\n         * @param  {Options} options - The chart options structure.\n         * @param  {Function} [callback] - Function to run when the chart has loaded and\n         * and all external images are loaded. Defining a {@link\n         * https://api.highcharts.com/highcharts/chart.events.load|chart.event.load}\n         * handler is equivalent.\n         * @return {Highcharts.Chart} - Returns the Chart object.\n         *\n         * @example\n         * // Render a chart in to div#container\n         * var chart = Highcharts.chart('container', {\n         *     title: {\n         *         text: 'My chart'\n         *     },\n         *     series: [{\n         *         data: [1, 3, 2, 4]\n         *     }]\n         * });\n         */H.chart=function(a,b,c){return new Chart(a,b,c);};extend(Chart.prototype,/** @lends Highcharts.Chart.prototype */{// Hook for adding callbacks in modules\ncallbacks:[],/**\n             * Handle the arguments passed to the constructor.\n             *\n             * @private\n             * @returns {Array} Arguments without renderTo\n             */getArgs:function getArgs(){var args=[].slice.call(arguments);// Remove the optional first argument, renderTo, and\n// set it on this.\nif(isString(args[0])||args[0].nodeName){this.renderTo=args.shift();}this.init(args[0],args[1]);},/**\n             * Overridable function that initializes the chart. The constructor's\n             * arguments are passed on directly.\n             */init:function init(userOptions,callback){// Handle regular options\nvar options,type,seriesOptions=userOptions.series,// skip merging data points to increase performance\nuserPlotOptions=userOptions.plotOptions||{};userOptions.series=null;options=merge(defaultOptions,userOptions);// do the merge\n// Override (by copy of user options) or clear tooltip options\n// in chart.options.plotOptions (#6218)\nfor(type in options.plotOptions){options.plotOptions[type].tooltip=userPlotOptions[type]&&merge(userPlotOptions[type].tooltip)// override by copy\n||undefined;// or clear\n}// User options have higher priority than default options (#6218).\n// In case of exporting: path is changed\noptions.tooltip.userOptions=userOptions.chart&&userOptions.chart.forExport&&userOptions.tooltip.userOptions||userOptions.tooltip;options.series=userOptions.series=seriesOptions;// set back the series data\nthis.userOptions=userOptions;var optionsChart=options.chart;var chartEvents=optionsChart.events;this.margin=[];this.spacing=[];//this.runChartClick = chartEvents && !!chartEvents.click;\nthis.bounds={h:{},v:{}};// Pixel data bounds for touch zoom\nthis.callback=callback;this.isResizing=0;/**\n                 * The options structure for the chart. It contains members for the sub\n                 * elements like series, legend, tooltip etc.\n                 *\n                 * @memberof Highcharts.Chart\n                 * @name options\n                 * @type {Options}\n                 */this.options=options;/**\n                 * All the axes in the chart.\n                 *\n                 * @memberof Highcharts.Chart\n                 * @name axes\n                 * @see  Highcharts.Chart.xAxis\n                 * @see  Highcharts.Chart.yAxis\n                 * @type {Array.<Highcharts.Axis>}\n                 */this.axes=[];/**\n                 * All the current series in the chart.\n                 *\n                 * @memberof Highcharts.Chart\n                 * @name series\n                 * @type {Array.<Highcharts.Series>}\n                 */this.series=[];/**\n                 * The chart title. The title has an `update` method that allows\n                 * modifying the options directly or indirectly via `chart.update`.\n                 *\n                 * @memberof Highcharts.Chart\n                 * @name title\n                 * @type Object\n                 *\n                 * @sample highcharts/members/title-update/\n                 *         Updating titles\n                 *//**\n                 * The chart subtitle. The subtitle has an `update` method that allows\n                 * modifying the options directly or indirectly via `chart.update`.\n                 *\n                 * @memberof Highcharts.Chart\n                 * @name subtitle\n                 * @type Object\n                 */this.hasCartesianSeries=optionsChart.showAxes;//this.axisOffset = undefined;\n//this.inverted = undefined;\n//this.loadingShown = undefined;\n//this.container = undefined;\n//this.chartWidth = undefined;\n//this.chartHeight = undefined;\n//this.marginRight = undefined;\n//this.marginBottom = undefined;\n//this.containerWidth = undefined;\n//this.containerHeight = undefined;\n//this.oldChartWidth = undefined;\n//this.oldChartHeight = undefined;\n//this.renderTo = undefined;\n//this.spacingBox = undefined\n//this.legend = undefined;\n// Elements\n//this.chartBackground = undefined;\n//this.plotBackground = undefined;\n//this.plotBGImage = undefined;\n//this.plotBorder = undefined;\n//this.loadingDiv = undefined;\n//this.loadingSpan = undefined;\nvar chart=this;// Add the chart to the global lookup\nchart.index=charts.length;charts.push(chart);H.chartCount++;// Chart event handlers\nif(chartEvents){objectEach(chartEvents,function(event,eventType){addEvent(chart,eventType,event);});}/**\n                 * A collection of the X axes in the chart.\n                 * @type {Array.<Highcharts.Axis>}\n                 * @name xAxis\n                 * @memberOf Highcharts.Chart\n                 */chart.xAxis=[];/**\n                 * A collection of the Y axes in the chart.\n                 * @type {Array.<Highcharts.Axis>}\n                 * @name yAxis\n                 * @memberOf Highcharts.Chart\n                 */chart.yAxis=[];chart.pointCount=chart.colorCounter=chart.symbolCounter=0;chart.firstRender();},/**\n             * Internal function to unitialize an individual series.\n             *\n             * @private\n             */initSeries:function initSeries(options){var chart=this,optionsChart=chart.options.chart,type=options.type||optionsChart.type||optionsChart.defaultSeriesType,series,Constr=seriesTypes[type];// No such series type\nif(!Constr){H.error(17,true);}series=new Constr();series.init(this,options);return series;},/**\n             * Order all series above a given index. When series are added and ordered\n             * by configuration, only the last series is handled (#248, #1123, #2456,\n             * #6112). This function is called on series initialization and destroy.\n             *\n             * @private\n             *\n             * @param  {number} fromIndex\n             *         If this is given, only the series above this index are handled.\n             */orderSeries:function orderSeries(fromIndex){var series=this.series,i=fromIndex||0;for(;i<series.length;i++){if(series[i]){series[i].index=i;series[i].name=series[i].name||'Series '+(series[i].index+1);}}},/**\n             * Check whether a given point is within the plot area.\n             *\n             * @param  {Number} plotX\n             *         Pixel x relative to the plot area.\n             * @param  {Number} plotY\n             *         Pixel y relative to the plot area.\n             * @param  {Boolean} inverted\n             *         Whether the chart is inverted.\n             *\n             * @return {Boolean}\n             *         Returns true if the given point is inside the plot area.\n             */isInsidePlot:function isInsidePlot(plotX,plotY,inverted){var x=inverted?plotY:plotX,y=inverted?plotX:plotY;return x>=0&&x<=this.plotWidth&&y>=0&&y<=this.plotHeight;},/**\n             * Redraw the chart after changes have been done to the data, axis extremes\n             * chart size or chart elements. All methods for updating axes, series or\n             * points have a parameter for redrawing the chart. This is `true` by\n             * default. But in many cases you want to do more than one operation on the\n             * chart before redrawing, for example add a number of points. In those\n             * cases it is a waste of resources to redraw the chart for each new point\n             * added. So you add the points and call `chart.redraw()` after.\n             *\n             * @param  {AnimationOptions} animation\n             *         If or how to apply animation to the redraw.\n             */redraw:function redraw(animation){var chart=this,axes=chart.axes,series=chart.series,pointer=chart.pointer,legend=chart.legend,redrawLegend=chart.isDirtyLegend,hasStackedSeries,hasDirtyStacks,hasCartesianSeries=chart.hasCartesianSeries,isDirtyBox=chart.isDirtyBox,i,serie,renderer=chart.renderer,isHiddenChart=renderer.isHidden(),afterRedraw=[];// Handle responsive rules, not only on resize (#6130)\nif(chart.setResponsive){chart.setResponsive(false);}H.setAnimation(animation,chart);if(isHiddenChart){chart.temporaryDisplay();}// Adjust title layout (reflow multiline text)\nchart.layOutTitles();// link stacked series\ni=series.length;while(i--){serie=series[i];if(serie.options.stacking){hasStackedSeries=true;if(serie.isDirty){hasDirtyStacks=true;break;}}}if(hasDirtyStacks){// mark others as dirty\ni=series.length;while(i--){serie=series[i];if(serie.options.stacking){serie.isDirty=true;}}}// Handle updated data in the series\neach(series,function(serie){if(serie.isDirty){if(serie.options.legendType==='point'){if(serie.updateTotals){serie.updateTotals();}redrawLegend=true;}}if(serie.isDirtyData){fireEvent(serie,'updatedData');}});// handle added or removed series\nif(redrawLegend&&legend.options.enabled){// series or pie points are added or removed\n// draw legend graphics\nlegend.render();chart.isDirtyLegend=false;}// reset stacks\nif(hasStackedSeries){chart.getStacks();}if(hasCartesianSeries){// set axes scales\neach(axes,function(axis){axis.updateNames();axis.setScale();});}chart.getMargins();// #3098\nif(hasCartesianSeries){// If one axis is dirty, all axes must be redrawn (#792, #2169)\neach(axes,function(axis){if(axis.isDirty){isDirtyBox=true;}});// redraw axes\neach(axes,function(axis){// Fire 'afterSetExtremes' only if extremes are set\nvar key=axis.min+','+axis.max;if(axis.extKey!==key){// #821, #4452\naxis.extKey=key;afterRedraw.push(function(){// prevent a recursive call to chart.redraw() (#1119)\nfireEvent(axis,'afterSetExtremes',extend(axis.eventArgs,axis.getExtremes()));// #747, #751\ndelete axis.eventArgs;});}if(isDirtyBox||hasStackedSeries){axis.redraw();}});}// the plot areas size has changed\nif(isDirtyBox){chart.drawChartBox();}// Fire an event before redrawing series, used by the boost module to\n// clear previous series renderings.\nfireEvent(chart,'predraw');// redraw affected series\neach(series,function(serie){if((isDirtyBox||serie.isDirty)&&serie.visible){serie.redraw();}// Set it here, otherwise we will have unlimited 'updatedData' calls\n// for a hidden series after setData(). Fixes #6012\nserie.isDirtyData=false;});// move tooltip or reset\nif(pointer){pointer.reset(true);}// redraw if canvas\nrenderer.draw();// Fire the events\nfireEvent(chart,'redraw');fireEvent(chart,'render');if(isHiddenChart){chart.temporaryDisplay(true);}// Fire callbacks that are put on hold until after the redraw\neach(afterRedraw,function(callback){callback.call();});},/**\n             * Get an axis, series or point object by `id` as given in the configuration\n             * options. Returns `undefined` if no item is found.\n             * @param id {String} The id as given in the configuration options.\n             * @return {Highcharts.Axis|Highcharts.Series|Highcharts.Point|undefined}\n             *         The retrieved item.\n             * @sample highcharts/plotoptions/series-id/\n             *         Get series by id\n             */get:function get(id){var ret,series=this.series,i;function itemById(item){return item.id===id||item.options&&item.options.id===id;}ret=// Search axes\nfind(this.axes,itemById)||// Search series\nfind(this.series,itemById);// Search points\nfor(i=0;!ret&&i<series.length;i++){ret=find(series[i].points||[],itemById);}return ret;},/**\n             * Create the Axis instances based on the config options.\n             *\n             * @private\n             */getAxes:function getAxes(){var chart=this,options=this.options,xAxisOptions=options.xAxis=splat(options.xAxis||{}),yAxisOptions=options.yAxis=splat(options.yAxis||{}),optionsArray;// make sure the options are arrays and add some members\neach(xAxisOptions,function(axis,i){axis.index=i;axis.isX=true;});each(yAxisOptions,function(axis,i){axis.index=i;});// concatenate all axis options into one array\noptionsArray=xAxisOptions.concat(yAxisOptions);each(optionsArray,function(axisOptions){new Axis(chart,axisOptions);// eslint-disable-line no-new\n});},/**\n             * Returns an array of all currently selected points in the chart. Points\n             * can be selected by clicking or programmatically by the {@link\n             * Highcharts.Point#select} function.\n             *\n             * @return {Array.<Highcharts.Point>}\n             *         The currently selected points.\n             *\n             * @sample highcharts/plotoptions/series-allowpointselect-line/\n             *         Get selected points\n             */getSelectedPoints:function getSelectedPoints(){var points=[];each(this.series,function(serie){// series.data - for points outside of viewed range (#6445)\npoints=points.concat(grep(serie.data||[],function(point){return point.selected;}));});return points;},/**\n             * Returns an array of all currently selected series in the chart. Series\n             * can be selected either programmatically by the {@link\n             * Highcharts.Series#select} function or by checking the checkbox next to\n             * the legend item if {@link\n             * https://api.highcharts.com/highcharts/plotOptions.series.showCheckbox|\n             * series.showCheckBox} is true.\n             *\n             * @return {Array.<Highcharts.Series>}\n             *         The currently selected series.\n             *\n             * @sample highcharts/members/chart-getselectedseries/\n             *         Get selected series\n             */getSelectedSeries:function getSelectedSeries(){return grep(this.series,function(serie){return serie.selected;});},/**\n             * Set a new title or subtitle for the chart.\n             *\n             * @param  titleOptions {TitleOptions}\n             *         New title options. The title text itself is set by the\n             *         `titleOptions.text` property.\n             * @param  subtitleOptions {SubtitleOptions}\n             *         New subtitle options. The subtitle text itself is set by the\n             *         `subtitleOptions.text` property.\n             * @param  redraw {Boolean}\n             *         Whether to redraw the chart or wait for a later call to\n             *         `chart.redraw()`.\n             *\n             * @sample highcharts/members/chart-settitle/ Set title text and styles\n             *\n             */setTitle:function setTitle(titleOptions,subtitleOptions,redraw){var chart=this,options=chart.options,chartTitleOptions,chartSubtitleOptions;chartTitleOptions=options.title=merge(// Default styles\n{style:{color:'#333333',fontSize:options.isStock?'16px':'18px'// #2944\n}},options.title,titleOptions);chartSubtitleOptions=options.subtitle=merge(// Default styles\n{style:{color:'#666666'}},options.subtitle,subtitleOptions);// add title and subtitle\neach([['title',titleOptions,chartTitleOptions],['subtitle',subtitleOptions,chartSubtitleOptions]],function(arr,i){var name=arr[0],title=chart[name],titleOptions=arr[1],chartTitleOptions=arr[2];if(title&&titleOptions){chart[name]=title=title.destroy();// remove old\n}if(chartTitleOptions&&chartTitleOptions.text&&!title){chart[name]=chart.renderer.text(chartTitleOptions.text,0,0,chartTitleOptions.useHTML).attr({align:chartTitleOptions.align,'class':'highcharts-'+name,zIndex:chartTitleOptions.zIndex||4}).add();// Update methods, shortcut to Chart.setTitle\nchart[name].update=function(o){chart.setTitle(!i&&o,i&&o);};// Presentational\nchart[name].css(chartTitleOptions.style);}});chart.layOutTitles(redraw);},/**\n             * Internal function to lay out the chart titles and cache the full offset\n             * height for use in `getMargins`. The result is stored in\n             * `this.titleOffset`.\n             *\n             * @private\n             */layOutTitles:function layOutTitles(redraw){var titleOffset=0,requiresDirtyBox,renderer=this.renderer,spacingBox=this.spacingBox;// Lay out the title and the subtitle respectively\neach(['title','subtitle'],function(key){var title=this[key],titleOptions=this.options[key],offset=key==='title'?-3:// Floating subtitle (#6574)\ntitleOptions.verticalAlign?0:titleOffset+2,titleSize;if(title){titleSize=titleOptions.style.fontSize;titleSize=renderer.fontMetrics(titleSize,title).b;title.css({width:(titleOptions.width||spacingBox.width+titleOptions.widthAdjust)+'px'}).align(extend({y:offset+titleSize},titleOptions),false,'spacingBox');if(!titleOptions.floating&&!titleOptions.verticalAlign){titleOffset=Math.ceil(titleOffset+// Skip the cache for HTML (#3481)\ntitle.getBBox(titleOptions.useHTML).height);}}},this);requiresDirtyBox=this.titleOffset!==titleOffset;this.titleOffset=titleOffset;// used in getMargins\nif(!this.isDirtyBox&&requiresDirtyBox){this.isDirtyBox=requiresDirtyBox;// Redraw if necessary (#2719, #2744)\nif(this.hasRendered&&pick(redraw,true)&&this.isDirtyBox){this.redraw();}}},/**\n             * Internal function to get the chart width and height according to options\n             * and container size. Sets {@link Chart.chartWidth} and {@link\n             * Chart.chartHeight}.\n             */getChartSize:function getChartSize(){var chart=this,optionsChart=chart.options.chart,widthOption=optionsChart.width,heightOption=optionsChart.height,renderTo=chart.renderTo;// Get inner width and height\nif(!defined(widthOption)){chart.containerWidth=getStyle(renderTo,'width');}if(!defined(heightOption)){chart.containerHeight=getStyle(renderTo,'height');}/**\n                 * The current pixel width of the chart.\n                 *\n                 * @name chartWidth\n                 * @memberOf Chart\n                 * @type {Number}\n                 */chart.chartWidth=Math.max(// #1393\n0,widthOption||chart.containerWidth||600// #1460\n);/**\n                 * The current pixel height of the chart.\n                 *\n                 * @name chartHeight\n                 * @memberOf Chart\n                 * @type {Number}\n                 */chart.chartHeight=Math.max(0,H.relativeLength(heightOption,chart.chartWidth)||chart.containerHeight||400);},/**\n             * If the renderTo element has no offsetWidth, most likely one or more of\n             * its parents are hidden. Loop up the DOM tree to temporarily display the\n             * parents, then save the original display properties, and when the true\n             * size is retrieved, reset them. Used on first render and on redraws.\n             *\n             * @private\n             *\n             * @param  {Boolean} revert\n             *         Revert to the saved original styles.\n             */temporaryDisplay:function temporaryDisplay(revert){var node=this.renderTo,tempStyle;if(!revert){while(node&&node.style){// When rendering to a detached node, it needs to be temporarily\n// attached in order to read styling and bounding boxes (#5783).\nif(!doc.body.contains(node)){node.hcOrigDetached=true;doc.body.appendChild(node);}if(getStyle(node,'display',false)==='none'||node.hcOricDetached){node.hcOrigStyle={display:node.style.display,height:node.style.height,overflow:node.style.overflow};tempStyle={display:'block',overflow:'hidden'};if(node!==this.renderTo){tempStyle.height=0;}H.css(node,tempStyle);// If it still doesn't have an offset width after setting\n// display to block, it probably has an !important priority\n// #2631, 6803\nif(!node.offsetWidth){node.style.setProperty('display','block','important');}}node=node.parentNode;if(node===doc.body){break;}}}else{while(node&&node.style){if(node.hcOrigStyle){H.css(node,node.hcOrigStyle);delete node.hcOrigStyle;}if(node.hcOrigDetached){doc.body.removeChild(node);node.hcOrigDetached=false;}node=node.parentNode;}}},/**\n             * Set the {@link Chart.container|chart container's} class name, in\n             * addition to `highcharts-container`.\n             */setClassName:function setClassName(className){this.container.className='highcharts-container '+(className||'');},/**\n             * Get the containing element, determine the size and create the inner\n             * container div to hold the chart.\n             *\n             * @private\n             */getContainer:function getContainer(){var chart=this,container,options=chart.options,optionsChart=options.chart,chartWidth,chartHeight,renderTo=chart.renderTo,indexAttrName='data-highcharts-chart',oldChartIndex,Ren,containerId=H.uniqueKey(),containerStyle,key;if(!renderTo){chart.renderTo=renderTo=optionsChart.renderTo;}if(isString(renderTo)){chart.renderTo=renderTo=doc.getElementById(renderTo);}// Display an error if the renderTo is wrong\nif(!renderTo){H.error(13,true);}// If the container already holds a chart, destroy it. The check for\n// hasRendered is there because web pages that are saved to disk from\n// the browser, will preserve the data-highcharts-chart attribute and\n// the SVG contents, but not an interactive chart. So in this case,\n// charts[oldChartIndex] will point to the wrong chart if any (#2609).\noldChartIndex=pInt(attr(renderTo,indexAttrName));if(isNumber(oldChartIndex)&&charts[oldChartIndex]&&charts[oldChartIndex].hasRendered){charts[oldChartIndex].destroy();}// Make a reference to the chart from the div\nattr(renderTo,indexAttrName,chart.index);// remove previous chart\nrenderTo.innerHTML='';// If the container doesn't have an offsetWidth, it has or is a child of\n// a node that has display:none. We need to temporarily move it out to a\n// visible state to determine the size, else the legend and tooltips\n// won't render properly. The skipClone option is used in sparklines as\n// a micro optimization, saving about 1-2 ms each chart.\nif(!optionsChart.skipClone&&!renderTo.offsetWidth){chart.temporaryDisplay();}// get the width and height\nchart.getChartSize();chartWidth=chart.chartWidth;chartHeight=chart.chartHeight;// Create the inner container\ncontainerStyle=extend({position:'relative',overflow:'hidden',// needed for context menu (avoid scrollbars)\n// and content overflow in IE\nwidth:chartWidth+'px',height:chartHeight+'px',textAlign:'left',lineHeight:'normal',// #427\nzIndex:0,// #1072\n'-webkit-tap-highlight-color':'rgba(0,0,0,0)'},optionsChart.style);/**\n                 * The containing HTML element of the chart. The container is\n                 * dynamically inserted into the element given as the `renderTo`\n                 * parameterin the {@link Highcharts#chart} constructor.\n                 *\n                 * @memberOf Highcharts.Chart\n                 * @type {HTMLDOMElement}\n                 */container=createElement('div',{id:containerId},containerStyle,renderTo);chart.container=container;// cache the cursor (#1650)\nchart._cursor=container.style.cursor;// Initialize the renderer\nRen=H[optionsChart.renderer]||Renderer;/**\n                 * The renderer instance of the chart. Each chart instance has only one\n                 * associated renderer.\n                 * @type {SVGRenderer}\n                 * @name renderer\n                 * @memberOf Chart\n                 */chart.renderer=new Ren(container,chartWidth,chartHeight,null,optionsChart.forExport,options.exporting&&options.exporting.allowHTML);chart.setClassName(optionsChart.className);chart.renderer.setStyle(optionsChart.style);// Add a reference to the charts index\nchart.renderer.chartIndex=chart.index;},/**\n             * Calculate margins by rendering axis labels in a preliminary position.\n             * Title, subtitle and legend have already been rendered at this stage, but\n             * will be moved into their final positions.\n             *\n             * @private\n             */getMargins:function getMargins(skipAxes){var chart=this,spacing=chart.spacing,margin=chart.margin,titleOffset=chart.titleOffset;chart.resetMargins();// Adjust for title and subtitle\nif(titleOffset&&!defined(margin[0])){chart.plotTop=Math.max(chart.plotTop,titleOffset+chart.options.title.margin+spacing[0]);}// Adjust for legend\nif(chart.legend.display){chart.legend.adjustMargins(margin,spacing);}// adjust for scroller\nif(chart.extraMargin){chart[chart.extraMargin.type]=(chart[chart.extraMargin.type]||0)+chart.extraMargin.value;}if(chart.extraTopMargin){chart.plotTop+=chart.extraTopMargin;}if(!skipAxes){this.getAxisMargins();}},getAxisMargins:function getAxisMargins(){var chart=this,// [top, right, bottom, left]\naxisOffset=chart.axisOffset=[0,0,0,0],margin=chart.margin;// pre-render axes to get labels offset width\nif(chart.hasCartesianSeries){each(chart.axes,function(axis){if(axis.visible){axis.getOffset();}});}// Add the axis offsets\neach(marginNames,function(m,side){if(!defined(margin[side])){chart[m]+=axisOffset[side];}});chart.setChartSize();},/**\n             * Reflows the chart to its container. By default, the chart reflows\n             * automatically to its container following a `window.resize` event, as per\n             * the {@link https://api.highcharts/highcharts/chart.reflow|chart.reflow}\n             * option. However, there are no reliable events for div resize, so if the\n             * container is resized without a window resize event, this must be called\n             * explicitly.\n             *\n             * @param  {Object} e\n             *         Event arguments. Used primarily when the function is called\n             *         internally as a response to window resize.\n             *\n             * @sample highcharts/members/chart-reflow/\n             *         Resize div and reflow\n             * @sample highcharts/chart/events-container/\n             *         Pop up and reflow\n             */reflow:function reflow(e){var chart=this,optionsChart=chart.options.chart,renderTo=chart.renderTo,hasUserSize=defined(optionsChart.width)&&defined(optionsChart.height),width=optionsChart.width||getStyle(renderTo,'width'),height=optionsChart.height||getStyle(renderTo,'height'),target=e?e.target:win;// Width and height checks for display:none. Target is doc in IE8 and\n// Opera, win in Firefox, Chrome and IE9.\nif(!hasUserSize&&!chart.isPrinting&&width&&height&&(target===win||target===doc)){if(width!==chart.containerWidth||height!==chart.containerHeight){clearTimeout(chart.reflowTimeout);// When called from window.resize, e is set, else it's called\n// directly (#2224)\nchart.reflowTimeout=syncTimeout(function(){// Set size, it may have been destroyed in the meantime\n// (#1257)\nif(chart.container){chart.setSize(undefined,undefined,false);}},e?100:0);}chart.containerWidth=width;chart.containerHeight=height;}},/**\n             * Add the event handlers necessary for auto resizing, depending on the\n             * `chart.events.reflow` option.\n             *\n             * @private\n             */initReflow:function initReflow(){var chart=this,unbind;unbind=addEvent(win,'resize',function(e){chart.reflow(e);});addEvent(chart,'destroy',unbind);// The following will add listeners to re-fit the chart before and after\n// printing (#2284). However it only works in WebKit. Should have worked\n// in Firefox, but not supported in IE.\n/*\n                if (win.matchMedia) {\n                \twin.matchMedia('print').addListener(function reflow() {\n                \t\tchart.reflow();\n                \t});\n                }\n                */},/**\n             * Resize the chart to a given width and height. In order to set the width\n             * only, the height argument may be skipped. To set the height only, pass\n             * `undefined for the width.\n             * @param  {Number|undefined|null} [width]\n             *         The new pixel width of the chart. Since v4.2.6, the argument can\n             *         be `undefined` in order to preserve the current value (when\n             *         setting height only), or `null` to adapt to the width of the\n             *         containing element.\n             * @param  {Number|undefined|null} [height]\n             *         The new pixel height of the chart. Since v4.2.6, the argument can\n             *         be `undefined` in order to preserve the current value, or `null`\n             *         in order to adapt to the height of the containing element.\n             * @param  {AnimationOptions} [animation=true]\n             *         Whether and how to apply animation.\n             *\n             * @sample highcharts/members/chart-setsize-button/\n             *         Test resizing from buttons\n             * @sample highcharts/members/chart-setsize-jquery-resizable/\n             *         Add a jQuery UI resizable\n             * @sample stock/members/chart-setsize/\n             *         Highstock with UI resizable\n             */setSize:function setSize(width,height,animation){var chart=this,renderer=chart.renderer,globalAnimation;// Handle the isResizing counter\nchart.isResizing+=1;// set the animation for the current process\nH.setAnimation(animation,chart);chart.oldChartHeight=chart.chartHeight;chart.oldChartWidth=chart.chartWidth;if(width!==undefined){chart.options.chart.width=width;}if(height!==undefined){chart.options.chart.height=height;}chart.getChartSize();// Resize the container with the global animation applied if enabled\n// (#2503)\nglobalAnimation=renderer.globalAnimation;(globalAnimation?animate:css)(chart.container,{width:chart.chartWidth+'px',height:chart.chartHeight+'px'},globalAnimation);chart.setChartSize(true);renderer.setSize(chart.chartWidth,chart.chartHeight,animation);// handle axes\neach(chart.axes,function(axis){axis.isDirty=true;axis.setScale();});chart.isDirtyLegend=true;// force legend redraw\nchart.isDirtyBox=true;// force redraw of plot and chart border\nchart.layOutTitles();// #2857\nchart.getMargins();chart.redraw(animation);chart.oldChartHeight=null;fireEvent(chart,'resize');// Fire endResize and set isResizing back. If animation is disabled,\n// fire without delay\nsyncTimeout(function(){if(chart){fireEvent(chart,'endResize',null,function(){chart.isResizing-=1;});}},animObject(globalAnimation).duration);},/**\n             * Set the public chart properties. This is done before and after the\n             * pre-render to determine margin sizes.\n             *\n             * @private\n             */setChartSize:function setChartSize(skipAxes){var chart=this,inverted=chart.inverted,renderer=chart.renderer,chartWidth=chart.chartWidth,chartHeight=chart.chartHeight,optionsChart=chart.options.chart,spacing=chart.spacing,clipOffset=chart.clipOffset,clipX,clipY,plotLeft,plotTop,plotWidth,plotHeight,plotBorderWidth;function clipOffsetSide(side){var offset=clipOffset[side]||0;return Math.max(plotBorderWidth||offset,offset)/2;}/**\n                 * The current left position of the plot area in pixels.\n                 *\n                 * @name plotLeft\n                 * @memberOf Chart\n                 * @type {Number}\n                 */chart.plotLeft=plotLeft=Math.round(chart.plotLeft);/**\n                 * The current top position of the plot area in pixels.\n                 *\n                 * @name plotTop\n                 * @memberOf Chart\n                 * @type {Number}\n                 */chart.plotTop=plotTop=Math.round(chart.plotTop);/**\n                 * The current width of the plot area in pixels.\n                 *\n                 * @name plotWidth\n                 * @memberOf Chart\n                 * @type {Number}\n                 */chart.plotWidth=plotWidth=Math.max(0,Math.round(chartWidth-plotLeft-chart.marginRight));/**\n                 * The current height of the plot area in pixels.\n                 *\n                 * @name plotHeight\n                 * @memberOf Chart\n                 * @type {Number}\n                 */chart.plotHeight=plotHeight=Math.max(0,Math.round(chartHeight-plotTop-chart.marginBottom));chart.plotSizeX=inverted?plotHeight:plotWidth;chart.plotSizeY=inverted?plotWidth:plotHeight;chart.plotBorderWidth=optionsChart.plotBorderWidth||0;// Set boxes used for alignment\nchart.spacingBox=renderer.spacingBox={x:spacing[3],y:spacing[0],width:chartWidth-spacing[3]-spacing[1],height:chartHeight-spacing[0]-spacing[2]};chart.plotBox=renderer.plotBox={x:plotLeft,y:plotTop,width:plotWidth,height:plotHeight};plotBorderWidth=2*Math.floor(chart.plotBorderWidth/2);clipX=Math.ceil(clipOffsetSide(3));clipY=Math.ceil(clipOffsetSide(0));chart.clipBox={x:clipX,y:clipY,width:Math.floor(chart.plotSizeX-clipOffsetSide(1)-clipX),height:Math.max(0,Math.floor(chart.plotSizeY-clipOffsetSide(2)-clipY))};if(!skipAxes){each(chart.axes,function(axis){axis.setAxisSize();axis.setAxisTranslation();});}},/**\n             * Initial margins before auto size margins are applied.\n             *\n             * @private\n             */resetMargins:function resetMargins(){var chart=this,chartOptions=chart.options.chart;// Create margin and spacing array\neach(['margin','spacing'],function splashArrays(target){var value=chartOptions[target],values=isObject(value)?value:[value,value,value,value];each(['Top','Right','Bottom','Left'],function(sideName,side){chart[target][side]=pick(chartOptions[target+sideName],values[side]);});});// Set margin names like chart.plotTop, chart.plotLeft,\n// chart.marginRight, chart.marginBottom.\neach(marginNames,function(m,side){chart[m]=pick(chart.margin[side],chart.spacing[side]);});chart.axisOffset=[0,0,0,0];// top, right, bottom, left\nchart.clipOffset=[];},/**\n             * Internal function to draw or redraw the borders and backgrounds for chart\n             * and plot area.\n             *\n             * @private\n             */drawChartBox:function drawChartBox(){var chart=this,optionsChart=chart.options.chart,renderer=chart.renderer,chartWidth=chart.chartWidth,chartHeight=chart.chartHeight,chartBackground=chart.chartBackground,plotBackground=chart.plotBackground,plotBorder=chart.plotBorder,chartBorderWidth,plotBGImage=chart.plotBGImage,chartBackgroundColor=optionsChart.backgroundColor,plotBackgroundColor=optionsChart.plotBackgroundColor,plotBackgroundImage=optionsChart.plotBackgroundImage,mgn,bgAttr,plotLeft=chart.plotLeft,plotTop=chart.plotTop,plotWidth=chart.plotWidth,plotHeight=chart.plotHeight,plotBox=chart.plotBox,clipRect=chart.clipRect,clipBox=chart.clipBox,verb='animate';// Chart area\nif(!chartBackground){chart.chartBackground=chartBackground=renderer.rect().addClass('highcharts-background').add();verb='attr';}// Presentational\nchartBorderWidth=optionsChart.borderWidth||0;mgn=chartBorderWidth+(optionsChart.shadow?8:0);bgAttr={fill:chartBackgroundColor||'none'};if(chartBorderWidth||chartBackground['stroke-width']){// #980\nbgAttr.stroke=optionsChart.borderColor;bgAttr['stroke-width']=chartBorderWidth;}chartBackground.attr(bgAttr).shadow(optionsChart.shadow);chartBackground[verb]({x:mgn/2,y:mgn/2,width:chartWidth-mgn-chartBorderWidth%2,height:chartHeight-mgn-chartBorderWidth%2,r:optionsChart.borderRadius});// Plot background\nverb='animate';if(!plotBackground){verb='attr';chart.plotBackground=plotBackground=renderer.rect().addClass('highcharts-plot-background').add();}plotBackground[verb](plotBox);// Presentational attributes for the background\nplotBackground.attr({fill:plotBackgroundColor||'none'}).shadow(optionsChart.plotShadow);// Create the background image\nif(plotBackgroundImage){if(!plotBGImage){chart.plotBGImage=renderer.image(plotBackgroundImage,plotLeft,plotTop,plotWidth,plotHeight).add();}else{plotBGImage.animate(plotBox);}}// Plot clip\nif(!clipRect){chart.clipRect=renderer.clipRect(clipBox);}else{clipRect.animate({width:clipBox.width,height:clipBox.height});}// Plot area border\nverb='animate';if(!plotBorder){verb='attr';chart.plotBorder=plotBorder=renderer.rect().addClass('highcharts-plot-border').attr({zIndex:1// Above the grid\n}).add();}// Presentational\nplotBorder.attr({stroke:optionsChart.plotBorderColor,'stroke-width':optionsChart.plotBorderWidth||0,fill:'none'});plotBorder[verb](plotBorder.crisp({x:plotLeft,y:plotTop,width:plotWidth,height:plotHeight},-plotBorder.strokeWidth()));//#3282 plotBorder should be negative;\n// reset\nchart.isDirtyBox=false;},/**\n             * Detect whether a certain chart property is needed based on inspecting its\n             * options and series. This mainly applies to the chart.inverted property,\n             * and in extensions to the chart.angular and chart.polar properties.\n             *\n             * @private\n             */propFromSeries:function propFromSeries(){var chart=this,optionsChart=chart.options.chart,klass,seriesOptions=chart.options.series,i,value;each(['inverted','angular','polar'],function(key){// The default series type's class\nklass=seriesTypes[optionsChart.type||optionsChart.defaultSeriesType];// Get the value from available chart-wide properties\nvalue=optionsChart[key]||// It is set in the options\nklass&&klass.prototype[key];// The default series class\n// requires it\n// 4. Check if any the chart's series require it\ni=seriesOptions&&seriesOptions.length;while(!value&&i--){klass=seriesTypes[seriesOptions[i].type];if(klass&&klass.prototype[key]){value=true;}}// Set the chart property\nchart[key]=value;});},/**\n             * Internal function to link two or more series together, based on the\n             * `linkedTo` option. This is done from `Chart.render`, and after\n             * `Chart.addSeries` and `Series.remove`.\n             *\n             * @private\n             */linkSeries:function linkSeries(){var chart=this,chartSeries=chart.series;// Reset links\neach(chartSeries,function(series){series.linkedSeries.length=0;});// Apply new links\neach(chartSeries,function(series){var linkedTo=series.options.linkedTo;if(isString(linkedTo)){if(linkedTo===':previous'){linkedTo=chart.series[series.index-1];}else{linkedTo=chart.get(linkedTo);}// #3341 avoid mutual linking\nif(linkedTo&&linkedTo.linkedParent!==series){linkedTo.linkedSeries.push(series);series.linkedParent=linkedTo;series.visible=pick(series.options.visible,linkedTo.options.visible,series.visible);// #3879\n}}});},/**\n             * Render series for the chart.\n             *\n             * @private\n             */renderSeries:function renderSeries(){each(this.series,function(serie){serie.translate();serie.render();});},/**\n             * Render labels for the chart.\n             *\n             * @private\n             */renderLabels:function renderLabels(){var chart=this,labels=chart.options.labels;if(labels.items){each(labels.items,function(label){var style=extend(labels.style,label.style),x=pInt(style.left)+chart.plotLeft,y=pInt(style.top)+chart.plotTop+12;// delete to prevent rewriting in IE\ndelete style.left;delete style.top;chart.renderer.text(label.html,x,y).attr({zIndex:2}).css(style).add();});}},/**\n             * Render all graphics for the chart. Runs internally on initialization.\n             *\n             * @private\n             */render:function render(){var chart=this,axes=chart.axes,renderer=chart.renderer,options=chart.options,tempWidth,tempHeight,redoHorizontal,redoVertical;// Title\nchart.setTitle();// Legend\nchart.legend=new Legend(chart,options.legend);// Get stacks\nif(chart.getStacks){chart.getStacks();}// Get chart margins\nchart.getMargins(true);chart.setChartSize();// Record preliminary dimensions for later comparison\ntempWidth=chart.plotWidth;tempHeight=chart.plotHeight=chart.plotHeight-21;// 21 is the most common correction for X axis labels\n// Get margins by pre-rendering axes\neach(axes,function(axis){axis.setScale();});chart.getAxisMargins();// If the plot area size has changed significantly, calculate tick positions again\nredoHorizontal=tempWidth/chart.plotWidth>1.1;redoVertical=tempHeight/chart.plotHeight>1.05;// Height is more sensitive\nif(redoHorizontal||redoVertical){each(axes,function(axis){if(axis.horiz&&redoHorizontal||!axis.horiz&&redoVertical){axis.setTickInterval(true);// update to reflect the new margins\n}});chart.getMargins();// second pass to check for new labels\n}// Draw the borders and backgrounds\nchart.drawChartBox();// Axes\nif(chart.hasCartesianSeries){each(axes,function(axis){if(axis.visible){axis.render();}});}// The series\nif(!chart.seriesGroup){chart.seriesGroup=renderer.g('series-group').attr({zIndex:3}).add();}chart.renderSeries();// Labels\nchart.renderLabels();// Credits\nchart.addCredits();// Handle responsiveness\nif(chart.setResponsive){chart.setResponsive();}// Set flag\nchart.hasRendered=true;},/**\n             * Set a new credits label for the chart.\n             *\n             * @param  {CreditOptions} options\n             *         A configuration object for the new credits.\n             * @sample highcharts/credits/credits-update/ Add and update credits\n             */addCredits:function addCredits(credits){var chart=this;credits=merge(true,this.options.credits,credits);if(credits.enabled&&!this.credits){/**\n                     * The chart's credits label. The label has an `update` method that\n                     * allows setting new options as per the {@link\n                     * https://api.highcharts.com/highcharts/credits|\n                     * credits options set}.\n                     *\n                     * @memberof Highcharts.Chart\n                     * @name credits\n                     * @type {Highcharts.SVGElement}\n                     */this.credits=this.renderer.text(credits.text+(this.mapCredits||''),0,0).addClass('highcharts-credits').on('click',function(){if(credits.href){win.location.href=credits.href;}}).attr({align:credits.position.align,zIndex:8}).css(credits.style).add().align(credits.position);// Dynamically update\nthis.credits.update=function(options){chart.credits=chart.credits.destroy();chart.addCredits(options);};}},/**\n             * Remove the chart and purge memory. This method is called internally\n             * before adding a second chart into the same container, as well as on\n             * window unload to prevent leaks.\n             *\n             * @sample highcharts/members/chart-destroy/\n             *         Destroy the chart from a button\n             * @sample stock/members/chart-destroy/\n             *         Destroy with Highstock\n             */destroy:function destroy(){var chart=this,axes=chart.axes,series=chart.series,container=chart.container,i,parentNode=container&&container.parentNode;// fire the chart.destoy event\nfireEvent(chart,'destroy');// Delete the chart from charts lookup array\nif(chart.renderer.forExport){H.erase(charts,chart);// #6569\n}else{charts[chart.index]=undefined;}H.chartCount--;chart.renderTo.removeAttribute('data-highcharts-chart');// remove events\nremoveEvent(chart);// ==== Destroy collections:\n// Destroy axes\ni=axes.length;while(i--){axes[i]=axes[i].destroy();}// Destroy scroller & scroller series before destroying base series\nif(this.scroller&&this.scroller.destroy){this.scroller.destroy();}// Destroy each series\ni=series.length;while(i--){series[i]=series[i].destroy();}// ==== Destroy chart properties:\neach(['title','subtitle','chartBackground','plotBackground','plotBGImage','plotBorder','seriesGroup','clipRect','credits','pointer','rangeSelector','legend','resetZoomButton','tooltip','renderer'],function(name){var prop=chart[name];if(prop&&prop.destroy){chart[name]=prop.destroy();}});// remove container and all SVG\nif(container){// can break in IE when destroyed before finished loading\ncontainer.innerHTML='';removeEvent(container);if(parentNode){discardElement(container);}}// clean it all up\nobjectEach(chart,function(val,key){delete chart[key];});},/**\n             * VML namespaces can't be added until after complete. Listening\n             * for Perini's doScroll hack is not enough.\n             *\n             * @private\n             */isReadyToRender:function isReadyToRender(){var chart=this;// Note: win == win.top is required\nif(!svg&&win==win.top&&doc.readyState!=='complete'){// eslint-disable-line eqeqeq\ndoc.attachEvent('onreadystatechange',function(){doc.detachEvent('onreadystatechange',chart.firstRender);if(doc.readyState==='complete'){chart.firstRender();}});return false;}return true;},/**\n             * Prepare for first rendering after all data are loaded.\n             *\n             * @private\n             */firstRender:function firstRender(){var chart=this,options=chart.options;// Check whether the chart is ready to render\nif(!chart.isReadyToRender()){return;}// Create the container\nchart.getContainer();// Run an early event after the container and renderer are established\nfireEvent(chart,'init');chart.resetMargins();chart.setChartSize();// Set the common chart properties (mainly invert) from the given series\nchart.propFromSeries();// get axes\nchart.getAxes();// Initialize the series\neach(options.series||[],function(serieOptions){chart.initSeries(serieOptions);});chart.linkSeries();// Run an event after axes and series are initialized, but before render. At this stage,\n// the series data is indexed and cached in the xData and yData arrays, so we can access\n// those before rendering. Used in Highstock.\nfireEvent(chart,'beforeRender');// depends on inverted and on margins being set\nif(Pointer){/**\n                     * The Pointer that keeps track of mouse and touch interaction.\n                     *\n                     * @memberof Chart\n                     * @name pointer\n                     * @type Pointer\n                     */chart.pointer=new Pointer(chart,options);}chart.render();// Fire the load event if there are no external images\nif(!chart.renderer.imgCount&&chart.onload){chart.onload();}// If the chart was rendered outside the top container, put it back in (#3679)\nchart.temporaryDisplay(true);},/**\n             * Internal function that runs on chart load, async if any images are loaded\n             * in the chart. Runs the callbacks and triggers the `load` and `render`\n             * events.\n             *\n             * @private\n             */onload:function onload(){// Run callbacks\neach([this.callback].concat(this.callbacks),function(fn){if(fn&&this.index!==undefined){// Chart destroyed in its own callback (#3600)\nfn.apply(this,[this]);}},this);fireEvent(this,'load');fireEvent(this,'render');// Set up auto resize, check for not destroyed (#6068)\nif(defined(this.index)&&this.options.chart.reflow!==false){this.initReflow();}// Don't run again\nthis.onload=null;}});// end Chart\n})(Highcharts);(function(Highcharts){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var Point,H=Highcharts,each=H.each,extend=H.extend,erase=H.erase,fireEvent=H.fireEvent,format=H.format,isArray=H.isArray,isNumber=H.isNumber,pick=H.pick,removeEvent=H.removeEvent;/**\n         * The Point object. The point objects are generated from the `series.data`\n         * configuration objects or raw numbers. They can be accessed from the\n         * `Series.points` array. Other ways to instaniate points are through {@link\n         * Highcharts.Series#addPoint} or {@link Highcharts.Series#setData}.\n         *\n         * @class\n         */Highcharts.Point=Point=function Point(){};Highcharts.Point.prototype={/**\n             * Initialize the point. Called internally based on the `series.data`\n             * option.\n             * @param  {Series} series\n             *         The series object containing this point.\n             * @param  {Number|Array|Object} options\n             *         The data in either number, array or object format.\n             * @param  {Number} x Optionally, the X value of the point.\n             * @return {Point} The Point instance.\n             */init:function init(series,options,x){var point=this,colors,colorCount=series.chart.options.chart.colorCount,colorIndex;/**\n                 * The series object associated with the point.\n                 *\n                 * @name series\n                 * @memberof Highcharts.Point\n                 * @type Highcharts.Series\n                 */point.series=series;/**\n                 * The point's current color.\n                 * @name color\n                 * @memberof Highcharts.Point\n                 * @type {Color}\n                 */point.color=series.color;// #3445\npoint.applyOptions(options,x);if(series.options.colorByPoint){colors=series.options.colors||series.chart.options.colors;point.color=point.color||colors[series.colorCounter];colorCount=colors.length;colorIndex=series.colorCounter;series.colorCounter++;// loop back to zero\nif(series.colorCounter===colorCount){series.colorCounter=0;}}else{colorIndex=series.colorIndex;}point.colorIndex=pick(point.colorIndex,colorIndex);series.chart.pointCount++;return point;},/**\n             * Apply the options containing the x and y data and possible some extra\n             * properties. Called on point init or from point.update.\n             *\n             * @private\n             * @param {Object} options The point options as defined in series.data.\n             * @param {Number} x Optionally, the X value.\n             * @returns {Object} The Point instance.\n             */applyOptions:function applyOptions(options,x){var point=this,series=point.series,pointValKey=series.options.pointValKey||series.pointValKey;options=Point.prototype.optionsToObject.call(this,options);// copy options directly to point\nextend(point,options);point.options=point.options?extend(point.options,options):options;// Since options are copied into the Point instance, some accidental options must be shielded (#5681)\nif(options.group){delete point.group;}// For higher dimension series types. For instance, for ranges, point.y is mapped to point.low.\nif(pointValKey){point.y=point[pointValKey];}point.isNull=pick(point.isValid&&!point.isValid(),point.x===null||!isNumber(point.y,true));// #3571, check for NaN\n// The point is initially selected by options (#5777)\nif(point.selected){point.state='select';}// If no x is set by now, get auto incremented value. All points must have an\n// x value, however the y value can be null to create a gap in the series\nif('name'in point&&x===undefined&&series.xAxis&&series.xAxis.hasNames){point.x=series.xAxis.nameToX(point);}if(point.x===undefined&&series){if(x===undefined){point.x=series.autoIncrement(point);}else{point.x=x;}}return point;},/**\n             * Transform number or array configs into objects. Used internally to unify\n             * the different configuration formats for points. For example, a simple\n             * number `10` in a line series will be transformed to `{ y: 10 }`, and an\n             * array config like `[1, 10]` in a scatter series will be transformed to\n             * `{ x: 1, y: 10 }`.\n             *\n             * @param  {Number|Array|Object} options\n             *         The input options\n             * @return {Object} Transformed options.\n             */optionsToObject:function optionsToObject(options){var ret={},series=this.series,keys=series.options.keys,pointArrayMap=keys||series.pointArrayMap||['y'],valueCount=pointArrayMap.length,firstItemType,i=0,j=0;if(isNumber(options)||options===null){ret[pointArrayMap[0]]=options;}else if(isArray(options)){// with leading x value\nif(!keys&&options.length>valueCount){firstItemType=(0,_typeof3.default)(options[0]);if(firstItemType==='string'){ret.name=options[0];}else if(firstItemType==='number'){ret.x=options[0];}i++;}while(j<valueCount){if(!keys||options[i]!==undefined){// Skip undefined positions for keys\nret[pointArrayMap[j]]=options[i];}i++;j++;}}else if((typeof options==='undefined'?'undefined':(0,_typeof3.default)(options))==='object'){ret=options;// This is the fastest way to detect if there are individual point dataLabels that need\n// to be considered in drawDataLabels. These can only occur in object configs.\nif(options.dataLabels){series._hasPointLabels=true;}// Same approach as above for markers\nif(options.marker){series._hasPointMarkers=true;}}return ret;},/**\n             * Get the CSS class names for individual points. Used internally where the\n             * returned value is set on every point.\n             *\n             * @returns {String} The class names.\n             */getClassName:function getClassName(){return'highcharts-point'+(this.selected?' highcharts-point-select':'')+(this.negative?' highcharts-negative':'')+(this.isNull?' highcharts-null-point':'')+(this.colorIndex!==undefined?' highcharts-color-'+this.colorIndex:'')+(this.options.className?' '+this.options.className:'')+(this.zone&&this.zone.className?' '+this.zone.className.replace('highcharts-negative',''):'');},/**\n             * In a series with `zones`, return the zone that the point belongs to.\n             *\n             * @return {Object}\n             *         The zone item.\n             */getZone:function getZone(){var series=this.series,zones=series.zones,zoneAxis=series.zoneAxis||'y',i=0,zone;zone=zones[i];while(this[zoneAxis]>=zone.value){zone=zones[++i];}if(zone&&zone.color&&!this.options.color){this.color=zone.color;}return zone;},/**\n             * Destroy a point to clear memory. Its reference still stays in\n             * `series.data`.\n             *\n             * @private\n             */destroy:function destroy(){var point=this,series=point.series,chart=series.chart,hoverPoints=chart.hoverPoints,prop;chart.pointCount--;if(hoverPoints){point.setState();erase(hoverPoints,point);if(!hoverPoints.length){chart.hoverPoints=null;}}if(point===chart.hoverPoint){point.onMouseOut();}// remove all events\nif(point.graphic||point.dataLabel){// removeEvent and destroyElements are performance expensive\nremoveEvent(point);point.destroyElements();}if(point.legendItem){// pies have legend items\nchart.legend.destroyItem(point);}for(prop in point){point[prop]=null;}},/**\n             * Destroy SVG elements associated with the point.\n             *\n             * @private\n             */destroyElements:function destroyElements(){var point=this,props=['graphic','dataLabel','dataLabelUpper','connector','shadowGroup'],prop,i=6;while(i--){prop=props[i];if(point[prop]){point[prop]=point[prop].destroy();}}},/**\n             * Return the configuration hash needed for the data label and tooltip\n             * formatters.\n             *\n             * @returns {Object}\n             *          Abstract object used in formatters and formats.\n             */getLabelConfig:function getLabelConfig(){return{x:this.category,y:this.y,color:this.color,colorIndex:this.colorIndex,key:this.name||this.category,series:this.series,point:this,percentage:this.percentage,total:this.total||this.stackTotal};},/**\n             * Extendable method for formatting each point's tooltip line.\n             *\n             * @param  {String} pointFormat\n             *         The point format.\n             * @return {String}\n             *         A string to be concatenated in to the common tooltip text.\n             */tooltipFormatter:function tooltipFormatter(pointFormat){// Insert options for valueDecimals, valuePrefix, and valueSuffix\nvar series=this.series,seriesTooltipOptions=series.tooltipOptions,valueDecimals=pick(seriesTooltipOptions.valueDecimals,''),valuePrefix=seriesTooltipOptions.valuePrefix||'',valueSuffix=seriesTooltipOptions.valueSuffix||'';// Loop over the point array map and replace unformatted values with sprintf formatting markup\neach(series.pointArrayMap||['y'],function(key){key='{point.'+key;// without the closing bracket\nif(valuePrefix||valueSuffix){pointFormat=pointFormat.replace(key+'}',valuePrefix+key+'}'+valueSuffix);}pointFormat=pointFormat.replace(key+'}',key+':,.'+valueDecimals+'f}');});return format(pointFormat,{point:this,series:this.series});},/**\n             * Fire an event on the Point object.\n             *\n             * @private\n             * @param {String} eventType\n             * @param {Object} eventArgs Additional event arguments\n             * @param {Function} defaultFunction Default event handler\n             */firePointEvent:function firePointEvent(eventType,eventArgs,defaultFunction){var point=this,series=this.series,seriesOptions=series.options;// load event handlers on demand to save time on mouseover/out\nif(seriesOptions.point.events[eventType]||point.options&&point.options.events&&point.options.events[eventType]){this.importEvents();}// add default handler if in selection mode\nif(eventType==='click'&&seriesOptions.allowPointSelect){defaultFunction=function defaultFunction(event){// Control key is for Windows, meta (= Cmd key) for Mac, Shift for Opera\nif(point.select){// Could be destroyed by prior event handlers (#2911)\npoint.select(null,event.ctrlKey||event.metaKey||event.shiftKey);}};}fireEvent(this,eventType,eventArgs,defaultFunction);},/**\n             * For certain series types, like pie charts, where individual points can\n             * be shown or hidden.\n             *\n             * @name visible\n             * @memberOf Highcharts.Point\n             * @type {Boolean}\n             */visible:true};/**\n         * For categorized axes this property holds the category name for the\n         * point. For other axes it holds the X value.\n         *\n         * @name category\n         * @memberOf Highcharts.Point\n         * @type {String|Number}\n         *//**\n         * The percentage for points in a stacked series or pies.\n         *\n         * @name percentage\n         * @memberOf Highcharts.Point\n         * @type {Number}\n         *//**\n         * The total of values in either a stack for stacked series, or a pie in a pie\n         * series.\n         *\n         * @name total\n         * @memberOf Highcharts.Point\n         * @type {Number}\n         *//**\n         * The x value of the point.\n         *\n         * @name x\n         * @memberOf Highcharts.Point\n         * @type {Number}\n         *//**\n         * The y value of the point.\n         *\n         * @name y\n         * @memberOf Highcharts.Point\n         * @type {Number}\n         */})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var addEvent=H.addEvent,animObject=H.animObject,arrayMax=H.arrayMax,arrayMin=H.arrayMin,correctFloat=H.correctFloat,Date=H.Date,defaultOptions=H.defaultOptions,defaultPlotOptions=H.defaultPlotOptions,defined=H.defined,each=H.each,erase=H.erase,extend=H.extend,fireEvent=H.fireEvent,grep=H.grep,isArray=H.isArray,isNumber=H.isNumber,isString=H.isString,LegendSymbolMixin=H.LegendSymbolMixin,// @todo add as a requirement\nmerge=H.merge,objectEach=H.objectEach,pick=H.pick,Point=H.Point,// @todo  add as a requirement\nremoveEvent=H.removeEvent,splat=H.splat,SVGElement=H.SVGElement,syncTimeout=H.syncTimeout,win=H.win;/**\n         * This is the base series prototype that all other series types inherit from.\n         * A new series is initialized either through the {@link https://api.highcharts.com/highcharts/series|\n         * series} option structure, or after the chart is initialized, through {@link\n         * Highcharts.Chart#addSeries}.\n         *\n         * The object can be accessed in a number of ways. All series and point event\n         * handlers give a reference to the `series` object. The chart object has a\n         * {@link Highcharts.Chart.series|series} property that is a collection of all\n         * the chart's series. The point objects and axis objects also have the same\n         * reference.\n         *\n         * Another way to reference the series programmatically is by `id`. Add an id\n         * in the series configuration options, and get the series object by {@link\n         * Highcharts.Chart#get}.\n         *\n         * Configuration options for the series are given in three levels. Options for\n         * all series in a chart are given in the {@link https://api.highcharts.com/highcharts/plotOptions.series|\n         * plotOptions.series} object. Then options for all series of a specific type\n         * are given in the plotOptions of that type, for example `plotOptions.line`.\n         * Next, options for one single series are given in the series array, or as\n         * arguements to `chart.addSeries`.\n         *\n         * The data in the series is stored in various arrays.\n         *\n         * - First, `series.options.data` contains all the original config options for\n         * each point whether added by options or methods like `series.addPoint`.\n         * - Next, `series.data` contains those values converted to points, but in case\n         * the series data length exceeds the `cropThreshold`, or if the data is grouped,\n         * `series.data` doesn't contain all the points. It only contains the points that\n         * have been created on demand.\n         * - Then there's `series.points` that contains all currently visible point\n         * objects. In case of cropping, the cropped-away points are not part of this\n         * array. The `series.points` array starts at `series.cropStart` compared to\n         * `series.data` and `series.options.data`. If however the series data is grouped,\n         * these can't be correlated one to one.\n         * - `series.xData` and `series.processedXData` contain clean x values, equivalent\n         * to `series.data` and `series.points`.\n         * - `series.yData` and `series.processedYData` contain clean y values, equivalent\n         * to `series.data` and `series.points`.\n         *\n         * @class Highcharts.Series\n         * @param  {Highcharts.Chart} chart\n         *         The chart instance.\n         * @param  {Options.plotOptions.series} options\n         *         The series options.\n         *\n         *//**\n         * General options for all series types.\n         * @optionparent plotOptions.series\n         */H.Series=H.seriesType('line',null,{// base series options\n//cursor: 'default',\n//dashStyle: null,\n//linecap: 'round',\n/**\n             * Pixel with of the graph line.\n             *\n             * @type {Number}\n             * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the line stroke-width can be set with the\n             * `.highcharts-graph` class name.\n             * @sample {highcharts} highcharts/plotoptions/series-linewidth-general/ On all series\n             * @sample {highcharts} highcharts/plotoptions/series-linewidth-specific/ On one single series\n             * @default 2\n             * @product highcharts highstock\n             */lineWidth:2,//shadow: false,\n/**\n             * For some series, there is a limit that shuts down initial animation\n             * by default when the total number of points in the chart is too high.\n             * For example, for a column chart and its derivatives, animation doesn't\n             * run if there is more than 250 points totally. To disable this cap, set\n             * `animationLimit` to `Infinity`.\n             *\n             * @type {Number}\n             * @apioption plotOptions.series.animationLimit\n             *//**\n             * Allow this series' points to be selected by clicking on the graphic\n             * (columns, point markers, pie slices, map areas etc).\n             *\n             * @see [Chart#getSelectedPoints](../class-reference/Highcharts.Chart#getSelectedPoints).\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-allowpointselect-line/\n             *         Line\n             * @sample {highcharts} highcharts/plotoptions/series-allowpointselect-column/\n             *         Column\n             * @sample {highcharts} highcharts/plotoptions/series-allowpointselect-pie/\n             *         Pie\n             * @sample {highmaps} maps/plotoptions/series-allowpointselect/\n             *         Map area\n             * @sample {highmaps} maps/plotoptions/mapbubble-allowpointselect/\n             *         Map bubble\n             * @default false\n             * @since 1.2.0\n             * @product highcharts highstock highmaps\n             */allowPointSelect:false,/**\n             * If true, a checkbox is displayed next to the legend item to allow\n             * selecting the series. The state of the checkbox is determined by\n             * the `selected` option.\n             *\n             * @productdesc {highmaps}\n             * Note that if a `colorAxis` is defined, the color axis is represented in\n             * the legend, not the series.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-showcheckbox-true/\n             *         Show select box\n             * @default false\n             * @since 1.2.0\n             */showCheckbox:false,/**\n             * Enable or disable the initial animation when a series is displayed.\n             * The animation can also be set as a configuration object. Please\n             * note that this option only applies to the initial animation of the\n             * series itself. For other animations, see [chart.animation](#chart.\n             * animation) and the animation parameter under the API methods. The\n             * following properties are supported:\n             *\n             * <dl>\n             *\n             * <dt>duration</dt>\n             *\n             * <dd>The duration of the animation in milliseconds.</dd>\n             *\n             * <dt>easing</dt>\n             *\n             * <dd>A string reference to an easing function set on the `Math` object.\n             * See [the easing demo](http://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-\n             * animation-easing/).</dd>\n             *\n             * </dl>\n             *\n             * Due to poor performance, animation is disabled in old IE browsers\n             * for several chart types.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-animation-disabled/\n             *         Animation disabled\n             * @sample {highcharts} highcharts/plotoptions/series-animation-slower/\n             *         Slower animation\n             * @sample {highcharts} highcharts/plotoptions/series-animation-easing/\n             *         Custom easing function\n             * @sample {highstock} stock/plotoptions/animation-slower/\n             *         Slower animation\n             * @sample {highstock} stock/plotoptions/animation-easing/\n             *         Custom easing function\n             * @sample {highmaps} maps/plotoptions/series-animation-true/\n             *         Animation enabled on map series\n             * @sample {highmaps} maps/plotoptions/mapbubble-animation-false/\n             *         Disabled on mapbubble series\n             * @default {highcharts} true\n             * @default {highstock} true\n             * @default {highmaps} false\n             */animation:{/**\n                 */duration:1000},/**\n             * A class name to apply to the series' graphical elements.\n             *\n             * @type {String}\n             * @since 5.0.0\n             * @apioption plotOptions.series.className\n             *//**\n             * The main color of the series. In line type series it applies to the\n             * line and the point markers unless otherwise specified. In bar type\n             * series it applies to the bars unless a color is specified per point.\n             * The default value is pulled from the `options.colors` array.\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the color can be defined by the [colorIndex](#plotOptions.\n             * series.colorIndex) option. Also, the series color can be set with\n             * the `.highcharts-series`, `.highcharts-color-{n}`, `.highcharts-{type}-\n             * series` or `.highcharts-series-{n}` class, or individual classes\n             * given by the `className` option.\n             *\n             * @productdesc {highmaps}\n             * In maps, the series color is rarely used, as most choropleth maps use the\n             * color to denote the value of each point. The series color can however be\n             * used in a map with multiple series holding categorized data.\n             *\n             * @type {Color}\n             * @sample {highcharts} highcharts/plotoptions/series-color-general/\n             *         General plot option\n             * @sample {highcharts} highcharts/plotoptions/series-color-specific/\n             *         One specific series\n             * @sample {highcharts} highcharts/plotoptions/series-color-area/\n             *         Area color\n             * @sample {highmaps} maps/demo/category-map/\n             *         Category map by multiple series\n             * @apioption plotOptions.series.color\n             *//**\n             * [Styled mode](http://www.highcharts.com/docs/chart-design-and-style/style-\n             * by-css) only. A specific color index to use for the series, so its\n             * graphic representations are given the class name `highcharts-color-\n             * {n}`.\n             *\n             * @type {Number}\n             * @since 5.0.0\n             * @apioption plotOptions.series.colorIndex\n             *//**\n             * Whether to connect a graph line across null points, or render a gap\n             * between the two points on either side of the null.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-connectnulls-false/\n             *         False by default\n             * @sample {highcharts} highcharts/plotoptions/series-connectnulls-true/\n             *         True\n             * @product highcharts highstock\n             * @apioption plotOptions.series.connectNulls\n             *//**\n             * You can set the cursor to \"pointer\" if you have click events attached\n             * to the series, to signal to the user that the points and lines can\n             * be clicked.\n             *\n             * @validvalue [null, \"default\", \"none\", \"help\", \"pointer\", \"crosshair\"]\n             * @type {String}\n             * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the series cursor can be set with the same classes\n             * as listed under [series.color](#plotOptions.series.color).\n             * @sample {highcharts} highcharts/plotoptions/series-cursor-line/\n             *         On line graph\n             * @sample {highcharts} highcharts/plotoptions/series-cursor-column/\n             *         On columns\n             * @sample {highcharts} highcharts/plotoptions/series-cursor-scatter/\n             *         On scatter markers\n             * @sample {highstock} stock/plotoptions/cursor/\n             *         Pointer on a line graph\n             * @sample {highmaps} maps/plotoptions/series-allowpointselect/\n             *         Map area\n             * @sample {highmaps} maps/plotoptions/mapbubble-allowpointselect/\n             *         Map bubble\n             * @apioption plotOptions.series.cursor\n             *//**\n             * A name for the dash style to use for the graph, or for some series types\n             * the outline of each shape. The value for the `dashStyle` include:\n             *\n             * *   Solid\n             * *   ShortDash\n             * *   ShortDot\n             * *   ShortDashDot\n             * *   ShortDashDotDot\n             * *   Dot\n             * *   Dash\n             * *   LongDash\n             * *   DashDot\n             * *   LongDashDot\n             * *   LongDashDotDot\n             *\n             * @validvalue [\"Solid\", \"ShortDash\", \"ShortDot\", \"ShortDashDot\",\n             *             \"ShortDashDotDot\", \"Dot\", \"Dash\" ,\"LongDash\", \"DashDot\",\n             *             \"LongDashDot\", \"LongDashDotDot\"]\n             * @type {String}\n             * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the [stroke dash-array](http://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/series-\n             * dashstyle/) can be set with the same classes as listed under [series.\n             * color](#plotOptions.series.color).\n             * @sample {highcharts} highcharts/plotoptions/series-dashstyle-all/\n             *         Possible values demonstrated\n             * @sample {highcharts} highcharts/plotoptions/series-dashstyle/\n             *         Chart suitable for printing in black and white\n             * @sample {highstock} highcharts/plotoptions/series-dashstyle-all/\n             *         Possible values demonstrated\n             * @sample {highmaps} highcharts/plotoptions/series-dashstyle-all/\n             *         Possible values demonstrated\n             * @sample {highmaps} maps/plotoptions/series-dashstyle/\n             *         Dotted borders on a map\n             * @default Solid\n             * @since 2.1\n             * @apioption plotOptions.series.dashStyle\n             *//**\n             * Requires the Accessibility module.\n             *\n             * A description of the series to add to the screen reader information\n             * about the series.\n             *\n             * @type {String}\n             * @default undefined\n             * @since 5.0.0\n             * @apioption plotOptions.series.description\n             *//**\n             * Enable or disable the mouse tracking for a specific series. This\n             * includes point tooltips and click events on graphs and points. For\n             * large datasets it improves performance.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-enablemousetracking-false/ No mouse tracking\n             * @sample {highmaps} maps/plotoptions/series-enablemousetracking-false/ No mouse tracking\n             * @default true\n             * @apioption plotOptions.series.enableMouseTracking\n             *//**\n             * By default, series are exposed to screen readers as regions. By enabling\n             * this option, the series element itself will be exposed in the same\n             * way as the data points. This is useful if the series is not used\n             * as a grouping entity in the chart, but you still want to attach a\n             * description to the series.\n             *\n             * Requires the Accessibility module.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/accessibility/art-grants/ Accessible data visualization\n             * @sample {highstock} highcharts/accessibility/art-grants/ Accessible data visualization\n             * @sample {highmaps} highcharts/accessibility/art-grants/ Accessible data visualization\n             * @default undefined\n             * @since 5.0.12\n             * @apioption plotOptions.series.exposeElementToA11y\n             *//**\n             * Whether to use the Y extremes of the total chart width or only the\n             * zoomed area when zooming in on parts of the X axis. By default, the\n             * Y axis adjusts to the min and max of the visible data. Cartesian\n             * series only.\n             *\n             * @type {Boolean}\n             * @default false\n             * @since 4.1.6\n             * @product highcharts highstock\n             * @apioption plotOptions.series.getExtremesFromAll\n             *//**\n             * An array specifying which option maps to which key in the data point\n             * array. This makes it convenient to work with unstructured data arrays\n             * from different sources.\n             *\n             * @type {Array<String>}\n             * @see [series.data](#series<line>.data)\n             * @sample {highcharts} highcharts/series/data-keys/ An extended data array with keys\n             * @sample {highstock} highcharts/series/data-keys/ An extended data array with keys\n             * @since 4.1.6\n             * @product highcharts highstock\n             * @apioption plotOptions.series.keys\n             *//**\n             * The line cap used for line ends and line joins on the graph.\n             *\n             * @validvalue [\"round\", \"square\"]\n             * @type {String}\n             * @default round\n             * @product highcharts highstock\n             * @apioption plotOptions.series.linecap\n             *//**\n             * The [id](#series.id) of another series to link to. Additionally,\n             * the value can be \":previous\" to link to the previous series. When\n             * two series are linked, only the first one appears in the legend.\n             * Toggling the visibility of this also toggles the linked series.\n             *\n             * @type {String}\n             * @sample {highcharts} highcharts/demo/arearange-line/ Linked series\n             * @sample {highstock} highcharts/demo/arearange-line/ Linked series\n             * @since 3.0\n             * @product highcharts highstock\n             * @apioption plotOptions.series.linkedTo\n             *//**\n             * The color for the parts of the graph or points that are below the\n             * [threshold](#plotOptions.series.threshold).\n             *\n             * @type {Color}\n             * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), a negative color is applied by setting this\n             * option to `true` combined with the `.highcharts-negative` class name\n             * ([view live demo](http://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/series-\n             * negative-color/)).\n             * @sample {highcharts} highcharts/plotoptions/series-negative-color/ Spline, area and column\n             * @sample {highcharts} highcharts/plotoptions/arearange-negativecolor/ Arearange\n             * @sample {highstock} highcharts/plotoptions/series-negative-color/ Spline, area and column\n             * @sample {highstock} highcharts/plotoptions/arearange-negativecolor/ Arearange\n             * @sample {highmaps} highcharts/plotoptions/series-negative-color/ Spline, area and column\n             * @sample {highmaps} highcharts/plotoptions/arearange-negativecolor/ Arearange\n             * @default null\n             * @since 3.0\n             * @apioption plotOptions.series.negativeColor\n             *//**\n             * Same as [accessibility.pointDescriptionFormatter](#accessibility.\n             * pointDescriptionFormatter), but for an individual series. Overrides\n             * the chart wide configuration.\n             *\n             * @type {Function}\n             * @since 5.0.12\n             * @apioption plotOptions.series.pointDescriptionFormatter\n             *//**\n             * If no x values are given for the points in a series, `pointInterval`\n             * defines the interval of the x values. For example, if a series contains\n             * one value every decade starting from year 0, set `pointInterval` to\n             * 10. In true `datetime` axes, the `pointInterval` is set in milliseconds.\n             *\n             * It can be also be combined with `pointIntervalUnit` to draw irregular\n             * time intervals.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/series-pointstart-datetime/\n             *         Datetime X axis\n             * @sample {highstock} stock/plotoptions/pointinterval-pointstart/\n             *         Using pointStart and pointInterval\n             * @default 1\n             * @product highcharts highstock\n             * @apioption plotOptions.series.pointInterval\n             *//**\n             * On datetime series, this allows for setting the [pointInterval](#plotOptions.\n             * series.pointInterval) to irregular time units, `day`, `month` and\n             * `year`. A day is usually the same as 24 hours, but pointIntervalUnit\n             * also takes the DST crossover into consideration when dealing with\n             * local time. Combine this option with `pointInterval` to draw weeks,\n             *  quarters, 6 months, 10 years etc.\n             *\n             * @validvalue [null, \"day\", \"month\", \"year\"]\n             * @type {String}\n             * @sample {highcharts} highcharts/plotoptions/series-pointintervalunit/ One point a month\n             * @sample {highstock} highcharts/plotoptions/series-pointintervalunit/ One point a month\n             * @since 4.1.0\n             * @product highcharts highstock\n             * @apioption plotOptions.series.pointIntervalUnit\n             *//**\n             * Possible values: `null`, `\"on\"`, `\"between\"`.\n             *\n             * In a column chart, when pointPlacement is `\"on\"`, the point will\n             * not create any padding of the X axis. In a polar column chart this\n             * means that the first column points directly north. If the pointPlacement\n             * is `\"between\"`, the columns will be laid out between ticks. This\n             * is useful for example for visualising an amount between two points\n             * in time or in a certain sector of a polar chart.\n             *\n             * Since Highcharts 3.0.2, the point placement can also be numeric,\n             * where 0 is on the axis value, -0.5 is between this value and the\n             * previous, and 0.5 is between this value and the next. Unlike the\n             * textual options, numeric point placement options won't affect axis\n             * padding.\n             *\n             * Note that pointPlacement needs a [pointRange](#plotOptions.series.\n             * pointRange) to work. For column series this is computed, but for\n             * line-type series it needs to be set.\n             *\n             * Defaults to `null` in cartesian charts, `\"between\"` in polar charts.\n             *\n             * @validvalue [null, \"on\", \"between\"]\n             * @type {String|Number}\n             * @see [xAxis.tickmarkPlacement](#xAxis.tickmarkPlacement)\n             * @sample {highcharts} highcharts/plotoptions/series-pointplacement-between/ Between in a column chart\n             * @sample {highcharts} highcharts/plotoptions/series-pointplacement-numeric/ Numeric placement for custom layout\n             * @sample {highstock} highcharts/plotoptions/series-pointplacement-between/ Between in a column chart\n             * @sample {highstock} highcharts/plotoptions/series-pointplacement-numeric/ Numeric placement for custom layout\n             * @default null\n             * @since 2.3.0\n             * @product highcharts highstock\n             * @apioption plotOptions.series.pointPlacement\n             *//**\n             * If no x values are given for the points in a series, pointStart defines\n             * on what value to start. For example, if a series contains one yearly\n             * value starting from 1945, set pointStart to 1945.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/series-pointstart-linear/ Linear\n             * @sample {highcharts} highcharts/plotoptions/series-pointstart-datetime/ Datetime\n             * @sample {highstock} stock/plotoptions/pointinterval-pointstart/ Using pointStart and pointInterval\n             * @default 0\n             * @product highcharts highstock\n             * @apioption plotOptions.series.pointStart\n             *//**\n             * Whether to select the series initially. If `showCheckbox` is true,\n             * the checkbox next to the series name in the legend will be checked for a\n             * selected series.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-selected/\n             *         One out of two series selected\n             * @default false\n             * @since 1.2.0\n             * @apioption plotOptions.series.selected\n             *//**\n             * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow\n             * can be an object configuration containing `color`, `offsetX`, `offsetY`,\n             *  `opacity` and `width`.\n             *\n             * @type {Boolean|Object}\n             * @sample {highcharts} highcharts/plotoptions/series-shadow/ Shadow enabled\n             * @default false\n             * @apioption plotOptions.series.shadow\n             *//**\n             * Whether to display this particular series or series type in the legend.\n             * The default value is `true` for standalone series, `false` for linked\n             * series.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-showinlegend/ One series in the legend, one hidden\n             * @default true\n             * @apioption plotOptions.series.showInLegend\n             *//**\n             * If set to `True`, the accessibility module will skip past the points\n             * in this series for keyboard navigation.\n             *\n             * @type {Boolean}\n             * @since 5.0.12\n             * @apioption plotOptions.series.skipKeyboardNavigation\n             *//**\n             * Whether to stack the values of each series on top of each other.\n             * Possible values are null to disable, \"normal\" to stack by value or\n             * \"percent\". When stacking is enabled, data must be sorted in ascending\n             * X order.\n             *\n             * @validvalue [null, \"normal\", \"percent\"]\n             * @type {String}\n             * @see [yAxis.reversedStacks](#yAxis.reversedStacks)\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-line/ Line\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-column/ Column\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-bar/ Bar\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-area/ Area\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-percent-line/ Line\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-percent-column/ Column\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-percent-bar/ Bar\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-percent-area/ Area\n             * @sample {highstock} stock/plotoptions/stacking/ Area\n             * @default null\n             * @product highcharts highstock\n             * @apioption plotOptions.series.stacking\n             *//**\n             * Whether to apply steps to the line. Possible values are `left`, `center`\n             * and `right`.\n             *\n             * @validvalue [null, \"left\", \"center\", \"right\"]\n             * @type {String}\n             * @sample {highcharts} highcharts/plotoptions/line-step/ Different step line options\n             * @sample {highcharts} highcharts/plotoptions/area-step/ Stepped, stacked area\n             * @sample {highstock} stock/plotoptions/line-step/ Step line\n             * @default {highcharts} null\n             * @default {highstock} false\n             * @since 1.2.5\n             * @product highcharts highstock\n             * @apioption plotOptions.series.step\n             *//**\n             * The threshold, also called zero level or base level. For line type\n             * series this is only used in conjunction with [negativeColor](#plotOptions.\n             * series.negativeColor).\n             *\n             * @type {Number}\n             * @see [softThreshold](#plotOptions.series.softThreshold).\n             * @default 0\n             * @since 3.0\n             * @product highcharts highstock\n             * @apioption plotOptions.series.threshold\n             *//**\n             * Set the initial visibility of the series.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-visible/ Two series, one hidden and one visible\n             * @sample {highstock} stock/plotoptions/series-visibility/ Hidden series\n             * @default true\n             * @apioption plotOptions.series.visible\n             *//**\n             * Defines the Axis on which the zones are applied.\n             *\n             * @type {String}\n             * @see [zones](#plotOption.series.zones)\n             * @sample {highcharts} highcharts/series/color-zones-zoneaxis-x/ Zones on the X-Axis\n             * @sample {highstock} highcharts/series/color-zones-zoneaxis-x/ Zones on the X-Axis\n             * @default y\n             * @since 4.1.0\n             * @product highcharts highstock\n             * @apioption plotOptions.series.zoneAxis\n             *//**\n             * @product highcharts highstock highmaps\n             */events:{},/**\n             * Options for the point markers of line-like series. Properties like\n             * `fillColor`, `lineColor` and `lineWidth` define the visual appearance\n             * of the markers. Other series types, like column series, don't have\n             * markers, but have visual options on the series level instead.\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the markers can be styled with the `.highcharts-\n             * point`, `.highcharts-point-hover` and `.highcharts-point-select`\n             * class names.\n             *\n             * @product highcharts highstock\n             */marker:{/**\n                 * The width of the point marker's outline.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-fillcolor/ 2px blue marker\n                 * @default 0\n                 * @product highcharts highstock\n                 */lineWidth:0,/**\n                 * The color of the point marker's outline. When `null`, the series'\n                 * or point's color is used.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-fillcolor/ Inherit from series color (null)\n                 * @default #ffffff\n                 * @product highcharts highstock\n                 */lineColor:'#ffffff',//fillColor: null,\n//enabled: true,\n//symbol: null,\n/**\n                 * The radius of the point marker.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-radius/ Bigger markers\n                 * @default 4\n                 * @product highcharts highstock\n                 */radius:4,/**\n                 * @product highcharts highstock\n                 */states:{// states for a single point\n/**\n                     * @product highcharts highstock\n                     */hover:{/**\n                         */animation:{/**\n                             */duration:50},/**\n                         * Enable or disable the point marker.\n                         *\n                         * @type {Boolean}\n                         * @sample {highcharts} highcharts/plotoptions/series-marker-states-hover-enabled/ Disabled hover state\n                         * @default true\n                         * @product highcharts highstock\n                         */enabled:true,/**\n                         * The number of pixels to increase the radius of the hovered point.\n                         *\n                         * @type {Number}\n                         * @sample {highcharts} highcharts/plotoptions/series-states-hover-linewidthplus/ 5 pixels greater radius on hover\n                         * @sample {highstock} highcharts/plotoptions/series-states-hover-linewidthplus/ 5 pixels greater radius on hover\n                         * @default 2\n                         * @since 4.0.3\n                         * @product highcharts highstock\n                         */radiusPlus:2,/**\n                         * The additional line width for a hovered point.\n                         *\n                         * @type {Number}\n                         * @sample {highcharts} highcharts/plotoptions/series-states-hover-linewidthplus/ 2 pixels wider on hover\n                         * @sample {highstock} highcharts/plotoptions/series-states-hover-linewidthplus/ 2 pixels wider on hover\n                         * @default 1\n                         * @since 4.0.3\n                         * @product highcharts highstock\n                         */lineWidthPlus:1},/**\n                     * The appearance of the point marker when selected. In order to\n                     * allow a point to be selected, set the `series.allowPointSelect`\n                     * option to true.\n                     *\n                     * @product highcharts highstock\n                     */select:{/**\n                         * The fill color of the point marker.\n                         *\n                         * @type {Color}\n                         * @sample {highcharts} highcharts/plotoptions/series-marker-states-select-fillcolor/ Solid red discs for selected points\n                         * @default null\n                         * @product highcharts highstock\n                         */fillColor:'#cccccc',/**\n                         * The color of the point marker's outline. When `null`, the series'\n                         * or point's color is used.\n                         *\n                         * @type {Color}\n                         * @sample {highcharts} highcharts/plotoptions/series-marker-states-select-linecolor/ Red line color for selected points\n                         * @default #000000\n                         * @product highcharts highstock\n                         */lineColor:'#000000',/**\n                         * The width of the point marker's outline.\n                         *\n                         * @type {Number}\n                         * @sample {highcharts} highcharts/plotoptions/series-marker-states-select-linewidth/ 3px line width for selected points\n                         * @default 0\n                         * @product highcharts highstock\n                         */lineWidth:2}}},/**\n             * Properties for each single point\n             *\n             * @product highcharts highstock highmaps\n             */point:{/**\n                 * Events for each single point\n                 *\n                 * @product highcharts highstock highmaps\n                 */events:{}},/**\n             * Options for the series data labels, appearing next to each data\n             * point.\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the data labels can be styled wtih the `.highcharts-\n             * data-label-box` and `.highcharts-data-label` class names ([see example](http://jsfiddle.\n             * net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/series-\n             * datalabels)).\n             */dataLabels:{/**\n                 * The alignment of the data label compared to the point. If `right`,\n                 * the right side of the label should be touching the point. For\n                 * points with an extent, like columns, the alignments also dictates\n                 * how to align it inside the box, as given with the [inside](#plotOptions.\n                 * column.dataLabels.inside) option. Can be one of \"left\", \"center\"\n                 * or \"right\".\n                 *\n                 * @validvalue [\"left\", \"center\", \"right\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-align-left/ Left aligned\n                 * @default center\n                 */align:'center',/**\n                 * Whether to allow data labels to overlap. To make the labels less\n                 * sensitive for overlapping, the [dataLabels.padding](#plotOptions.\n                 * series.dataLabels.padding) can be set to 0.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-allowoverlap-false/ Don't allow overlap\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-allowoverlap-false/ Don't allow overlap\n                 * @sample {highmaps} highcharts/plotoptions/series-datalabels-allowoverlap-false/ Don't allow overlap\n                 * @default false\n                 * @since 4.1.0\n                 * @apioption plotOptions.series.dataLabels.allowOverlap\n                 *//**\n                 * The border radius in pixels for the data label.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highmaps} maps/plotoptions/series-datalabels-box/ Data labels box options\n                 * @default 0\n                 * @since 2.2.1\n                 * @apioption plotOptions.series.dataLabels.borderRadius\n                 *//**\n                 * The border width in pixels for the data label.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @default 0\n                 * @since 2.2.1\n                 * @apioption plotOptions.series.dataLabels.borderWidth\n                 *//**\n                 * A class name for the data label. Particularly in [styled mode](http://www.\n                 * highcharts.com/docs/chart-design-and-style/style-by-css), this can\n                 * be used to give each series' or point's data label unique styling.\n                 * In addition to this option, a default color class name is added\n                 * so that we can give the labels a [contrast text shadow](http://jsfiddle.\n                 * net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/data-\n                 * label-contrast/).\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/css/series-datalabels/ Styling by CSS\n                 * @sample {highstock} highcharts/css/series-datalabels/ Styling by CSS\n                 * @sample {highmaps} highcharts/css/series-datalabels/ Styling by CSS\n                 * @since 5.0.0\n                 * @apioption plotOptions.series.dataLabels.className\n                 *//**\n                 * The text color for the data labels. Defaults to `null`. For certain series\n                 * types, like column or map, the data labels can be drawn inside the points.\n                 * In this case the data label will be drawn with maximum contrast by default.\n                 * Additionally, it will be given a `text-outline` style with the opposite\n                 * color, to further increase the contrast. This can be overridden by setting\n                 * the `text-outline` style to `none` in the `dataLabels.style` option.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-color/\n                 *         Red data labels\n                 * @sample {highmaps} maps/demo/color-axis/\n                 *         White data labels\n                 * @apioption plotOptions.series.dataLabels.color\n                 *//**\n                 * Whether to hide data labels that are outside the plot area. By default,\n                 * the data label is moved inside the plot area according to the [overflow](#plotOptions.\n                 * series.dataLabels.overflow) option.\n                 *\n                 * @type {Boolean}\n                 * @default true\n                 * @since 2.3.3\n                 * @apioption plotOptions.series.dataLabels.crop\n                 *//**\n                 * Whether to defer displaying the data labels until the initial series\n                 * animation has finished.\n                 *\n                 * @type {Boolean}\n                 * @default true\n                 * @since 4.0\n                 * @product highcharts highstock\n                 * @apioption plotOptions.series.dataLabels.defer\n                 *//**\n                 * Enable or disable the data labels.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-enabled/ Data labels enabled\n                 * @sample {highmaps} maps/demo/color-axis/ Data labels enabled\n                 * @default false\n                 * @apioption plotOptions.series.dataLabels.enabled\n                 *//**\n                 * A [format string](http://www.highcharts.com/docs/chart-concepts/labels-\n                 * and-string-formatting) for the data label. Available variables are\n                 * the same as for `formatter`.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-format/ Add a unit\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-format/ Add a unit\n                 * @sample {highmaps} maps/plotoptions/series-datalabels-format/ Formatted value in the data label\n                 * @default {highcharts} {y}\n                 * @default {highstock} {y}\n                 * @default {highmaps} {point.value}\n                 * @since 3.0\n                 * @apioption plotOptions.series.dataLabels.format\n                 *//**\n                 * Callback JavaScript function to format the data label. Note that\n                 * if a `format` is defined, the format takes precedence and the formatter\n                 * is ignored. Available data are:\n                 *\n                 * <table>\n                 *\n                 * <tbody>\n                 *\n                 * <tr>\n                 *\n                 * <td>`this.percentage`</td>\n                 *\n                 * <td>Stacked series and pies only. The point's percentage of the\n                 * total.</td>\n                 *\n                 * </tr>\n                 *\n                 * <tr>\n                 *\n                 * <td>`this.point`</td>\n                 *\n                 * <td>The point object. The point name, if defined, is available\n                 * through `this.point.name`.</td>\n                 *\n                 * </tr>\n                 *\n                 * <tr>\n                 *\n                 * <td>`this.series`:</td>\n                 *\n                 * <td>The series object. The series name is available through `this.\n                 * series.name`.</td>\n                 *\n                 * </tr>\n                 *\n                 * <tr>\n                 *\n                 * <td>`this.total`</td>\n                 *\n                 * <td>Stacked series only. The total value at this point's x value.\n                 * </td>\n                 *\n                 * </tr>\n                 *\n                 * <tr>\n                 *\n                 * <td>`this.x`:</td>\n                 *\n                 * <td>The x value.</td>\n                 *\n                 * </tr>\n                 *\n                 * <tr>\n                 *\n                 * <td>`this.y`:</td>\n                 *\n                 * <td>The y value.</td>\n                 *\n                 * </tr>\n                 *\n                 * </tbody>\n                 *\n                 * </table>\n                 *\n                 * @type {Function}\n                 * @sample {highmaps} maps/plotoptions/series-datalabels-format/ Formatted value\n                 * @product highcharts highstock highmaps\n                 */formatter:function formatter(){return this.y===null?'':H.numberFormat(this.y,-1);},/**\n                 * Styles for the label. The default `color` setting is `\"contrast\"`,\n                 * which is a pseudo color that Highcharts picks up and applies the\n                 * maximum contrast to the underlying point item, for example the\n                 * bar in a bar chart. The `textOutline` is a pseudo property that\n                 * applies an outline of the given width with the given color, which\n                 * by default is the maximum contrast to the text. So a bright text\n                 * color will result in a black text outline for maximum readability\n                 * on a mixed background. In some cases, especially with grayscale\n                 * text, the text outline doesn't work well, in which cases it can\n                 * be disabled by setting it to `\"none\"`.\n                 *\n                 * @type {CSSObject}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-style/\n                 *         Bold labels\n                 * @sample {highmaps} maps/demo/color-axis/ Bold labels\n                 * @default {\"color\": \"contrast\", \"fontSize\": \"11px\", \"fontWeight\": \"bold\", \"textOutline\": \"1px contrast\" }\n                 * @since 4.1.0\n                 */style:{fontSize:'11px',fontWeight:'bold',color:'contrast',textOutline:'1px contrast'},/**\n                 * The background color or gradient for the data label. Defaults to\n                 * `undefined`.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highmaps} maps/plotoptions/series-datalabels-box/ Data labels box options\n                 * @since 2.2.1\n                 * @apioption plotOptions.series.dataLabels.backgroundColor\n                 *//**\n                 * The border color for the data label. Defaults to `undefined`.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @default undefined\n                 * @since 2.2.1\n                 * @apioption plotOptions.series.dataLabels.borderColor\n                 *//**\n                 * The shadow of the box. Works best with `borderWidth` or `backgroundColor`.\n                 * Since 2.3 the shadow can be an object configuration containing `color`,\n                 *  `offsetX`, `offsetY`, `opacity` and `width`.\n                 *\n                 * @type {Boolean|Object}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @default false\n                 * @since 2.2.1\n                 * @apioption plotOptions.series.dataLabels.shadow\n                 *//**\n                 * For points with an extent, like columns or map areas, whether to align the data\n                 * label inside the box or to the actual value point. Defaults to `false`\n                 * in most cases, `true` in stacked columns.\n                 *\n                 * @type {Boolean}\n                 * @since 3.0\n                 * @apioption plotOptions.series.dataLabels.inside\n                 *//**\n                 * How to handle data labels that flow outside the plot area. The default\n                 * is `justify`, which aligns them inside the plot area. For columns\n                 * and bars, this means it will be moved inside the bar. To display\n                 * data labels outside the plot area, set `crop` to `false` and `overflow`\n                 * to `\"none\"`.\n                 *\n                 * @validvalue [\"justify\", \"none\"]\n                 * @type {String}\n                 * @default justify\n                 * @since 3.0.6\n                 * @apioption plotOptions.series.dataLabels.overflow\n                 *//**\n                 * Text rotation in degrees. Note that due to a more complex structure,\n                 * backgrounds, borders and padding will be lost on a rotated data\n                 * label.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-rotation/ Vertical labels\n                 * @default 0\n                 * @apioption plotOptions.series.dataLabels.rotation\n                 *//**\n                 * The vertical alignment of a data label. Can be one of `top`, `middle`\n                 * or `bottom`. The default value depends on the data, for instance\n                 * in a column chart, the label is above positive values and below\n                 * negative values.\n                 *\n                 * @validvalue [\"top\", \"middle\", \"bottom\"]\n                 * @type {String}\n                 * @since 2.3.3\n                 * @product highcharts highstock highmaps\n                 */verticalAlign:'bottom',// above singular point\n/**\n                 * The x position offset of the label relative to the point.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-rotation/ Vertical and positioned\n                 * @default 0\n                 * @product highcharts highstock highmaps\n                 */x:0,/**\n                 * The y position offset of the label relative to the point.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-rotation/ Vertical and positioned\n                 * @default -6\n                 * @product highcharts highstock highmaps\n                 */y:0,/**\n                 * When either the `borderWidth` or the `backgroundColor` is set,\n                 * this is the padding within the box.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highmaps} maps/plotoptions/series-datalabels-box/ Data labels box options\n                 * @default {highcharts} 5\n                 * @default {highstock} 5\n                 * @default {highmaps} 0\n                 * @since 2.2.1\n                 * @product highcharts highstock highmaps\n                 */padding:5/**\n                 * The name of a symbol to use for the border around the label. Symbols\n                 * are predefined functions on the Renderer object.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-shape/ A callout for annotations\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-shape/ A callout for annotations\n                 * @sample {highmaps} highcharts/plotoptions/series-datalabels-shape/ A callout for annotations (Highcharts demo)\n                 * @default square\n                 * @since 4.1.2\n                 * @apioption plotOptions.series.dataLabels.shape\n                 *//**\n                 * The Z index of the data labels. The default Z index puts it above\n                 * the series. Use a Z index of 2 to display it behind the series.\n                 *\n                 * @type {Number}\n                 * @default 6\n                 * @since 2.3.5\n                 * @apioption plotOptions.series.dataLabels.zIndex\n                 */},// draw points outside the plot area when the number of points is less than\n// this\n/**\n             * When the series contains less points than the crop threshold, all\n             * points are drawn, even if the points fall outside the visible plot\n             * area at the current zoom. The advantage of drawing all points (including\n             * markers and columns), is that animation is performed on updates.\n             * On the other hand, when the series contains more points than the\n             * crop threshold, the series data is cropped to only contain points\n             * that fall within the plot area. The advantage of cropping away invisible\n             * points is to increase performance on large series.\n             *\n             * @type {Number}\n             * @default 300\n             * @since 2.2\n             * @product highcharts highstock\n             */cropThreshold:300,/**\n             * The width of each point on the x axis. For example in a column chart\n             * with one value each day, the pointRange would be 1 day (= 24 * 3600\n             * * 1000 milliseconds). This is normally computed automatically, but\n             * this option can be used to override the automatic value.\n             *\n             * @type {Number}\n             * @default 0\n             * @product highstock\n             */pointRange:0,//pointStart: 0,\n//pointInterval: 1,\n//showInLegend: null, // auto = false for linked series\n/**\n             * When this is true, the series will not cause the Y axis to cross\n             * the zero plane (or [threshold](#plotOptions.series.threshold) option)\n             * unless the data actually crosses the plane.\n             *\n             * For example, if `softThreshold` is `false`, a series of 0, 1, 2,\n             * 3 will make the Y axis show negative values according to the `minPadding`\n             * option. If `softThreshold` is `true`, the Y axis starts at 0.\n             *\n             * @type {Boolean}\n             * @default true\n             * @since 4.1.9\n             * @product highcharts highstock\n             */softThreshold:true,/**\n             * A wrapper object for all the series options in specific states.\n             *\n             * @type {plotOptions.series.states}\n             * @product highcharts highstock highmaps\n             */states:{// states for the entire series\n/**\n                 * Options for the hovered series\n                 *\n                 * @product highcharts highstock highmaps\n                 */hover:{//enabled: false,\n/**\n                     * Animation setting for hovering the graph in line-type series.\n                     *\n                     * @type {Boolean|Object}\n                     * @default { \"duration\": 50 }\n                     * @since 5.0.8\n                     * @product highcharts\n                     */animation:{/**\n                         */duration:50},/**\n                     * The additional line width for the graph of a hovered series.\n                     *\n                     * @type {Number}\n                     * @sample {highcharts} highcharts/plotoptions/series-states-hover-linewidthplus/ 5 pixels wider\n                     * @sample {highstock} highcharts/plotoptions/series-states-hover-linewidthplus/ 5 pixels wider\n                     * @default 1\n                     * @since 4.0.3\n                     * @product highcharts highstock\n                     */lineWidthPlus:1,/**\n                     * In Highcharts 1.0, the appearance of all markers belonging to\n                     * the hovered series. For settings on the hover state of the individual\n                     * point, see [marker.states.hover](#plotOptions.series.marker.states.\n                     * hover).\n                     *\n                     * @extends plotOptions.series.marker\n                     * @deprecated\n                     * @product highcharts highstock\n                     */marker:{// lineWidth: base + 1,\n// radius: base + 1\n},/**\n                     * Options for the halo appearing around the hovered point in line-\n                     * type series as well as outside the hovered slice in pie charts.\n                     * By default the halo is filled by the current point or series\n                     * color with an opacity of 0.25\\. The halo can be disabled by setting\n                     * the `halo` option to `false`.\n                     *\n                     * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the halo is styled with the `.highcharts-\n                     * halo` class, with colors inherited from `.highcharts-color-{n}`.\n                     *\n                     * @type {Object}\n                     * @sample {highcharts} highcharts/plotoptions/halo/ Halo options\n                     * @sample {highstock} highcharts/plotoptions/halo/ Halo options\n                     * @since 4.0\n                     * @product highcharts highstock\n                     */halo:{/**\n                         * The pixel size of the halo. For point markers this is the radius\n                         * of the halo. For pie slices it is the width of the halo outside\n                         * the slice. For bubbles it defaults to 5 and is the width of the\n                         * halo outside the bubble.\n                         *\n                         * @type {Number}\n                         * @default 10\n                         * @since 4.0\n                         * @product highcharts highstock\n                         */size:10,/**\n                         * Opacity for the halo unless a specific fill is overridden using\n                         * the `attributes` setting. Note that Highcharts is only able to\n                         * apply opacity to colors of hex or rgb(a) formats.\n                         *\n                         * @type {Number}\n                         * @default 0.25\n                         * @since 4.0\n                         * @product highcharts highstock\n                         */opacity:0.25}},/**\n                 * Specific options for point in selected states, after being selected\n                 * by [allowPointSelect](#plotOptions.series.allowPointSelect) or\n                 * programmatically.\n                 *\n                 * @type {Object}\n                 * @extends plotOptions.series.states.hover\n                 * @excluding brightness\n                 * @sample {highmaps} maps/plotoptions/series-allowpointselect/ Allow point select demo\n                 * @product highmaps\n                 */select:{/**\n                     */marker:{}}},/**\n             * Sticky tracking of mouse events. When true, the `mouseOut` event\n             * on a series isn't triggered until the mouse moves over another series,\n             * or out of the plot area. When false, the `mouseOut` event on a\n             * series is triggered when the mouse leaves the area around the series'\n             * graph or markers. This also implies the tooltip when not shared. When\n             * `stickyTracking` is false and `tooltip.shared` is false, the tooltip will\n             * be hidden when moving the mouse between series. Defaults to true for line\n             * and area type series, but to false for columns, pies etc.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-stickytracking-true/\n             *         True by default\n             * @sample {highcharts} highcharts/plotoptions/series-stickytracking-false/\n             *         False\n             * @default {highcharts} true\n             * @default {highstock} true\n             * @default {highmaps} false\n             * @since 2.0\n             * @product highcharts highstock highmaps\n             */stickyTracking:true,//tooltip: {\n//pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span>' +\n// '{series.name}: <b>{point.y}</b>'\n//valueDecimals: null,\n//xDateFormat: '%A, %b %e, %Y',\n//valuePrefix: '',\n//ySuffix: ''\n//}\n/**\n             * When a series contains a data array that is longer than this, only\n             * one dimensional arrays of numbers, or two dimensional arrays with\n             * x and y values are allowed. Also, only the first point is tested,\n             * and the rest are assumed to be the same format. This saves expensive\n             * data checking and indexing in long series. Set it to `0` disable.\n             *\n             * @type {Number}\n             * @default 1000\n             * @since 2.2\n             * @product highcharts highstock\n             */turboThreshold:1000,// zIndex: null\n/**\n             * Determines whether the series should look for the nearest point\n             * in both dimensions or just the x-dimension when hovering the series.\n             * Defaults to `'xy'` for scatter series and `'x'` for most other\n             * series. If the data has duplicate x-values, it is recommended to\n             * set this to `'xy'` to allow hovering over all points.\n             *\n             * Applies only to series types using nearest neighbor search (not\n             * direct hover) for tooltip.\n             *\n             * @validvalue ['x', 'xy']\n             * @type {String}\n             * @sample {highcharts} highcharts/series/findnearestpointby/ Different hover behaviors\n             * @sample {highstock} highcharts/series/findnearestpointby/ Different hover behaviors\n             * @sample {highmaps} highcharts/series/findnearestpointby/ Different hover behaviors\n             * @since 5.0.10\n             * @product highcharts highstock highmaps\n             */findNearestPointBy:'x'},/** @lends Highcharts.Series.prototype */{isCartesian:true,pointClass:Point,sorted:true,// requires the data to be sorted\nrequireSorting:true,directTouch:false,axisTypes:['xAxis','yAxis'],colorCounter:0,// each point's x and y values are stored in this.xData and this.yData\nparallelArrays:['x','y'],coll:'series',init:function init(chart,options){var series=this,events,chartSeries=chart.series,lastSeries;/**\n                 * Read only. The chart that the series belongs to.\n                 *\n                 * @name chart\n                 * @memberOf Series\n                 * @type {Chart}\n                 */series.chart=chart;/**\n                 * Read only. The series' type, like \"line\", \"area\", \"column\" etc. The\n                 * type in the series options anc can be altered using {@link\n                 * Series#update}.\n                 *\n                 * @name type\n                 * @memberOf Series\n                 * @type String\n                 *//**\n                 * Read only. The series' current options. To update, use {@link\n                 * Series#update}.\n                 *\n                 * @name options\n                 * @memberOf Series\n                 * @type SeriesOptions\n                 */series.options=options=series.setOptions(options);series.linkedSeries=[];// bind the axes\nseries.bindAxes();// set some variables\nextend(series,{/**\n                     * The series name as given in the options. Defaults to\n                     * \"Series {n}\".\n                     *\n                     * @name name\n                     * @memberOf Series\n                     * @type {String}\n                     */name:options.name,state:'',/**\n                     * Read only. The series' visibility state as set by {@link\n                     * Series#show}, {@link Series#hide}, or in the initial\n                     * configuration.\n                     *\n                     * @name visible\n                     * @memberOf Series\n                     * @type {Boolean}\n                     */visible:options.visible!==false,// true by default\n/**\n                     * Read only. The series' selected state as set by {@link\n                     * Highcharts.Series#select}.\n                     *\n                     * @name selected\n                     * @memberOf Series\n                     * @type {Boolean}\n                     */selected:options.selected===true// false by default\n});// register event listeners\nevents=options.events;objectEach(events,function(event,eventType){addEvent(series,eventType,event);});if(events&&events.click||options.point&&options.point.events&&options.point.events.click||options.allowPointSelect){chart.runTrackerClick=true;}series.getColor();series.getSymbol();// Set the data\neach(series.parallelArrays,function(key){series[key+'Data']=[];});series.setData(options.data,false);// Mark cartesian\nif(series.isCartesian){chart.hasCartesianSeries=true;}// Get the index and register the series in the chart. The index is one\n// more than the current latest series index (#5960).\nif(chartSeries.length){lastSeries=chartSeries[chartSeries.length-1];}series._i=pick(lastSeries&&lastSeries._i,-1)+1;// Insert the series and re-order all series above the insertion point.\nchart.orderSeries(this.insert(chartSeries));},/**\n             * Insert the series in a collection with other series, either the chart\n             * series or yAxis series, in the correct order according to the index\n             * option. Used internally when adding series.\n             *\n             * @private\n             * @param   {Array.<Series>} collection\n             *          A collection of series, like `chart.series` or `xAxis.series`.\n             * @returns {Number} The index of the series in the collection.\n             */insert:function insert(collection){var indexOption=this.options.index,i;// Insert by index option\nif(isNumber(indexOption)){i=collection.length;while(i--){// Loop down until the interted element has higher index\nif(indexOption>=pick(collection[i].options.index,collection[i]._i)){collection.splice(i+1,0,this);break;}}if(i===-1){collection.unshift(this);}i=i+1;// Or just push it to the end\n}else{collection.push(this);}return pick(i,collection.length-1);},/**\n             * Set the xAxis and yAxis properties of cartesian series, and register the\n             * series in the `axis.series` array.\n             *\n             * @private\n             */bindAxes:function bindAxes(){var series=this,seriesOptions=series.options,chart=series.chart,axisOptions;// repeat for xAxis and yAxis\neach(series.axisTypes||[],function(AXIS){// loop through the chart's axis objects\neach(chart[AXIS],function(axis){axisOptions=axis.options;// apply if the series xAxis or yAxis option mathches the number\n// of the axis, or if undefined, use the first axis\nif(seriesOptions[AXIS]===axisOptions.index||seriesOptions[AXIS]!==undefined&&seriesOptions[AXIS]===axisOptions.id||seriesOptions[AXIS]===undefined&&axisOptions.index===0){// register this series in the axis.series lookup\nseries.insert(axis.series);// set this series.xAxis or series.yAxis reference\n/**\n                             * Read only. The unique xAxis object associated with the\n                             * series.\n                             *\n                             * @name xAxis\n                             * @memberOf Series\n                             * @type Axis\n                             *//**\n                             * Read only. The unique yAxis object associated with the\n                             * series.\n                             *\n                             * @name yAxis\n                             * @memberOf Series\n                             * @type Axis\n                             */series[AXIS]=axis;// mark dirty for redraw\naxis.isDirty=true;}});// The series needs an X and an Y axis\nif(!series[AXIS]&&series.optionalAxis!==AXIS){H.error(18,true);}});},/**\n             * For simple series types like line and column, the data values are held in\n             * arrays like xData and yData for quick lookup to find extremes and more.\n             * For multidimensional series like bubble and map, this can be extended\n             * with arrays like zData and valueData by adding to the\n             * `series.parallelArrays` array.\n             *\n             * @private\n             */updateParallelArrays:function updateParallelArrays(point,i){var series=point.series,args=arguments,fn=isNumber(i)?// Insert the value in the given position\nfunction(key){var val=key==='y'&&series.toYData?series.toYData(point):point[key];series[key+'Data'][i]=val;}:// Apply the method specified in i with the following arguments\n// as arguments\nfunction(key){Array.prototype[i].apply(series[key+'Data'],Array.prototype.slice.call(args,2));};each(series.parallelArrays,fn);},/**\n             * Return an auto incremented x value based on the pointStart and\n             * pointInterval options. This is only used if an x value is not given for\n             * the point that calls autoIncrement.\n             *\n             * @private\n             */autoIncrement:function autoIncrement(){var options=this.options,xIncrement=this.xIncrement,date,pointInterval,pointIntervalUnit=options.pointIntervalUnit;xIncrement=pick(xIncrement,options.pointStart,0);this.pointInterval=pointInterval=pick(this.pointInterval,options.pointInterval,1);// Added code for pointInterval strings\nif(pointIntervalUnit){date=new Date(xIncrement);if(pointIntervalUnit==='day'){date=+date[Date.hcSetDate](date[Date.hcGetDate]()+pointInterval);}else if(pointIntervalUnit==='month'){date=+date[Date.hcSetMonth](date[Date.hcGetMonth]()+pointInterval);}else if(pointIntervalUnit==='year'){date=+date[Date.hcSetFullYear](date[Date.hcGetFullYear]()+pointInterval);}pointInterval=date-xIncrement;}this.xIncrement=xIncrement+pointInterval;return xIncrement;},/**\n             * Set the series options by merging from the options tree. Called\n             * internally on initiating and updating series. This function will not\n             * redraw the series. For API usage, use {@link Series#update}.\n             *\n             * @param  {Options.plotOptions.series} itemOptions\n             *         The series options.\n             */setOptions:function setOptions(itemOptions){var chart=this.chart,chartOptions=chart.options,plotOptions=chartOptions.plotOptions,userOptions=chart.userOptions||{},userPlotOptions=userOptions.plotOptions||{},typeOptions=plotOptions[this.type],options,zones;this.userOptions=itemOptions;// General series options take precedence over type options because\n// otherwise, default type options like column.animation would be\n// overwritten by the general option. But issues have been raised here\n// (#3881), and the solution may be to distinguish between default\n// option and userOptions like in the tooltip below.\noptions=merge(typeOptions,plotOptions.series,itemOptions);// The tooltip options are merged between global and series specific\n// options. Importance order asscendingly:\n// globals: (1)tooltip, (2)plotOptions.series, (3)plotOptions[this.type]\n// init userOptions with possible later updates: 4-6 like 1-3 and\n// (7)this series options\nthis.tooltipOptions=merge(defaultOptions.tooltip,// 1\ndefaultOptions.plotOptions.series&&defaultOptions.plotOptions.series.tooltip,// 2\ndefaultOptions.plotOptions[this.type].tooltip,// 3\nchartOptions.tooltip.userOptions,// 4\nplotOptions.series&&plotOptions.series.tooltip,// 5\nplotOptions[this.type].tooltip,// 6\nitemOptions.tooltip// 7\n);// When shared tooltip, stickyTracking is true by default,\n// unless user says otherwise.\nthis.stickyTracking=pick(itemOptions.stickyTracking,userPlotOptions[this.type]&&userPlotOptions[this.type].stickyTracking,userPlotOptions.series&&userPlotOptions.series.stickyTracking,this.tooltipOptions.shared&&!this.noSharedTooltip?true:options.stickyTracking);// Delete marker object if not allowed (#1125)\nif(typeOptions.marker===null){delete options.marker;}// Handle color zones\nthis.zoneAxis=options.zoneAxis;zones=this.zones=(options.zones||[]).slice();if((options.negativeColor||options.negativeFillColor)&&!options.zones){zones.push({value:options[this.zoneAxis+'Threshold']||options.threshold||0,className:'highcharts-negative',color:options.negativeColor,fillColor:options.negativeFillColor});}if(zones.length){// Push one extra zone for the rest\nif(defined(zones[zones.length-1].value)){zones.push({color:this.color,fillColor:this.fillColor});}}return options;},getCyclic:function getCyclic(prop,value,defaults){var i,chart=this.chart,userOptions=this.userOptions,indexName=prop+'Index',counterName=prop+'Counter',len=defaults?defaults.length:pick(chart.options.chart[prop+'Count'],chart[prop+'Count']),setting;if(!value){// Pick up either the colorIndex option, or the _colorIndex after\n// Series.update()\nsetting=pick(userOptions[indexName],userOptions['_'+indexName]);if(defined(setting)){// after Series.update()\ni=setting;}else{// #6138\nif(!chart.series.length){chart[counterName]=0;}userOptions['_'+indexName]=i=chart[counterName]%len;chart[counterName]+=1;}if(defaults){value=defaults[i];}}// Set the colorIndex\nif(i!==undefined){this[indexName]=i;}this[prop]=value;},/**\n             * Get the series' color based on either the options or pulled from global\n             * options.\n             *\n             * @return  {Color} The series color.\n             */getColor:function getColor(){if(this.options.colorByPoint){// #4359, selected slice got series.color even when colorByPoint was\n// set.\nthis.options.color=null;}else{this.getCyclic('color',this.options.color||defaultPlotOptions[this.type].color,this.chart.options.colors);}},/**\n             * Get the series' symbol based on either the options or pulled from global\n             * options.\n             */getSymbol:function getSymbol(){var seriesMarkerOption=this.options.marker;this.getCyclic('symbol',seriesMarkerOption.symbol,this.chart.options.symbols);},drawLegendSymbol:LegendSymbolMixin.drawLineMarker,/**\n             * Apply a new set of data to the series and optionally redraw it. The new\n             * data array is passed by reference (except in case of `updatePoints`), and\n             * may later be mutated when updating the chart data.\n             *\n             * Note the difference in behaviour when setting the same amount of points,\n             * or a different amount of points, as handled by the `updatePoints`\n             * parameter.\n             *\n             * @param  {SeriesDataOptions} data\n             *         Takes an array of data in the same format as described under\n             *         `series<type>data` for the given series type.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after the series is altered. If doing\n             *         more operations on the chart, it is a good idea to set redraw to\n             *         false and call {@link Chart#redraw} after.\n             * @param  {AnimationOptions} [animation]\n             *         When the updated data is the same length as the existing data,\n             *         points will be updated by default, and animation visualizes how\n             *         the points are changed. Set false to disable animation, or a\n             *         configuration object to set duration or easing.\n             * @param  {Boolean} [updatePoints=true]\n             *         When the updated data is the same length as the existing data,\n             *         points will be updated instead of replaced. This allows updating\n             *         with animation and performs better. In this case, the original\n             *         array is not passed by reference. Set false to prevent.\n             *\n             * @sample highcharts/members/series-setdata/\n             *         Set new data from a button\n             * @sample highcharts/members/series-setdata-pie/\n             *         Set data in a pie\n             * @sample stock/members/series-setdata/\n             *         Set new data in Highstock\n             * @sample maps/members/series-setdata/\n             *         Set new data in Highmaps\n             */setData:function setData(data,redraw,animation,updatePoints){var series=this,oldData=series.points,oldDataLength=oldData&&oldData.length||0,dataLength,options=series.options,chart=series.chart,firstPoint=null,xAxis=series.xAxis,i,turboThreshold=options.turboThreshold,pt,xData=this.xData,yData=this.yData,pointArrayMap=series.pointArrayMap,valueCount=pointArrayMap&&pointArrayMap.length;data=data||[];dataLength=data.length;redraw=pick(redraw,true);// If the point count is the same as is was, just run Point.update which\n// is cheaper, allows animation, and keeps references to points.\nif(updatePoints!==false&&dataLength&&oldDataLength===dataLength&&!series.cropped&&!series.hasGroupedData&&series.visible){each(data,function(point,i){// .update doesn't exist on a linked, hidden series (#3709)\nif(oldData[i].update&&point!==options.data[i]){oldData[i].update(point,false,null,false);}});}else{// Reset properties\nseries.xIncrement=null;series.colorCounter=0;// for series with colorByPoint (#1547)\n// Update parallel arrays\neach(this.parallelArrays,function(key){series[key+'Data'].length=0;});// In turbo mode, only one- or twodimensional arrays of numbers are\n// allowed. The first value is tested, and we assume that all the\n// rest are defined the same way. Although the 'for' loops are\n// similar, they are repeated inside each if-else conditional for\n// max performance.\nif(turboThreshold&&dataLength>turboThreshold){// find the first non-null point\ni=0;while(firstPoint===null&&i<dataLength){firstPoint=data[i];i++;}if(isNumber(firstPoint)){// assume all points are numbers\nfor(i=0;i<dataLength;i++){xData[i]=this.autoIncrement();yData[i]=data[i];}// Assume all points are arrays when first point is\n}else if(isArray(firstPoint)){if(valueCount){// [x, low, high] or [x, o, h, l, c]\nfor(i=0;i<dataLength;i++){pt=data[i];xData[i]=pt[0];yData[i]=pt.slice(1,valueCount+1);}}else{// [x, y]\nfor(i=0;i<dataLength;i++){pt=data[i];xData[i]=pt[0];yData[i]=pt[1];}}}else{// Highcharts expects configs to be numbers or arrays in\n// turbo mode\nH.error(12);}}else{for(i=0;i<dataLength;i++){if(data[i]!==undefined){// stray commas in oldIE\npt={series:series};series.pointClass.prototype.applyOptions.apply(pt,[data[i]]);series.updateParallelArrays(pt,i);}}}// Forgetting to cast strings to numbers is a common caveat when\n// handling CSV or JSON\nif(isString(yData[0])){H.error(14,true);}series.data=[];series.options.data=series.userOptions.data=data;// destroy old points\ni=oldDataLength;while(i--){if(oldData[i]&&oldData[i].destroy){oldData[i].destroy();}}// reset minRange (#878)\nif(xAxis){xAxis.minRange=xAxis.userMinRange;}// redraw\nseries.isDirty=chart.isDirtyBox=true;series.isDirtyData=!!oldData;animation=false;}// Typically for pie series, points need to be processed and generated\n// prior to rendering the legend\nif(options.legendType==='point'){this.processData();this.generatePoints();}if(redraw){chart.redraw(animation);}},/**\n             * Internal function to process the data by cropping away unused data points\n             * if the series is longer than the crop threshold. This saves computing\n             * time for large series. In Highstock, this function is extended to\n             * provide data grouping.\n             *\n             * @private\n             * @param  {Boolean} force\n             *         Force data grouping.\n             */processData:function processData(force){var series=this,processedXData=series.xData,// copied during slice operation\nprocessedYData=series.yData,dataLength=processedXData.length,croppedData,cropStart=0,cropped,distance,closestPointRange,xAxis=series.xAxis,i,// loop variable\noptions=series.options,cropThreshold=options.cropThreshold,getExtremesFromAll=series.getExtremesFromAll||options.getExtremesFromAll,// #4599\nisCartesian=series.isCartesian,xExtremes,val2lin=xAxis&&xAxis.val2lin,isLog=xAxis&&xAxis.isLog,min,max;// If the series data or axes haven't changed, don't go through this.\n// Return false to pass the message on to override methods like in data\n// grouping.\nif(isCartesian&&!series.isDirty&&!xAxis.isDirty&&!series.yAxis.isDirty&&!force){return false;}if(xAxis){xExtremes=xAxis.getExtremes();// corrected for log axis (#3053)\nmin=xExtremes.min;max=xExtremes.max;}// optionally filter out points outside the plot area\nif(isCartesian&&series.sorted&&!getExtremesFromAll&&(!cropThreshold||dataLength>cropThreshold||series.forceCrop)){// it's outside current extremes\nif(processedXData[dataLength-1]<min||processedXData[0]>max){processedXData=[];processedYData=[];// only crop if it's actually spilling out\n}else if(processedXData[0]<min||processedXData[dataLength-1]>max){croppedData=this.cropData(series.xData,series.yData,min,max);processedXData=croppedData.xData;processedYData=croppedData.yData;cropStart=croppedData.start;cropped=true;}}// Find the closest distance between processed points\ni=processedXData.length||1;while(--i){distance=isLog?val2lin(processedXData[i])-val2lin(processedXData[i-1]):processedXData[i]-processedXData[i-1];if(distance>0&&(closestPointRange===undefined||distance<closestPointRange)){closestPointRange=distance;// Unsorted data is not supported by the line tooltip, as well as\n// data grouping and navigation in Stock charts (#725) and width\n// calculation of columns (#1900)\n}else if(distance<0&&series.requireSorting){H.error(15);}}// Record the properties\nseries.cropped=cropped;// undefined or true\nseries.cropStart=cropStart;series.processedXData=processedXData;series.processedYData=processedYData;series.closestPointRange=closestPointRange;},/**\n             * Iterate over xData and crop values between min and max. Returns object\n             * containing crop start/end cropped xData with corresponding part of yData,\n             * dataMin and dataMax within the cropped range.\n             *\n             * @private\n             */cropData:function cropData(xData,yData,min,max){var dataLength=xData.length,cropStart=0,cropEnd=dataLength,// line-type series need one point outside\ncropShoulder=pick(this.cropShoulder,1),i,j;// iterate up to find slice start\nfor(i=0;i<dataLength;i++){if(xData[i]>=min){cropStart=Math.max(0,i-cropShoulder);break;}}// proceed to find slice end\nfor(j=i;j<dataLength;j++){if(xData[j]>max){cropEnd=j+cropShoulder;break;}}return{xData:xData.slice(cropStart,cropEnd),yData:yData.slice(cropStart,cropEnd),start:cropStart,end:cropEnd};},/**\n             * Generate the data point after the data has been processed by cropping\n             * away unused points and optionally grouped in Highcharts Stock.\n             *\n             * @private\n             */generatePoints:function generatePoints(){var series=this,options=series.options,dataOptions=options.data,data=series.data,dataLength,processedXData=series.processedXData,processedYData=series.processedYData,PointClass=series.pointClass,processedDataLength=processedXData.length,cropStart=series.cropStart||0,cursor,hasGroupedData=series.hasGroupedData,keys=options.keys,point,points=[],i;if(!data&&!hasGroupedData){var arr=[];arr.length=dataOptions.length;data=series.data=arr;}if(keys&&hasGroupedData){// grouped data has already applied keys (#6590)\nseries.options.keys=false;}for(i=0;i<processedDataLength;i++){cursor=cropStart+i;if(!hasGroupedData){point=data[cursor];if(!point&&dataOptions[cursor]!==undefined){// #970\ndata[cursor]=point=new PointClass().init(series,dataOptions[cursor],processedXData[i]);}}else{// splat the y data in case of ohlc data array\npoint=new PointClass().init(series,[processedXData[i]].concat(splat(processedYData[i])));/**\n                         * Highstock only. If a point object is created by data\n                         * grouping, it doesn't reflect actual points in the raw data.\n                         * In this case, the `dataGroup` property holds information\n                         * that points back to the raw data.\n                         *\n                         * - `dataGroup.start` is the index of the first raw data point\n                         * in the group.\n                         * - `dataGroup.length` is the amount of points in the group.\n                         *\n                         * @name dataGroup\n                         * @memberOf Point\n                         * @type {Object}\n                         *\n                         */point.dataGroup=series.groupMap[i];}if(point){// #6279\npoint.index=cursor;// For faster access in Point.update\npoints[i]=point;}}// restore keys options (#6590)\nseries.options.keys=keys;// Hide cropped-away points - this only runs when the number of points\n// is above cropThreshold, or when swithching view from non-grouped\n// data to grouped data (#637)\nif(data&&(processedDataLength!==(dataLength=data.length)||hasGroupedData)){for(i=0;i<dataLength;i++){// when has grouped data, clear all points\nif(i===cropStart&&!hasGroupedData){i+=processedDataLength;}if(data[i]){data[i].destroyElements();data[i].plotX=undefined;// #1003\n}}}/**\n                 * Read only. An array containing the series' data point objects. To\n                 * modify the data, use {@link Highcharts.Series#setData} or {@link\n                 * Highcharts.Point#update}.\n                 *\n                 * @name data\n                 * @memberOf Highcharts.Series\n                 * @type {Array.<Highcharts.Point>}\n                 */series.data=data;/**\n                 * An array containing all currently visible point objects. In case of\n                 * cropping, the cropped-away points are not part of this array. The\n                 * `series.points` array starts at `series.cropStart` compared to\n                 * `series.data` and `series.options.data`. If however the series data\n                 * is grouped, these can't be correlated one to one. To\n                 * modify the data, use {@link Highcharts.Series#setData} or {@link\n                 * Highcharts.Point#update}.\n                 * @name point\n                 * @memberof Series\n                 * @type {Array.<Point>}\n                 */series.points=points;},/**\n             * Calculate Y extremes for the visible data. The result is set as\n             * `dataMin` and `dataMax` on the Series item.\n             *\n             * @param  {Array.<Number>} [yData]\n             *         The data to inspect. Defaults to the current data within the\n             *         visible range.\n             *\n             */getExtremes:function getExtremes(yData){var xAxis=this.xAxis,yAxis=this.yAxis,xData=this.processedXData,yDataLength,activeYData=[],activeCounter=0,// #2117, need to compensate for log X axis\nxExtremes=xAxis.getExtremes(),xMin=xExtremes.min,xMax=xExtremes.max,validValue,withinRange,x,y,i,j;yData=yData||this.stackedYData||this.processedYData||[];yDataLength=yData.length;for(i=0;i<yDataLength;i++){x=xData[i];y=yData[i];// For points within the visible range, including the first point\n// outside the visible range, consider y extremes\nvalidValue=(isNumber(y,true)||isArray(y))&&(!yAxis.positiveValuesOnly||y.length||y>0);withinRange=this.getExtremesFromAll||this.options.getExtremesFromAll||this.cropped||(xData[i]||x)>=xMin&&(xData[i]||x)<=xMax;if(validValue&&withinRange){j=y.length;if(j){// array, like ohlc or range data\nwhile(j--){if(y[j]!==null){activeYData[activeCounter++]=y[j];}}}else{activeYData[activeCounter++]=y;}}}this.dataMin=arrayMin(activeYData);this.dataMax=arrayMax(activeYData);},/**\n             * Translate data points from raw data values to chart specific positioning\n             * data needed later in the `drawPoints` and `drawGraph` functions. This\n             * function can be overridden in plugins and custom series type\n             * implementations.\n             */translate:function translate(){if(!this.processedXData){// hidden series\nthis.processData();}this.generatePoints();var series=this,options=series.options,stacking=options.stacking,xAxis=series.xAxis,categories=xAxis.categories,yAxis=series.yAxis,points=series.points,dataLength=points.length,hasModifyValue=!!series.modifyValue,i,pointPlacement=options.pointPlacement,dynamicallyPlaced=pointPlacement==='between'||isNumber(pointPlacement),threshold=options.threshold,stackThreshold=options.startFromThreshold?threshold:0,plotX,plotY,lastPlotX,stackIndicator,closestPointRangePx=Number.MAX_VALUE;// Point placement is relative to each series pointRange (#5889)\nif(pointPlacement==='between'){pointPlacement=0.5;}if(isNumber(pointPlacement)){pointPlacement*=pick(options.pointRange||xAxis.pointRange);}// Translate each point\nfor(i=0;i<dataLength;i++){var point=points[i],xValue=point.x,yValue=point.y,yBottom=point.low,stack=stacking&&yAxis.stacks[(series.negStacks&&yValue<(stackThreshold?0:threshold)?'-':'')+series.stackKey],pointStack,stackValues;// Discard disallowed y values for log axes (#3434)\nif(yAxis.positiveValuesOnly&&yValue!==null&&yValue<=0){point.isNull=true;}// Get the plotX translation\npoint.plotX=plotX=correctFloat(// #5236\nMath.min(Math.max(-1e5,xAxis.translate(xValue,0,0,0,1,pointPlacement,this.type==='flags')),1e5)// #3923\n);// Calculate the bottom y value for stacked series\nif(stacking&&series.visible&&!point.isNull&&stack&&stack[xValue]){stackIndicator=series.getStackIndicator(stackIndicator,xValue,series.index);pointStack=stack[xValue];stackValues=pointStack.points[stackIndicator.key];yBottom=stackValues[0];yValue=stackValues[1];if(yBottom===stackThreshold&&stackIndicator.key===stack[xValue].base){yBottom=pick(threshold,yAxis.min);}if(yAxis.positiveValuesOnly&&yBottom<=0){// #1200, #1232\nyBottom=null;}point.total=point.stackTotal=pointStack.total;point.percentage=pointStack.total&&point.y/pointStack.total*100;point.stackY=yValue;// Place the stack label\npointStack.setOffset(series.pointXOffset||0,series.barW||0);}// Set translated yBottom or remove it\npoint.yBottom=defined(yBottom)?yAxis.translate(yBottom,0,1,0,1):null;// general hook, used for Highstock compare mode\nif(hasModifyValue){yValue=series.modifyValue(yValue,point);}// Set the the plotY value, reset it for redraws\npoint.plotY=plotY=typeof yValue==='number'&&yValue!==Infinity?Math.min(Math.max(-1e5,yAxis.translate(yValue,0,1,0,1)),1e5):// #3201\nundefined;point.isInside=plotY!==undefined&&plotY>=0&&plotY<=yAxis.len&&// #3519\nplotX>=0&&plotX<=xAxis.len;// Set client related positions for mouse tracking\npoint.clientX=dynamicallyPlaced?correctFloat(xAxis.translate(xValue,0,0,0,1,pointPlacement)):plotX;// #1514, #5383, #5518\npoint.negative=point.y<(threshold||0);// some API data\npoint.category=categories&&categories[point.x]!==undefined?categories[point.x]:point.x;// Determine auto enabling of markers (#3635, #5099)\nif(!point.isNull){if(lastPlotX!==undefined){closestPointRangePx=Math.min(closestPointRangePx,Math.abs(plotX-lastPlotX));}lastPlotX=plotX;}// Find point zone\npoint.zone=this.zones.length&&point.getZone();}series.closestPointRangePx=closestPointRangePx;},/**\n             * Return the series points with null points filtered out.\n             *\n             * @param  {Array.<Point>} [points]\n             *         The points to inspect, defaults to {@link Series.points}.\n             * @param  {Boolean} [insideOnly=false]\n             *         Whether to inspect only the points that are inside the visible\n             *         view.\n             *\n             * @return {Array.<Point>}\n             *         The valid points.\n             */getValidPoints:function getValidPoints(points,insideOnly){var chart=this.chart;// #3916, #5029, #5085\nreturn grep(points||this.points||[],function isValidPoint(point){if(insideOnly&&!chart.isInsidePlot(point.plotX,point.plotY,chart.inverted)){return false;}return!point.isNull;});},/**\n             * Set the clipping for the series. For animated series it is called twice,\n             * first to initiate animating the clip then the second time without the\n             * animation to set the final clip.\n             *\n             * @private\n             */setClip:function setClip(animation){var chart=this.chart,options=this.options,renderer=chart.renderer,inverted=chart.inverted,seriesClipBox=this.clipBox,clipBox=seriesClipBox||chart.clipBox,sharedClipKey=this.sharedClipKey||['_sharedClip',animation&&animation.duration,animation&&animation.easing,clipBox.height,options.xAxis,options.yAxis].join(','),// #4526\nclipRect=chart[sharedClipKey],markerClipRect=chart[sharedClipKey+'m'];// If a clipping rectangle with the same properties is currently present\n// in the chart, use that.\nif(!clipRect){// When animation is set, prepare the initial positions\nif(animation){clipBox.width=0;chart[sharedClipKey+'m']=markerClipRect=renderer.clipRect(-99,// include the width of the first marker\ninverted?-chart.plotLeft:-chart.plotTop,99,inverted?chart.chartWidth:chart.chartHeight);}chart[sharedClipKey]=clipRect=renderer.clipRect(clipBox);// Create hashmap for series indexes\nclipRect.count={length:0};}if(animation){if(!clipRect.count[this.index]){clipRect.count[this.index]=true;clipRect.count.length+=1;}}if(options.clip!==false){this.group.clip(animation||seriesClipBox?clipRect:chart.clipRect);this.markerGroup.clip(markerClipRect);this.sharedClipKey=sharedClipKey;}// Remove the shared clipping rectangle when all series are shown\nif(!animation){if(clipRect.count[this.index]){delete clipRect.count[this.index];clipRect.count.length-=1;}if(clipRect.count.length===0&&sharedClipKey&&chart[sharedClipKey]){if(!seriesClipBox){chart[sharedClipKey]=chart[sharedClipKey].destroy();}if(chart[sharedClipKey+'m']){chart[sharedClipKey+'m']=chart[sharedClipKey+'m'].destroy();}}}},/**\n             * Animate in the series. Called internally twice. First with the `init`\n             * parameter set to true, which sets up the initial state of the animation.\n             * Then when ready, it is called with the `init` parameter undefined, in\n             * order to perform the actual animation. After the second run, the function\n             * is removed.\n             *\n             * @param  {Boolean} init\n             *         Initialize the animation.\n             */animate:function animate(init){var series=this,chart=series.chart,clipRect,animation=animObject(series.options.animation),sharedClipKey;// Initialize the animation. Set up the clipping rectangle.\nif(init){series.setClip(animation);// Run the animation\n}else{sharedClipKey=this.sharedClipKey;clipRect=chart[sharedClipKey];if(clipRect){clipRect.animate({width:chart.plotSizeX},animation);}if(chart[sharedClipKey+'m']){chart[sharedClipKey+'m'].animate({width:chart.plotSizeX+99},animation);}// Delete this function to allow it only once\nseries.animate=null;}},/**\n             * This runs after animation to land on the final plot clipping.\n             *\n             * @private\n             */afterAnimate:function afterAnimate(){this.setClip();fireEvent(this,'afterAnimate');this.finishedAnimating=true;},/**\n             * Draw the markers for line-like series types, and columns or other\n             * graphical representation for {@link Point} objects for other series\n             * types. The resulting element is typically stored as {@link\n             * Point.graphic}, and is created on the first call and updated and moved on\n             * subsequent calls.\n             */drawPoints:function drawPoints(){var series=this,points=series.points,chart=series.chart,plotY,i,point,symbol,graphic,options=series.options,seriesMarkerOptions=options.marker,pointMarkerOptions,hasPointMarker,enabled,isInside,markerGroup=series[series.specialGroup]||series.markerGroup,xAxis=series.xAxis,markerAttribs,globallyEnabled=pick(seriesMarkerOptions.enabled,xAxis.isRadial?true:null,// Use larger or equal as radius is null in bubbles (#6321)\nseries.closestPointRangePx>=2*seriesMarkerOptions.radius);if(seriesMarkerOptions.enabled!==false||series._hasPointMarkers){for(i=0;i<points.length;i++){point=points[i];plotY=point.plotY;graphic=point.graphic;pointMarkerOptions=point.marker||{};hasPointMarker=!!point.marker;enabled=globallyEnabled&&pointMarkerOptions.enabled===undefined||pointMarkerOptions.enabled;isInside=point.isInside;// only draw the point if y is defined\nif(enabled&&isNumber(plotY)&&point.y!==null){// Shortcuts\nsymbol=pick(pointMarkerOptions.symbol,series.symbol);point.hasImage=symbol.indexOf('url')===0;markerAttribs=series.markerAttribs(point,point.selected&&'select');if(graphic){// update\ngraphic[isInside?'show':'hide'](true)// Since the marker group isn't clipped, each individual marker must be toggled\n.animate(markerAttribs);}else if(isInside&&(markerAttribs.width>0||point.hasImage)){/**\n                                 * The graphic representation of the point. Typically\n                                 * this is a simple shape, like a `rect` for column\n                                 * charts or `path` for line markers, but for some\n                                 * complex series types like boxplot or 3D charts, the\n                                 * graphic may be a `g` element containing other shapes.\n                                 * The graphic is generated the first time {@link\n                                 * Series#drawPoints} runs, and updated and moved on\n                                 * subsequent runs.\n                                 *\n                                 * @memberof Point\n                                 * @name graphic\n                                 * @type {SVGElement}\n                                 */point.graphic=graphic=chart.renderer.symbol(symbol,markerAttribs.x,markerAttribs.y,markerAttribs.width,markerAttribs.height,hasPointMarker?pointMarkerOptions:seriesMarkerOptions).add(markerGroup);}// Presentational attributes\nif(graphic){graphic.attr(series.pointAttribs(point,point.selected&&'select'));}if(graphic){graphic.addClass(point.getClassName(),true);}}else if(graphic){point.graphic=graphic.destroy();// #1269\n}}}},/**\n             * Get non-presentational attributes for a point. Used internally for both\n             * styled mode and classic. Can be overridden for different series types.\n             *\n             * @see    Series#pointAttribs\n             *\n             * @param  {Point} point\n             *         The Point to inspect.\n             * @param  {String} [state]\n             *         The state, can be either `hover`, `select` or undefined.\n             *\n             * @return {SVGAttributes}\n             *         A hash containing those attributes that are not settable from\n             *         CSS.\n             */markerAttribs:function markerAttribs(point,state){var seriesMarkerOptions=this.options.marker,seriesStateOptions,pointMarkerOptions=point.marker||{},pointStateOptions,radius=pick(pointMarkerOptions.radius,seriesMarkerOptions.radius),attribs;// Handle hover and select states\nif(state){seriesStateOptions=seriesMarkerOptions.states[state];pointStateOptions=pointMarkerOptions.states&&pointMarkerOptions.states[state];radius=pick(pointStateOptions&&pointStateOptions.radius,seriesStateOptions&&seriesStateOptions.radius,radius+(seriesStateOptions&&seriesStateOptions.radiusPlus||0));}if(point.hasImage){radius=0;// and subsequently width and height is not set\n}attribs={x:Math.floor(point.plotX)-radius,// Math.floor for #1843\ny:point.plotY-radius};if(radius){attribs.width=attribs.height=2*radius;}return attribs;},/**\n             * Internal function to get presentational attributes for each point. Unlike\n             * {@link Series#markerAttribs}, this function should return those\n             * attributes that can also be set in CSS. In styled mode, `pointAttribs`\n             * won't be called.\n             *\n             * @param  {Point} point\n             *         The point instance to inspect.\n             * @param  {String} [state]\n             *         The point state, can be either `hover`, `select` or undefined for\n             *         normal state.\n             *\n             * @return {SVGAttributes}\n             *         The presentational attributes to be set on the point.\n             */pointAttribs:function pointAttribs(point,state){var seriesMarkerOptions=this.options.marker,seriesStateOptions,pointOptions=point&&point.options,pointMarkerOptions=pointOptions&&pointOptions.marker||{},pointStateOptions,color=this.color,pointColorOption=pointOptions&&pointOptions.color,pointColor=point&&point.color,strokeWidth=pick(pointMarkerOptions.lineWidth,seriesMarkerOptions.lineWidth),zoneColor=point&&point.zone&&point.zone.color,fill,stroke;color=pointColorOption||zoneColor||pointColor||color;fill=pointMarkerOptions.fillColor||seriesMarkerOptions.fillColor||color;stroke=pointMarkerOptions.lineColor||seriesMarkerOptions.lineColor||color;// Handle hover and select states\nif(state){seriesStateOptions=seriesMarkerOptions.states[state];pointStateOptions=pointMarkerOptions.states&&pointMarkerOptions.states[state]||{};strokeWidth=pick(pointStateOptions.lineWidth,seriesStateOptions.lineWidth,strokeWidth+pick(pointStateOptions.lineWidthPlus,seriesStateOptions.lineWidthPlus,0));fill=pointStateOptions.fillColor||seriesStateOptions.fillColor||fill;stroke=pointStateOptions.lineColor||seriesStateOptions.lineColor||stroke;}return{'stroke':stroke,'stroke-width':strokeWidth,'fill':fill};},/**\n             * Clear DOM objects and free up memory.\n             *\n             * @private\n             */destroy:function destroy(){var series=this,chart=series.chart,issue134=/AppleWebKit\\/533/.test(win.navigator.userAgent),destroy,i,data=series.data||[],point,axis;// add event hook\nfireEvent(series,'destroy');// remove all events\nremoveEvent(series);// erase from axes\neach(series.axisTypes||[],function(AXIS){axis=series[AXIS];if(axis&&axis.series){erase(axis.series,series);axis.isDirty=axis.forceRedraw=true;}});// remove legend items\nif(series.legendItem){series.chart.legend.destroyItem(series);}// destroy all points with their elements\ni=data.length;while(i--){point=data[i];if(point&&point.destroy){point.destroy();}}series.points=null;// Clear the animation timeout if we are destroying the series during initial animation\nclearTimeout(series.animationTimeout);// Destroy all SVGElements associated to the series\nobjectEach(series,function(val,prop){if(val instanceof SVGElement&&!val.survive){// Survive provides a hook for not destroying\n// issue 134 workaround\ndestroy=issue134&&prop==='group'?'hide':'destroy';val[destroy]();}});// remove from hoverSeries\nif(chart.hoverSeries===series){chart.hoverSeries=null;}erase(chart.series,series);chart.orderSeries();// clear all members\nobjectEach(series,function(val,prop){delete series[prop];});},/**\n             * Get the graph path.\n             *\n             * @private\n             */getGraphPath:function getGraphPath(points,nullsAsZeroes,connectCliffs){var series=this,options=series.options,step=options.step,reversed,graphPath=[],xMap=[],gap;points=points||series.points;// Bottom of a stack is reversed\nreversed=points.reversed;if(reversed){points.reverse();}// Reverse the steps (#5004)\nstep={right:1,center:2}[step]||step&&3;if(step&&reversed){step=4-step;}// Remove invalid points, especially in spline (#5015)\nif(options.connectNulls&&!nullsAsZeroes&&!connectCliffs){points=this.getValidPoints(points);}// Build the line\neach(points,function(point,i){var plotX=point.plotX,plotY=point.plotY,lastPoint=points[i-1],pathToPoint;// the path to this point from the previous\nif((point.leftCliff||lastPoint&&lastPoint.rightCliff)&&!connectCliffs){gap=true;// ... and continue\n}// Line series, nullsAsZeroes is not handled\nif(point.isNull&&!defined(nullsAsZeroes)&&i>0){gap=!options.connectNulls;// Area series, nullsAsZeroes is set\n}else if(point.isNull&&!nullsAsZeroes){gap=true;}else{if(i===0||gap){pathToPoint=['M',point.plotX,point.plotY];}else if(series.getPointSpline){// generate the spline as defined in the SplineSeries object\npathToPoint=series.getPointSpline(points,point,i);}else if(step){if(step===1){// right\npathToPoint=['L',lastPoint.plotX,plotY];}else if(step===2){// center\npathToPoint=['L',(lastPoint.plotX+plotX)/2,lastPoint.plotY,'L',(lastPoint.plotX+plotX)/2,plotY];}else{pathToPoint=['L',plotX,lastPoint.plotY];}pathToPoint.push('L',plotX,plotY);}else{// normal line to next point\npathToPoint=['L',plotX,plotY];}// Prepare for animation. When step is enabled, there are two path nodes for each x value.\nxMap.push(point.x);if(step){xMap.push(point.x);}graphPath.push.apply(graphPath,pathToPoint);gap=false;}});graphPath.xMap=xMap;series.graphPath=graphPath;return graphPath;},/**\n             * Draw the graph. Called internally when rendering line-like series types.\n             * The first time it generates the `series.graph` item and optionally other\n             * series-wide items like `series.area` for area charts. On subsequent calls\n             * these items are updated with new positions and attributes.\n             */drawGraph:function drawGraph(){var series=this,options=this.options,graphPath=(this.gappedPath||this.getGraphPath).call(this),props=[['graph','highcharts-graph',options.lineColor||this.color,options.dashStyle]];// Add the zone properties if any\neach(this.zones,function(zone,i){props.push(['zone-graph-'+i,'highcharts-graph highcharts-zone-graph-'+i+' '+(zone.className||''),zone.color||series.color,zone.dashStyle||options.dashStyle]);});// Draw the graph\neach(props,function(prop,i){var graphKey=prop[0],graph=series[graphKey],attribs;if(graph){graph.endX=graphPath.xMap;graph.animate({d:graphPath});}else if(graphPath.length){// #1487\nseries[graphKey]=series.chart.renderer.path(graphPath).addClass(prop[1]).attr({zIndex:1})// #1069\n.add(series.group);attribs={'stroke':prop[2],'stroke-width':options.lineWidth,'fill':series.fillGraph&&series.color||'none'// Polygon series use filled graph\n};if(prop[3]){attribs.dashstyle=prop[3];}else if(options.linecap!=='square'){attribs['stroke-linecap']=attribs['stroke-linejoin']='round';}graph=series[graphKey].attr(attribs).shadow(i<2&&options.shadow);// add shadow to normal series (0) or to first zone (1) #3932\n}// Helpers for animation\nif(graph){graph.startX=graphPath.xMap;//graph.shiftUnit = options.step ? 2 : 1;\ngraph.isArea=graphPath.isArea;// For arearange animation\n}});},/**\n             * Clip the graphs into zones for colors and styling.\n             *\n             * @private\n             */applyZones:function applyZones(){var series=this,chart=this.chart,renderer=chart.renderer,zones=this.zones,translatedFrom,translatedTo,clips=this.clips||[],clipAttr,graph=this.graph,area=this.area,chartSizeMax=Math.max(chart.chartWidth,chart.chartHeight),axis=this[(this.zoneAxis||'y')+'Axis'],extremes,reversed,inverted=chart.inverted,horiz,pxRange,pxPosMin,pxPosMax,ignoreZones=false;if(zones.length&&(graph||area)&&axis&&axis.min!==undefined){reversed=axis.reversed;horiz=axis.horiz;// The use of the Color Threshold assumes there are no gaps\n// so it is safe to hide the original graph and area\nif(graph){graph.hide();}if(area){area.hide();}// Create the clips\nextremes=axis.getExtremes();each(zones,function(threshold,i){translatedFrom=reversed?horiz?chart.plotWidth:0:horiz?0:axis.toPixels(extremes.min);translatedFrom=Math.min(Math.max(pick(translatedTo,translatedFrom),0),chartSizeMax);translatedTo=Math.min(Math.max(Math.round(axis.toPixels(pick(threshold.value,extremes.max),true)),0),chartSizeMax);if(ignoreZones){translatedFrom=translatedTo=axis.toPixels(extremes.max);}pxRange=Math.abs(translatedFrom-translatedTo);pxPosMin=Math.min(translatedFrom,translatedTo);pxPosMax=Math.max(translatedFrom,translatedTo);if(axis.isXAxis){clipAttr={x:inverted?pxPosMax:pxPosMin,y:0,width:pxRange,height:chartSizeMax};if(!horiz){clipAttr.x=chart.plotHeight-clipAttr.x;}}else{clipAttr={x:0,y:inverted?pxPosMax:pxPosMin,width:chartSizeMax,height:pxRange};if(horiz){clipAttr.y=chart.plotWidth-clipAttr.y;}}/// VML SUPPPORT\nif(inverted&&renderer.isVML){if(axis.isXAxis){clipAttr={x:0,y:reversed?pxPosMin:pxPosMax,height:clipAttr.width,width:chart.chartWidth};}else{clipAttr={x:clipAttr.y-chart.plotLeft-chart.spacingBox.x,y:0,width:clipAttr.height,height:chart.chartHeight};}}/// END OF VML SUPPORT\nif(clips[i]){clips[i].animate(clipAttr);}else{clips[i]=renderer.clipRect(clipAttr);if(graph){series['zone-graph-'+i].clip(clips[i]);}if(area){series['zone-area-'+i].clip(clips[i]);}}// if this zone extends out of the axis, ignore the others\nignoreZones=threshold.value>extremes.max;});this.clips=clips;}},/**\n             * Initialize and perform group inversion on series.group and\n             * series.markerGroup.\n             *\n             * @private\n             */invertGroups:function invertGroups(inverted){var series=this,chart=series.chart,remover;function setInvert(){each(['group','markerGroup'],function(groupName){if(series[groupName]){// VML/HTML needs explicit attributes for flipping\nif(chart.renderer.isVML){series[groupName].attr({width:series.yAxis.len,height:series.xAxis.len});}series[groupName].width=series.yAxis.len;series[groupName].height=series.xAxis.len;series[groupName].invert(inverted);}});}// Pie, go away (#1736)\nif(!series.xAxis){return;}// A fixed size is needed for inversion to work\nremover=addEvent(chart,'resize',setInvert);addEvent(series,'destroy',remover);// Do it now\nsetInvert(inverted);// do it now\n// On subsequent render and redraw, just do setInvert without setting up events again\nseries.invertGroups=setInvert;},/**\n             * General abstraction for creating plot groups like series.group,\n             * series.dataLabelsGroup and series.markerGroup. On subsequent calls, the\n             * group will only be adjusted to the updated plot size.\n             *\n             * @private\n             */plotGroup:function plotGroup(prop,name,visibility,zIndex,parent){var group=this[prop],isNew=!group;// Generate it on first call\nif(isNew){this[prop]=group=this.chart.renderer.g().attr({zIndex:zIndex||0.1// IE8 and pointer logic use this\n}).add(parent);}// Add the class names, and replace existing ones as response to\n// Series.update (#6660)\ngroup.addClass('highcharts-'+name+' highcharts-series-'+this.index+' highcharts-'+this.type+'-series '+'highcharts-color-'+this.colorIndex+' '+(this.options.className||''),true);// Place it on first and subsequent (redraw) calls\ngroup.attr({visibility:visibility})[isNew?'attr':'animate'](this.getPlotBox());return group;},/**\n             * Get the translation and scale for the plot area of this series.\n             */getPlotBox:function getPlotBox(){var chart=this.chart,xAxis=this.xAxis,yAxis=this.yAxis;// Swap axes for inverted (#2339)\nif(chart.inverted){xAxis=yAxis;yAxis=this.xAxis;}return{translateX:xAxis?xAxis.left:chart.plotLeft,translateY:yAxis?yAxis.top:chart.plotTop,scaleX:1,// #1623\nscaleY:1};},/**\n             * Render the graph and markers. Called internally when first rendering and\n             * later when redrawing the chart. This function can be extended in plugins,\n             * but normally shouldn't be called directly.\n             */render:function render(){var series=this,chart=series.chart,group,options=series.options,// Animation doesn't work in IE8 quirks when the group div is\n// hidden, and looks bad in other oldIE\nanimDuration=!!series.animate&&chart.renderer.isSVG&&animObject(options.animation).duration,visibility=series.visible?'inherit':'hidden',// #2597\nzIndex=options.zIndex,hasRendered=series.hasRendered,chartSeriesGroup=chart.seriesGroup,inverted=chart.inverted;// the group\ngroup=series.plotGroup('group','series',visibility,zIndex,chartSeriesGroup);series.markerGroup=series.plotGroup('markerGroup','markers',visibility,zIndex,chartSeriesGroup);// initiate the animation\nif(animDuration){series.animate(true);}// SVGRenderer needs to know this before drawing elements (#1089, #1795)\ngroup.inverted=series.isCartesian?inverted:false;// draw the graph if any\nif(series.drawGraph){series.drawGraph();series.applyZones();}/*\t\teach(series.points, function (point) {\n                \t\t\tif (point.redraw) {\n                \t\t\t\tpoint.redraw();\n                \t\t\t}\n                \t\t});*/// draw the data labels (inn pies they go before the points)\nif(series.drawDataLabels){series.drawDataLabels();}// draw the points\nif(series.visible){series.drawPoints();}// draw the mouse tracking area\nif(series.drawTracker&&series.options.enableMouseTracking!==false){series.drawTracker();}// Handle inverted series and tracker groups\nseries.invertGroups(inverted);// Initial clipping, must be defined after inverting groups for VML.\n// Applies to columns etc. (#3839).\nif(options.clip!==false&&!series.sharedClipKey&&!hasRendered){group.clip(chart.clipRect);}// Run the animation\nif(animDuration){series.animate();}// Call the afterAnimate function on animation complete (but don't\n// overwrite the animation.complete option which should be available to\n// the user).\nif(!hasRendered){series.animationTimeout=syncTimeout(function(){series.afterAnimate();},animDuration);}series.isDirty=false;// means data is in accordance with what you see\n// (See #322) series.isDirty = series.isDirtyData = false; // means\n// data is in accordance with what you see\nseries.hasRendered=true;},/**\n             * Redraw the series. This function is called internally from `chart.redraw`\n             * and normally shouldn't be called directly.\n             *\n             * @private\n             */redraw:function redraw(){var series=this,chart=series.chart,// cache it here as it is set to false in render, but used after\nwasDirty=series.isDirty||series.isDirtyData,group=series.group,xAxis=series.xAxis,yAxis=series.yAxis;// reposition on resize\nif(group){if(chart.inverted){group.attr({width:chart.plotWidth,height:chart.plotHeight});}group.animate({translateX:pick(xAxis&&xAxis.left,chart.plotLeft),translateY:pick(yAxis&&yAxis.top,chart.plotTop)});}series.translate();series.render();if(wasDirty){// #3868, #3945\ndelete this.kdTree;}},kdAxisArray:['clientX','plotY'],searchPoint:function searchPoint(e,compareX){var series=this,xAxis=series.xAxis,yAxis=series.yAxis,inverted=series.chart.inverted;return this.searchKDTree({clientX:inverted?xAxis.len-e.chartY+xAxis.pos:e.chartX-xAxis.pos,plotY:inverted?yAxis.len-e.chartX+yAxis.pos:e.chartY-yAxis.pos},compareX);},/**\n             * Build the k-d-tree that is used by mouse and touch interaction to get the\n             * closest point. Line-like series typically have a one-dimensional tree\n             * where points are searched along the X axis, while scatter-like series\n             * typically search in two dimensions, X and Y.\n             *\n             * @private\n             */buildKDTree:function buildKDTree(){// Prevent multiple k-d-trees from being built simultaneously (#6235)\nthis.buildingKdTree=true;var series=this,dimensions=series.options.findNearestPointBy.indexOf('y')>-1?2:1;// Internal function\nfunction _kdtree(points,depth,dimensions){var axis,median,length=points&&points.length;if(length){// alternate between the axis\naxis=series.kdAxisArray[depth%dimensions];// sort point array\npoints.sort(function(a,b){return a[axis]-b[axis];});median=Math.floor(length/2);// build and return nod\nreturn{point:points[median],left:_kdtree(points.slice(0,median),depth+1,dimensions),right:_kdtree(points.slice(median+1),depth+1,dimensions)};}}// Start the recursive build process with a clone of the points array\n// and null points filtered out (#3873)\nfunction startRecursive(){series.kdTree=_kdtree(series.getValidPoints(null,// For line-type series restrict to plot area, but\n// column-type series not (#3916, #4511)\n!series.directTouch),dimensions,dimensions);series.buildingKdTree=false;}delete series.kdTree;// For testing tooltips, don't build async\nsyncTimeout(startRecursive,series.options.kdNow?0:1);},searchKDTree:function searchKDTree(point,compareX){var series=this,kdX=this.kdAxisArray[0],kdY=this.kdAxisArray[1],kdComparer=compareX?'distX':'dist',kdDimensions=series.options.findNearestPointBy.indexOf('y')>-1?2:1;// Set the one and two dimensional distance on the point object\nfunction setDistance(p1,p2){var x=defined(p1[kdX])&&defined(p2[kdX])?Math.pow(p1[kdX]-p2[kdX],2):null,y=defined(p1[kdY])&&defined(p2[kdY])?Math.pow(p1[kdY]-p2[kdY],2):null,r=(x||0)+(y||0);p2.dist=defined(r)?Math.sqrt(r):Number.MAX_VALUE;p2.distX=defined(x)?Math.sqrt(x):Number.MAX_VALUE;}function _search(search,tree,depth,dimensions){var point=tree.point,axis=series.kdAxisArray[depth%dimensions],tdist,sideA,sideB,ret=point,nPoint1,nPoint2;setDistance(search,point);// Pick side based on distance to splitting point\ntdist=search[axis]-point[axis];sideA=tdist<0?'left':'right';sideB=tdist<0?'right':'left';// End of tree\nif(tree[sideA]){nPoint1=_search(search,tree[sideA],depth+1,dimensions);ret=nPoint1[kdComparer]<ret[kdComparer]?nPoint1:point;}if(tree[sideB]){// compare distance to current best to splitting point to decide\n// wether to check side B or not\nif(Math.sqrt(tdist*tdist)<ret[kdComparer]){nPoint2=_search(search,tree[sideB],depth+1,dimensions);ret=nPoint2[kdComparer]<ret[kdComparer]?nPoint2:ret;}}return ret;}if(!this.kdTree&&!this.buildingKdTree){this.buildKDTree();}if(this.kdTree){return _search(point,this.kdTree,kdDimensions,kdDimensions);}}});// end Series prototype\n})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var Axis=H.Axis,Chart=H.Chart,correctFloat=H.correctFloat,defined=H.defined,destroyObjectProperties=H.destroyObjectProperties,each=H.each,format=H.format,objectEach=H.objectEach,pick=H.pick,Series=H.Series;/**\n         * The class for stacks. Each stack, on a specific X value and either negative\n         * or positive, has its own stack item.\n         *\n         * @class\n         */H.StackItem=function(axis,options,isNegative,x,stackOption){var inverted=axis.chart.inverted;this.axis=axis;// Tells if the stack is negative\nthis.isNegative=isNegative;// Save the options to be able to style the label\nthis.options=options;// Save the x value to be able to position the label later\nthis.x=x;// Initialize total value\nthis.total=null;// This will keep each points' extremes stored by series.index and point\n// index\nthis.points={};// Save the stack option on the series configuration object, and whether to\n// treat it as percent\nthis.stack=stackOption;this.leftCliff=0;this.rightCliff=0;// The align options and text align varies on whether the stack is negative\n// and if the chart is inverted or not.\n// First test the user supplied value, then use the dynamic.\nthis.alignOptions={align:options.align||(inverted?isNegative?'left':'right':'center'),verticalAlign:options.verticalAlign||(inverted?'middle':isNegative?'bottom':'top'),y:pick(options.y,inverted?4:isNegative?14:-6),x:pick(options.x,inverted?isNegative?-6:6:0)};this.textAlign=options.textAlign||(inverted?isNegative?'right':'left':'center');};H.StackItem.prototype={destroy:function destroy(){destroyObjectProperties(this,this.axis);},/**\n             * Renders the stack total label and adds it to the stack label group.\n             */render:function render(group){var options=this.options,formatOption=options.format,str=formatOption?format(formatOption,this):options.formatter.call(this);// format the text in the label\n// Change the text to reflect the new total and set visibility to hidden\n// in case the serie is hidden\nif(this.label){this.label.attr({text:str,visibility:'hidden'});// Create new label\n}else{this.label=this.axis.chart.renderer.text(str,null,null,options.useHTML).css(options.style).attr({align:this.textAlign,rotation:options.rotation,visibility:'hidden'// hidden until setOffset is called\n}).add(group);// add to the labels-group\n}},/**\n             * Sets the offset that the stack has from the x value and repositions the\n             * label.\n             */setOffset:function setOffset(xOffset,xWidth){var stackItem=this,axis=stackItem.axis,chart=axis.chart,// stack value translated mapped to chart coordinates\ny=axis.translate(axis.usePercentage?100:stackItem.total,0,0,0,1),yZero=axis.translate(0),// stack origin\nh=Math.abs(y-yZero),// stack height\nx=chart.xAxis[0].translate(stackItem.x)+xOffset,// stack x position\nstackBox=stackItem.getStackBox(chart,stackItem,x,y,xWidth,h),label=stackItem.label,alignAttr;if(label){// Align the label to the box\nlabel.align(stackItem.alignOptions,null,stackBox);// Set visibility (#678)\nalignAttr=label.alignAttr;label[stackItem.options.crop===false||chart.isInsidePlot(alignAttr.x,alignAttr.y)?'show':'hide'](true);}},getStackBox:function getStackBox(chart,stackItem,x,y,xWidth,h){var reversed=stackItem.axis.reversed,inverted=chart.inverted,plotHeight=chart.plotHeight,neg=stackItem.isNegative&&!reversed||!stackItem.isNegative&&reversed;// #4056\nreturn{// this is the box for the complete stack\nx:inverted?neg?y:y-h:x,y:inverted?plotHeight-x-xWidth:neg?plotHeight-y-h:plotHeight-y,width:inverted?h:xWidth,height:inverted?xWidth:h};}};/**\n         * Generate stacks for each series and calculate stacks total values\n         */Chart.prototype.getStacks=function(){var chart=this;// reset stacks for each yAxis\neach(chart.yAxis,function(axis){if(axis.stacks&&axis.hasVisibleSeries){axis.oldStacks=axis.stacks;}});each(chart.series,function(series){if(series.options.stacking&&(series.visible===true||chart.options.chart.ignoreHiddenSeries===false)){series.stackKey=series.type+pick(series.options.stack,'');}});};// Stacking methods defined on the Axis prototype\n/**\n         * Build the stacks from top down\n         */Axis.prototype.buildStacks=function(){var axisSeries=this.series,reversedStacks=pick(this.options.reversedStacks,true),len=axisSeries.length,i;if(!this.isXAxis){this.usePercentage=false;i=len;while(i--){axisSeries[reversedStacks?i:len-i-1].setStackedPoints();}// Loop up again to compute percent stack\nif(this.usePercentage){for(i=0;i<len;i++){axisSeries[i].setPercentStacks();}}}};Axis.prototype.renderStackTotals=function(){var axis=this,chart=axis.chart,renderer=chart.renderer,stacks=axis.stacks,stackTotalGroup=axis.stackTotalGroup;// Create a separate group for the stack total labels\nif(!stackTotalGroup){axis.stackTotalGroup=stackTotalGroup=renderer.g('stack-labels').attr({visibility:'visible',zIndex:6}).add();}// plotLeft/Top will change when y axis gets wider so we need to translate\n// the stackTotalGroup at every render call. See bug #506 and #516\nstackTotalGroup.translate(chart.plotLeft,chart.plotTop);// Render each stack total\nobjectEach(stacks,function(type){objectEach(type,function(stack){stack.render(stackTotalGroup);});});};/**\n         * Set all the stacks to initial states and destroy unused ones.\n         */Axis.prototype.resetStacks=function(){var axis=this,stacks=axis.stacks;if(!axis.isXAxis){objectEach(stacks,function(type){objectEach(type,function(stack,key){// Clean up memory after point deletion (#1044, #4320)\nif(stack.touched<axis.stacksTouched){stack.destroy();delete type[key];// Reset stacks\n}else{stack.total=null;stack.cum=null;}});});}};Axis.prototype.cleanStacks=function(){var stacks;if(!this.isXAxis){if(this.oldStacks){stacks=this.stacks=this.oldStacks;}// reset stacks\nobjectEach(stacks,function(type){objectEach(type,function(stack){stack.cum=stack.total;});});}};// Stacking methods defnied for Series prototype\n/**\n         * Adds series' points value to corresponding stack\n         */Series.prototype.setStackedPoints=function(){if(!this.options.stacking||this.visible!==true&&this.chart.options.chart.ignoreHiddenSeries!==false){return;}var series=this,xData=series.processedXData,yData=series.processedYData,stackedYData=[],yDataLength=yData.length,seriesOptions=series.options,threshold=seriesOptions.threshold,stackThreshold=seriesOptions.startFromThreshold?threshold:0,stackOption=seriesOptions.stack,stacking=seriesOptions.stacking,stackKey=series.stackKey,negKey='-'+stackKey,negStacks=series.negStacks,yAxis=series.yAxis,stacks=yAxis.stacks,oldStacks=yAxis.oldStacks,stackIndicator,isNegative,stack,other,key,pointKey,i,x,y;yAxis.stacksTouched+=1;// loop over the non-null y values and read them into a local array\nfor(i=0;i<yDataLength;i++){x=xData[i];y=yData[i];stackIndicator=series.getStackIndicator(stackIndicator,x,series.index);pointKey=stackIndicator.key;// Read stacked values into a stack based on the x value,\n// the sign of y and the stack key. Stacking is also handled for null\n// values (#739)\nisNegative=negStacks&&y<(stackThreshold?0:threshold);key=isNegative?negKey:stackKey;// Create empty object for this stack if it doesn't exist yet\nif(!stacks[key]){stacks[key]={};}// Initialize StackItem for this x\nif(!stacks[key][x]){if(oldStacks[key]&&oldStacks[key][x]){stacks[key][x]=oldStacks[key][x];stacks[key][x].total=null;}else{stacks[key][x]=new H.StackItem(yAxis,yAxis.options.stackLabels,isNegative,x,stackOption);}}// If the StackItem doesn't exist, create it first\nstack=stacks[key][x];if(y!==null){stack.points[pointKey]=stack.points[series.index]=[pick(stack.cum,stackThreshold)];// Record the base of the stack\nif(!defined(stack.cum)){stack.base=pointKey;}stack.touched=yAxis.stacksTouched;// In area charts, if there are multiple points on the same X value,\n// let the area fill the full span of those points\nif(stackIndicator.index>0&&series.singleStacks===false){stack.points[pointKey][0]=stack.points[series.index+','+x+',0'][0];}}// Add value to the stack total\nif(stacking==='percent'){// Percent stacked column, totals are the same for the positive and\n// negative stacks\nother=isNegative?stackKey:negKey;if(negStacks&&stacks[other]&&stacks[other][x]){other=stacks[other][x];stack.total=other.total=Math.max(other.total,stack.total)+Math.abs(y)||0;// Percent stacked areas\n}else{stack.total=correctFloat(stack.total+(Math.abs(y)||0));}}else{stack.total=correctFloat(stack.total+(y||0));}stack.cum=pick(stack.cum,stackThreshold)+(y||0);if(y!==null){stack.points[pointKey].push(stack.cum);stackedYData[i]=stack.cum;}}if(stacking==='percent'){yAxis.usePercentage=true;}this.stackedYData=stackedYData;// To be used in getExtremes\n// Reset old stacks\nyAxis.oldStacks={};};/**\n         * Iterate over all stacks and compute the absolute values to percent\n         */Series.prototype.setPercentStacks=function(){var series=this,stackKey=series.stackKey,stacks=series.yAxis.stacks,processedXData=series.processedXData,stackIndicator;each([stackKey,'-'+stackKey],function(key){var i=processedXData.length,x,stack,pointExtremes,totalFactor;while(i--){x=processedXData[i];stackIndicator=series.getStackIndicator(stackIndicator,x,series.index,key);stack=stacks[key]&&stacks[key][x];pointExtremes=stack&&stack.points[stackIndicator.key];if(pointExtremes){totalFactor=stack.total?100/stack.total:0;// Y bottom value\npointExtremes[0]=correctFloat(pointExtremes[0]*totalFactor);// Y value\npointExtremes[1]=correctFloat(pointExtremes[1]*totalFactor);series.stackedYData[i]=pointExtremes[1];}}});};/**\n         * Get stack indicator, according to it's x-value, to determine points with the\n         * same x-value\n         */Series.prototype.getStackIndicator=function(stackIndicator,x,index,key){// Update stack indicator, when:\n// first point in a stack || x changed || stack type (negative vs positive)\n// changed:\nif(!defined(stackIndicator)||stackIndicator.x!==x||key&&stackIndicator.key!==key){stackIndicator={x:x,index:0,key:key};}else{stackIndicator.index++;}stackIndicator.key=[index,x,stackIndicator.index].join(',');return stackIndicator;};})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var addEvent=H.addEvent,animate=H.animate,Axis=H.Axis,Chart=H.Chart,createElement=H.createElement,css=H.css,defined=H.defined,each=H.each,erase=H.erase,extend=H.extend,fireEvent=H.fireEvent,inArray=H.inArray,isNumber=H.isNumber,isObject=H.isObject,isArray=H.isArray,merge=H.merge,objectEach=H.objectEach,pick=H.pick,Point=H.Point,Series=H.Series,seriesTypes=H.seriesTypes,setAnimation=H.setAnimation,splat=H.splat;// Extend the Chart prototype for dynamic methods\nextend(Chart.prototype,/** @lends Highcharts.Chart.prototype */{/**\n             * Add a series to the chart after render time. Note that this method should\n             * never be used when adding data synchronously at chart render time, as it\n             * adds expense to the calculations and rendering. When adding data at the\n             * same time as the chart is initialized, add the series as a configuration\n             * option instead. With multiple axes, the `offset` is dynamically adjusted.\n             *\n             * @param  {SeriesOptions} options\n             *         The config options for the series.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after adding.\n             * @param  {AnimationOptions} animation\n             *         Whether to apply animation, and optionally animation\n             *         configuration.\n             *\n             * @return {Highcharts.Series}\n             *         The newly created series object.\n             *\n             * @sample highcharts/members/chart-addseries/\n             *         Add a series from a button\n             * @sample stock/members/chart-addseries/\n             *         Add a series in Highstock\n             */addSeries:function addSeries(options,redraw,animation){var series,chart=this;if(options){redraw=pick(redraw,true);// defaults to true\nfireEvent(chart,'addSeries',{options:options},function(){series=chart.initSeries(options);chart.isDirtyLegend=true;// the series array is out of sync with the display\nchart.linkSeries();if(redraw){chart.redraw(animation);}});}return series;},/**\n             * Add an axis to the chart after render time. Note that this method should\n             * never be used when adding data synchronously at chart render time, as it\n             * adds expense to the calculations and rendering. When adding data at the\n             * same time as the chart is initialized, add the axis as a configuration\n             * option instead.\n             * @param  {AxisOptions} options\n             *         The axis options.\n             * @param  {Boolean} [isX=false]\n             *         Whether it is an X axis or a value axis.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after adding.\n             * @param  {AnimationOptions} [animation=true]\n             *         Whether and how to apply animation in the redraw.\n             *\n             * @sample highcharts/members/chart-addaxis/ Add and remove axes\n             *\n             * @return {Axis}\n             *         The newly generated Axis object.\n             */addAxis:function addAxis(options,isX,redraw,animation){var key=isX?'xAxis':'yAxis',chartOptions=this.options,userOptions=merge(options,{index:this[key].length,isX:isX}),axis;axis=new Axis(this,userOptions);// Push the new axis options to the chart options\nchartOptions[key]=splat(chartOptions[key]||{});chartOptions[key].push(userOptions);if(pick(redraw,true)){this.redraw(animation);}return axis;},/**\n             * Dim the chart and show a loading text or symbol. Options for the loading\n             * screen are defined in {@link\n             * https://api.highcharts.com/highcharts/loading|the loading options}.\n             *\n             * @param  {String} str\n             *         An optional text to show in the loading label instead of the\n             *         default one. The default text is set in {@link\n             *         http://api.highcharts.com/highcharts/lang.loading|lang.loading}.\n             *\n             * @sample highcharts/members/chart-hideloading/\n             *         Show and hide loading from a button\n             * @sample highcharts/members/chart-showloading/\n             *         Apply different text labels\n             * @sample stock/members/chart-show-hide-loading/\n             *         Toggle loading in Highstock\n             */showLoading:function showLoading(str){var chart=this,options=chart.options,loadingDiv=chart.loadingDiv,loadingOptions=options.loading,setLoadingSize=function setLoadingSize(){if(loadingDiv){css(loadingDiv,{left:chart.plotLeft+'px',top:chart.plotTop+'px',width:chart.plotWidth+'px',height:chart.plotHeight+'px'});}};// create the layer at the first call\nif(!loadingDiv){chart.loadingDiv=loadingDiv=createElement('div',{className:'highcharts-loading highcharts-loading-hidden'},null,chart.container);chart.loadingSpan=createElement('span',{className:'highcharts-loading-inner'},null,loadingDiv);addEvent(chart,'redraw',setLoadingSize);// #1080\n}loadingDiv.className='highcharts-loading';// Update text\nchart.loadingSpan.innerHTML=str||options.lang.loading;// Update visuals\ncss(loadingDiv,extend(loadingOptions.style,{zIndex:10}));css(chart.loadingSpan,loadingOptions.labelStyle);// Show it\nif(!chart.loadingShown){css(loadingDiv,{opacity:0,display:''});animate(loadingDiv,{opacity:loadingOptions.style.opacity||0.5},{duration:loadingOptions.showDuration||0});}chart.loadingShown=true;setLoadingSize();},/**\n             * Hide the loading layer.\n             *\n             * @see    Highcharts.Chart#showLoading\n             * @sample highcharts/members/chart-hideloading/\n             *         Show and hide loading from a button\n             * @sample stock/members/chart-show-hide-loading/\n             *         Toggle loading in Highstock\n             */hideLoading:function hideLoading(){var options=this.options,loadingDiv=this.loadingDiv;if(loadingDiv){loadingDiv.className='highcharts-loading highcharts-loading-hidden';animate(loadingDiv,{opacity:0},{duration:options.loading.hideDuration||100,complete:function complete(){css(loadingDiv,{display:'none'});}});}this.loadingShown=false;},/**\n             * These properties cause isDirtyBox to be set to true when updating. Can be extended from plugins.\n             */propsRequireDirtyBox:['backgroundColor','borderColor','borderWidth','margin','marginTop','marginRight','marginBottom','marginLeft','spacing','spacingTop','spacingRight','spacingBottom','spacingLeft','borderRadius','plotBackgroundColor','plotBackgroundImage','plotBorderColor','plotBorderWidth','plotShadow','shadow'],/**\n             * These properties cause all series to be updated when updating. Can be\n             * extended from plugins.\n             */propsRequireUpdateSeries:['chart.inverted','chart.polar','chart.ignoreHiddenSeries','chart.type','colors','plotOptions','tooltip'],/**\n             * A generic function to update any element of the chart. Elements can be\n             * enabled and disabled, moved, re-styled, re-formatted etc.\n             *\n             * A special case is configuration objects that take arrays, for example\n             * {@link https://api.highcharts.com/highcharts/xAxis|xAxis},\n             * {@link https://api.highcharts.com/highcharts/yAxis|yAxis} or\n             * {@link https://api.highcharts.com/highcharts/series|series}. For these\n             * collections, an `id` option is used to map the new option set to an\n             * existing object. If an existing object of the same id is not found, the\n             * corresponding item is updated. So for example, running `chart.update`\n             * with a series item without an id, will cause the existing chart's series\n             * with the same index in the series array to be updated. When the\n             * `oneToOne` parameter is true, `chart.update` will also take care of\n             * adding and removing items from the collection. Read more under the\n             * parameter description below.\n             *\n             * See also the {@link https://api.highcharts.com/highcharts/responsive|\n             * responsive option set}. Switching between `responsive.rules` basically\n             * runs `chart.update` under the hood.\n             *\n             * @param  {Options} options\n             *         A configuration object for the new chart options.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart.\n             * @param  {Boolean} [oneToOne=false]\n             *         When `true`, the `series`, `xAxis` and `yAxis` collections will\n             *         be updated one to one, and items will be either added or removed\n             *         to match the new updated options. For example, if the chart has\n             *         two series and we call `chart.update` with a configuration\n             *         containing three series, one will be added. If we call\n             *         `chart.update` with one series, one will be removed. Setting an\n             *         empty `series` array will remove all series, but leaving out the\n             *         `series` property will leave all series untouched. If the series\n             *         have id's, the new series options will be matched by id, and the\n             *         remaining ones removed.\n             *\n             * @sample highcharts/members/chart-update/\n             *         Update chart geometry\n             */update:function update(options,redraw,oneToOne){var chart=this,adders={credits:'addCredits',title:'setTitle',subtitle:'setSubtitle'},optionsChart=options.chart,updateAllAxes,updateAllSeries,newWidth,newHeight,itemsForRemoval=[];// If the top-level chart option is present, some special updates are required\nif(optionsChart){merge(true,chart.options.chart,optionsChart);// Setter function\nif('className'in optionsChart){chart.setClassName(optionsChart.className);}if('inverted'in optionsChart||'polar'in optionsChart){// Parse options.chart.inverted and options.chart.polar together\n// with the available series.\nchart.propFromSeries();updateAllAxes=true;}if('alignTicks'in optionsChart){// #6452\nupdateAllAxes=true;}objectEach(optionsChart,function(val,key){if(inArray('chart.'+key,chart.propsRequireUpdateSeries)!==-1){updateAllSeries=true;}// Only dirty box\nif(inArray(key,chart.propsRequireDirtyBox)!==-1){chart.isDirtyBox=true;}});if('style'in optionsChart){chart.renderer.setStyle(optionsChart.style);}}// Moved up, because tooltip needs updated plotOptions (#6218)\nif(options.colors){this.options.colors=options.colors;}if(options.plotOptions){merge(true,this.options.plotOptions,options.plotOptions);}// Some option stuctures correspond one-to-one to chart objects that\n// have update methods, for example\n// options.credits => chart.credits\n// options.legend => chart.legend\n// options.title => chart.title\n// options.tooltip => chart.tooltip\n// options.subtitle => chart.subtitle\n// options.mapNavigation => chart.mapNavigation\n// options.navigator => chart.navigator\n// options.scrollbar => chart.scrollbar\nobjectEach(options,function(val,key){if(chart[key]&&typeof chart[key].update==='function'){chart[key].update(val,false);// If a one-to-one object does not exist, look for an adder function\n}else if(typeof chart[adders[key]]==='function'){chart[adders[key]](val);}if(key!=='chart'&&inArray(key,chart.propsRequireUpdateSeries)!==-1){updateAllSeries=true;}});// Setters for collections. For axes and series, each item is referred\n// by an id. If the id is not found, it defaults to the corresponding\n// item in the collection, so setting one series without an id, will\n// update the first series in the chart. Setting two series without\n// an id will update the first and the second respectively (#6019)\n// chart.update and responsive.\neach(['xAxis','yAxis','zAxis','series','colorAxis','pane'],function(coll){if(options[coll]){each(splat(options[coll]),function(newOptions,i){var item=defined(newOptions.id)&&chart.get(newOptions.id)||chart[coll][i];if(item&&item.coll===coll){item.update(newOptions,false);if(oneToOne){item.touched=true;}}// If oneToOne and no matching item is found, add one\nif(!item&&oneToOne){if(coll==='series'){chart.addSeries(newOptions,false).touched=true;}else if(coll==='xAxis'||coll==='yAxis'){chart.addAxis(newOptions,coll==='xAxis',false).touched=true;}}});// Add items for removal\nif(oneToOne){each(chart[coll],function(item){if(!item.touched){itemsForRemoval.push(item);}else{delete item.touched;}});}}});each(itemsForRemoval,function(item){item.remove(false);});if(updateAllAxes){each(chart.axes,function(axis){axis.update({},false);});}// Certain options require the whole series structure to be thrown away\n// and rebuilt\nif(updateAllSeries){each(chart.series,function(series){series.update({},false);});}// For loading, just update the options, do not redraw\nif(options.loading){merge(true,chart.options.loading,options.loading);}// Update size. Redraw is forced.\nnewWidth=optionsChart&&optionsChart.width;newHeight=optionsChart&&optionsChart.height;if(isNumber(newWidth)&&newWidth!==chart.chartWidth||isNumber(newHeight)&&newHeight!==chart.chartHeight){chart.setSize(newWidth,newHeight);}else if(pick(redraw,true)){chart.redraw();}},/**\n             * Shortcut to set the subtitle options. This can also be done from {@link\n             * Chart#update} or {@link Chart#setTitle}.\n             *\n             * @param  {SubtitleOptions} options\n             *         New subtitle options. The subtitle text itself is set by the\n             *         `options.text` property.\n             */setSubtitle:function setSubtitle(options){this.setTitle(undefined,options);}});// extend the Point prototype for dynamic methods\nextend(Point.prototype,/** @lends Highcharts.Point.prototype */{/**\n             * Update point with new options (typically x/y data) and optionally redraw\n             * the series.\n             *\n             * @param  {Object} options\n             *         The point options. Point options are handled as described under\n             *         the `series<type>.data` item for each series type. For example\n             *         for a line series, if options is a single number, the point will\n             *         be given that number as the main y value. If it is an array, it\n             *         will be interpreted as x and y values respectively. If it is an\n             *         object, advanced options are applied.\n             * @param  {Boolean} [redraw=true]\n             *          Whether to redraw the chart after the point is updated. If doing\n             *          more operations on the chart, it is best practice to set\n             *          `redraw` to false and call `chart.redraw()` after.\n             * @param  {AnimationOptions} [animation=true]\n             *         Whether to apply animation, and optionally animation\n             *         configuration.\n             *\n             * @sample highcharts/members/point-update-column/\n             *         Update column value\n             * @sample highcharts/members/point-update-pie/\n             *         Update pie slice\n             * @sample maps/members/point-update/\n             *         Update map area value in Highmaps\n             */update:function update(options,redraw,animation,runEvent){var point=this,series=point.series,graphic=point.graphic,i,chart=series.chart,seriesOptions=series.options;redraw=pick(redraw,true);function update(){point.applyOptions(options);// Update visuals\nif(point.y===null&&graphic){// #4146\npoint.graphic=graphic.destroy();}if(isObject(options,true)){// Destroy so we can get new elements\nif(graphic&&graphic.element){// \"null\" is also a valid symbol\nif(options&&options.marker&&options.marker.symbol!==undefined){point.graphic=graphic.destroy();}}if(options&&options.dataLabels&&point.dataLabel){// #2468\npoint.dataLabel=point.dataLabel.destroy();}}// record changes in the parallel arrays\ni=point.index;series.updateParallelArrays(point,i);// Record the options to options.data. If the old or the new config\n// is an object, use point options, otherwise use raw options\n// (#4701, #4916).\nseriesOptions.data[i]=isObject(seriesOptions.data[i],true)||isObject(options,true)?point.options:options;// redraw\nseries.isDirty=series.isDirtyData=true;if(!series.fixedBox&&series.hasCartesianSeries){// #1906, #2320\nchart.isDirtyBox=true;}if(seriesOptions.legendType==='point'){// #1831, #1885\nchart.isDirtyLegend=true;}if(redraw){chart.redraw(animation);}}// Fire the event with a default handler of doing the update\nif(runEvent===false){// When called from setData\nupdate();}else{point.firePointEvent('update',{options:options},update);}},/**\n             * Remove a point and optionally redraw the series and if necessary the axes\n             * @param  {Boolean} redraw\n             *         Whether to redraw the chart or wait for an explicit call. When\n             *         doing more operations on the chart, for example running\n             *         `point.remove()` in a loop, it is best practice to set `redraw`\n             *         to false and call `chart.redraw()` after.\n             * @param  {AnimationOptions} [animation=false]\n             *         Whether to apply animation, and optionally animation\n             *         configuration.\n             *\n             * @sample highcharts/plotoptions/series-point-events-remove/\n             *         Remove point and confirm\n             * @sample highcharts/members/point-remove/\n             *         Remove pie slice\n             * @sample maps/members/point-remove/\n             *         Remove selected points in Highmaps\n             */remove:function remove(redraw,animation){this.series.removePoint(inArray(this,this.series.data),redraw,animation);}});// Extend the series prototype for dynamic methods\nextend(Series.prototype,/** @lends Series.prototype */{/**\n             * Add a point to the series after render time. The point can be added at\n             * the end, or by giving it an X value, to the start or in the middle of the\n             * series.\n             *\n             * @param  {Number|Array|Object} options\n             *         The point options. If options is a single number, a point with\n             *         that y value is appended to the series.If it is an array, it will\n             *         be interpreted as x and y values respectively. If it is an\n             *         object, advanced options as outlined under `series.data` are\n             *         applied.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after the point is added. When adding\n             *         more than one point, it is highly recommended that the redraw\n             *         option be set to false, and instead {@link Chart#redraw}\n             *         is explicitly called after the adding of points is finished.\n             *         Otherwise, the chart will redraw after adding each point.\n             * @param  {Boolean} [shift=false]\n             *         If true, a point is shifted off the start of the series as one is\n             *         appended to the end.\n             * @param  {AnimationOptions} [animation]\n             *         Whether to apply animation, and optionally animation\n             *         configuration.\n             *\n             * @sample highcharts/members/series-addpoint-append/\n             *         Append point\n             * @sample highcharts/members/series-addpoint-append-and-shift/\n             *         Append and shift\n             * @sample highcharts/members/series-addpoint-x-and-y/\n             *         Both X and Y values given\n             * @sample highcharts/members/series-addpoint-pie/\n             *         Append pie slice\n             * @sample stock/members/series-addpoint/\n             *         Append 100 points in Highstock\n             * @sample stock/members/series-addpoint-shift/\n             *         Append and shift in Highstock\n             * @sample maps/members/series-addpoint/\n             *         Add a point in Highmaps\n             */addPoint:function addPoint(options,redraw,shift,animation){var series=this,seriesOptions=series.options,data=series.data,chart=series.chart,xAxis=series.xAxis,names=xAxis&&xAxis.hasNames&&xAxis.names,dataOptions=seriesOptions.data,point,isInTheMiddle,xData=series.xData,i,x;// Optional redraw, defaults to true\nredraw=pick(redraw,true);// Get options and push the point to xData, yData and series.options. In series.generatePoints\n// the Point instance will be created on demand and pushed to the series.data array.\npoint={series:series};series.pointClass.prototype.applyOptions.apply(point,[options]);x=point.x;// Get the insertion point\ni=xData.length;if(series.requireSorting&&x<xData[i-1]){isInTheMiddle=true;while(i&&xData[i-1]>x){i--;}}series.updateParallelArrays(point,'splice',i,0,0);// insert undefined item\nseries.updateParallelArrays(point,i);// update it\nif(names&&point.name){names[x]=point.name;}dataOptions.splice(i,0,options);if(isInTheMiddle){series.data.splice(i,0,null);series.processData();}// Generate points to be added to the legend (#1329)\nif(seriesOptions.legendType==='point'){series.generatePoints();}// Shift the first point off the parallel arrays\nif(shift){if(data[0]&&data[0].remove){data[0].remove(false);}else{data.shift();series.updateParallelArrays(point,'shift');dataOptions.shift();}}// redraw\nseries.isDirty=true;series.isDirtyData=true;if(redraw){chart.redraw(animation);// Animation is set anyway on redraw, #5665\n}},/**\n             * Remove a point from the series. Unlike the {@link Highcharts.Point#remove}\n             * method, this can also be done on a point that is not instanciated because\n             * it is outside the view or subject to Highstock data grouping.\n             *\n             * @param  {Number} i\n             *         The index of the point in the {@link Highcharts.Series.data|data}\n             *         array.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after the point is added. When\n             *         removing more than one point, it is highly recommended that the\n             *         `redraw` option be set to `false`, and instead {@link\n             *         Highcharts.Chart#redraw} is explicitly called after the adding of\n             *         points is finished.\n             * @param  {AnimationOptions} [animation]\n             *         Whether and optionally how the series should be animated.\n             *\n             * @sample highcharts/members/series-removepoint/\n             *         Remove cropped point\n             */removePoint:function removePoint(i,redraw,animation){var series=this,data=series.data,point=data[i],points=series.points,chart=series.chart,remove=function remove(){if(points&&points.length===data.length){// #4935\npoints.splice(i,1);}data.splice(i,1);series.options.data.splice(i,1);series.updateParallelArrays(point||{series:series},'splice',i,1);if(point){point.destroy();}// redraw\nseries.isDirty=true;series.isDirtyData=true;if(redraw){chart.redraw();}};setAnimation(animation,chart);redraw=pick(redraw,true);// Fire the event with a default handler of removing the point\nif(point){point.firePointEvent('remove',null,remove);}else{remove();}},/**\n             * Remove a series and optionally redraw the chart.\n             *\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart or wait for an explicit call to\n             *         {@link Highcharts.Chart#redraw}.\n             * @param  {AnimationOptions} [animation]\n             *         Whether to apply animation, and optionally animation\n             *         configuration\n             * @param  {Boolean} [withEvent=true]\n             *         Used internally, whether to fire the series `remove` event.\n             *\n             * @sample highcharts/members/series-remove/\n             *         Remove first series from a button\n             */remove:function remove(redraw,animation,withEvent){var series=this,chart=series.chart;function remove(){// Destroy elements\nseries.destroy();// Redraw\nchart.isDirtyLegend=chart.isDirtyBox=true;chart.linkSeries();if(pick(redraw,true)){chart.redraw(animation);}}// Fire the event with a default handler of removing the point\nif(withEvent!==false){fireEvent(series,'remove',null,remove);}else{remove();}},/**\n             * Update the series with a new set of options. For a clean and precise\n             * handling of new options, all methods and elements from the series are\n             * removed, and it is initiated from scratch. Therefore, this method is more\n             * performance expensive than some other utility methods like {@link\n             * Series#setData} or {@link Series#setVisible}.\n             *\n             * @param  {SeriesOptions} options\n             *         New options that will be merged with the series' existing\n             *         options.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after the series is altered. If doing\n             *         more operations on the chart, it is a good idea to set redraw to\n             *         false and call {@link Chart#redraw} after.\n             *\n             * @sample highcharts/members/series-update/\n             *         Updating series options\n             * @sample maps/members/series-update/\n             *         Update series options in Highmaps\n             */update:function update(newOptions,redraw){var series=this,chart=series.chart,// must use user options when changing type because series.options\n// is merged in with type specific plotOptions\noldOptions=series.userOptions,oldType=series.oldType||series.type,newType=newOptions.type||oldOptions.type||chart.options.chart.type,proto=seriesTypes[oldType].prototype,n,preserve=['group','markerGroup','dataLabelsGroup','navigatorSeries','baseSeries'],// Animation must be enabled when calling update before the initial\n// animation has first run. This happens when calling update\n// directly after chart initialization, or when applying responsive\n// rules (#6912).\nanimation=series.finishedAnimating&&{animation:false};// Running Series.update to update the data only is an intuitive usage,\n// so we want to make sure that when used like this, we run the\n// cheaper setData function and allow animation instead of completely\n// recreating the series instance.\nif(Object.keys&&Object.keys(newOptions).toString()==='data'){return this.setData(newOptions.data,redraw);}// If we're changing type or zIndex, create new groups (#3380, #3404)\nif(newType&&newType!==oldType||newOptions.zIndex!==undefined){preserve.length=0;}// Make sure groups are not destroyed (#3094)\neach(preserve,function(prop){preserve[prop]=series[prop];delete series[prop];});// Do the merge, with some forced options\nnewOptions=merge(oldOptions,animation,{index:series.index,pointStart:series.xData[0]// when updating after addPoint\n},{data:series.options.data},newOptions);// Destroy the series and delete all properties. Reinsert all methods\n// and properties from the new type prototype (#2270, #3719)\nseries.remove(false,null,false);for(n in proto){series[n]=undefined;}extend(series,seriesTypes[newType||oldType].prototype);// Re-register groups (#3094) and other preserved properties\neach(preserve,function(prop){series[prop]=preserve[prop];});series.init(chart,newOptions);series.oldType=oldType;chart.linkSeries();// Links are lost in series.remove (#3028)\nif(pick(redraw,true)){chart.redraw(false);}}});// Extend the Axis.prototype for dynamic methods\nextend(Axis.prototype,/** @lends Highcharts.Axis.prototype */{/**\n             * Update an axis object with a new set of options. The options are merged\n             * with the existing options, so only new or altered options need to be\n             * specified.\n             *\n             * @param  {Object} options\n             *         The new options that will be merged in with existing options on\n             *         the axis.\n             * @sample highcharts/members/axis-update/ Axis update demo\n             */update:function update(options,redraw){var chart=this.chart;options=chart.options[this.coll][this.options.index]=merge(this.userOptions,options);this.destroy(true);this.init(chart,extend(options,{events:undefined}));chart.isDirtyBox=true;if(pick(redraw,true)){chart.redraw();}},/**\n             * Remove the axis from the chart.\n             *\n             * @param {Boolean} [redraw=true] Whether to redraw the chart following the\n             * remove.\n             *\n             * @sample highcharts/members/chart-addaxis/ Add and remove axes\n             */remove:function remove(redraw){var chart=this.chart,key=this.coll,// xAxis or yAxis\naxisSeries=this.series,i=axisSeries.length;// Remove associated series (#2687)\nwhile(i--){if(axisSeries[i]){axisSeries[i].remove(false);}}// Remove the axis\nerase(chart.axes,this);erase(chart[key],this);if(isArray(chart.options[key])){chart.options[key].splice(this.options.index,1);}else{// color axis, #6488\ndelete chart.options[key];}each(chart[key],function(axis,i){// Re-index, #1706\naxis.options.index=i;});this.destroy();chart.isDirtyBox=true;if(pick(redraw,true)){chart.redraw();}},/**\n             * Update the axis title by options after render time.\n             *\n             * @param  {TitleOptions} titleOptions\n             *         The additional title options.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after setting the title.\n             * @sample highcharts/members/axis-settitle/ Set a new Y axis title\n             */setTitle:function setTitle(titleOptions,redraw){this.update({title:titleOptions},redraw);},/**\n             * Set new axis categories and optionally redraw.\n             * @param {Array.<String>} categories - The new categories.\n             * @param {Boolean} [redraw=true] - Whether to redraw the chart.\n             * @sample highcharts/members/axis-setcategories/ Set categories by click on\n             * a button\n             */setCategories:function setCategories(categories,redraw){this.update({categories:categories},redraw);}});})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var color=H.color,each=H.each,LegendSymbolMixin=H.LegendSymbolMixin,map=H.map,pick=H.pick,Series=H.Series,seriesType=H.seriesType;/**\n         * Area series type.\n         * @constructor seriesTypes.area\n         * @extends {Series}\n         *//**\n         * @extends {plotOptions.line}\n         * @optionparent plotOptions.area\n         */seriesType('area','line',{/**\n             * When this is true, the series will not cause the Y axis to cross\n             * the zero plane (or [threshold](#plotOptions.series.threshold) option)\n             * unless the data actually crosses the plane.\n             *\n             * For example, if `softThreshold` is `false`, a series of 0, 1, 2,\n             * 3 will make the Y axis show negative values according to the `minPadding`\n             * option. If `softThreshold` is `true`, the Y axis starts at 0.\n             *\n             * @type {Boolean}\n             * @default false\n             * @since 4.1.9\n             * @product highcharts highstock\n             */softThreshold:false,/**\n             * The Y axis value to serve as the base for the area, for distinguishing\n             * between values above and below a threshold. If `null`, the area\n             * behaves like a line series with fill between the graph and the Y\n             * axis minimum.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/area-threshold/ A threshold of 100\n             * @default 0\n             * @since 2.0\n             * @product highcharts highstock\n             */threshold:0// trackByArea: false,\n// lineColor: null, // overrides color, but lets fillColor be unaltered\n// fillOpacity: 0.75,\n// fillColor: null\n},/** @lends seriesTypes.area.prototype */{singleStacks:false,/**\n             * Return an array of stacked points, where null and missing points are replaced by\n             * dummy points in order for gaps to be drawn correctly in stacks.\n             */getStackPoints:function getStackPoints(points){var series=this,segment=[],keys=[],xAxis=this.xAxis,yAxis=this.yAxis,stack=yAxis.stacks[this.stackKey],pointMap={},seriesIndex=series.index,yAxisSeries=yAxis.series,seriesLength=yAxisSeries.length,visibleSeries,upOrDown=pick(yAxis.options.reversedStacks,true)?1:-1,i;points=points||this.points;if(this.options.stacking){// Create a map where we can quickly look up the points by their X value.\nfor(i=0;i<points.length;i++){pointMap[points[i].x]=points[i];}// Sort the keys (#1651)\nH.objectEach(stack,function(stackX,x){if(stackX.total!==null){// nulled after switching between grouping and not (#1651, #2336)\nkeys.push(x);}});keys.sort(function(a,b){return a-b;});visibleSeries=map(yAxisSeries,function(){return this.visible;});each(keys,function(x,idx){var y=0,stackPoint,stackedValues;if(pointMap[x]&&!pointMap[x].isNull){segment.push(pointMap[x]);// Find left and right cliff. -1 goes left, 1 goes right.\neach([-1,1],function(direction){var nullName=direction===1?'rightNull':'leftNull',cliffName=direction===1?'rightCliff':'leftCliff',cliff=0,otherStack=stack[keys[idx+direction]];// If there is a stack next to this one, to the left or to the right...\nif(otherStack){i=seriesIndex;while(i>=0&&i<seriesLength){// Can go either up or down, depending on reversedStacks\nstackPoint=otherStack.points[i];if(!stackPoint){// If the next point in this series is missing, mark the point\n// with point.leftNull or point.rightNull = true.\nif(i===seriesIndex){pointMap[x][nullName]=true;// If there are missing points in the next stack in any of the\n// series below this one, we need to substract the missing values\n// and add a hiatus to the left or right.\n}else if(visibleSeries[i]){stackedValues=stack[x].points[i];if(stackedValues){cliff-=stackedValues[1]-stackedValues[0];}}}// When reversedStacks is true, loop up, else loop down\ni+=upOrDown;}}pointMap[x][cliffName]=cliff;});// There is no point for this X value in this series, so we\n// insert a dummy point in order for the areas to be drawn\n// correctly.\n}else{// Loop down the stack to find the series below this one that has\n// a value (#1991)\ni=seriesIndex;while(i>=0&&i<seriesLength){stackPoint=stack[x].points[i];if(stackPoint){y=stackPoint[1];break;}// When reversedStacks is true, loop up, else loop down\ni+=upOrDown;}y=yAxis.translate(y,0,1,0,1);// #6272\nsegment.push({isNull:true,plotX:xAxis.translate(x,0,0,0,1),// #6272\nx:x,plotY:y,yBottom:y});}});}return segment;},getGraphPath:function getGraphPath(points){var getGraphPath=Series.prototype.getGraphPath,graphPath,options=this.options,stacking=options.stacking,yAxis=this.yAxis,topPath,//topPoints = [],\nbottomPath,bottomPoints=[],graphPoints=[],seriesIndex=this.index,i,areaPath,plotX,stacks=yAxis.stacks[this.stackKey],threshold=options.threshold,translatedThreshold=yAxis.getThreshold(options.threshold),isNull,yBottom,connectNulls=options.connectNulls||stacking==='percent',/**\n                     * To display null points in underlying stacked series, this series graph must be\n                     * broken, and the area also fall down to fill the gap left by the null point. #2069\n                     */addDummyPoints=function addDummyPoints(i,otherI,side){var point=points[i],stackedValues=stacking&&stacks[point.x].points[seriesIndex],nullVal=point[side+'Null']||0,cliffVal=point[side+'Cliff']||0,top,bottom,isNull=true;if(cliffVal||nullVal){top=(nullVal?stackedValues[0]:stackedValues[1])+cliffVal;bottom=stackedValues[0]+cliffVal;isNull=!!nullVal;}else if(!stacking&&points[otherI]&&points[otherI].isNull){top=bottom=threshold;}// Add to the top and bottom line of the area\nif(top!==undefined){graphPoints.push({plotX:plotX,plotY:top===null?translatedThreshold:yAxis.getThreshold(top),isNull:isNull,isCliff:true});bottomPoints.push({plotX:plotX,plotY:bottom===null?translatedThreshold:yAxis.getThreshold(bottom),doCurve:false// #1041, gaps in areaspline areas\n});}};// Find what points to use\npoints=points||this.points;// Fill in missing points\nif(stacking){points=this.getStackPoints(points);}for(i=0;i<points.length;i++){isNull=points[i].isNull;plotX=pick(points[i].rectPlotX,points[i].plotX);yBottom=pick(points[i].yBottom,translatedThreshold);if(!isNull||connectNulls){if(!connectNulls){addDummyPoints(i,i-1,'left');}if(!(isNull&&!stacking&&connectNulls)){// Skip null point when stacking is false and connectNulls true\ngraphPoints.push(points[i]);bottomPoints.push({x:i,plotX:plotX,plotY:yBottom});}if(!connectNulls){addDummyPoints(i,i+1,'right');}}}topPath=getGraphPath.call(this,graphPoints,true,true);bottomPoints.reversed=true;bottomPath=getGraphPath.call(this,bottomPoints,true,true);if(bottomPath.length){bottomPath[0]='L';}areaPath=topPath.concat(bottomPath);graphPath=getGraphPath.call(this,graphPoints,false,connectNulls);// TODO: don't set leftCliff and rightCliff when connectNulls?\nareaPath.xMap=topPath.xMap;this.areaPath=areaPath;return graphPath;},/**\n             * Draw the graph and the underlying area. This method calls the Series base\n             * function and adds the area. The areaPath is calculated in the getSegmentPath\n             * method called from Series.prototype.drawGraph.\n             */drawGraph:function drawGraph(){// Define or reset areaPath\nthis.areaPath=[];// Call the base method\nSeries.prototype.drawGraph.apply(this);// Define local variables\nvar series=this,areaPath=this.areaPath,options=this.options,zones=this.zones,props=[['area','highcharts-area',this.color,options.fillColor]];// area name, main color, fill color\neach(zones,function(zone,i){props.push(['zone-area-'+i,'highcharts-area highcharts-zone-area-'+i+' '+zone.className,zone.color||series.color,zone.fillColor||options.fillColor]);});each(props,function(prop){var areaKey=prop[0],area=series[areaKey];// Create or update the area\nif(area){// update\narea.endX=areaPath.xMap;area.animate({d:areaPath});}else{// create\narea=series[areaKey]=series.chart.renderer.path(areaPath).addClass(prop[1]).attr({fill:pick(prop[3],color(prop[2]).setOpacity(pick(options.fillOpacity,0.75)).get()),zIndex:0// #1069\n}).add(series.group);area.isArea=true;}area.startX=areaPath.xMap;area.shiftUnit=options.step?2:1;});},drawLegendSymbol:LegendSymbolMixin.drawRectangle});})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var pick=H.pick,seriesType=H.seriesType;/**\n         * Spline series type.\n         * @constructor seriesTypes.spline\n         * @extends {Series}\n         */seriesType('spline','line',{},/** @lends seriesTypes.spline.prototype */{/**\n             * Get the spline segment from a given point's previous neighbour to the given point\n             */getPointSpline:function getPointSpline(points,point,i){var smoothing=1.5,// 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc\ndenom=smoothing+1,plotX=point.plotX,plotY=point.plotY,lastPoint=points[i-1],nextPoint=points[i+1],leftContX,leftContY,rightContX,rightContY,ret;function doCurve(otherPoint){return otherPoint&&!otherPoint.isNull&&otherPoint.doCurve!==false&&!point.isCliff;// #6387, area splines next to null\n}// Find control points\nif(doCurve(lastPoint)&&doCurve(nextPoint)){var lastX=lastPoint.plotX,lastY=lastPoint.plotY,nextX=nextPoint.plotX,nextY=nextPoint.plotY,correction=0;leftContX=(smoothing*plotX+lastX)/denom;leftContY=(smoothing*plotY+lastY)/denom;rightContX=(smoothing*plotX+nextX)/denom;rightContY=(smoothing*plotY+nextY)/denom;// Have the two control points make a straight line through main point\nif(rightContX!==leftContX){// #5016, division by zero\ncorrection=(rightContY-leftContY)*(rightContX-plotX)/(rightContX-leftContX)+plotY-rightContY;}leftContY+=correction;rightContY+=correction;// to prevent false extremes, check that control points are between\n// neighbouring points' y values\nif(leftContY>lastY&&leftContY>plotY){leftContY=Math.max(lastY,plotY);rightContY=2*plotY-leftContY;// mirror of left control point\n}else if(leftContY<lastY&&leftContY<plotY){leftContY=Math.min(lastY,plotY);rightContY=2*plotY-leftContY;}if(rightContY>nextY&&rightContY>plotY){rightContY=Math.max(nextY,plotY);leftContY=2*plotY-rightContY;}else if(rightContY<nextY&&rightContY<plotY){rightContY=Math.min(nextY,plotY);leftContY=2*plotY-rightContY;}// record for drawing in next point\npoint.rightContX=rightContX;point.rightContY=rightContY;}// Visualize control points for debugging\n/*\n                if (leftContX) {\n                \tthis.chart.renderer.circle(leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop, 2)\n                \t\t.attr({\n                \t\t\tstroke: 'red',\n                \t\t\t'stroke-width': 2,\n                \t\t\tfill: 'none',\n                \t\t\tzIndex: 9\n                \t\t})\n                \t\t.add();\n                \tthis.chart.renderer.path(['M', leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop,\n                \t\t'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])\n                \t\t.attr({\n                \t\t\tstroke: 'red',\n                \t\t\t'stroke-width': 2,\n                \t\t\tzIndex: 9\n                \t\t})\n                \t\t.add();\n                }\n                if (rightContX) {\n                \tthis.chart.renderer.circle(rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop, 2)\n                \t\t.attr({\n                \t\t\tstroke: 'green',\n                \t\t\t'stroke-width': 2,\n                \t\t\tfill: 'none',\n                \t\t\tzIndex: 9\n                \t\t})\n                \t\t.add();\n                \tthis.chart.renderer.path(['M', rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop,\n                \t\t'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])\n                \t\t.attr({\n                \t\t\tstroke: 'green',\n                \t\t\t'stroke-width': 2,\n                \t\t\tzIndex: 9\n                \t\t})\n                \t\t.add();\n                }\n                // */ret=['C',pick(lastPoint.rightContX,lastPoint.plotX),pick(lastPoint.rightContY,lastPoint.plotY),pick(leftContX,plotX),pick(leftContY,plotY),plotX,plotY];lastPoint.rightContX=lastPoint.rightContY=null;// reset for updating series later\nreturn ret;}});})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var areaProto=H.seriesTypes.area.prototype,defaultPlotOptions=H.defaultPlotOptions,LegendSymbolMixin=H.LegendSymbolMixin,seriesType=H.seriesType;/**\n         * AreaSplineSeries object\n         */seriesType('areaspline','spline',defaultPlotOptions.area,{getStackPoints:areaProto.getStackPoints,getGraphPath:areaProto.getGraphPath,drawGraph:areaProto.drawGraph,drawLegendSymbol:LegendSymbolMixin.drawRectangle});})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var animObject=H.animObject,color=H.color,each=H.each,extend=H.extend,isNumber=H.isNumber,LegendSymbolMixin=H.LegendSymbolMixin,merge=H.merge,noop=H.noop,pick=H.pick,Series=H.Series,seriesType=H.seriesType,svg=H.svg;/**\n         * The column series type.\n         *\n         * @constructor seriesTypes.column\n         * @augments Series\n         *//**\n         * @extends {plotOptions.line}\n         * @optionparent plotOptions.column\n         * @excluding connectNulls,dashStyle,linecap,lineWidth,marker,connectEnds,step\n         */seriesType('column','line',{/**\n             * The corner radius of the border surrounding each column or bar.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/column-borderradius/ Rounded columns\n             * @default 0\n             * @product highcharts highstock\n             */borderRadius:0,//colorByPoint: undefined,\n/**\n             * When true, each column edge is rounded to its nearest pixel in order\n             * to render sharp on screen. In some cases, when there are a lot of\n             * densely packed columns, this leads to visible difference in column\n             * widths or distance between columns. In these cases, setting `crisp`\n             * to `false` may look better, even though each column is rendered\n             * blurry.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/column-crisp-false/ Crisp is false\n             * @default true\n             * @since 5.0.10\n             * @product highcharts highstock\n             */crisp:true,/**\n             * Padding between each value groups, in x axis units.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/column-grouppadding-default/ 0.2 by default\n             * @sample {highcharts} highcharts/plotoptions/column-grouppadding-none/ No group padding - all     columns are evenly spaced\n             * @default 0.2\n             * @product highcharts highstock\n             */groupPadding:0.2,//grouping: true,\n/**\n             */marker:null,// point options are specified in the base options\n/**\n             * Padding between each column or bar, in x axis units.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/column-pointpadding-default/ 0.1 by default\n             * @sample {highcharts} highcharts/plotoptions/column-pointpadding-025/ 0.25\n             * @sample {highcharts} highcharts/plotoptions/column-pointpadding-none/ 0 for tightly packed columns\n             * @default 0.1\n             * @product highcharts highstock\n             */pointPadding:0.1,//pointWidth: null,\n/**\n             * The minimal height for a column or width for a bar. By default,\n             * 0 values are not shown. To visualize a 0 (or close to zero) point,\n             * set the minimal point length to a pixel value like 3\\. In stacked\n             * column charts, minPointLength might not be respected for tightly\n             * packed values.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/column-minpointlength/ Zero base value\n             * @sample {highcharts} highcharts/plotoptions/column-minpointlength-pos-and-neg/ Positive and negative close to zero values\n             * @default 0\n             * @product highcharts highstock\n             */minPointLength:0,/**\n             * When the series contains less points than the crop threshold, all\n             * points are drawn, event if the points fall outside the visible plot\n             * area at the current zoom. The advantage of drawing all points (including\n             * markers and columns), is that animation is performed on updates.\n             * On the other hand, when the series contains more points than the\n             * crop threshold, the series data is cropped to only contain points\n             * that fall within the plot area. The advantage of cropping away invisible\n             * points is to increase performance on large series. .\n             *\n             * @type {Number}\n             * @default 50\n             * @product highcharts highstock\n             */cropThreshold:50,/**\n             * The X axis range that each point is valid for. This determines the\n             * width of the column. On a categorized axis, the range will be 1\n             * by default (one category unit). On linear and datetime axes, the\n             * range will be computed as the distance between the two closest data\n             * points.\n             *\n             * The default `null` means it is computed automatically, but this option\n             * can be used to override the automatic value.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/column-pointrange/\n             *         Set the point range to one day on a data set with one week\n             *         between the points\n             * @default null\n             * @since 2.3\n             * @product highcharts highstock\n             */pointRange:null,/**\n             */states:{/**\n                 * @extends plotOptions.series.states.hover\n                 * @excluding lineWidth,lineWidthPlus,marker\n                 * @product highcharts highstock\n                 */hover:{/**\n                     */halo:false,/**\n                     * How much to brighten the point on interaction. Requires the main\n                     * color to be defined in hex or rgb(a) format.\n                     *\n                     * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the hover brightening is by default replaced\n                     * with a fill-opacity set in the `.highcharts-point:hover` rule.\n                     *\n                     * @type {Number}\n                     * @sample {highcharts} highcharts/plotoptions/column-states-hover-brightness/ Brighten by 0.5\n                     * @default 0.1\n                     * @product highcharts highstock\n                     */brightness:0.1,/**\n                     */shadow:false},/**\n                 */select:{/**\n                     */color:'#cccccc',/**\n                     */borderColor:'#000000',/**\n                     */shadow:false}},/**\n             */dataLabels:{/**\n                 */align:null,// auto\n/**\n                 */verticalAlign:null,// auto\n/**\n                 */y:null},/**\n             * When this is true, the series will not cause the Y axis to cross\n             * the zero plane (or [threshold](#plotOptions.series.threshold) option)\n             * unless the data actually crosses the plane.\n             *\n             * For example, if `softThreshold` is `false`, a series of 0, 1, 2,\n             * 3 will make the Y axis show negative values according to the `minPadding`\n             * option. If `softThreshold` is `true`, the Y axis starts at 0.\n             *\n             * @type {Boolean}\n             * @default {highcharts} true\n             * @default {highstock} false\n             * @since 4.1.9\n             * @product highcharts highstock\n             */softThreshold:false,/**\n             */startFromThreshold:true,// false doesn't work well: http://jsfiddle.net/highcharts/hz8fopan/14/\n/**\n             */stickyTracking:false,/**\n             */tooltip:{/**\n                 */distance:6},/**\n             * The Y axis value to serve as the base for the columns, for distinguishing\n             * between values above and below a threshold. If `null`, the columns\n             * extend from the padding Y axis minimum.\n             *\n             * @type {Number}\n             * @default 0\n             * @since 2.0\n             * @product highcharts\n             */threshold:0,/**\n             * The color of the border surrounding each column or bar.\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the border stroke can be set with the `.highcharts-\n             * point` rule.\n             *\n             * @type {Color}\n             * @sample {highcharts} highcharts/plotoptions/column-bordercolor/ Dark gray border\n             * @default #ffffff\n             * @product highcharts highstock\n             */borderColor:'#ffffff'// borderWidth: 1\n},/** @lends seriesTypes.column.prototype */{cropShoulder:0,directTouch:true,// When tooltip is not shared, this series (and derivatives) requires direct touch/hover. KD-tree does not apply.\ntrackerGroups:['group','dataLabelsGroup'],negStacks:true,// use separate negative stacks, unlike area stacks where a negative\n// point is substracted from previous (#1910)\n/**\n             * Initialize the series. Extends the basic Series.init method by\n             * marking other series of the same type as dirty.\n             *\n             * @function #init\n             * @memberOf seriesTypes.column\n             *\n             */init:function init(){Series.prototype.init.apply(this,arguments);var series=this,chart=series.chart;// if the series is added dynamically, force redraw of other\n// series affected by a new column\nif(chart.hasRendered){each(chart.series,function(otherSeries){if(otherSeries.type===series.type){otherSeries.isDirty=true;}});}},/**\n             * Return the width and x offset of the columns adjusted for grouping, groupPadding, pointPadding,\n             * pointWidth etc.\n             */getColumnMetrics:function getColumnMetrics(){var series=this,options=series.options,xAxis=series.xAxis,yAxis=series.yAxis,reversedXAxis=xAxis.reversed,stackKey,stackGroups={},columnCount=0;// Get the total number of column type series.\n// This is called on every series. Consider moving this logic to a\n// chart.orderStacks() function and call it on init, addSeries and removeSeries\nif(options.grouping===false){columnCount=1;}else{each(series.chart.series,function(otherSeries){var otherOptions=otherSeries.options,otherYAxis=otherSeries.yAxis,columnIndex;if(otherSeries.type===series.type&&(otherSeries.visible||!series.chart.options.chart.ignoreHiddenSeries)&&yAxis.len===otherYAxis.len&&yAxis.pos===otherYAxis.pos){// #642, #2086\nif(otherOptions.stacking){stackKey=otherSeries.stackKey;if(stackGroups[stackKey]===undefined){stackGroups[stackKey]=columnCount++;}columnIndex=stackGroups[stackKey];}else if(otherOptions.grouping!==false){// #1162\ncolumnIndex=columnCount++;}otherSeries.columnIndex=columnIndex;}});}var categoryWidth=Math.min(Math.abs(xAxis.transA)*(xAxis.ordinalSlope||options.pointRange||xAxis.closestPointRange||xAxis.tickInterval||1),// #2610\nxAxis.len// #1535\n),groupPadding=categoryWidth*options.groupPadding,groupWidth=categoryWidth-2*groupPadding,pointOffsetWidth=groupWidth/(columnCount||1),pointWidth=Math.min(options.maxPointWidth||xAxis.len,pick(options.pointWidth,pointOffsetWidth*(1-2*options.pointPadding))),pointPadding=(pointOffsetWidth-pointWidth)/2,colIndex=(series.columnIndex||0)+(reversedXAxis?1:0),// #1251, #3737\npointXOffset=pointPadding+(groupPadding+colIndex*pointOffsetWidth-categoryWidth/2)*(reversedXAxis?-1:1);// Save it for reading in linked series (Error bars particularly)\nseries.columnMetrics={width:pointWidth,offset:pointXOffset};return series.columnMetrics;},/**\n             * Make the columns crisp. The edges are rounded to the nearest full pixel.\n             */crispCol:function crispCol(x,y,w,h){var chart=this.chart,borderWidth=this.borderWidth,xCrisp=-(borderWidth%2?0.5:0),yCrisp=borderWidth%2?0.5:1,right,bottom,fromTop;if(chart.inverted&&chart.renderer.isVML){yCrisp+=1;}// Horizontal. We need to first compute the exact right edge, then round it\n// and compute the width from there.\nif(this.options.crisp){right=Math.round(x+w)+xCrisp;x=Math.round(x)+xCrisp;w=right-x;}// Vertical\nbottom=Math.round(y+h)+yCrisp;fromTop=Math.abs(y)<=0.5&&bottom>0.5;// #4504, #4656\ny=Math.round(y)+yCrisp;h=bottom-y;// Top edges are exceptions\nif(fromTop&&h){// #5146\ny-=1;h+=1;}return{x:x,y:y,width:w,height:h};},/**\n             * Translate each point to the plot area coordinate system and find shape positions\n             */translate:function translate(){var series=this,chart=series.chart,options=series.options,dense=series.dense=series.closestPointRange*series.xAxis.transA<2,borderWidth=series.borderWidth=pick(options.borderWidth,dense?0:1// #3635\n),yAxis=series.yAxis,threshold=options.threshold,translatedThreshold=series.translatedThreshold=yAxis.getThreshold(threshold),minPointLength=pick(options.minPointLength,5),metrics=series.getColumnMetrics(),pointWidth=metrics.width,seriesBarW=series.barW=Math.max(pointWidth,1+2*borderWidth),// postprocessed for border width\npointXOffset=series.pointXOffset=metrics.offset;if(chart.inverted){translatedThreshold-=0.5;// #3355\n}// When the pointPadding is 0, we want the columns to be packed tightly, so we allow individual\n// columns to have individual sizes. When pointPadding is greater, we strive for equal-width\n// columns (#2694).\nif(options.pointPadding){seriesBarW=Math.ceil(seriesBarW);}Series.prototype.translate.apply(series);// Record the new values\neach(series.points,function(point){var yBottom=pick(point.yBottom,translatedThreshold),safeDistance=999+Math.abs(yBottom),plotY=Math.min(Math.max(-safeDistance,point.plotY),yAxis.len+safeDistance),// Don't draw too far outside plot area (#1303, #2241, #4264)\nbarX=point.plotX+pointXOffset,barW=seriesBarW,barY=Math.min(plotY,yBottom),up,barH=Math.max(plotY,yBottom)-barY;// Handle options.minPointLength\nif(Math.abs(barH)<minPointLength){if(minPointLength){barH=minPointLength;up=!yAxis.reversed&&!point.negative||yAxis.reversed&&point.negative;barY=Math.abs(barY-translatedThreshold)>minPointLength?// stacked\nyBottom-minPointLength:// keep position\ntranslatedThreshold-(up?minPointLength:0);// #1485, #4051\n}}// Cache for access in polar\npoint.barX=barX;point.pointWidth=pointWidth;// Fix the tooltip on center of grouped columns (#1216, #424, #3648)\npoint.tooltipPos=chart.inverted?[yAxis.len+yAxis.pos-chart.plotLeft-plotY,series.xAxis.len-barX-barW/2,barH]:[barX+barW/2,plotY+yAxis.pos-chart.plotTop,barH];// Register shape type and arguments to be used in drawPoints\npoint.shapeType='rect';point.shapeArgs=series.crispCol.apply(series,point.isNull?// #3169, drilldown from null must have a position to work from\n// #6585, dataLabel should be placed on xAxis, not floating in the middle of the chart\n[barX,translatedThreshold,barW,0]:[barX,barY,barW,barH]);});},getSymbol:noop,/**\n             * Use a solid rectangle like the area series types\n             */drawLegendSymbol:LegendSymbolMixin.drawRectangle,/**\n             * Columns have no graph\n             */drawGraph:function drawGraph(){this.group[this.dense?'addClass':'removeClass']('highcharts-dense-data');},/**\n             * Get presentational attributes\n             */pointAttribs:function pointAttribs(point,state){var options=this.options,stateOptions,ret,p2o=this.pointAttrToOptions||{},strokeOption=p2o.stroke||'borderColor',strokeWidthOption=p2o['stroke-width']||'borderWidth',fill=point&&point.color||this.color,stroke=point[strokeOption]||options[strokeOption]||this.color||fill,// set to fill when borderColor null\nstrokeWidth=point[strokeWidthOption]||options[strokeWidthOption]||this[strokeWidthOption]||0,dashstyle=options.dashStyle,zone,brightness;// Handle zone colors\nif(point&&this.zones.length){zone=point.getZone();fill=point.options.color||zone&&zone.color||this.color;// When zones are present, don't use point.color (#4267). Changed order (#6527)\n}// Select or hover states\nif(state){stateOptions=merge(options.states[state],point.options.states&&point.options.states[state]||{}// #6401\n);brightness=stateOptions.brightness;fill=stateOptions.color||brightness!==undefined&&color(fill).brighten(stateOptions.brightness).get()||fill;stroke=stateOptions[strokeOption]||stroke;strokeWidth=stateOptions[strokeWidthOption]||strokeWidth;dashstyle=stateOptions.dashStyle||dashstyle;}ret={'fill':fill,'stroke':stroke,'stroke-width':strokeWidth};if(dashstyle){ret.dashstyle=dashstyle;}return ret;},/**\n             * Draw the columns. For bars, the series.group is rotated, so the same coordinates\n             * apply for columns and bars. This method is inherited by scatter series.\n             *\n             */drawPoints:function drawPoints(){var series=this,chart=this.chart,options=series.options,renderer=chart.renderer,animationLimit=options.animationLimit||250,shapeArgs;// draw the columns\neach(series.points,function(point){var plotY=point.plotY,graphic=point.graphic;if(isNumber(plotY)&&point.y!==null){shapeArgs=point.shapeArgs;if(graphic){// update\ngraphic[chart.pointCount<animationLimit?'animate':'attr'](merge(shapeArgs));}else{point.graphic=graphic=renderer[point.shapeType](shapeArgs).add(point.group||series.group);}// Border radius is not stylable (#6900)\nif(options.borderRadius){graphic.attr({r:options.borderRadius});}// Presentational\ngraphic.attr(series.pointAttribs(point,point.selected&&'select')).shadow(options.shadow,null,options.stacking&&!options.borderRadius);graphic.addClass(point.getClassName(),true);}else if(graphic){point.graphic=graphic.destroy();// #1269\n}});},/**\n             * Animate the column heights one by one from zero\n             * @param {Boolean} init Whether to initialize the animation or run it\n             */animate:function animate(init){var series=this,yAxis=this.yAxis,options=series.options,inverted=this.chart.inverted,attr={},translatedThreshold;if(svg){// VML is too slow anyway\nif(init){attr.scaleY=0.001;translatedThreshold=Math.min(yAxis.pos+yAxis.len,Math.max(yAxis.pos,yAxis.toPixels(options.threshold)));if(inverted){attr.translateX=translatedThreshold-yAxis.len;}else{attr.translateY=translatedThreshold;}series.group.attr(attr);}else{// run the animation\nattr[inverted?'translateX':'translateY']=yAxis.pos;series.group.animate(attr,extend(animObject(series.options.animation),{// Do the scale synchronously to ensure smooth updating (#5030)\nstep:function step(val,fx){series.group.attr({scaleY:Math.max(0.001,fx.pos)// #5250\n});}}));// delete this function to allow it only once\nseries.animate=null;}}},/**\n             * Remove this series from the chart\n             */remove:function remove(){var series=this,chart=series.chart;// column and bar series affects other series of the same type\n// as they are either stacked or grouped\nif(chart.hasRendered){each(chart.series,function(otherSeries){if(otherSeries.type===series.type){otherSeries.isDirty=true;}});}Series.prototype.remove.apply(series,arguments);}});})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var seriesType=H.seriesType;/**\n         * The Bar series class\n         */seriesType('bar','column',null,{/**\n             */inverted:true});/**\n         * @extends {plotOptions.column}\n         * @optionparent plotOptions.bar\n         */})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var Series=H.Series,seriesType=H.seriesType;/**\n         * The scatter series type\n         *//**\n         * @extends {plotOptions.line}\n         * @optionparent plotOptions.scatter\n         */seriesType('scatter','line',{/**\n             * The width of the line connecting the data points.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/scatter-linewidth-none/ 0 by default\n             * @sample {highcharts} highcharts/plotoptions/scatter-linewidth-1/ 1px\n             * @default 0\n             * @product highcharts highstock\n             */lineWidth:0,/**\n             */findNearestPointBy:'xy',/**\n             */marker:{/**\n                 */enabled:true// Overrides auto-enabling in line series (#3647)\n},/**\n             * A configuration object for the tooltip rendering of each single\n             * series. Properties are inherited from <a class=\"internal\">#tooltip</a>.\n             * Overridable properties are `headerFormat`, `pointFormat`, `yDecimals`,\n             * `xDateFormat`, `yPrefix` and `ySuffix`. Unlike other series, in\n             * a scatter plot the series.name by default shows in the headerFormat\n             * and point.x and point.y in the pointFormat.\n             *\n             * @product highcharts highstock\n             */tooltip:{headerFormat:'<span style=\"color:{point.color}\">\\u25CF</span> '+'<span style=\"font-size: 0.85em\"> {series.name}</span><br/>',/**\n                 */pointFormat:'x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>'// Prototype members\n}},{sorted:false,requireSorting:false,noSharedTooltip:true,trackerGroups:['group','markerGroup','dataLabelsGroup'],takeOrdinalPosition:false,// #2342\ndrawGraph:function drawGraph(){if(this.options.lineWidth){Series.prototype.drawGraph.call(this);}}});})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var pick=H.pick,relativeLength=H.relativeLength;H.CenteredSeriesMixin={/**\n             * Get the center of the pie based on the size and center options relative to the\n             * plot area. Borrowed by the polar and gauge series types.\n             */getCenter:function getCenter(){var options=this.options,chart=this.chart,slicingRoom=2*(options.slicedOffset||0),handleSlicingRoom,plotWidth=chart.plotWidth-2*slicingRoom,plotHeight=chart.plotHeight-2*slicingRoom,centerOption=options.center,positions=[pick(centerOption[0],'50%'),pick(centerOption[1],'50%'),options.size||'100%',options.innerSize||0],smallestSize=Math.min(plotWidth,plotHeight),i,value;for(i=0;i<4;++i){value=positions[i];handleSlicingRoom=i<2||i===2&&/%$/.test(value);// i == 0: centerX, relative to width\n// i == 1: centerY, relative to height\n// i == 2: size, relative to smallestSize\n// i == 3: innerSize, relative to size\npositions[i]=relativeLength(value,[plotWidth,plotHeight,smallestSize,positions[2]][i])+(handleSlicingRoom?slicingRoom:0);}// innerSize cannot be larger than size (#3632)\nif(positions[3]>positions[2]){positions[3]=positions[2];}return positions;}};})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var addEvent=H.addEvent,CenteredSeriesMixin=H.CenteredSeriesMixin,defined=H.defined,each=H.each,extend=H.extend,inArray=H.inArray,LegendSymbolMixin=H.LegendSymbolMixin,noop=H.noop,pick=H.pick,Point=H.Point,Series=H.Series,seriesType=H.seriesType,seriesTypes=H.seriesTypes,setAnimation=H.setAnimation;/**\n         * The pie series type.\n         *\n         * @constructor seriesTypes.pie\n         * @augments Series\n         *//**\n         * @extends {plotOptions.line}\n         * @optionparent plotOptions.pie\n         */seriesType('pie','line',{/**\n             * The center of the pie chart relative to the plot area. Can be percentages\n             * or pixel values. The default behaviour (as of 3.0) is to center\n             * the pie so that all slices and data labels are within the plot area.\n             * As a consequence, the pie may actually jump around in a chart with\n             * dynamic values, as the data labels move. In that case, the center\n             * should be explicitly set, for example to `[\"50%\", \"50%\"]`.\n             *\n             * @type {Array<String|Number>}\n             * @sample {highcharts} highcharts/plotoptions/pie-center/ Centered at 100, 100\n             * @default [null, null]\n             * @product highcharts\n             */center:[null,null],/**\n             */clip:false,/**\n             */colorByPoint:true,// always true for pies\n/**\n             * @extends plotOptions.series.dataLabels\n             * @excluding align,allowOverlap,staggerLines,step\n             * @product highcharts\n             */dataLabels:{// align: null,\n// connectorWidth: 1,\n// connectorColor: point.color,\n// connectorPadding: 5,\n/**\n                 * The distance of the data label from the pie's edge. Negative numbers\n                 * put the data label on top of the pie slices. Connectors are only\n                 * shown for data labels outside the pie.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/pie-datalabels-distance/ Data labels on top of the pie\n                 * @default 30\n                 * @since 2.1\n                 * @product highcharts\n                 */distance:30,/**\n                 * Enable or disable the data labels.\n                 *\n                 * @type {Boolean}\n                 * @since 2.1\n                 * @product highcharts\n                 */enabled:true,/**\n                 */formatter:function formatter(){// #2945\nreturn this.point.isNull?undefined:this.point.name;},// softConnector: true,\n/**\n                 */x:0// y: 0\n},/**\n             * Equivalent to [chart.ignoreHiddenSeries](#chart.ignoreHiddenSeries),\n             * this option tells whether the series shall be redrawn as if the\n             * hidden point were `null`.\n             *\n             * The default value changed from `false` to `true` with Highcharts\n             * 3.0.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/pie-ignorehiddenpoint/ True, the hiddden point is ignored\n             * @default true\n             * @since 2.3.0\n             * @product highcharts\n             */ignoreHiddenPoint:true,//innerSize: 0,\n/**\n             */legendType:'point',/**\n             */marker:null,// point options are specified in the base options\n/**\n             * The diameter of the pie relative to the plot area. Can be a percentage\n             * or pixel value. Pixel values are given as integers. The default\n             * behaviour (as of 3.0) is to scale to the plot area and give room\n             * for data labels within the plot area. As a consequence, the size\n             * of the pie may vary when points are updated and data labels more\n             * around. In that case it is best to set a fixed value, for example\n             * `\"75%\"`.\n             *\n             * @type {String|Number}\n             * @sample {highcharts} highcharts/plotoptions/pie-size/ Smaller pie\n             * @default\n             * @product highcharts\n             */size:null,/**\n             * Whether to display this particular series or series type in the\n             * legend. Since 2.1, pies are not shown in the legend by default.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-showinlegend/ One series in the legend, one hidden\n             * @product highcharts\n             */showInLegend:false,/**\n             * If a point is sliced, moved out from the center, how many pixels\n             * should it be moved?.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/pie-slicedoffset-20/ 20px offset\n             * @default 10\n             * @product highcharts\n             */slicedOffset:10,/**\n             * Sticky tracking of mouse events. When true, the `mouseOut` event\n             * on a series isn't triggered until the mouse moves over another series,\n             * or out of the plot area. When false, the `mouseOut` event on a\n             * series is triggered when the mouse leaves the area around the series'\n             * graph or markers. This also implies the tooltip. When `stickyTracking`\n             * is false and `tooltip.shared` is false, the tooltip will be hidden\n             * when moving the mouse between series.\n             *\n             * @type {Boolean}\n             * @default false\n             * @product highcharts\n             */stickyTracking:false,/**\n             */tooltip:{/**\n                 */followPointer:true},/**\n             * The color of the border surrounding each slice. When `null`, the\n             * border takes the same color as the slice fill. This can be used\n             * together with a `borderWidth` to fill drawing gaps created by antialiazing\n             * artefacts in borderless pies.\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the border stroke is given in the `.highcharts-\n             * point` class.\n             *\n             * @type {Color}\n             * @sample {highcharts} highcharts/plotoptions/pie-bordercolor-black/ Black border\n             * @default #ffffff\n             * @product highcharts\n             */borderColor:'#ffffff',/**\n             * The width of the border surrounding each slice.\n             *\n             * When setting the border width to 0, there may be small gaps between\n             * the slices due to SVG antialiasing artefacts. To work around this,\n             * keep the border width at 0.5 or 1, but set the `borderColor` to\n             * `null` instead.\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the border stroke width is given in the `.highcharts-\n             * point` class.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/pie-borderwidth/ 3px border\n             * @default 1\n             * @product highcharts\n             */borderWidth:1,/**\n             */states:{/**\n                 * @extends plotOptions.series.states.hover\n                 * @product highcharts\n                 */hover:{/**\n                     * How much to brighten the point on interaction. Requires the main\n                     * color to be defined in hex or rgb(a) format.\n                     *\n                     * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the hover brightness is by default replaced\n                     * by a fill-opacity given in the `.highcharts-point-hover` class.\n                     *\n                     * @type {Number}\n                     * @sample {highcharts} highcharts/plotoptions/pie-states-hover-brightness/ Brightened by 0.5\n                     * @default 0.1\n                     * @product highcharts\n                     */brightness:0.1,/**\n                     */shadow:false}}},/** @lends seriesTypes.pie.prototype */{isCartesian:false,requireSorting:false,directTouch:true,noSharedTooltip:true,trackerGroups:['group','dataLabelsGroup'],axisTypes:[],pointAttribs:seriesTypes.column.prototype.pointAttribs,/**\n             * Animate the pies in\n             */animate:function animate(init){var series=this,points=series.points,startAngleRad=series.startAngleRad;if(!init){each(points,function(point){var graphic=point.graphic,args=point.shapeArgs;if(graphic){// start values\ngraphic.attr({r:point.startR||series.center[3]/2,// animate from inner radius (#779)\nstart:startAngleRad,end:startAngleRad});// animate\ngraphic.animate({r:args.r,start:args.start,end:args.end},series.options.animation);}});// delete this function to allow it only once\nseries.animate=null;}},/**\n             * Recompute total chart sum and update percentages of points.\n             */updateTotals:function updateTotals(){var i,total=0,points=this.points,len=points.length,point,ignoreHiddenPoint=this.options.ignoreHiddenPoint;// Get the total sum\nfor(i=0;i<len;i++){point=points[i];total+=ignoreHiddenPoint&&!point.visible?0:point.isNull?0:point.y;}this.total=total;// Set each point's properties\nfor(i=0;i<len;i++){point=points[i];point.percentage=total>0&&(point.visible||!ignoreHiddenPoint)?point.y/total*100:0;point.total=total;}},/**\n             * Extend the generatePoints method by adding total and percentage properties to each point\n             */generatePoints:function generatePoints(){Series.prototype.generatePoints.call(this);this.updateTotals();},/**\n             * Do translation for pie slices\n             */translate:function translate(positions){this.generatePoints();var series=this,cumulative=0,precision=1000,// issue #172\noptions=series.options,slicedOffset=options.slicedOffset,connectorOffset=slicedOffset+(options.borderWidth||0),finalConnectorOffset,start,end,angle,startAngle=options.startAngle||0,startAngleRad=series.startAngleRad=Math.PI/180*(startAngle-90),endAngleRad=series.endAngleRad=Math.PI/180*(pick(options.endAngle,startAngle+360)-90),circ=endAngleRad-startAngleRad,//2 * Math.PI,\npoints=series.points,radiusX,// the x component of the radius vector for a given point\nradiusY,labelDistance=options.dataLabels.distance,ignoreHiddenPoint=options.ignoreHiddenPoint,i,len=points.length,point;// Get positions - either an integer or a percentage string must be given.\n// If positions are passed as a parameter, we're in a recursive loop for adjusting\n// space for data labels.\nif(!positions){series.center=positions=series.getCenter();}// Utility for getting the x value from a given y, used for anticollision\n// logic in data labels.\n// Added point for using specific points' label distance.\nseries.getX=function(y,left,point){angle=Math.asin(Math.min((y-positions[1])/(positions[2]/2+point.labelDistance),1));return positions[0]+(left?-1:1)*(Math.cos(angle)*(positions[2]/2+point.labelDistance));};// Calculate the geometry for each point\nfor(i=0;i<len;i++){point=points[i];// Used for distance calculation for specific point.\npoint.labelDistance=pick(point.options.dataLabels&&point.options.dataLabels.distance,labelDistance);// Saved for later dataLabels distance calculation.\nseries.maxLabelDistance=Math.max(series.maxLabelDistance||0,point.labelDistance);// set start and end angle\nstart=startAngleRad+cumulative*circ;if(!ignoreHiddenPoint||point.visible){cumulative+=point.percentage/100;}end=startAngleRad+cumulative*circ;// set the shape\npoint.shapeType='arc';point.shapeArgs={x:positions[0],y:positions[1],r:positions[2]/2,innerR:positions[3]/2,start:Math.round(start*precision)/precision,end:Math.round(end*precision)/precision};// The angle must stay within -90 and 270 (#2645)\nangle=(end+start)/2;if(angle>1.5*Math.PI){angle-=2*Math.PI;}else if(angle<-Math.PI/2){angle+=2*Math.PI;}// Center for the sliced out slice\npoint.slicedTranslation={translateX:Math.round(Math.cos(angle)*slicedOffset),translateY:Math.round(Math.sin(angle)*slicedOffset)};// set the anchor point for tooltips\nradiusX=Math.cos(angle)*positions[2]/2;radiusY=Math.sin(angle)*positions[2]/2;point.tooltipPos=[positions[0]+radiusX*0.7,positions[1]+radiusY*0.7];point.half=angle<-Math.PI/2||angle>Math.PI/2?1:0;point.angle=angle;// Set the anchor point for data labels. Use point.labelDistance\n// instead of labelDistance // #1174\n// finalConnectorOffset - not override connectorOffset value.\nfinalConnectorOffset=Math.min(connectorOffset,point.labelDistance/5);// #1678\npoint.labelPos=[positions[0]+radiusX+Math.cos(angle)*point.labelDistance,// first break of connector\npositions[1]+radiusY+Math.sin(angle)*point.labelDistance,// a/a\npositions[0]+radiusX+Math.cos(angle)*finalConnectorOffset,// second break, right outside pie\npositions[1]+radiusY+Math.sin(angle)*finalConnectorOffset,// a/a\npositions[0]+radiusX,// landing point for connector\npositions[1]+radiusY,// a/a\npoint.labelDistance<0?// alignment\n'center':point.half?'right':'left',// alignment\nangle// center angle\n];}},drawGraph:null,/**\n             * Draw the data points\n             */drawPoints:function drawPoints(){var series=this,chart=series.chart,renderer=chart.renderer,groupTranslation,//center,\ngraphic,//group,\npointAttr,shapeArgs;var shadow=series.options.shadow;if(shadow&&!series.shadowGroup){series.shadowGroup=renderer.g('shadow').add(series.group);}// draw the slices\neach(series.points,function(point){if(!point.isNull){graphic=point.graphic;shapeArgs=point.shapeArgs;// If the point is sliced, use special translation, else use\n// plot area traslation\ngroupTranslation=point.getTranslate();// Put the shadow behind all points\nvar shadowGroup=point.shadowGroup;if(shadow&&!shadowGroup){shadowGroup=point.shadowGroup=renderer.g('shadow').add(series.shadowGroup);}if(shadowGroup){shadowGroup.attr(groupTranslation);}pointAttr=series.pointAttribs(point,point.selected&&'select');// Draw the slice\nif(graphic){graphic.setRadialReference(series.center).attr(pointAttr).animate(extend(shapeArgs,groupTranslation));}else{point.graphic=graphic=renderer[point.shapeType](shapeArgs).setRadialReference(series.center).attr(groupTranslation).add(series.group);if(!point.visible){graphic.attr({visibility:'hidden'});}graphic.attr(pointAttr).attr({'stroke-linejoin':'round'}).shadow(shadow,shadowGroup);}graphic.addClass(point.getClassName());}});},searchPoint:noop,/**\n             * Utility for sorting data labels\n             */sortByAngle:function sortByAngle(points,sign){points.sort(function(a,b){return a.angle!==undefined&&(b.angle-a.angle)*sign;});},/**\n             * Use a simple symbol from LegendSymbolMixin\n             */drawLegendSymbol:LegendSymbolMixin.drawRectangle,/**\n             * Use the getCenter method from drawLegendSymbol\n             */getCenter:CenteredSeriesMixin.getCenter,/**\n             * Pies don't have point marker symbols\n             */getSymbol:noop/**\n             * @constructor seriesTypes.pie.prototype.pointClass\n             * @extends {Point}\n             */},/** @lends seriesTypes.pie.prototype.pointClass.prototype */{/**\n             * Initiate the pie slice\n             */init:function init(){Point.prototype.init.apply(this,arguments);var point=this,toggleSlice;point.name=pick(point.name,'Slice');// add event listener for select\ntoggleSlice=function toggleSlice(e){point.slice(e.type==='select');};addEvent(point,'select',toggleSlice);addEvent(point,'unselect',toggleSlice);return point;},/**\n             * Negative points are not valid (#1530, #3623, #5322)\n             */isValid:function isValid(){return H.isNumber(this.y,true)&&this.y>=0;},/**\n             * Toggle the visibility of the pie slice\n             * @param {Boolean} vis Whether to show the slice or not. If undefined, the\n             *    visibility is toggled\n             */setVisible:function setVisible(vis,redraw){var point=this,series=point.series,chart=series.chart,ignoreHiddenPoint=series.options.ignoreHiddenPoint;redraw=pick(redraw,ignoreHiddenPoint);if(vis!==point.visible){// If called without an argument, toggle visibility\npoint.visible=point.options.visible=vis=vis===undefined?!point.visible:vis;series.options.data[inArray(point,series.data)]=point.options;// update userOptions.data\n// Show and hide associated elements. This is performed regardless of redraw or not,\n// because chart.redraw only handles full series.\neach(['graphic','dataLabel','connector','shadowGroup'],function(key){if(point[key]){point[key][vis?'show':'hide'](true);}});if(point.legendItem){chart.legend.colorizeItem(point,vis);}// #4170, hide halo after hiding point\nif(!vis&&point.state==='hover'){point.setState('');}// Handle ignore hidden slices\nif(ignoreHiddenPoint){series.isDirty=true;}if(redraw){chart.redraw();}}},/**\n             * Set or toggle whether the slice is cut out from the pie\n             * @param {Boolean} sliced When undefined, the slice state is toggled\n             * @param {Boolean} redraw Whether to redraw the chart. True by default.\n             */slice:function slice(sliced,redraw,animation){var point=this,series=point.series,chart=series.chart;setAnimation(animation,chart);// redraw is true by default\nredraw=pick(redraw,true);// if called without an argument, toggle\npoint.sliced=point.options.sliced=sliced=defined(sliced)?sliced:!point.sliced;series.options.data[inArray(point,series.data)]=point.options;// update userOptions.data\npoint.graphic.animate(this.getTranslate());if(point.shadowGroup){point.shadowGroup.animate(this.getTranslate());}},getTranslate:function getTranslate(){return this.sliced?this.slicedTranslation:{translateX:0,translateY:0};},haloPath:function haloPath(size){var shapeArgs=this.shapeArgs;return this.sliced||!this.visible?[]:this.series.chart.renderer.symbols.arc(shapeArgs.x,shapeArgs.y,shapeArgs.r+size,shapeArgs.r+size,{innerR:this.shapeArgs.r,start:shapeArgs.start,end:shapeArgs.end});}});})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var addEvent=H.addEvent,arrayMax=H.arrayMax,defined=H.defined,each=H.each,extend=H.extend,format=H.format,map=H.map,merge=H.merge,noop=H.noop,pick=H.pick,relativeLength=H.relativeLength,Series=H.Series,seriesTypes=H.seriesTypes,stableSort=H.stableSort;/**\n         * Generatl distribution algorithm for distributing labels of differing size along a\n         * confined length in two dimensions. The algorithm takes an array of objects containing\n         * a size, a target and a rank. It will place the labels as close as possible to their\n         * targets, skipping the lowest ranked labels if necessary.\n         */H.distribute=function(boxes,len){var i,overlapping=true,origBoxes=boxes,// Original array will be altered with added .pos\nrestBoxes=[],// The outranked overshoot\nbox,target,total=0;function sortByTarget(a,b){return a.target-b.target;}// If the total size exceeds the len, remove those boxes with the lowest rank\ni=boxes.length;while(i--){total+=boxes[i].size;}// Sort by rank, then slice away overshoot\nif(total>len){stableSort(boxes,function(a,b){return(b.rank||0)-(a.rank||0);});i=0;total=0;while(total<=len){total+=boxes[i].size;i++;}restBoxes=boxes.splice(i-1,boxes.length);}// Order by target\nstableSort(boxes,sortByTarget);// So far we have been mutating the original array. Now\n// create a copy with target arrays\nboxes=map(boxes,function(box){return{size:box.size,targets:[box.target]};});while(overlapping){// Initial positions: target centered in box\ni=boxes.length;while(i--){box=boxes[i];// Composite box, average of targets\ntarget=(Math.min.apply(0,box.targets)+Math.max.apply(0,box.targets))/2;box.pos=Math.min(Math.max(0,target-box.size/2),len-box.size);}// Detect overlap and join boxes\ni=boxes.length;overlapping=false;while(i--){if(i>0&&boxes[i-1].pos+boxes[i-1].size>boxes[i].pos){// Overlap\nboxes[i-1].size+=boxes[i].size;// Add this size to the previous box\nboxes[i-1].targets=boxes[i-1].targets.concat(boxes[i].targets);// Overlapping right, push left\nif(boxes[i-1].pos+boxes[i-1].size>len){boxes[i-1].pos=len-boxes[i-1].size;}boxes.splice(i,1);// Remove this item\noverlapping=true;}}}// Now the composite boxes are placed, we need to put the original boxes within them\ni=0;each(boxes,function(box){var posInCompositeBox=0;each(box.targets,function(){origBoxes[i].pos=box.pos+posInCompositeBox;posInCompositeBox+=origBoxes[i].size;i++;});});// Add the rest (hidden) boxes and sort by target\norigBoxes.push.apply(origBoxes,restBoxes);stableSort(origBoxes,sortByTarget);};/**\n         * Draw the data labels\n         */Series.prototype.drawDataLabels=function(){var series=this,seriesOptions=series.options,options=seriesOptions.dataLabels,points=series.points,pointOptions,generalOptions,hasRendered=series.hasRendered||0,str,dataLabelsGroup,defer=pick(options.defer,!!seriesOptions.animation),renderer=series.chart.renderer;if(options.enabled||series._hasPointLabels){// Process default alignment of data labels for columns\nif(series.dlProcessOptions){series.dlProcessOptions(options);}// Create a separate group for the data labels to avoid rotation\ndataLabelsGroup=series.plotGroup('dataLabelsGroup','data-labels',defer&&!hasRendered?'hidden':'visible',// #5133\noptions.zIndex||6);if(defer){dataLabelsGroup.attr({opacity:+hasRendered});// #3300\nif(!hasRendered){addEvent(series,'afterAnimate',function(){if(series.visible){// #2597, #3023, #3024\ndataLabelsGroup.show(true);}dataLabelsGroup[seriesOptions.animation?'animate':'attr']({opacity:1},{duration:200});});}}// Make the labels for each point\ngeneralOptions=options;each(points,function(point){var enabled,dataLabel=point.dataLabel,labelConfig,attr,rotation,connector=point.connector,isNew=!dataLabel,style;// Determine if each data label is enabled\n// @note dataLabelAttribs (like pointAttribs) would eradicate\n// the need for dlOptions, and simplify the section below.\npointOptions=point.dlOptions||point.options&&point.options.dataLabels;// dlOptions is used in treemaps\nenabled=pick(pointOptions&&pointOptions.enabled,generalOptions.enabled)&&point.y!==null;// #2282, #4641\nif(enabled){// Create individual options structure that can be extended without\n// affecting others\noptions=merge(generalOptions,pointOptions);labelConfig=point.getLabelConfig();str=options.format?format(options.format,labelConfig):options.formatter.call(labelConfig,options);style=options.style;rotation=options.rotation;// Determine the color\nstyle.color=pick(options.color,style.color,series.color,'#000000');// Get automated contrast color\nif(style.color==='contrast'){point.contrastColor=renderer.getContrast(point.color||series.color);style.color=options.inside||pick(point.labelDistance,options.distance)<0||!!seriesOptions.stacking?point.contrastColor:'#000000';}if(seriesOptions.cursor){style.cursor=seriesOptions.cursor;}attr={//align: align,\nfill:options.backgroundColor,stroke:options.borderColor,'stroke-width':options.borderWidth,r:options.borderRadius||0,rotation:rotation,padding:options.padding,zIndex:1};// Remove unused attributes (#947)\nH.objectEach(attr,function(val,name){if(val===undefined){delete attr[name];}});}// If the point is outside the plot area, destroy it. #678, #820\nif(dataLabel&&(!enabled||!defined(str))){point.dataLabel=dataLabel=dataLabel.destroy();if(connector){point.connector=connector.destroy();}// Individual labels are disabled if the are explicitly disabled\n// in the point options, or if they fall outside the plot area.\n}else if(enabled&&defined(str)){// create new label\nif(!dataLabel){dataLabel=point.dataLabel=renderer[rotation?'text':'label'](// labels don't support rotation\nstr,0,-9999,options.shape,null,null,options.useHTML,null,'data-label');dataLabel.addClass('highcharts-data-label-color-'+point.colorIndex+' '+(options.className||'')+(options.useHTML?'highcharts-tracker':'')// #3398\n);}else{attr.text=str;}dataLabel.attr(attr);// Styles must be applied before add in order to read text bounding box\ndataLabel.css(style).shadow(options.shadow);if(!dataLabel.added){dataLabel.add(dataLabelsGroup);}// Now the data label is created and placed at 0,0, so we need to align it\nseries.alignDataLabel(point,dataLabel,options,null,isNew);}});}};/**\n         * Align each individual data label\n         */Series.prototype.alignDataLabel=function(point,dataLabel,options,alignTo,isNew){var chart=this.chart,inverted=chart.inverted,plotX=pick(point.plotX,-9999),plotY=pick(point.plotY,-9999),bBox=dataLabel.getBBox(),fontSize,baseline,rotation=options.rotation,normRotation,negRotation,align=options.align,rotCorr,// rotation correction\n// Math.round for rounding errors (#2683), alignTo to allow column labels (#2700)\nvisible=this.visible&&(point.series.forceDL||chart.isInsidePlot(plotX,Math.round(plotY),inverted)||alignTo&&chart.isInsidePlot(plotX,inverted?alignTo.x+1:alignTo.y+alignTo.height-1,inverted)),alignAttr,// the final position;\njustify=pick(options.overflow,'justify')==='justify';if(visible){fontSize=options.style.fontSize;baseline=chart.renderer.fontMetrics(fontSize,dataLabel).b;// The alignment box is a singular point\nalignTo=extend({x:inverted?this.yAxis.len-plotY:plotX,y:Math.round(inverted?this.xAxis.len-plotX:plotY),width:0,height:0},alignTo);// Add the text size for alignment calculation\nextend(options,{width:bBox.width,height:bBox.height});// Allow a hook for changing alignment in the last moment, then do the alignment\nif(rotation){justify=false;// Not supported for rotated text\nrotCorr=chart.renderer.rotCorr(baseline,rotation);// #3723\nalignAttr={x:alignTo.x+options.x+alignTo.width/2+rotCorr.x,y:alignTo.y+options.y+{top:0,middle:0.5,bottom:1}[options.verticalAlign]*alignTo.height};dataLabel[isNew?'attr':'animate'](alignAttr).attr({// #3003\nalign:align});// Compensate for the rotated label sticking out on the sides\nnormRotation=(rotation+720)%360;negRotation=normRotation>180&&normRotation<360;if(align==='left'){alignAttr.y-=negRotation?bBox.height:0;}else if(align==='center'){alignAttr.x-=bBox.width/2;alignAttr.y-=bBox.height/2;}else if(align==='right'){alignAttr.x-=bBox.width;alignAttr.y-=negRotation?0:bBox.height;}}else{dataLabel.align(options,null,alignTo);alignAttr=dataLabel.alignAttr;}// Handle justify or crop\nif(justify){point.isLabelJustified=this.justifyDataLabel(dataLabel,options,alignAttr,bBox,alignTo,isNew);// Now check that the data label is within the plot area\n}else if(pick(options.crop,true)){visible=chart.isInsidePlot(alignAttr.x,alignAttr.y)&&chart.isInsidePlot(alignAttr.x+bBox.width,alignAttr.y+bBox.height);}// When we're using a shape, make it possible with a connector or an arrow pointing to thie point\nif(options.shape&&!rotation){dataLabel[isNew?'attr':'animate']({anchorX:inverted?chart.plotWidth-point.plotY:point.plotX,anchorY:inverted?chart.plotHeight-point.plotX:point.plotY});}}// Show or hide based on the final aligned position\nif(!visible){dataLabel.attr({y:-9999});dataLabel.placed=false;// don't animate back in\n}};/**\n         * If data labels fall partly outside the plot area, align them back in, in a way that\n         * doesn't hide the point.\n         */Series.prototype.justifyDataLabel=function(dataLabel,options,alignAttr,bBox,alignTo,isNew){var chart=this.chart,align=options.align,verticalAlign=options.verticalAlign,off,justified,padding=dataLabel.box?0:dataLabel.padding||0;// Off left\noff=alignAttr.x+padding;if(off<0){if(align==='right'){options.align='left';}else{options.x=-off;}justified=true;}// Off right\noff=alignAttr.x+bBox.width-padding;if(off>chart.plotWidth){if(align==='left'){options.align='right';}else{options.x=chart.plotWidth-off;}justified=true;}// Off top\noff=alignAttr.y+padding;if(off<0){if(verticalAlign==='bottom'){options.verticalAlign='top';}else{options.y=-off;}justified=true;}// Off bottom\noff=alignAttr.y+bBox.height-padding;if(off>chart.plotHeight){if(verticalAlign==='top'){options.verticalAlign='bottom';}else{options.y=chart.plotHeight-off;}justified=true;}if(justified){dataLabel.placed=!isNew;dataLabel.align(options,null,alignTo);}return justified;};/**\n         * Override the base drawDataLabels method by pie specific functionality\n         */if(seriesTypes.pie){seriesTypes.pie.prototype.drawDataLabels=function(){var series=this,data=series.data,point,chart=series.chart,options=series.options.dataLabels,connectorPadding=pick(options.connectorPadding,10),connectorWidth=pick(options.connectorWidth,1),plotWidth=chart.plotWidth,plotHeight=chart.plotHeight,connector,seriesCenter=series.center,radius=seriesCenter[2]/2,centerY=seriesCenter[1],dataLabel,dataLabelWidth,labelPos,labelHeight,halves=[// divide the points into right and left halves for anti collision\n[],// right\n[]// left\n],x,y,visibility,j,overflow=[0,0,0,0];// top, right, bottom, left\n// get out if not enabled\nif(!series.visible||!options.enabled&&!series._hasPointLabels){return;}// Reset all labels that have been shortened\neach(data,function(point){if(point.dataLabel&&point.visible&&point.dataLabel.shortened){point.dataLabel.attr({width:'auto'}).css({width:'auto',textOverflow:'clip'});point.dataLabel.shortened=false;}});// run parent method\nSeries.prototype.drawDataLabels.apply(series);each(data,function(point){if(point.dataLabel&&point.visible){// #407, #2510\n// Arrange points for detection collision\nhalves[point.half].push(point);// Reset positions (#4905)\npoint.dataLabel._pos=null;}});/* Loop over the points in each half, starting from the top and bottom\n                 * of the pie to detect overlapping labels.\n                 */each(halves,function(points,i){var top,bottom,length=points.length,positions=[],naturalY,sideOverflow,positionsIndex,// Point index in positions array.\nsize;if(!length){return;}// Sort by angle\nseries.sortByAngle(points,i-0.5);// Only do anti-collision when we have dataLabels outside the pie\n// and have connectors. (#856)\nif(series.maxLabelDistance>0){top=Math.max(0,centerY-radius-series.maxLabelDistance);bottom=Math.min(centerY+radius+series.maxLabelDistance,chart.plotHeight);each(points,function(point){// check if specific points' label is outside the pie\nif(point.labelDistance>0&&point.dataLabel){// point.top depends on point.labelDistance value\n// Used for calculation of y value in getX method\npoint.top=Math.max(0,centerY-radius-point.labelDistance);point.bottom=Math.min(centerY+radius+point.labelDistance,chart.plotHeight);size=point.dataLabel.getBBox().height||21;// point.positionsIndex is needed for getting index of\n// parameter related to specific point inside positions\n// array - not every point is in positions array.\npoint.positionsIndex=positions.push({target:point.labelPos[1]-point.top+size/2,size:size,rank:point.y})-1;}});H.distribute(positions,bottom+size-top);}// Now the used slots are sorted, fill them up sequentially\nfor(j=0;j<length;j++){point=points[j];positionsIndex=point.positionsIndex;labelPos=point.labelPos;dataLabel=point.dataLabel;visibility=point.visible===false?'hidden':'inherit';naturalY=labelPos[1];if(positions&&defined(positions[positionsIndex])){if(positions[positionsIndex].pos===undefined){visibility='hidden';}else{labelHeight=positions[positionsIndex].size;y=point.top+positions[positionsIndex].pos;}}else{y=naturalY;}// It is needed to delete point.positionIndex for\n// dynamically added points etc.\ndelete point.positionIndex;// get the x - use the natural x position for labels near the\n// top and bottom, to prevent the top and botton slice connectors\n// from touching each other on either side\nif(options.justify){x=seriesCenter[0]+(i?-1:1)*(radius+point.labelDistance);}else{x=series.getX(y<point.top+2||y>point.bottom-2?naturalY:y,i,point);}// Record the placement and visibility\ndataLabel._attr={visibility:visibility,align:labelPos[6]};dataLabel._pos={x:x+options.x+({left:connectorPadding,right:-connectorPadding}[labelPos[6]]||0),y:y+options.y-10// 10 is for the baseline (label vs text)\n};labelPos.x=x;labelPos.y=y;// Detect overflowing data labels\nif(pick(options.crop,true)){dataLabelWidth=dataLabel.getBBox().width;sideOverflow=null;// Overflow left\nif(x-dataLabelWidth<connectorPadding){sideOverflow=Math.round(dataLabelWidth-x+connectorPadding);overflow[3]=Math.max(sideOverflow,overflow[3]);// Overflow right\n}else if(x+dataLabelWidth>plotWidth-connectorPadding){sideOverflow=Math.round(x+dataLabelWidth-plotWidth+connectorPadding);overflow[1]=Math.max(sideOverflow,overflow[1]);}// Overflow top\nif(y-labelHeight/2<0){overflow[0]=Math.max(Math.round(-y+labelHeight/2),overflow[0]);// Overflow left\n}else if(y+labelHeight/2>plotHeight){overflow[2]=Math.max(Math.round(y+labelHeight/2-plotHeight),overflow[2]);}dataLabel.sideOverflow=sideOverflow;}}// for each point\n});// for each half\n// Do not apply the final placement and draw the connectors until we have verified\n// that labels are not spilling over.\nif(arrayMax(overflow)===0||this.verifyDataLabelOverflow(overflow)){// Place the labels in the final position\nthis.placeDataLabels();// Draw the connectors\nif(connectorWidth){each(this.points,function(point){var isNew;connector=point.connector;dataLabel=point.dataLabel;if(dataLabel&&dataLabel._pos&&point.visible&&point.labelDistance>0){visibility=dataLabel._attr.visibility;isNew=!connector;if(isNew){point.connector=connector=chart.renderer.path().addClass('highcharts-data-label-connector highcharts-color-'+point.colorIndex).add(series.dataLabelsGroup);connector.attr({'stroke-width':connectorWidth,'stroke':options.connectorColor||point.color||'#666666'});}connector[isNew?'attr':'animate']({d:series.connectorPath(point.labelPos)});connector.attr('visibility',visibility);}else if(connector){point.connector=connector.destroy();}});}}};/**\n             * Extendable method for getting the path of the connector between the data label\n             * and the pie slice.\n             */seriesTypes.pie.prototype.connectorPath=function(labelPos){var x=labelPos.x,y=labelPos.y;return pick(this.options.dataLabels.softConnector,true)?['M',x+(labelPos[6]==='left'?5:-5),y,// end of the string at the label\n'C',x,y,// first break, next to the label\n2*labelPos[2]-labelPos[4],2*labelPos[3]-labelPos[5],labelPos[2],labelPos[3],// second break\n'L',labelPos[4],labelPos[5]// base\n]:['M',x+(labelPos[6]==='left'?5:-5),y,// end of the string at the label\n'L',labelPos[2],labelPos[3],// second break\n'L',labelPos[4],labelPos[5]// base\n];};/**\n             * Perform the final placement of the data labels after we have verified that they\n             * fall within the plot area.\n             */seriesTypes.pie.prototype.placeDataLabels=function(){each(this.points,function(point){var dataLabel=point.dataLabel,_pos;if(dataLabel&&point.visible){_pos=dataLabel._pos;if(_pos){// Shorten data labels with ellipsis if they still overflow\n// after the pie has reached minSize (#223).\nif(dataLabel.sideOverflow){dataLabel._attr.width=dataLabel.getBBox().width-dataLabel.sideOverflow;dataLabel.css({width:dataLabel._attr.width+'px',textOverflow:'ellipsis'});dataLabel.shortened=true;}dataLabel.attr(dataLabel._attr);dataLabel[dataLabel.moved?'animate':'attr'](_pos);dataLabel.moved=true;}else if(dataLabel){dataLabel.attr({y:-9999});}}},this);};seriesTypes.pie.prototype.alignDataLabel=noop;/**\n             * Verify whether the data labels are allowed to draw, or we should run more translation and data\n             * label positioning to keep them inside the plot area. Returns true when data labels are ready\n             * to draw.\n             */seriesTypes.pie.prototype.verifyDataLabelOverflow=function(overflow){var center=this.center,options=this.options,centerOption=options.center,minSize=options.minSize||80,newSize=minSize,// If a size is set, return true and don't try to shrink the pie\n// to fit the labels.\nret=options.size!==null;if(!ret){// Handle horizontal size and center\nif(centerOption[0]!==null){// Fixed center\nnewSize=Math.max(center[2]-Math.max(overflow[1],overflow[3]),minSize);}else{// Auto center\nnewSize=Math.max(// horizontal overflow\ncenter[2]-overflow[1]-overflow[3],minSize);// horizontal center\ncenter[0]+=(overflow[3]-overflow[1])/2;}// Handle vertical size and center\nif(centerOption[1]!==null){// Fixed center\nnewSize=Math.max(Math.min(newSize,center[2]-Math.max(overflow[0],overflow[2])),minSize);}else{// Auto center\nnewSize=Math.max(Math.min(newSize,// vertical overflow\ncenter[2]-overflow[0]-overflow[2]),minSize);// vertical center\ncenter[1]+=(overflow[0]-overflow[2])/2;}// If the size must be decreased, we need to run translate and\n// drawDataLabels again\nif(newSize<center[2]){center[2]=newSize;center[3]=Math.min(// #3632\nrelativeLength(options.innerSize||0,newSize),newSize);this.translate(center);if(this.drawDataLabels){this.drawDataLabels();}// Else, return true to indicate that the pie and its labels is\n// within the plot area\n}else{ret=true;}}return ret;};}if(seriesTypes.column){/**\n             * Override the basic data label alignment by adjusting for the position of the column\n             */seriesTypes.column.prototype.alignDataLabel=function(point,dataLabel,options,alignTo,isNew){var inverted=this.chart.inverted,series=point.series,dlBox=point.dlBox||point.shapeArgs,// data label box for alignment\nbelow=pick(point.below,point.plotY>pick(this.translatedThreshold,series.yAxis.len)),// point.below is used in range series\ninside=pick(options.inside,!!this.options.stacking),// draw it inside the box?\novershoot;// Align to the column itself, or the top of it\nif(dlBox){// Area range uses this method but not alignTo\nalignTo=merge(dlBox);if(alignTo.y<0){alignTo.height+=alignTo.y;alignTo.y=0;}overshoot=alignTo.y+alignTo.height-series.yAxis.len;if(overshoot>0){alignTo.height-=overshoot;}if(inverted){alignTo={x:series.yAxis.len-alignTo.y-alignTo.height,y:series.xAxis.len-alignTo.x-alignTo.width,width:alignTo.height,height:alignTo.width};}// Compute the alignment box\nif(!inside){if(inverted){alignTo.x+=below?0:alignTo.width;alignTo.width=0;}else{alignTo.y+=below?alignTo.height:0;alignTo.height=0;}}}// When alignment is undefined (typically columns and bars), display the individual\n// point below or above the point depending on the threshold\noptions.align=pick(options.align,!inverted||inside?'center':below?'right':'left');options.verticalAlign=pick(options.verticalAlign,inverted||inside?'middle':below?'top':'bottom');// Call the parent method\nSeries.prototype.alignDataLabel.call(this,point,dataLabel,options,alignTo,isNew);// If label was justified and we have contrast, set it:\nif(point.isLabelJustified&&point.contrastColor){point.dataLabel.css({color:point.contrastColor});}};}})(Highcharts);(function(H){/**\n         * (c) 2009-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         *//**\n         * Highcharts module to hide overlapping data labels. This module is included in\n         * Highcharts.\n         */var Chart=H.Chart,each=H.each,objectEach=H.objectEach,pick=H.pick,addEvent=H.addEvent;// Collect potensial overlapping data labels. Stack labels probably don't need\n// to be considered because they are usually accompanied by data labels that lie\n// inside the columns.\nChart.prototype.callbacks.push(function(chart){function collectAndHide(){var labels=[];each(chart.yAxis||[],function(yAxis){if(yAxis.options.stackLabels&&!yAxis.options.stackLabels.allowOverlap){objectEach(yAxis.stacks,function(stack){objectEach(stack,function(stackItem){labels.push(stackItem.label);});});}});each(chart.series||[],function(series){var dlOptions=series.options.dataLabels,// Range series have two collections\ncollections=series.dataLabelCollections||['dataLabel'];if((dlOptions.enabled||series._hasPointLabels)&&!dlOptions.allowOverlap&&series.visible){// #3866\neach(collections,function(coll){each(series.points,function(point){if(point[coll]){point[coll].labelrank=pick(point.labelrank,point.shapeArgs&&point.shapeArgs.height);// #4118\nlabels.push(point[coll]);}});});}});chart.hideOverlappingLabels(labels);}// Do it now ...\ncollectAndHide();// ... and after each chart redraw\naddEvent(chart,'redraw',collectAndHide);});/**\n         * Hide overlapping labels. Labels are moved and faded in and out on zoom to\n         * provide a smooth visual imression.\n         */Chart.prototype.hideOverlappingLabels=function(labels){var len=labels.length,label,i,j,label1,label2,isIntersecting,pos1,pos2,parent1,parent2,padding,bBox,intersectRect=function intersectRect(x1,y1,w1,h1,x2,y2,w2,h2){return!(x2>x1+w1||x2+w2<x1||y2>y1+h1||y2+h2<y1);};for(i=0;i<len;i++){label=labels[i];if(label){// Mark with initial opacity\nlabel.oldOpacity=label.opacity;label.newOpacity=1;// Get width and height if pure text nodes (stack labels)\nif(!label.width){bBox=label.getBBox();label.width=bBox.width;label.height=bBox.height;}}}// Prevent a situation in a gradually rising slope, that each label will\n// hide the previous one because the previous one always has lower rank.\nlabels.sort(function(a,b){return(b.labelrank||0)-(a.labelrank||0);});// Detect overlapping labels\nfor(i=0;i<len;i++){label1=labels[i];for(j=i+1;j<len;++j){label2=labels[j];if(label1&&label2&&label1!==label2&&// #6465, polar chart with connectEnds\nlabel1.placed&&label2.placed&&label1.newOpacity!==0&&label2.newOpacity!==0){pos1=label1.alignAttr;pos2=label2.alignAttr;// Different panes have different positions\nparent1=label1.parentGroup;parent2=label2.parentGroup;// Substract the padding if no background or border (#4333)\npadding=2*(label1.box?0:label1.padding||0);isIntersecting=intersectRect(pos1.x+parent1.translateX,pos1.y+parent1.translateY,label1.width-padding,label1.height-padding,pos2.x+parent2.translateX,pos2.y+parent2.translateY,label2.width-padding,label2.height-padding);if(isIntersecting){(label1.labelrank<label2.labelrank?label1:label2).newOpacity=0;}}}}// Hide or show\neach(labels,function(label){var complete,newOpacity;if(label){newOpacity=label.newOpacity;if(label.oldOpacity!==newOpacity&&label.placed){// Make sure the label is completely hidden to avoid catching\n// clicks (#4362)\nif(newOpacity){label.show(true);}else{complete=function complete(){label.hide();};}// Animate or set the opacity\nlabel.alignAttr.opacity=newOpacity;label[label.isOld?'animate':'attr'](label.alignAttr,null,complete);}label.isOld=true;}});};})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var addEvent=H.addEvent,Chart=H.Chart,createElement=H.createElement,css=H.css,defaultOptions=H.defaultOptions,defaultPlotOptions=H.defaultPlotOptions,each=H.each,extend=H.extend,fireEvent=H.fireEvent,hasTouch=H.hasTouch,inArray=H.inArray,isObject=H.isObject,Legend=H.Legend,merge=H.merge,pick=H.pick,Point=H.Point,Series=H.Series,seriesTypes=H.seriesTypes,svg=H.svg,TrackerMixin;/**\n         * TrackerMixin for points and graphs.\n         */TrackerMixin=H.TrackerMixin={/**\n             * Draw the tracker for a point.\n             */drawTrackerPoint:function drawTrackerPoint(){var series=this,chart=series.chart,pointer=chart.pointer,onMouseOver=function onMouseOver(e){var point=pointer.getPointFromEvent(e);// undefined on graph in scatterchart\nif(point!==undefined){pointer.isDirectTouch=true;point.onMouseOver(e);}};// Add reference to the point\neach(series.points,function(point){if(point.graphic){point.graphic.element.point=point;}if(point.dataLabel){if(point.dataLabel.div){point.dataLabel.div.point=point;}else{point.dataLabel.element.point=point;}}});// Add the event listeners, we need to do this only once\nif(!series._hasTracking){each(series.trackerGroups,function(key){if(series[key]){// we don't always have dataLabelsGroup\nseries[key].addClass('highcharts-tracker').on('mouseover',onMouseOver).on('mouseout',function(e){pointer.onTrackerMouseOut(e);});if(hasTouch){series[key].on('touchstart',onMouseOver);}if(series.options.cursor){series[key].css(css).css({cursor:series.options.cursor});}}});series._hasTracking=true;}},/**\n             * Draw the tracker object that sits above all data labels and markers to\n             * track mouse events on the graph or points. For the line type charts\n             * the tracker uses the same graphPath, but with a greater stroke width\n             * for better control.\n             */drawTrackerGraph:function drawTrackerGraph(){var series=this,options=series.options,trackByArea=options.trackByArea,trackerPath=[].concat(trackByArea?series.areaPath:series.graphPath),trackerPathLength=trackerPath.length,chart=series.chart,pointer=chart.pointer,renderer=chart.renderer,snap=chart.options.tooltip.snap,tracker=series.tracker,i,onMouseOver=function onMouseOver(){if(chart.hoverSeries!==series){series.onMouseOver();}},/*\n                     * Empirical lowest possible opacities for TRACKER_FILL for an element to stay invisible but clickable\n                     * IE6: 0.002\n                     * IE7: 0.002\n                     * IE8: 0.002\n                     * IE9: 0.00000000001 (unlimited)\n                     * IE10: 0.0001 (exporting only)\n                     * FF: 0.00000000001 (unlimited)\n                     * Chrome: 0.000001\n                     * Safari: 0.000001\n                     * Opera: 0.00000000001 (unlimited)\n                     */TRACKER_FILL='rgba(192,192,192,'+(svg?0.0001:0.002)+')';// Extend end points. A better way would be to use round linecaps,\n// but those are not clickable in VML.\nif(trackerPathLength&&!trackByArea){i=trackerPathLength+1;while(i--){if(trackerPath[i]==='M'){// extend left side\ntrackerPath.splice(i+1,0,trackerPath[i+1]-snap,trackerPath[i+2],'L');}if(i&&trackerPath[i]==='M'||i===trackerPathLength){// extend right side\ntrackerPath.splice(i,0,'L',trackerPath[i-2]+snap,trackerPath[i-1]);}}}// handle single points\n/*for (i = 0; i < singlePoints.length; i++) {\n                \tsinglePoint = singlePoints[i];\n                \ttrackerPath.push(M, singlePoint.plotX - snap, singlePoint.plotY,\n                \tL, singlePoint.plotX + snap, singlePoint.plotY);\n                }*/// draw the tracker\nif(tracker){tracker.attr({d:trackerPath});}else if(series.graph){// create\nseries.tracker=renderer.path(trackerPath).attr({'stroke-linejoin':'round',// #1225\nvisibility:series.visible?'visible':'hidden',stroke:TRACKER_FILL,fill:trackByArea?TRACKER_FILL:'none','stroke-width':series.graph.strokeWidth()+(trackByArea?0:2*snap),zIndex:2}).add(series.group);// The tracker is added to the series group, which is clipped, but is covered\n// by the marker group. So the marker group also needs to capture events.\neach([series.tracker,series.markerGroup],function(tracker){tracker.addClass('highcharts-tracker').on('mouseover',onMouseOver).on('mouseout',function(e){pointer.onTrackerMouseOut(e);});if(options.cursor){tracker.css({cursor:options.cursor});}if(hasTouch){tracker.on('touchstart',onMouseOver);}});}}};/* End TrackerMixin *//**\n         * Add tracking event listener to the series group, so the point graphics\n         * themselves act as trackers\n         */if(seriesTypes.column){seriesTypes.column.prototype.drawTracker=TrackerMixin.drawTrackerPoint;}if(seriesTypes.pie){seriesTypes.pie.prototype.drawTracker=TrackerMixin.drawTrackerPoint;}if(seriesTypes.scatter){seriesTypes.scatter.prototype.drawTracker=TrackerMixin.drawTrackerPoint;}/*\n         * Extend Legend for item events\n         */extend(Legend.prototype,{setItemEvents:function setItemEvents(item,legendItem,useHTML){var legend=this,boxWrapper=legend.chart.renderer.boxWrapper,activeClass='highcharts-legend-'+(item.series?'point':'series')+'-active';// Set the events on the item group, or in case of useHTML, the item itself (#1249)\n(useHTML?legendItem:item.legendGroup).on('mouseover',function(){item.setState('hover');// A CSS class to dim or hide other than the hovered series\nboxWrapper.addClass(activeClass);legendItem.css(legend.options.itemHoverStyle);}).on('mouseout',function(){legendItem.css(merge(item.visible?legend.itemStyle:legend.itemHiddenStyle));// A CSS class to dim or hide other than the hovered series\nboxWrapper.removeClass(activeClass);item.setState();}).on('click',function(event){var strLegendItemClick='legendItemClick',fnLegendItemClick=function fnLegendItemClick(){if(item.setVisible){item.setVisible();}};// Pass over the click/touch event. #4.\nevent={browserEvent:event};// click the name or symbol\nif(item.firePointEvent){// point\nitem.firePointEvent(strLegendItemClick,event,fnLegendItemClick);}else{fireEvent(item,strLegendItemClick,event,fnLegendItemClick);}});},createCheckboxForItem:function createCheckboxForItem(item){var legend=this;item.checkbox=createElement('input',{type:'checkbox',checked:item.selected,defaultChecked:item.selected// required by IE7\n},legend.options.itemCheckboxStyle,legend.chart.container);addEvent(item.checkbox,'click',function(event){var target=event.target;fireEvent(item.series||item,'checkboxClick',{// #3712\nchecked:target.checked,item:item},function(){item.select();});});}});// Add pointer cursor to legend itemstyle in defaultOptions\ndefaultOptions.legend.itemStyle.cursor='pointer';/*\n         * Extend the Chart object with interaction\n         */extend(Chart.prototype,/** @lends Chart.prototype */{/**\n             * Display the zoom button.\n             *\n             * @private\n             */showResetZoom:function showResetZoom(){var chart=this,lang=defaultOptions.lang,btnOptions=chart.options.chart.resetZoomButton,theme=btnOptions.theme,states=theme.states,alignTo=btnOptions.relativeTo==='chart'?null:'plotBox';function zoomOut(){chart.zoomOut();}this.resetZoomButton=chart.renderer.button(lang.resetZoom,null,null,zoomOut,theme,states&&states.hover).attr({align:btnOptions.position.align,title:lang.resetZoomTitle}).addClass('highcharts-reset-zoom').add().align(btnOptions.position,false,alignTo);},/**\n             * Zoom out to 1:1.\n             *\n             * @private\n             */zoomOut:function zoomOut(){var chart=this;fireEvent(chart,'selection',{resetSelection:true},function(){chart.zoom();});},/**\n             * Zoom into a given portion of the chart given by axis coordinates.\n             * @param {Object} event\n             *\n             * @private\n             */zoom:function zoom(event){var chart=this,hasZoomed,pointer=chart.pointer,displayButton=false,resetZoomButton;// If zoom is called with no arguments, reset the axes\nif(!event||event.resetSelection){each(chart.axes,function(axis){hasZoomed=axis.zoom();});pointer.initiated=false;// #6804\n}else{// else, zoom in on all axes\neach(event.xAxis.concat(event.yAxis),function(axisData){var axis=axisData.axis,isXAxis=axis.isXAxis;// don't zoom more than minRange\nif(pointer[isXAxis?'zoomX':'zoomY']){hasZoomed=axis.zoom(axisData.min,axisData.max);if(axis.displayBtn){displayButton=true;}}});}// Show or hide the Reset zoom button\nresetZoomButton=chart.resetZoomButton;if(displayButton&&!resetZoomButton){chart.showResetZoom();}else if(!displayButton&&isObject(resetZoomButton)){chart.resetZoomButton=resetZoomButton.destroy();}// Redraw\nif(hasZoomed){chart.redraw(pick(chart.options.chart.animation,event&&event.animation,chart.pointCount<100)// animation\n);}},/**\n             * Pan the chart by dragging the mouse across the pane. This function is\n             * called on mouse move, and the distance to pan is computed from chartX\n             * compared to the first chartX position in the dragging operation.\n             *\n             * @private\n             */pan:function pan(e,panning){var chart=this,hoverPoints=chart.hoverPoints,doRedraw;// remove active points for shared tooltip\nif(hoverPoints){each(hoverPoints,function(point){point.setState();});}each(panning==='xy'?[1,0]:[1],function(isX){// xy is used in maps\nvar axis=chart[isX?'xAxis':'yAxis'][0],horiz=axis.horiz,mousePos=e[horiz?'chartX':'chartY'],mouseDown=horiz?'mouseDownX':'mouseDownY',startPos=chart[mouseDown],halfPointRange=(axis.pointRange||0)/2,extremes=axis.getExtremes(),panMin=axis.toValue(startPos-mousePos,true)+halfPointRange,panMax=axis.toValue(startPos+axis.len-mousePos,true)-halfPointRange,flipped=panMax<panMin,newMin=flipped?panMax:panMin,newMax=flipped?panMin:panMax,paddedMin=Math.min(extremes.dataMin,axis.toValue(axis.toPixels(extremes.min)-axis.minPixelPadding)),paddedMax=Math.max(extremes.dataMax,axis.toValue(axis.toPixels(extremes.max)+axis.minPixelPadding)),spill;// If the new range spills over, either to the min or max, adjust\n// the new range.\nspill=paddedMin-newMin;if(spill>0){newMax+=spill;newMin=paddedMin;}spill=newMax-paddedMax;if(spill>0){newMax=paddedMax;newMin-=spill;}// Set new extremes if they are actually new\nif(axis.series.length&&newMin!==extremes.min&&newMax!==extremes.max){axis.setExtremes(newMin,newMax,false,false,{trigger:'pan'});doRedraw=true;}chart[mouseDown]=mousePos;// set new reference for next run\n});if(doRedraw){chart.redraw(false);}css(chart.container,{cursor:'move'});}});/*\n         * Extend the Point object with interaction\n         */extend(Point.prototype,/** @lends Highcharts.Point.prototype */{/**\n             * Toggle the selection status of a point.\n             * @param  {Boolean} [selected]\n             *         When `true`, the point is selected. When `false`, the point is\n             *         unselected. When `null` or `undefined`, the selection state is\n             *         toggled.\n             * @param  {Boolean} [accumulate=false]\n             *         When `true`, the selection is added to other selected points.\n             *         When `false`, other selected points are deselected. Internally in\n             *         Highcharts, when {@link http://api.highcharts.com/highcharts/plotOptions.series.allowPointSelect|allowPointSelect}\n             *         is `true`, selected points are accumulated on Control, Shift or\n             *         Cmd clicking the point.\n             *\n             * @see    Highcharts.Chart#getSelectedPoints\n             *\n             * @sample highcharts/members/point-select/\n             *         Select a point from a button\n             * @sample highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             * @sample maps/series/data-id/\n             *         Select a point in Highmaps\n             */select:function select(selected,accumulate){var point=this,series=point.series,chart=series.chart;selected=pick(selected,!point.selected);// fire the event with the default handler\npoint.firePointEvent(selected?'select':'unselect',{accumulate:accumulate},function(){/**\n                     * Whether the point is selected or not.\n                     * @see Point#select\n                     * @see Chart#getSelectedPoints\n                     * @memberof Point\n                     * @name selected\n                     * @type {Boolean}\n                     */point.selected=point.options.selected=selected;series.options.data[inArray(point,series.data)]=point.options;point.setState(selected&&'select');// unselect all other points unless Ctrl or Cmd + click\nif(!accumulate){each(chart.getSelectedPoints(),function(loopPoint){if(loopPoint.selected&&loopPoint!==point){loopPoint.selected=loopPoint.options.selected=false;series.options.data[inArray(loopPoint,series.data)]=loopPoint.options;loopPoint.setState('');loopPoint.firePointEvent('unselect');}});}});},/**\n             * Runs on mouse over the point. Called internally from mouse and touch\n             * events.\n             *\n             * @param {Object} e The event arguments\n             */onMouseOver:function onMouseOver(e){var point=this,series=point.series,chart=series.chart,pointer=chart.pointer;e=e?pointer.normalize(e):// In cases where onMouseOver is called directly without an event\npointer.getChartCoordinatesFromPoint(point,chart.inverted);pointer.runPointActions(e,point);},/**\n             * Runs on mouse out from the point. Called internally from mouse and touch\n             * events.\n             */onMouseOut:function onMouseOut(){var point=this,chart=point.series.chart;point.firePointEvent('mouseOut');each(chart.hoverPoints||[],function(p){p.setState();});chart.hoverPoints=chart.hoverPoint=null;},/**\n             * Import events from the series' and point's options. Only do it on\n             * demand, to save processing time on hovering.\n             *\n             * @private\n             */importEvents:function importEvents(){if(!this.hasImportedEvents){var point=this,options=merge(point.series.options.point,point.options),events=options.events;point.events=events;H.objectEach(events,function(event,eventType){addEvent(point,eventType,event);});this.hasImportedEvents=true;}},/**\n             * Set the point's state.\n             * @param  {String} [state]\n             *         The new state, can be one of `''` (an empty string), `hover` or\n             *         `select`.\n             */setState:function setState(state,move){var point=this,plotX=Math.floor(point.plotX),// #4586\nplotY=point.plotY,series=point.series,stateOptions=series.options.states[state]||{},markerOptions=defaultPlotOptions[series.type].marker&&series.options.marker,normalDisabled=markerOptions&&markerOptions.enabled===false,markerStateOptions=markerOptions&&markerOptions.states&&markerOptions.states[state]||{},stateDisabled=markerStateOptions.enabled===false,stateMarkerGraphic=series.stateMarkerGraphic,pointMarker=point.marker||{},chart=series.chart,halo=series.halo,haloOptions,markerAttribs,hasMarkers=markerOptions&&series.markerAttribs,newSymbol;state=state||'';// empty string\nif(// already has this state\nstate===point.state&&!move||// selected points don't respond to hover\npoint.selected&&state!=='select'||// series' state options is disabled\nstateOptions.enabled===false||// general point marker's state options is disabled\nstate&&(stateDisabled||normalDisabled&&markerStateOptions.enabled===false)||// individual point marker's state options is disabled\nstate&&pointMarker.states&&pointMarker.states[state]&&pointMarker.states[state].enabled===false// #1610\n){return;}if(hasMarkers){markerAttribs=series.markerAttribs(point,state);}// Apply hover styles to the existing point\nif(point.graphic){if(point.state){point.graphic.removeClass('highcharts-point-'+point.state);}if(state){point.graphic.addClass('highcharts-point-'+state);}/*attribs = radius ? { // new symbol attributes (#507, #612)\n                    \tx: plotX - radius,\n                    \ty: plotY - radius,\n                    \twidth: 2 * radius,\n                    \theight: 2 * radius\n                    } : {};*///attribs = merge(series.pointAttribs(point, state), attribs);\npoint.graphic.animate(series.pointAttribs(point,state),pick(chart.options.chart.animation,stateOptions.animation));if(markerAttribs){point.graphic.animate(markerAttribs,pick(chart.options.chart.animation,// Turn off globally\nmarkerStateOptions.animation,markerOptions.animation));}// Zooming in from a range with no markers to a range with markers\nif(stateMarkerGraphic){stateMarkerGraphic.hide();}}else{// if a graphic is not applied to each point in the normal state, create a shared\n// graphic for the hover state\nif(state&&markerStateOptions){newSymbol=pointMarker.symbol||series.symbol;// If the point has another symbol than the previous one, throw away the\n// state marker graphic and force a new one (#1459)\nif(stateMarkerGraphic&&stateMarkerGraphic.currentSymbol!==newSymbol){stateMarkerGraphic=stateMarkerGraphic.destroy();}// Add a new state marker graphic\nif(!stateMarkerGraphic){if(newSymbol){series.stateMarkerGraphic=stateMarkerGraphic=chart.renderer.symbol(newSymbol,markerAttribs.x,markerAttribs.y,markerAttribs.width,markerAttribs.height).add(series.markerGroup);stateMarkerGraphic.currentSymbol=newSymbol;}// Move the existing graphic\n}else{stateMarkerGraphic[move?'animate':'attr']({// #1054\nx:markerAttribs.x,y:markerAttribs.y});}if(stateMarkerGraphic){stateMarkerGraphic.attr(series.pointAttribs(point,state));}}if(stateMarkerGraphic){stateMarkerGraphic[state&&chart.isInsidePlot(plotX,plotY,chart.inverted)?'show':'hide']();// #2450\nstateMarkerGraphic.element.point=point;// #4310\n}}// Show me your halo\nhaloOptions=stateOptions.halo;if(haloOptions&&haloOptions.size){if(!halo){series.halo=halo=chart.renderer.path()// #5818, #5903, #6705\n.add((point.graphic||stateMarkerGraphic).parentGroup);}halo[move?'animate':'attr']({d:point.haloPath(haloOptions.size)});halo.attr({'class':'highcharts-halo highcharts-color-'+pick(point.colorIndex,series.colorIndex)});halo.point=point;// #6055\nhalo.attr(extend({'fill':point.color||series.color,'fill-opacity':haloOptions.opacity,'zIndex':-1// #4929, IE8 added halo above everything\n},haloOptions.attributes));}else if(halo&&halo.point&&halo.point.haloPath){// Animate back to 0 on the current halo point (#6055)\nhalo.animate({d:halo.point.haloPath(0)});}point.state=state;},/**\n             * Get the path definition for the halo, which is usually a shadow-like\n             * circle around the currently hovered point.\n             * @param  {Number} size\n             *         The radius of the circular halo.\n             * @return {Array} The path definition\n             */haloPath:function haloPath(size){var series=this.series,chart=series.chart;return chart.renderer.symbols.circle(Math.floor(this.plotX)-size,this.plotY-size,size*2,size*2);}});/*\n         * Extend the Series object with interaction\n         */extend(Series.prototype,/** @lends Highcharts.Series.prototype */{/**\n             * Runs on mouse over the series graphical items.\n             */onMouseOver:function onMouseOver(){var series=this,chart=series.chart,hoverSeries=chart.hoverSeries;// set normal state to previous series\nif(hoverSeries&&hoverSeries!==series){hoverSeries.onMouseOut();}// trigger the event, but to save processing time,\n// only if defined\nif(series.options.events.mouseOver){fireEvent(series,'mouseOver');}// hover this\nseries.setState('hover');chart.hoverSeries=series;},/**\n             * Runs on mouse out of the series graphical items.\n             */onMouseOut:function onMouseOut(){// trigger the event only if listeners exist\nvar series=this,options=series.options,chart=series.chart,tooltip=chart.tooltip,hoverPoint=chart.hoverPoint;chart.hoverSeries=null;// #182, set to null before the mouseOut event fires\n// trigger mouse out on the point, which must be in this series\nif(hoverPoint){hoverPoint.onMouseOut();}// fire the mouse out event\nif(series&&options.events.mouseOut){fireEvent(series,'mouseOut');}// hide the tooltip\nif(tooltip&&!series.stickyTracking&&(!tooltip.shared||series.noSharedTooltip)){tooltip.hide();}// set normal state\nseries.setState();},/**\n             * Set the state of the series. Called internally on mouse interaction and\n             * select operations, but it can also be called directly to visually\n             * highlight a series.\n             *\n             * @param  {String} [state]\n             *         Can be either `hover`, `select` or undefined to set to normal\n             *         state.\n             */setState:function setState(state){var series=this,options=series.options,graph=series.graph,stateOptions=options.states,lineWidth=options.lineWidth,attribs,i=0;state=state||'';if(series.state!==state){// Toggle class names\neach([series.group,series.markerGroup,series.dataLabelsGroup],function(group){if(group){// Old state\nif(series.state){group.removeClass('highcharts-series-'+series.state);}// New state\nif(state){group.addClass('highcharts-series-'+state);}}});series.state=state;if(stateOptions[state]&&stateOptions[state].enabled===false){return;}if(state){lineWidth=stateOptions[state].lineWidth||lineWidth+(stateOptions[state].lineWidthPlus||0);// #4035\n}if(graph&&!graph.dashstyle){// hover is turned off for dashed lines in VML\nattribs={'stroke-width':lineWidth};// Animate the graph stroke-width. By default a quick animation\n// to hover, slower to un-hover.\ngraph.animate(attribs,pick(series.chart.options.chart.animation,stateOptions[state]&&stateOptions[state].animation));while(series['zone-graph-'+i]){series['zone-graph-'+i].attr(attribs);i=i+1;}}}},/**\n             * Show or hide the series.\n             *\n             * @param  {Boolean} [visible]\n             *         True to show the series, false to hide. If undefined, the\n             *         visibility is toggled.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after the series is altered. If doing\n             *         more operations on the chart, it is a good idea to set redraw to\n             *         false and call {@link Chart#redraw|chart.redraw()} after.\n             */setVisible:function setVisible(vis,redraw){var series=this,chart=series.chart,legendItem=series.legendItem,showOrHide,ignoreHiddenSeries=chart.options.chart.ignoreHiddenSeries,oldVisibility=series.visible;// if called without an argument, toggle visibility\nseries.visible=vis=series.options.visible=series.userOptions.visible=vis===undefined?!oldVisibility:vis;// #5618\nshowOrHide=vis?'show':'hide';// show or hide elements\neach(['group','dataLabelsGroup','markerGroup','tracker','tt'],function(key){if(series[key]){series[key][showOrHide]();}});// hide tooltip (#1361)\nif(chart.hoverSeries===series||(chart.hoverPoint&&chart.hoverPoint.series)===series){series.onMouseOut();}if(legendItem){chart.legend.colorizeItem(series,vis);}// rescale or adapt to resized chart\nseries.isDirty=true;// in a stack, all other series are affected\nif(series.options.stacking){each(chart.series,function(otherSeries){if(otherSeries.options.stacking&&otherSeries.visible){otherSeries.isDirty=true;}});}// show or hide linked series\neach(series.linkedSeries,function(otherSeries){otherSeries.setVisible(vis,false);});if(ignoreHiddenSeries){chart.isDirtyBox=true;}if(redraw!==false){chart.redraw();}fireEvent(series,showOrHide);},/**\n             * Show the series if hidden.\n             *\n             * @sample highcharts/members/series-hide/\n             *         Toggle visibility from a button\n             */show:function show(){this.setVisible(true);},/**\n             * Hide the series if visible. If the {@link\n             * https://api.highcharts.com/highcharts/chart.ignoreHiddenSeries|\n             * chart.ignoreHiddenSeries} option is true, the chart is redrawn without\n             * this series.\n             *\n             * @sample highcharts/members/series-hide/\n             *         Toggle visibility from a button\n             */hide:function hide(){this.setVisible(false);},/**\n             * Select or unselect the series. This means its {@link\n             * Highcharts.Series.selected|selected} property is set, the checkbox in the\n             * legend is toggled and when selected, the series is returned by the\n             * {@link Highcharts.Chart#getSelectedSeries} function.\n             *\n             * @param  {Boolean} [selected]\n             *         True to select the series, false to unselect. If\tundefined, the\n             *         selection state is toggled.\n             *\n             * @sample highcharts/members/series-select/\n             *         Select a series from a button\n             */select:function select(selected){var series=this;series.selected=selected=selected===undefined?!series.selected:selected;if(series.checkbox){series.checkbox.checked=selected;}fireEvent(series,selected?'select':'unselect');},drawTracker:TrackerMixin.drawTrackerGraph});})(Highcharts);(function(H){/**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */var Chart=H.Chart,each=H.each,inArray=H.inArray,isArray=H.isArray,isObject=H.isObject,pick=H.pick,splat=H.splat;/**\n         * Update the chart based on the current chart/document size and options for\n         * responsiveness.\n         */Chart.prototype.setResponsive=function(redraw){var options=this.options.responsive,ruleIds=[],currentResponsive=this.currentResponsive,currentRuleIds;if(options&&options.rules){each(options.rules,function(rule){if(rule._id===undefined){rule._id=H.uniqueKey();}this.matchResponsiveRule(rule,ruleIds,redraw);},this);}// Merge matching rules\nvar mergedOptions=H.merge.apply(0,H.map(ruleIds,function(ruleId){return H.find(options.rules,function(rule){return rule._id===ruleId;}).chartOptions;}));// Stringified key for the rules that currently apply.\nruleIds=ruleIds.toString()||undefined;currentRuleIds=currentResponsive&&currentResponsive.ruleIds;// Changes in what rules apply\nif(ruleIds!==currentRuleIds){// Undo previous rules. Before we apply a new set of rules, we need to\n// roll back completely to base options (#6291).\nif(currentResponsive){this.update(currentResponsive.undoOptions,redraw);}if(ruleIds){// Get undo-options for matching rules\nthis.currentResponsive={ruleIds:ruleIds,mergedOptions:mergedOptions,undoOptions:this.currentOptions(mergedOptions)};this.update(mergedOptions,redraw);}else{this.currentResponsive=undefined;}}};/**\n         * Handle a single responsiveness rule\n         */Chart.prototype.matchResponsiveRule=function(rule,matches){var condition=rule.condition,fn=condition.callback||function(){return this.chartWidth<=pick(condition.maxWidth,Number.MAX_VALUE)&&this.chartHeight<=pick(condition.maxHeight,Number.MAX_VALUE)&&this.chartWidth>=pick(condition.minWidth,0)&&this.chartHeight>=pick(condition.minHeight,0);};if(fn.call(this)){matches.push(rule._id);}};/**\n         * Get the current values for a given set of options. Used before we update\n         * the chart with a new responsiveness rule.\n         * TODO: Restore axis options (by id?)\n         */Chart.prototype.currentOptions=function(options){var ret={};/**\n             * Recurse over a set of options and its current values,\n             * and store the current values in the ret object.\n             */function getCurrent(options,curr,ret,depth){var i;H.objectEach(options,function(val,key){if(!depth&&inArray(key,['series','xAxis','yAxis'])>-1){options[key]=splat(options[key]);ret[key]=[];// Iterate over collections like series, xAxis or yAxis and map\n// the items by index.\nfor(i=0;i<options[key].length;i++){if(curr[key][i]){// Item exists in current data (#6347)\nret[key][i]={};getCurrent(val[i],curr[key][i],ret[key][i],depth+1);}}}else if(isObject(val)){ret[key]=isArray(val)?[]:{};getCurrent(val,curr[key]||{},ret[key],depth+1);}else{ret[key]=curr[key]||null;}});}getCurrent(options,this.options,ret,0);return ret;};})(Highcharts);return Highcharts;});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79)(module)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 0.fd2ed8c78068b7fa72ad.js","import React, { PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { Select, Form, Input, Button, Icon, Table, Modal, Menu, Dropdown, Spin } from 'antd'\nimport moment from 'moment'\n\nimport { getEndpoints, getCounters, getCharts, saveSearchText, getId } from '../modules/index'\n\nimport './SearchData.scss'\n\nconst FormItem = Form.Item\nconst Option = Select.Option\n\n\nclass SearchData extends React.PureComponent {\n  state = {\n    endpointInputBorderColor: '#d9d9d9',\n    endpoint: '',\n    tag: '',\n    counter: '',\n    searchEndpointsText: '',\n    searchCountersText: '',\n    selectedEndpointRowKeys: [],\n    selectedCounterRowKeys: [],\n    selectedEndpointRows: [],\n    selectedCounterRows: [],\n    endpointsLimit: '50',\n    countersLimit: '50',\n  }\n  componentDidMount() {\n    const { searchText } = this.props.dashboard.toJS()\n    const { endpoint, tag, counter, selectedEndpointRows, selectedCounterRows } = searchText\n    const selectedEndpointRowKeys = selectedEndpointRows.length === 0 ? [] : selectedEndpointRows.map(obj => obj.id)\n    const selectedCounterRowKeys = selectedCounterRows.length === 0 ? [] : selectedCounterRows.map(obj => obj.key)\n    this.setState({endpoint, tag, counter, selectedEndpointRows, selectedCounterRows, selectedEndpointRowKeys, selectedCounterRowKeys})\n  }\n\n  changeEndpoint = (e) => {\n    const endpointText = e.target.value\n    this.setState({endpoint: endpointText})\n    const str = endpointText.replace(/\\s+/g, '')\n    // 除去所有空格后字符串长度为0，说明没有输入\n    if (str.length === 0) {\n      this.setState({endpointInputBorderColor: 'red'})\n    } else {\n      this.setState({endpointInputBorderColor: '#d9d9d9'})\n    }\n  }\n\n  changeTag = (e) => {\n    this.setState({tag: e.target.value})\n  }\n\n  changeCounter = (e) => {\n    this.setState({counter: e.target.value})\n  }\n\n  onInputEndpointChange = (e) => {\n    this.setState({ searchEndpointsText: e.target.value, selectedEndpointRowKeys: [], selectedEndpointRows: [] })\n  }\n\n  onInputCounterChange = (e) => {\n    this.setState({ searchCountersText: e.target.value, selectedCounterRowKeys: [], selectedCounterRows: [] })\n  }\n\n  queryEndpoints = (e) => {\n    const { endpoint, tag } = this.state\n    if ((endpoint.replace(/[\\s]/g, '') === '') &&\n    (tag.replace(/[\\s]/g, '') === '')) {\n      Modal.warning({\n        title: '提示',\n        content: '请填写有效Endpoint或者标签！',\n      })\n      return false\n    }\n    // 去请求数据之前先把目前选中的endpoints重置\n    this.setState({ selectedEndpointRowKeys: [], selectedEndpointRows: [] })\n    if (e.type === 'submit') {\n      e.preventDefault()\n      this.props.getEndpoints('getEndpoints', endpoint, tag, this.state.endpointsLimit)\n    } else {\n      this.setState({endpointsLimit: e})\n      this.props.getEndpoints('getEndpoints', endpoint, tag, e)\n    }\n  }\n\n  queryCounters = (e) => {\n    const selectedRows = this.state.selectedEndpointRows\n    if (selectedRows.length === 0) {\n      Modal.warning({\n        title: '提示',\n        content: '请勾选要查看的endpoints',\n      })\n      return false\n    }\n    // 去请求数据之前先把目前选中的counters重置\n    this.setState({ selectedCounterRowKeys: [], selectedCounterRows: [] })\n    const endpointIds = selectedRows.map(obj => obj.id).join()\n    const { counter } = this.state\n    // 先判断是全局搜索还是切换limit\n    if (e.type === 'submit') {\n      e.preventDefault()\n      this.props.getCounters(endpointIds, counter, this.state.countersLimit)\n    } else {\n      this.setState({countersLimit: e})\n      this.props.getCounters(endpointIds, counter, e)\n    }\n  }\n\n  showCharts = (title, singleCounter) => {\n    // 获取选中的endpoints name和conuters name,把他们转化成两个数组\n    const selectedEndpointRows = this.state.selectedEndpointRows\n    const selectedCounterRows = this.state.selectedCounterRows\n    // 如果点击画图按钮，判断是否选择了endpoint和counter\n    if (selectedEndpointRows.length === 0 || (singleCounter === undefined && selectedCounterRows.length === 0)) {\n      Modal.warning({\n        title: '提示',\n        content: '请勾选要查看的endpoints和counters！',\n      })\n      return false\n    }\n    const endpoints = selectedEndpointRows.map(obj => obj.endpoint)\n    const counters = (singleCounter === undefined) ?\n    selectedCounterRows.map(obj => obj.counter) : [singleCounter]\n    const endTime = moment().unix() // 单位是秒\n    const startTime = moment().subtract(1, 'hour').unix()\n    // 把如下数据存入store中以便在其他地方使用\n    this.props.saveSearchText({\n      endpoint: this.state.endpoint,\n      tag: this.state.tag,\n      counter: this.state.counter,\n      selectedEndpointRows: this.state.selectedEndpointRows,\n      selectedCounterRows: this.state.selectedCounterRows,\n    })\n    // singleCounter不为undefined时说明点击的查看大图\n    this.props.getId(endpoints, counters, title, startTime, endTime, singleCounter)\n  }\n\n  render () {\n    const { endpoints, counters, isLoading } = this.props.dashboard.toJS()\n    const endpointsColumns = [{\n      title: 'Endpoints',\n      dataIndex: 'endpoint',\n      key: 'id',\n    }]\n    const rowEndpointSelection = {\n      selections: true,\n      selectedRowKeys: this.state.selectedEndpointRowKeys,\n      onChange: (selectedRowKeys, selectedRows) => {\n        this.setState({selectedEndpointRowKeys: selectedRowKeys, selectedEndpointRows: selectedRows})\n      },\n      onSelectInvert: selectedRows => {\n        let selectedEndpointRows = selectedRows\n        if (selectedRows.length !== 0) {\n          selectedEndpointRows = selectedRows.map(item => {\n            return endpoints.filter(obj => obj.id === item)[0]\n          })\n        }\n        this.setState({ selectedEndpointRows, selectedEndpointRowKeys: selectedRows })\n      },\n    }\n    const rowCounterSelection = {\n      selections: true,\n      selectedRowKeys: this.state.selectedCounterRowKeys,\n      onChange: (selectedRowKeys, selectedRows) => {\n        this.setState({selectedCounterRowKeys: selectedRowKeys, selectedCounterRows: selectedRows})\n      },\n      onSelectInvert: selectedRows => {\n        let selectedCounterRows = selectedRows\n        if (selectedRows.length !== 0) {\n          selectedCounterRows = selectedRows.map(item => {\n            return counters.filter(obj => obj.key === item)[0]\n          })\n        }\n        this.setState({ selectedCounterRows, selectedCounterRowKeys: selectedRows })\n      },\n    }\n    let count = 0\n    const countersKeyData = counters.map(obj => {\n      const newObj = obj\n      count += 1\n      newObj.key = count\n      return newObj\n    })\n    const countersColumns = [{\n      title: 'Counters',\n      dataIndex: 'counter',\n      key: 'key',\n      render: (text, record) => <a onClick={() => this.showCharts('Endpoint', record.counter)}>{text}</a>\n    }, {\n      title: '类型',\n      dataIndex: 'type',\n      width: 60,\n    }, {\n      title: '频率',\n      dataIndex: 'step',\n      width: 50,\n    }]\n    const menu = (\n      <Menu>\n        <Menu.Item>\n          <Button type=\"dashed\" onClick={() => this.showCharts('Endpoint')}>Endpoint视角</Button>\n        </Menu.Item>\n        <Menu.Item>\n          <Button type=\"dashed\" onClick={() => this.showCharts('Counter')}>Counter视角</Button>\n        </Menu.Item>\n        <Menu.Item>\n          <Button type=\"dashed\" onClick={() => this.showCharts('组合')}>组合视角</Button>\n        </Menu.Item>\n      </Menu>\n    )\n    const formEndpointItemLayout = {\n      labelCol: { span: 4 },\n      wrapperCol: { span: 19 },\n    }\n    const formCounterItemLayout = {\n      labelCol: { span: 2 },\n      wrapperCol: { span: 21 },\n    }\n    const tailEndpointFormItemLayout = {\n      wrapperCol: {\n        sm: {\n          span: 19,\n          offset: 4,\n        },\n      },\n    }\n    const tailCounterFormItemLayout = {\n      wrapperCol: {\n        sm: {\n          span: 21,\n          offset: 2,\n        },\n      },\n    }\n    return (\n      <div id=\"dashboard-container\">\n        <div className=\"endpoints\">\n          <Form onSubmit={this.queryEndpoints}>\n            <div className=\"content\">\n              <div className=\"header\">\n                <span className=\"num\">1</span>\n                <span className=\"title\">搜索Endpoints</span>\n              </div>\n              <div className=\"up\">\n                <div>\n                  <FormItem {...formEndpointItemLayout} label=\"Endpoint\">\n                    <Input\n                      id=\"txtDashBoardEndPoint\"\n                      placeholder=\"可以用空格分割多个搜索关键字\"\n                      onChange={this.changeEndpoint}\n                      value={this.state.endpoint}\n                      style={{borderColor: this.state.endpointInputBorderColor}}/>\n                  </FormItem>\n                  <FormItem {...formEndpointItemLayout} label=\"标签\">\n                    <Input\n                      id=\"txtDashBoardTag\"\n                      placeholder=\"eg:job=appstore-web\"\n                      value={this.state.tag}\n                      onChange={this.changeTag}\n                    />\n                  </FormItem>\n                  <FormItem {...tailEndpointFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">全局搜索</Button>\n                  </FormItem>\n                </div>\n              </div>\n\n              {endpoints.length === 0 ?\n                (<div className=\"down\">\n                  无数据\n                </div>) :\n                (<div>\n                  <div id=\"table-header\">\n                    <FormItem>\n                      <Select value={this.state.endpointsLimit} style={{ width: 80, position: 'relative', top: -1 }} onChange={this.queryEndpoints}>\n                        <Option value=\"50\">Limit50</Option>\n                        <Option value=\"100\">Limit100</Option>\n                        <Option value=\"500\">Limit500</Option>\n                      </Select>\n                    </FormItem>\n                    <FormItem className=\"check\">\n                      <Input\n                        style={{ width: 200 }}\n                        placeholder=\"请输入过滤信息\"\n                        suffix={<Icon type=\"filter\" />}\n                        value={this.state.searchEndpointsText}\n                        onChange={this.onInputEndpointChange}\n                      />\n                    </FormItem>\n                  </div>\n                  <div id=\"endpoints-results\">\n                    <Table\n                      className=\"narrow-rows\"\n                      rowKey={record => record.id}\n                      rowSelection={rowEndpointSelection}\n                      columns={endpointsColumns}\n                      dataSource={\n                        endpoints.filter(item => {\n                          const str = this.state.searchEndpointsText\n                          try{\n                            const reg = new RegExp(str, 'gi')\n                            return item.endpoint.match(reg)\n                          } catch(e) {\n                            return true\n                          }\n                        })\n                      }\n                      pagination={false}\n                    />\n                  </div>\n                </div>\n                )\n              }\n            </div>\n          </Form>\n        </div>\n        {isLoading === 0 ? <div className=\"dashboard-searchdata-loading\"><Spin size=\"large\" /></div> : ''}\n        <div className=\"counters\">\n          <p className=\"header\">\n            <span className=\"num\">2</span>\n            <span className=\"title\">搜索Counters</span>\n          </p>\n          <div className=\"up\">\n            <Form onSubmit={this.queryCounters}>\n              <div className=\"content\">\n                <div>\n                  <FormItem {...formCounterItemLayout} label=\"Counter\">\n                    <Input\n                      id=\"txtDashBoardCounter\"\n                      placeholder=\"可以用空格分割多个搜索关键字\"\n                      value={this.state.counter}\n                      onChange={this.changeCounter}\n                    />\n                  </FormItem>\n                  <FormItem {...tailCounterFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">搜索</Button>\n                  </FormItem>\n                </div>\n              </div>\n            </Form>\n          </div>\n          {counters.length === 0 ?\n            (<div className=\"down\">\n              无数据\n            </div>) :\n            (<div id=\"counters-results\">\n              <Form>\n                <div className=\"title\">\n                  <FormItem>\n                    <Select value={this.state.countersLimit} style={{ width: 80 }} onChange={this.queryCounters}>\n                      <Option value=\"50\">Limit50</Option>\n                      <Option value=\"100\">Limit100</Option>\n                      <Option value=\"500\">Limit500</Option>\n                    </Select>\n                  </FormItem>\n                  <FormItem>\n                    <Input\n                      style={{ width: 140 }}\n                      placeholder=\"请输入过滤信息\"\n                      suffix={<Icon type=\"filter\" />}\n                      value={this.state.searchCountersText}\n                      onChange={this.onInputCounterChange}\n                    />\n                  </FormItem>\n                  <FormItem className=\"check\">\n                    <Dropdown overlay={menu}>\n                      <Button type=\"default\">看图</Button>\n                    </Dropdown>\n                  </FormItem>\n                </div>\n                <Table\n                  className=\"narrow-rows\"\n                  rowSelection={rowCounterSelection}\n                  columns={countersColumns}\n                  dataSource={countersKeyData.filter(item => {\n                    const str = this.state.searchCountersText.replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\")\n                    const reg = new RegExp(str, 'gi')\n                    return item.counter.match(reg)\n                  })}\n                  pagination={false}\n                />\n              </Form>\n            </div>)\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapActionCreators = {\n  getEndpoints,\n  getCounters,\n  getCharts,\n  saveSearchText,\n  getId,\n}\n\nconst mapStateToProps = state => ({\n  dashboard: state.dashboard,\n})\n\nexport default connect(mapStateToProps, mapActionCreators)(SearchData)\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/falcon/dashboard/components/SearchData.js","/* eslint no-await-in-loop: 0 */\nimport Immutable from 'immutable'\nimport { fetch, fetchErrModal, curTagChange } from 'base/utils.js'\nimport { Modal } from 'antd'\n\nconst RECEIVE_SUCCESS_ENDPOINTS = 'RECEIVE_SUCCESS_ENDPOINTS'\nconst RECEIVE_SUCCESS_COUNTERS = 'RECEIVE_SUCCESS_COUNTERS'\nconst RECEIVE_SUCCESS_CHARTSDATA = 'RECEIVE_SUCCESS_CHARTSDATA'\n\nlet totalResCount = 0\nlet responseCount = 0\n\n/*\n  isLoading分几个状态，分别对应不同的值：\n  1.请求未开始：-1\n  2.请求开始：0\n  3.响应结束：1\n*/\nconst initialState = Immutable.fromJS({\n  endpoints: [],\n  counters: [],\n  searchText: { endpoint: '', tag: '', counter: '', selectedEndpointRows: [], selectedCounterRows: [] },\n  selectedEndpoints: [],\n  selectedCounters: [],\n  title: '',\n  start: '',\n  end: '',\n  cf: 'AVERAGE',\n  method: 'nosum',\n  chartsData: [],\n  isLoading: -1,\n})\n\nexport function resetDashboardState() {\n  return { type: 'RESET_DASHBOARD_STATE' }\n}\n\nexport function saveSearchData(data) {\n  return {\n    type: 'SAVE_SEARCH_DATA',\n    payload: data,\n  }\n}\n\nexport function saveSearchText(data) {\n  return {\n    type: 'SAVE_SEARCH_TEXT',\n    searchText: data,\n  }\n}\n\nfunction receiveSuccessEndpoints(data) {\n  return {\n    type: RECEIVE_SUCCESS_ENDPOINTS,\n    payload: {\n      endpoints: data,\n    },\n  }\n}\n\nfunction receiveSuccessCounters(data) {\n  return {\n    type: RECEIVE_SUCCESS_COUNTERS,\n    counters: data,\n  }\n}\n\nfunction receiveSuccessChartsData(data) {\n  return {\n    type: RECEIVE_SUCCESS_CHARTSDATA,\n    chartsData: data,\n  }\n}\n\nexport function getEndpoints(type, endpoint, tag, limit) {\n  // 如果没有输入有效数值，就不传这个值了，比如endpoint输入无效值，就不给endpoint传参数了\n  return (dispatch) => {\n    return fetch(type, {params:{tag, query:endpoint, limit}})\n      .then((rsp) => {\n        dispatch(receiveSuccessEndpoints(rsp))\n        if (rsp.length === 0) {\n          Modal.warning({\n            title: '提示',\n            content: '响应数据是空！',\n          })\n          return false\n        }\n      })\n      .catch(() => {\n        Modal.warning({\n          title: '提示',\n          content: 'endpoints获取失败！',\n        })\n      })\n  }\n}\n\nexport function getCounters(ids, query, limit) {\n  return (dispatch) => {\n    // 请求开始时，重置isLoading的值\n    dispatch({ type: 'START_REQUEST_COUNTERS' })\n    return fetch('getCounters', {params:{query, limit, ids}})\n      .then((rsp) => {\n        dispatch(receiveSuccessCounters(rsp))\n        if (rsp.length === 0) {\n          Modal.warning({\n            title: '提示',\n            content: '响应数据是空！',\n          })\n          return false\n        }\n      })\n      .catch(() => {\n        dispatch({ type: 'RECEIVE_FAIL_COUNTERS' })\n        Modal.warning({\n          title: '提示',\n          content: 'counters获取失败！',\n        })\n      })\n  }\n}\n\nexport function getCharts(consol_fun, endpoints, counters, title, startTime, endTime) {\n  totalResCount = 0\n  responseCount = 0\n  return (dispatch) => {\n    // 首次并发,清空接收画图数据的数组\n    dispatch({ type: 'CLEAR_DASHBOARD_VIEWS' })\n    // 请求开始时把isLoading置为0\n    dispatch({ type: 'START_REQUEST_CHARTSDATA' })\n    const results = [] // 用于存放所有响应\n    // 判断是哪个视角，计算请求总数，开始并发请求\n    if (title === 'Endpoint') {\n      totalResCount = counters.length\n      let length = totalResCount\n      while (length) {\n        results.push({ rsp: [] })\n        length -= 1\n      }\n      const sortCounters = counters.sort()\n      sortCounters.forEach((eachCounter, index) => {\n        const params = {\n          consol_fun,\n          counters: [eachCounter],\n          end_time: endTime,\n          hostnames: endpoints,\n          start_time: startTime,\n        }\n        results[index].params = params\n        fetch('getCharts', {body: params})\n        .then((rsp) => {\n          results[index].rsp = rsp\n          dispatch(receiveSuccessChartsData(results))\n          responseCount += 1\n          if (totalResCount === responseCount) {\n            dispatch({ type: 'FINISHED_RESPONSE' })\n          }\n        })\n        .catch(() => {\n          // 响应失败的情况\n          responseCount += 1\n          if (totalResCount === responseCount) {\n            dispatch({ type: 'FINISHED_RESPONSE' })\n          }\n        })\n      })\n    } else if (title === 'Counter') {\n      totalResCount = endpoints.length\n      let length = totalResCount\n      while (length) {\n        results.push({ rsp: [] })\n        length -= 1\n      }\n      const sortEndpoints = endpoints.sort()\n      sortEndpoints.forEach((eachEndpoint, index) => {\n        const params = {\n          consol_fun,\n          counters,\n          end_time: endTime,\n          hostnames: [eachEndpoint],\n          start_time: startTime,\n        }\n        results[index].params = params\n        fetch('getCharts', {body: params})\n        .then((rsp) => {\n          results[index].rsp = rsp\n          dispatch(receiveSuccessChartsData(results))\n          responseCount += 1\n          if (totalResCount === responseCount) {\n            dispatch({ type: 'FINISHED_RESPONSE' })\n          }\n        })\n        .catch(() => {\n          // 响应失败的情况\n          responseCount += 1\n          if (totalResCount === responseCount) {\n            dispatch({ type: 'FINISHED_RESPONSE' })\n          }\n        })\n      })\n    } else {\n      // 组合视角\n      totalResCount = 1\n      const params = {\n        consol_fun,\n        counters,\n        end_time: endTime,\n        hostnames: endpoints,\n        start_time: startTime,\n      }\n      const postParams = JSON.stringify(params)\n      results.push({ rsp: [], params })\n      fetch('getCharts', postParams)\n      .then((rsp) => {\n        results[0].rsp = rsp\n        dispatch(receiveSuccessChartsData(results))\n        responseCount += 1\n        if (totalResCount === responseCount) {\n          dispatch({ type: 'FINISHED_RESPONSE' })\n        }\n      })\n      .catch(() => {\n        // 响应失败的情况\n        responseCount += 1\n        if (totalResCount === responseCount) {\n          dispatch({ type: 'FINISHED_RESPONSE' })\n        }\n      })\n    }\n  }\n}\n// 获得id是用于在URL上设置的\nexport function getId(endpoints, counters, title, startTime, endTime, singleCounter) {\n  return (dispatch) => {\n    const params = JSON.stringify({ endpoints, counters })\n    const win = window.open('about:blank', '_blank')\n    fetch('tmpGraphAdd', {body:{endpoints, counters}}).then((rsp) => {\n      const data = {\n        id: rsp.id,\n        endpoints,\n        counters,\n        title,\n        startTime,\n        endTime,\n        cf: 'AVERAGE',\n        method: 'nosum',\n      }\n      dispatch(saveSearchData(data))\n      let graph_type = 'h'\n      if (title === 'Counter') {\n        graph_type = 'k'\n      }\n      if (title === '组合') {\n        graph_type = 'a'\n      }\n      // 得到id后打开新页面\n      // const protocol = window.location.protocol\n      // const host = window.location.host\n      if (singleCounter === undefined) {\n        const query = `id=${rsp.id}&graph_type=${graph_type}&cf=AVERAGE&start=${startTime}&end=${endTime}`\n        win.location.href = `/dashboard/charts?${query}`\n        // window.open(`${protocol}//${host}/#/dashboard/charts?${query}`, '_blank')\n        return false\n      }\n      const query = `id=${rsp.id}&graph_type=h&cf=AVERAGE&start=-3600`\n      win.location.href = `/chart?${query}`\n      // window.open(`${protocol}//${host}/#/chart?${query}`, '_blank')\n    })\n    .catch(() => {\n      Modal.warning({\n        title: '提示',\n        content: '响应失败！',\n      })\n    })\n  }\n}\n// 获得endpoints和counters去请求画图参数\nexport function getChartParams(id, graph_type, startTime, endTime, consol_fun, method) {\n  return (dispatch) => {\n    fetch('tmpGraphGet', {path:`/${id}`}).then((rsp) => {\n      // 修改method, id, searchData的值\n      const { endpoints, counters } = rsp\n      let title = 'Endpoint'\n      if (graph_type === 'k') {\n        title = 'Counter'\n      }\n      if (graph_type === 'a') {\n        title = '组合'\n      }\n      const data = {\n        id,\n        endpoints,\n        counters,\n        title,\n        startTime,\n        endTime,\n        cf: consol_fun,\n        method,\n      }\n      dispatch(saveSearchData(data))\n      // 接下来用这个参数去请求画图数据\n      dispatch(getCharts(consol_fun, endpoints, counters, title, startTime, endTime))\n    })\n    .catch(() => {\n      Modal.warning({\n        title: '提示',\n        content: '响应失败！',\n      })\n    })\n  }\n}\nconst midReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'RECEIVE_SUCCESS_ENDPOINTS':\n      return state.set('endpoints', action.payload.endpoints)\n    case 'START_REQUEST_COUNTERS':\n      return state.set('isLoading', 0)\n    case 'START_REQUEST_CHARTSDATA':\n      return state.set('isLoading', 0)\n    case 'RECEIVE_SUCCESS_COUNTERS':\n      return state.merge({\n        isLoading: 1,\n        counters: action.counters,\n      })\n    case 'RECEIVE_FAIL_COUNTERS':\n      return state.set('isLoading', 1)\n    case 'SAVE_SEARCH_TEXT':\n      return state.set('searchText', action.searchText)\n    case 'SAVE_SEARCH_DATA':\n      return state.merge({\n        id: action.payload.id,\n        selectedEndpoints: action.payload.endpoints,\n        selectedCounters: action.payload.counters,\n        title: action.payload.title,\n        start: action.payload.startTime,\n        end: action.payload.endTime,\n        cf: action.payload.cf,\n        method: action.payload.method,\n      })\n    case 'RECEIVE_SUCCESS_CHART_PARAMS':\n      return state.set('searchData', action.payload)\n    case 'CLEAR_DASHBOARD_VIEWS':\n      return state.set('chartsData', [])\n    case 'RECEIVE_SUCCESS_CHARTSDATA':\n      return state.set('chartsData', action.chartsData)\n    case 'FINISHED_RESPONSE':\n      return state.set('isLoading', 1)\n    default:\n      return state\n  }\n}\n\nexport default function dashboard(state, action) {\n  if (action.type === 'RESET_DASHBOARD_STATE') {\n    state = undefined\n  }\n  return midReducer(state, action)\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/falcon/dashboard/modules/index.js","import React, { PureComponent } from 'react'\nimport { withRouter } from 'react-router'\nimport { connect } from 'react-redux'\nimport { Form, Row, DatePicker, Select, Checkbox, Button, Icon } from 'antd'\nimport moment from 'moment'\nimport ShowCharts from './ShowCharts'\n\nimport { getCharts, saveSearchData, getChartParams } from '../modules/index'\nimport './Charts.scss'\n\nconst Option = Select.Option\nconst FormItem = Form.Item\n\nclass Charts extends PureComponent {\n  state = {\n    title: '',\n    cf: 'AVERAGE',\n    start: '',\n    end: '',\n    method: 'nosum',\n  }\n  componentDidMount() {\n    const { id, graph_type, start, end, cf, method } = this.props.location.query\n    // 用id请求接口获取endpoints和counters进而画图\n    this.props.getChartParams(id, graph_type, Number(start), Number(end), cf, method)\n    // 根据URL的参数设置条件值\n    let title = 'Endpoint'\n    if (graph_type === 'k') {\n      title = 'Counter'\n    }\n    if (graph_type === 'a') {\n      title = '组合'\n    }\n    this.setState({\n      title,\n      cf,\n      start: moment.unix(start),\n      end: moment.unix(end),\n      method: (method === undefined) ? 'nosum' : method,\n    })\n  }\n  handleSum = (value) => {\n    this.setState({ method: value })\n  }\n  onStartChange = (value) => {\n    this.setState({start: value})\n  }\n  onStartOk = (value) => {\n    this.setState({start: value})\n  }\n  onEndChange = (value) => {\n    this.setState({end: value})\n  }\n  onEndOk = (value) => {\n    this.setState({end: value})\n  }\n  handlecfChange = (value) => {\n    this.setState({cf: value})\n  }\n  handleViewChange = (value) => {\n    this.setState({title: value})\n  }\n  handleReset = () => {\n    this.setState({\n      title: 'Endpoint',\n      cf: 'AVERAGE',\n      start: moment().subtract(1, 'hour'),\n      end: moment(),\n      method: 'nosum',\n    })\n  }\n  showCharts = () => {\n    const { id, selectedEndpoints, selectedCounters, start, end } = this.props.dashboard.toJS()\n    const cf = this.state.cf\n    const title = this.state.title\n    const method = this.state.method\n\n    let startUnix = this.state.start.unix()\n    let endUnix = this.state.end.unix()\n    // 判断如果用户未改过开始时间以及截至时间，点击刷新按钮，就按当前时间计算\n    if (start === startUnix && end === endUnix) {\n      startUnix = moment().subtract(1, 'hour').unix()\n      endUnix = moment().unix()\n      this.setState({\n        start: moment().subtract(1, 'hour'),\n        end: moment(),\n      })\n    }\n    // 参数都有了，直接去画图，同时更新store中的数据，而且要改变URL\n    const searchData = {\n      id,\n      endpoints: selectedEndpoints,\n      counters: selectedCounters,\n      title,\n      startTime: startUnix,\n      endTime: endUnix,\n      cf,\n      method,\n    }\n    this.props.saveSearchData(searchData)\n    this.props.getCharts(cf, selectedEndpoints, selectedCounters, title, startUnix, endUnix)\n    let graph_type = 'h'\n    if (title === 'Counter') {\n      graph_type = 'k'\n    }\n    if (title === '组合') {\n      graph_type = 'a'\n    }\n    const data = {id, graph_type, cf, start: startUnix, end: endUnix, method: (method === 'nosum') ? undefined : method}\n    const path = {\n      pathname: '/dashboard/charts',\n      query: data,\n    }\n    this.props.router.push(path)\n  }\n\n  render() {\n    const { title, start, end, cf, method } = this.props.dashboard.toJS()\n    const dateFormat = 'YYYY-MM-DD HH:mm:ss'\n    return (\n      <div className=\"canvas\">\n        <p className=\"header\">\n          {title} 视角\n        </p>\n        <Form layout='inline' id=\"charts-form\">\n          <FormItem label=\"开始\">\n            <DatePicker\n              showTime\n              format={dateFormat}\n              onChange={this.onStartChange}\n              onOk={this.onStartOk}\n              value={this.state.start}\n            />\n          </FormItem>\n          <FormItem label=\"结束\">\n            <DatePicker\n              showTime\n              format=\"YYYY-MM-DD HH:mm:ss\"\n              onChange={this.onEndChange}\n              onOk={this.onEndOk}\n              value={this.state.end}\n            />\n          </FormItem>\n          <FormItem label=\"采样方式\">\n            <Select style={{ width: 100 }} onChange={this.handlecfChange} value={this.state.cf}>\n              <Option value=\"AVERAGE\">AVERAGE</Option>\n              <Option value=\"MAX\">MAX</Option>\n              <Option value=\"MIN\">MIN</Option>\n            </Select>\n          </FormItem>\n          <FormItem label=\"视角\">\n            <Select style={{ width: 100 }} onChange={this.handleViewChange} value={this.state.title}>\n              <Option value=\"Endpoint\">Endpoint</Option>\n              <Option value=\"Counter\">Counter</Option>\n              <Option value=\"组合\">组合</Option>\n            </Select>\n          </FormItem>\n          <FormItem label=\"求和\">\n            <Select style={{ width: 100 }} onChange={this.handleSum} value={this.state.method}>\n              <Option value=\"sum\">求和</Option>\n              <Option value=\"onlysum\">仅显示求和</Option>\n              <Option value=\"nosum\">原图</Option>\n            </Select>\n          </FormItem>\n          <FormItem>\n            <Button type=\"primary\" onClick={this.showCharts}>刷新</Button>\n          </FormItem>\n          <FormItem>\n            <Button type=\"primary\" onClick={this.handleReset}>恢复默认</Button>\n          </FormItem>\n        </Form>\n        <ShowCharts />\n      </div>\n    )\n  }\n}\n\nconst mapActionCreators = {\n  getCharts,\n  saveSearchData,\n  getChartParams,\n}\nconst mapStateToProps = state => ({\n  dashboard: state.dashboard,\n})\nexport default withRouter(connect(mapStateToProps, mapActionCreators)(Charts))\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/falcon/dashboard/components/Charts.js","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Spin } from 'antd'\n\nconst Highcharts = require('./highcharts.src.js')\nrequire('./adapt-chart-to-legend.js')(Highcharts)\n\nimport './Charts.scss'\n\nclass Chart extends React.Component {\n  componentDidMount() {\n    this.chart = new Highcharts[\"Chart\"](\n      this.refs.chart,\n      this.props.options\n    )\n  }\n  // 最开始rsp为空数组的时候，图也会渲染，后面rsp有值了，就需要更新这个图，所以更新flag设为rsp的长度\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.len !== this.props.len) {\n      return true\n    }\n    return false\n  }\n  componentDidUpdate() {\n    this.chart = new Highcharts[\"Chart\"](\n      this.refs.chart,\n      this.props.options\n    )\n  }\n  componentWillUnmount() {\n    this.chart.destroy()\n  }\n  render() {\n    return (\n      <div ref=\"chart\" />\n    )\n  }\n}\n\nclass ShowCharts extends React.PureComponent {\n  render() {\n    const { chartsData, isLoading, title, start, end } = this.props.dashboard.toJS()\n    /*\n      1.highcharts的一些通用配置条件写在判断条件的外面\n      2.chart、legend、tooltip这几个配置项要写在判断条件里面，根据有没有data区分配置\n    */\n    Highcharts.setOptions({\n      chart: {\n        zoomType: 'x'\n      },\n      colors: ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9',\n        '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1', '#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce',\n        '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a', '#4572A7', '#AA4643', '#89A54E', '#80699B', '#3D96AE',\n        '#DB843D', '#92A8CD', '#A47D7C', '#B5CA92'],\n      global: {\n        useUTC: false,\n      },\n      credits: {\n        enabled: false\n      },\n      xAxis: [{\n        type: 'datetime',\n        dateTimeLabelFormats: {\n          hour: '%H:%M',\n        },\n        max: end * 1000,\n        tickInterval: ((end - start) / 12) * 1000,\n        labels: {\n          step: 1,\n        },\n        tickPosition: 'inside',\n      }],\n      plotOptions: {\n        series: {\n          marker: {\n            radius: 1,\n          },\n          pointStart: start * 1000,\n          lineWidth: 1,\n        },\n      }\n    })\n\n    /*\n      1.chartsData如果为空，views的值就不会被改变\n      2.chartsData如果不为空，要分三种情况：\n      2.1响应是空数组，就画个空框\n      2.2响应有endpoint和counter，但是Values是null或者[]，给chart的series中只配置{name}\n      2.3响应中的Values不全是null，给charts的series中配置{name,data}\n    */\n    let views = ''\n    if (chartsData.length !== 0) {\n      views = chartsData.map((eachRspObj, index) => {\n        const eachRsp = eachRspObj.rsp\n        // 如果响应是[]，就画一个带legend的空图\n        if (eachRsp.length === 0) {\n          const { counters, hostnames } = eachRspObj.params\n          let chartTitle\n          let name = [{ name: '  ' }]\n          let isLegend = true\n          if (title === 'Endpoint') {\n            chartTitle = hostnames[0]\n            name = counters.map((counter) => {\n              return { name: counter }\n            })\n          } else if (title === 'Counter') {\n            chartTitle = counters[0]\n            name = hostnames.map((hostname) => {\n              return { name: hostname }\n            })\n          } else {\n            chartTitle = '组合视角'\n            isLegend = false\n          }\n          const options = {\n            title: {\n              useHTML: true,\n              text: `<p class=\"dashboard-chart-title\">${chartTitle}</p>`,\n            },\n            series: name,\n            chart: {\n              height: 230,\n            },\n            legend: {\n              enabled: isLegend,\n              verticalAlign: 'bottom',\n              adjustChartSize: true,\n              navigation: {\n                enabled: false\n              },\n              borderWidth: 0,\n              symbolWidth: 10,\n              useHTML: true,\n              labelFormatter: function() {\n                const chartWidth = this.chart.chartWidth\n                const legendWidth = Math.ceil(chartWidth * 0.8)\n                return `<div class=\"dashboard-legend-name\" style=\"width:${legendWidth}px\">${this.name}</div>`\n              },\n            },\n          }\n          return (<div key={index} className=\"charts\">\n            <Chart container={'chart'} options={options} len={eachRsp.length} />\n          </div>)\n        } else {\n          // 如果响应中的所有对象的Values都是null或者[]，那series中只传入name，不传data即可。\n          const results = eachRsp.filter(obj => obj.Values !== null && obj.Values.length !== 0)\n          if (results.length === 0) {\n            let chartTitle, name\n            if (title === 'Endpoint') {\n              chartTitle = eachRsp[0].counter\n              name = eachRsp.map(eachObj => {\n                const newObj = {}\n                newObj.name = eachObj.endpoint\n                return newObj\n              })\n            } else if (title === 'Counter') {\n              chartTitle = eachRsp[0].endpoint\n              name = eachRsp.map(eachObj => {\n                const newObj = {}\n                newObj.name = eachObj.counter\n                return newObj\n              })\n            } else {\n              chartTitle = '组合视角'\n              name = eachRsp.map(eachObj => {\n                const newObj = {}\n                newObj.name = `${eachObj.endpoint} | ${eachObj.counter}`\n                return newObj\n              })\n            }\n            // 根据name和chartTitle给chart加上对应的options\n            const options = {\n              title: {\n                useHTML: true,\n                text: `<p class=\"dashboard-chart-title\">${chartTitle}</p>`,\n              },\n              series: name,\n              chart: {\n                height: 230,\n              },\n              legend: {\n                enabled: true,\n                verticalAlign: 'bottom',\n                adjustChartSize: true,\n                navigation: {\n              \t  enabled: false\n                },\n                borderWidth: 0,\n                symbolWidth: 10,\n                useHTML: true,\n                labelFormatter: function() {\n                  const chartWidth = this.chart.chartWidth\n                  const legendWidth = Math.ceil(chartWidth * 0.8)\n                  return `<div class=\"dashboard-legend-name\" style=\"width:${legendWidth}px\">${this.name}</div>`\n                },\n              },\n            }\n            return (<div key={index} className=\"charts\">\n              <Chart container={'chart'} options={options} len={eachRsp.length} />\n            </div>)\n          } else {\n            // 排除一些边界条件，开始画图，这里要先区分三个视角，再在视角中区分是否画图\n            const { method } = this.props.dashboard.toJS()\n            let chartTitle, data\n            if (title === 'Endpoint') {\n              chartTitle = eachRsp[0].counter\n              data = eachRsp.map((eachObj) => {\n                const newObj = {}\n                newObj.name = eachObj.endpoint\n                if (eachObj.Values !== null && eachObj.Values.length !== 0) {\n                  newObj.data = eachObj.Values.map((eachValue) => {\n                    eachValue.timestamp = eachValue[0]\n                    eachValue.value = eachValue[1]\n                    return [eachValue.timestamp * 1000, eachValue.value]\n                  })\n                }\n                return newObj\n              })\n            } else if (title === 'Counter') {\n              chartTitle = eachRsp[0].endpoint\n              data = eachRsp.map((eachObj) => {\n                const newObj = {}\n                newObj.name = eachObj.counter\n                if (eachObj.Values !== null && eachObj.Values.length !== 0) {\n                  newObj.data = eachObj.Values.map((eachValue) => {\n                    eachValue.timestamp = eachValue[0]\n                    eachValue.value = eachValue[1]\n                    return [eachValue.timestamp * 1000, eachValue.value]\n                  })\n                }\n                return newObj\n              })\n            } else {\n              chartTitle = '组合视角'\n              data = eachRsp.map((eachObj) => {\n                const newObj = {}\n                newObj.name = `${eachObj.endpoint} | ${eachObj.counter}`\n                if (eachObj.Values !== null && eachObj.Values.length !== 0) {\n                  newObj.data = eachObj.Values.map((eachValue) => {\n                    eachValue.timestamp = eachValue[0]\n                    eachValue.value = eachValue[1]\n                    return [eachValue.timestamp * 1000, eachValue.value]\n                  })\n                }\n                return newObj\n              })\n            }\n            // 这里要区分是sum还是onlysum，如果是onlysum，那data中就只有计算好的sum这一项\n            if (method === 'sum' || method === 'onlysum') {\n              /*\n                1.sumResults = [[v, v, ...], [v, v, ...]...]\n                2.过滤掉响应对象中Values是null和[]的对象，只对有数据的求和\n              */\n              const filterResults = eachRsp.filter(eachObj => eachObj.Values !== null && eachObj.Values.length !== 0)\n              const sumResults = filterResults.map((eachObj) => {\n                return eachObj.Values.map(eachValue => eachValue.value)\n              })\n              // sumData = [sum1, sum2, ...],这里需要注意，sumResults中的每个数组的长度不一定相等\n              let maxIndex = 0\n              const sumData = sumResults.reduce((acc, curValue, curIndex) => {\n                if (acc.length <= curValue.length) {\n                  maxIndex = curIndex\n                  return curValue.map((item, curIndex) => {\n                    if ((item === null || item === undefined)\n                    && (acc[curIndex] === null || acc[curIndex] === undefined)) {\n                      return null\n                    }\n                    return (item || 0) + (acc[curIndex] || 0)\n                  })\n                }\n                return acc.map((item, accIndex) => {\n                  if ((item === null || item === undefined)\n                  && (curValue[accIndex] === null || curValue[accIndex] === undefined)) {\n                    return null\n                  }\n                  return (item || 0) + (curValue[accIndex] || 0)\n                })\n              }, [])\n              // sum = [[timestamp, sum1], [timestamp, sum2]...]\n              const sum = sumData.map((item, sumIndex) => {\n                return [filterResults[maxIndex].Values[sumIndex].timestamp * 1000, item]\n              })\n              if (method === 'sum') {\n                data.push({ name: 'sum', data: sum, color: '#FF0000' })\n              } else {\n                data = [{ name: 'sum', data: sum, color: '#FF0000' }]\n              }\n            }\n            data.unshift({\n              name:' ',\n              color: 'transparent',\n              events: {\n                legendItemClick: function () {\n                  return false\n                },\n              },\n            })\n            // 根据data和chartTitle给chart加上对应的options\n            const options = {\n              title: {\n                useHTML: true,\n                text: `<p class=\"dashboard-chart-title\">${chartTitle}</p>`,\n              },\n              series: data,\n              chart: {\n                height: 230,\n              },\n              tooltip: {\n                xDateFormat: '%Y-%m-%d %H:%M:%S',\n                borderWidth: 0,\n                backgroundColor: \"rgba(175,216,248, 0.65)\",\n                shadow: false,\n              },\n              legend: {\n                enabled: true,\n                verticalAlign: 'bottom',\n                adjustChartSize: true,\n                navigation: {\n              \t  enabled: false\n                },\n                borderWidth: 0,\n                symbolWidth: 10,\n                useHTML: true,\n                labelFormatter: function() {\n                  const chartWidth = this.chart.chartWidth\n                  const legendWidth = Math.ceil(chartWidth * 0.95)\n                  const nameWidth = Math.ceil(legendWidth * 0.5)\n                  const numWidth = Math.floor(chartWidth * 0.07)\n                  if (this.index === 0) {\n                    return `<div class=\"dashboard-legend-container\" style=\"width:${legendWidth}px\">\n                      <div class=\"dashboard-legend-name\" style=\"width:${nameWidth}px\">${this.name}</div>\n                      <div class=\"dashboard-legend-num\" style=\"margin-left: 10px\">\n                        <span style=\"color: #DB7093;width:${numWidth}px\"> last </span>\n                        <span style=\"color: #FF00FF;width:${numWidth}px\"> min </span>\n                        <span style=\"color: #9932CC;width:${numWidth}px\"> max </span>\n                        <span style=\"color: #DC143C;width:${numWidth}px\"> avg </span>\n                      </div>\n                    </div>`\n                  }\n                  // 过滤掉this.yData是[]以及this.yData数组中都是null的情况\n                  const yData = this.yData.filter(item => item !== null)\n                  const len = yData.length\n                  let max = 'NAN'\n                  let min = 'NAN'\n                  let last = 'NAN'\n                  let avg = 'NAN'\n                  // 说明Values中的value都是null\n                  // 格式化legend中的数据显示\n                  const suffix = ['', 'K', 'M', 'G', 'T', 'P']\n                  const formatNum = (num) => {\n                    let count = 0\n                    while (num/1000 >= 1) {\n                      num = num/1000\n                      count += 1\n                    }\n                    num = num.toFixed(3)\n                    return num + suffix[count]\n                  }\n                  if (len !== 0) {\n                    max = Math.max(...yData)\n                    min = Math.min(...yData)\n                    last = yData[len - 1]\n                    const sum = yData.reduce((pre, cur) => cur += pre)\n                    avg = (sum / len)\n                    max = formatNum(max)\n                    min = formatNum(min)\n                    last = formatNum(last)\n                    avg = formatNum(avg)\n                  }\n                  return `<div class=\"dashboard-legend-container\" style=\"width:${legendWidth}px\">\n                    <div class=\"dashboard-legend-name\" style=\"width:${nameWidth}px\">${this.name}</div>\n                    <div class=\"dashboard-legend-num\" style=\"margin-left: 10px\">\n                      <span style=\"color: #DB7093;width:${numWidth}px\"> ${last} </span>\n                      <span style=\"color: #FF00FF;width:${numWidth}px\"> ${min} </span>\n                      <span style=\"color: #9932CC;width:${numWidth}px\"> ${max} </span>\n                      <span style=\"color: #DC143C;width:${numWidth}px\"> ${avg} </span>\n                    </div>\n                  </div>`\n                },\n              },\n            }\n            return (<div key={index} className=\"charts\">\n              <Chart container={'chart'} options={options} />\n            </div>)\n          }\n        }\n      })\n    }\n    return (\n      <div className=\"charts-container\">\n        {isLoading === 0 ? <div className=\"dashboard-showcharts-loading\"><Spin size=\"large\" /></div> : ''}\n        {views}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  dashboard: state.dashboard,\n})\n\nexport default connect(mapStateToProps)(ShowCharts)\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/falcon/dashboard/components/ShowCharts.js","/**\n * Highcharts plugin for adjustable chart height in response to legend height\n *\n * Author:        Torstein Honsi\n * Version:       1.0.6\n * Last revision: 2016-12-15\n */\n\n(function (factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = factory;\n  } else {\n    factory(Highcharts)\n  }\n}(function (Highcharts) {\n  (function (H) {\n    H.wrap(H.Legend.prototype, 'render', function (proceed) {\n      var chart = this.chart,\n        translateY,\n        addedHeight\n\n      proceed.call(this)\n\n      if (this.options.adjustChartSize) { // #7\n\n        addedHeight = this.legendHeight\n        if (!chart.originalChartHeight) {\n          chart.originalChartHeight = chart.chartHeight;\n        }\n        if (this.options.align === 'left' || this.options.align === 'right') {\n          addedHeight = Math.max(this.group.translateY + this.legendHeight - chart.originalChartHeight, 0)\n          // Move the legend down\n        } else if (this.options.verticalAlign === 'bottom') {\n          translateY = this.group.attr('translateY') + this.legendHeight\n          this.group.attr('translateY', translateY)\n          if (this.group.alignAttr) {\n            this.group.alignAttr.translateY = translateY\n          }\n        }\n        if (addedHeight) {\n          //   // Adapt chart metrics\n          chart.chartHeight = chart.originalChartHeight + addedHeight\n          chart.marginBottom += addedHeight\n\n          //   // Set the DOM element heights\n          chart.container.style.height = chart.chartHeight + 'px'\n          chart.renderer.boxWrapper.attr('height', chart.chartHeight) // #7\n          var boxedElement = chart.renderer.box.clientWidth ? chart.renderer.box /*IE*/ : chart.renderer.box.parentElement /*FF*/\n          var viewBox = \"0 0 \" + boxedElement.clientWidth + \" \" + boxedElement.clientHeight\n          chart.renderer.boxWrapper.attr('viewBox', viewBox)\n        }\n        this.positionCheckboxes()\n      }\n    })\n  }(Highcharts))\n}))\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/falcon/dashboard/components/adapt-chart-to-legend.js","/**\n * @license Highcharts JS v5.0.14 (2017-07-28)\n *\n * (c) 2009-2016 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n'use strict';\n(function(root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        module.exports = root.document ?\n            factory(root) :\n            factory;\n    } else {\n        root.Highcharts = factory(root);\n    }\n}(typeof window !== 'undefined' ? window : this, function(win) {\n    var Highcharts = (function() {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        /* global window */\n        var win = window,\n            doc = win.document;\n\n        var SVG_NS = 'http://www.w3.org/2000/svg',\n            userAgent = (win.navigator && win.navigator.userAgent) || '',\n            svg = doc && doc.createElementNS && !!doc.createElementNS(SVG_NS, 'svg').createSVGRect,\n            isMS = /(edge|msie|trident)/i.test(userAgent) && !window.opera,\n            vml = !svg,\n            isFirefox = /Firefox/.test(userAgent),\n            hasBidiBug = isFirefox && parseInt(userAgent.split('Firefox/')[1], 10) < 4; // issue #38\n\n        var Highcharts = win.Highcharts ? win.Highcharts.error(16, true) : {\n            product: 'Highcharts',\n            version: '5.0.14',\n            deg2rad: Math.PI * 2 / 360,\n            doc: doc,\n            hasBidiBug: hasBidiBug,\n            hasTouch: doc && doc.documentElement.ontouchstart !== undefined,\n            isMS: isMS,\n            isWebKit: /AppleWebKit/.test(userAgent),\n            isFirefox: isFirefox,\n            isTouchDevice: /(Mobile|Android|Windows Phone)/.test(userAgent),\n            SVG_NS: SVG_NS,\n            chartCount: 0,\n            seriesTypes: {},\n            symbolSizes: {},\n            svg: svg,\n            vml: vml,\n            win: win,\n            marginNames: ['plotTop', 'marginRight', 'marginBottom', 'plotLeft'],\n            noop: function() {\n                return undefined;\n            },\n            /**\n             * An array containing the current chart objects in the page. A chart's\n             * position in the array is preserved throughout the page's lifetime. When\n             * a chart is destroyed, the array item becomes `undefined`.\n             * @type {Array.<Highcharts.Chart>}\n             * @memberOf Highcharts\n             */\n            charts: []\n        };\n        return Highcharts;\n    }());\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        /* eslint max-len: [\"warn\", 80, 4] */\n\n        /**\n         * The Highcharts object is the placeholder for all other members, and various\n         * utility functions. The most important member of the namespace would be the\n         * chart constructor.\n         *\n         * @example\n         * var chart = Highcharts.chart('container', { ... });\n         *\n         * @namespace Highcharts\n         */\n\n        var timers = [];\n\n        var charts = H.charts,\n            doc = H.doc,\n            win = H.win;\n\n        /**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @function #error\n         * @memberOf Highcharts\n         * @param {Number|String} code - The error code. See [errors.xml]{@link\n         *     https://github.com/highcharts/highcharts/blob/master/errors/errors.xml}\n         *     for available codes. If it is a string, the error message is printed\n         *     directly in the console.\n         * @param {Boolean} [stop=false] - Whether to throw an error or just log a\n         *     warning in the console.\n         *\n         * @sample highcharts/chart/highcharts-error/ Custom error handler\n         */\n        H.error = function(code, stop) {\n            var msg = H.isNumber(code) ?\n                'Highcharts error #' + code + ': www.highcharts.com/errors/' + code :\n                code;\n            if (stop) {\n                throw new Error(msg);\n            }\n            // else ...\n            if (win.console) {\n                console.log(msg); // eslint-disable-line no-console\n            }\n        };\n\n        /**\n         * An animator object used internally. One instance applies to one property\n         * (attribute or style prop) on one element. Animation is always initiated\n         * through {@link SVGElement#animate}.\n         *\n         * @constructor Fx\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement|SVGElement} elem - The element to animate.\n         * @param {AnimationOptions} options - Animation options.\n         * @param {string} prop - The single attribute or CSS property to animate.\n         * @private\n         *\n         * @example\n         * var rect = renderer.rect(0, 0, 10, 10).add();\n         * rect.animate({ width: 100 });\n         */\n        H.Fx = function(elem, options, prop) {\n            this.options = options;\n            this.elem = elem;\n            this.prop = prop;\n        };\n        H.Fx.prototype = {\n\n            /**\n             * Set the current step of a path definition on SVGElement.\n             *\n             * @function #dSetter\n             * @memberOf Highcharts.Fx\n             */\n            dSetter: function() {\n                var start = this.paths[0],\n                    end = this.paths[1],\n                    ret = [],\n                    now = this.now,\n                    i = start.length,\n                    startVal;\n\n                // Land on the final path without adjustment points appended in the ends\n                if (now === 1) {\n                    ret = this.toD;\n\n                } else if (i === end.length && now < 1) {\n                    while (i--) {\n                        startVal = parseFloat(start[i]);\n                        ret[i] =\n                            isNaN(startVal) ? // a letter instruction like M or L\n                            start[i] :\n                            now * (parseFloat(end[i] - startVal)) + startVal;\n\n                    }\n                    // If animation is finished or length not matching, land on right value\n                } else {\n                    ret = end;\n                }\n                this.elem.attr('d', ret, null, true);\n            },\n\n            /**\n             * Update the element with the current animation step.\n             *\n             * @function #update\n             * @memberOf Highcharts.Fx\n             */\n            update: function() {\n                var elem = this.elem,\n                    prop = this.prop, // if destroyed, it is null\n                    now = this.now,\n                    step = this.options.step;\n\n                // Animation setter defined from outside\n                if (this[prop + 'Setter']) {\n                    this[prop + 'Setter']();\n\n                    // Other animations on SVGElement\n                } else if (elem.attr) {\n                    if (elem.element) {\n                        elem.attr(prop, now, null, true);\n                    }\n\n                    // HTML styles, raw HTML content like container size\n                } else {\n                    elem.style[prop] = now + this.unit;\n                }\n\n                if (step) {\n                    step.call(elem, now, this);\n                }\n\n            },\n\n            /**\n             * Run an animation.\n             *\n             * @function #run\n             * @memberOf Highcharts.Fx\n             * @param {Number} from - The current value, value to start from.\n             * @param {Number} to - The end value, value to land on.\n             * @param {String} [unit] - The property unit, for example `px`.\n             *\n             */\n            run: function(from, to, unit) {\n                var self = this,\n                    timer = function(gotoEnd) {\n                        return timer.stopped ? false : self.step(gotoEnd);\n                    },\n                    i;\n\n                this.startTime = +new Date();\n                this.start = from;\n                this.end = to;\n                this.unit = unit;\n                this.now = this.start;\n                this.pos = 0;\n\n                timer.elem = this.elem;\n                timer.prop = this.prop;\n\n                if (timer() && timers.push(timer) === 1) {\n                    timer.timerId = setInterval(function() {\n\n                        for (i = 0; i < timers.length; i++) {\n                            if (!timers[i]()) {\n                                timers.splice(i--, 1);\n                            }\n                        }\n\n                        if (!timers.length) {\n                            clearInterval(timer.timerId);\n                        }\n                    }, 13);\n                }\n            },\n\n            /**\n             * Run a single step in the animation.\n             *\n             * @function #step\n             * @memberOf Highcharts.Fx\n             * @param   {Boolean} [gotoEnd] - Whether to go to the endpoint of the\n             *     animation after abort.\n             * @returns {Boolean} Returns `true` if animation continues.\n             */\n            step: function(gotoEnd) {\n                var t = +new Date(),\n                    ret,\n                    done,\n                    options = this.options,\n                    elem = this.elem,\n                    complete = options.complete,\n                    duration = options.duration,\n                    curAnim = options.curAnim;\n\n                if (elem.attr && !elem.element) { // #2616, element is destroyed\n                    ret = false;\n\n                } else if (gotoEnd || t >= duration + this.startTime) {\n                    this.now = this.end;\n                    this.pos = 1;\n                    this.update();\n\n                    curAnim[this.prop] = true;\n\n                    done = true;\n\n                    H.objectEach(curAnim, function(val) {\n                        if (val !== true) {\n                            done = false;\n                        }\n                    });\n\n                    if (done && complete) {\n                        complete.call(elem);\n                    }\n                    ret = false;\n\n                } else {\n                    this.pos = options.easing((t - this.startTime) / duration);\n                    this.now = this.start + ((this.end - this.start) * this.pos);\n                    this.update();\n                    ret = true;\n                }\n                return ret;\n            },\n\n            /**\n             * Prepare start and end values so that the path can be animated one to one.\n             *\n             * @function #initPath\n             * @memberOf Highcharts.Fx\n             * @param {SVGElement} elem - The SVGElement item.\n             * @param {String} fromD - Starting path definition.\n             * @param {Array} toD - Ending path definition.\n             * @returns {Array} An array containing start and end paths in array form\n             * so that they can be animated in parallel.\n             */\n            initPath: function(elem, fromD, toD) {\n                fromD = fromD || '';\n                var shift,\n                    startX = elem.startX,\n                    endX = elem.endX,\n                    bezier = fromD.indexOf('C') > -1,\n                    numParams = bezier ? 7 : 3,\n                    fullLength,\n                    slice,\n                    i,\n                    start = fromD.split(' '),\n                    end = toD.slice(), // copy\n                    isArea = elem.isArea,\n                    positionFactor = isArea ? 2 : 1,\n                    reverse;\n\n                /**\n                 * In splines make moveTo and lineTo points have six parameters like\n                 * bezier curves, to allow animation one-to-one.\n                 */\n                function sixify(arr) {\n                    var isOperator,\n                        nextIsOperator;\n                    i = arr.length;\n                    while (i--) {\n\n                        // Fill in dummy coordinates only if the next operator comes\n                        // three places behind (#5788)\n                        isOperator = arr[i] === 'M' || arr[i] === 'L';\n                        nextIsOperator = /[a-zA-Z]/.test(arr[i + 3]);\n                        if (isOperator && nextIsOperator) {\n                            arr.splice(\n                                i + 1, 0,\n                                arr[i + 1], arr[i + 2],\n                                arr[i + 1], arr[i + 2]\n                            );\n                        }\n                    }\n                }\n\n                /**\n                 * Insert an array at the given position of another array\n                 */\n                function insertSlice(arr, subArr, index) {\n                    [].splice.apply(\n                        arr, [index, 0].concat(subArr)\n                    );\n                }\n\n                /**\n                 * If shifting points, prepend a dummy point to the end path.\n                 */\n                function prepend(arr, other) {\n                    while (arr.length < fullLength) {\n\n                        // Move to, line to or curve to?\n                        arr[0] = other[fullLength - arr.length];\n\n                        // Prepend a copy of the first point\n                        insertSlice(arr, arr.slice(0, numParams), 0);\n\n                        // For areas, the bottom path goes back again to the left, so we\n                        // need to append a copy of the last point.\n                        if (isArea) {\n                            insertSlice(\n                                arr,\n                                arr.slice(arr.length - numParams), arr.length\n                            );\n                            i--;\n                        }\n                    }\n                    arr[0] = 'M';\n                }\n\n                /**\n                 * Copy and append last point until the length matches the end length\n                 */\n                function append(arr, other) {\n                    var i = (fullLength - arr.length) / numParams;\n                    while (i > 0 && i--) {\n\n                        // Pull out the slice that is going to be appended or inserted.\n                        // In a line graph, the positionFactor is 1, and the last point\n                        // is sliced out. In an area graph, the positionFactor is 2,\n                        // causing the middle two points to be sliced out, since an area\n                        // path starts at left, follows the upper path then turns and\n                        // follows the bottom back.\n                        slice = arr.slice().splice(\n                            (arr.length / positionFactor) - numParams,\n                            numParams * positionFactor\n                        );\n\n                        // Move to, line to or curve to?\n                        slice[0] = other[fullLength - numParams - (i * numParams)];\n\n                        // Disable first control point\n                        if (bezier) {\n                            slice[numParams - 6] = slice[numParams - 2];\n                            slice[numParams - 5] = slice[numParams - 1];\n                        }\n\n                        // Now insert the slice, either in the middle (for areas) or at\n                        // the end (for lines)\n                        insertSlice(arr, slice, arr.length / positionFactor);\n\n                        if (isArea) {\n                            i--;\n                        }\n                    }\n                }\n\n                if (bezier) {\n                    sixify(start);\n                    sixify(end);\n                }\n\n                // For sideways animation, find out how much we need to shift to get the\n                // start path Xs to match the end path Xs.\n                if (startX && endX) {\n                    for (i = 0; i < startX.length; i++) {\n                        // Moving left, new points coming in on right\n                        if (startX[i] === endX[0]) {\n                            shift = i;\n                            break;\n                            // Moving right\n                        } else if (startX[0] ===\n                            endX[endX.length - startX.length + i]) {\n                            shift = i;\n                            reverse = true;\n                            break;\n                        }\n                    }\n                    if (shift === undefined) {\n                        start = [];\n                    }\n                }\n\n                if (start.length && H.isNumber(shift)) {\n\n                    // The common target length for the start and end array, where both\n                    // arrays are padded in opposite ends\n                    fullLength = end.length + shift * positionFactor * numParams;\n\n                    if (!reverse) {\n                        prepend(end, start);\n                        append(start, end);\n                    } else {\n                        prepend(start, end);\n                        append(end, start);\n                    }\n                }\n\n                return [start, end];\n            }\n        }; // End of Fx prototype\n\n        /**\n         * Handle animation of the color attributes directly.\n         */\n        H.Fx.prototype.fillSetter =\n            H.Fx.prototype.strokeSetter = function() {\n                this.elem.attr(\n                    this.prop,\n                    H.color(this.start).tweenTo(H.color(this.end), this.pos),\n                    null,\n                    true\n                );\n            };\n\n\n        /**\n         * Utility function to extend an object with the members of another.\n         *\n         * @function #extend\n         * @memberOf Highcharts\n         * @param {Object} a - The object to be extended.\n         * @param {Object} b - The object to add to the first one.\n         * @returns {Object} Object a, the original object.\n         */\n        H.extend = function(a, b) {\n            var n;\n            if (!a) {\n                a = {};\n            }\n            for (n in b) {\n                a[n] = b[n];\n            }\n            return a;\n        };\n\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function #merge\n         * @memberOf Highcharts\n         * @param {Boolean} [extend] - Whether to extend the left-side object (a) or\n                  return a whole new object.\n         * @param {Object} a - The first object to extend. When only this is given, the\n                  function returns a deep copy.\n         * @param {...Object} [n] - An object to merge into the previous one.\n         * @returns {Object} - The merged object. If the first argument is true, the\n         * return is the same as the second argument.\n         */\n        H.merge = function() {\n            var i,\n                args = arguments,\n                len,\n                ret = {},\n                doCopy = function(copy, original) {\n                    // An object is replacing a primitive\n                    if (typeof copy !== 'object') {\n                        copy = {};\n                    }\n\n                    H.objectEach(original, function(value, key) {\n\n                        // Copy the contents of objects, but not arrays or DOM nodes\n                        if (\n                            H.isObject(value, true) &&\n                            !H.isClass(value) &&\n                            !H.isDOMElement(value)\n                        ) {\n                            copy[key] = doCopy(copy[key] || {}, value);\n\n                            // Primitives and arrays are copied over directly\n                        } else {\n                            copy[key] = original[key];\n                        }\n                    });\n                    return copy;\n                };\n\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (args[0] === true) {\n                ret = args[1];\n                args = Array.prototype.slice.call(args, 2);\n            }\n\n            // For each argument, extend the return\n            len = args.length;\n            for (i = 0; i < len; i++) {\n                ret = doCopy(ret, args[i]);\n            }\n\n            return ret;\n        };\n\n        /**\n         * Shortcut for parseInt\n         * @ignore\n         * @param {Object} s\n         * @param {Number} mag Magnitude\n         */\n        H.pInt = function(s, mag) {\n            return parseInt(s, mag || 10);\n        };\n\n        /**\n         * Utility function to check for string type.\n         *\n         * @function #isString\n         * @memberOf Highcharts\n         * @param {Object} s - The item to check.\n         * @returns {Boolean} - True if the argument is a string.\n         */\n        H.isString = function(s) {\n            return typeof s === 'string';\n        };\n\n        /**\n         * Utility function to check if an item is an array.\n         *\n         * @function #isArray\n         * @memberOf Highcharts\n         * @param {Object} obj - The item to check.\n         * @returns {Boolean} - True if the argument is an array.\n         */\n        H.isArray = function(obj) {\n            var str = Object.prototype.toString.call(obj);\n            return str === '[object Array]' || str === '[object Array Iterator]';\n        };\n\n        /**\n         * Utility function to check if an item is of type object.\n         *\n         * @function #isObject\n         * @memberOf Highcharts\n         * @param {Object} obj - The item to check.\n         * @param {Boolean} [strict=false] - Also checks that the object is not an\n         *    array.\n         * @returns {Boolean} - True if the argument is an object.\n         */\n        H.isObject = function(obj, strict) {\n            return !!obj && typeof obj === 'object' && (!strict || !H.isArray(obj));\n        };\n\n        /**\n         * Utility function to check if an Object is a HTML Element.\n         *\n         * @function #isDOMElement\n         * @memberOf Highcharts\n         * @param {Object} obj - The item to check.\n         * @returns {Boolean} - True if the argument is a HTML Element.\n         */\n        H.isDOMElement = function(obj) {\n            return H.isObject(obj) && typeof obj.nodeType === 'number';\n        };\n\n        /**\n         * Utility function to check if an Object is an class.\n         *\n         * @function #isClass\n         * @memberOf Highcharts\n         * @param {Object} obj - The item to check.\n         * @returns {Boolean} - True if the argument is an class.\n         */\n        H.isClass = function(obj) {\n            var c = obj && obj.constructor;\n            return !!(\n                H.isObject(obj, true) &&\n                !H.isDOMElement(obj) &&\n                (c && c.name && c.name !== 'Object')\n            );\n        };\n\n        /**\n         * Utility function to check if an item is of type number.\n         *\n         * @function #isNumber\n         * @memberOf Highcharts\n         * @param {Object} n - The item to check.\n         * @returns {Boolean} - True if the item is a number and is not NaN.\n         */\n        H.isNumber = function(n) {\n            return typeof n === 'number' && !isNaN(n);\n        };\n\n        /**\n         * Remove the last occurence of an item from an array.\n         *\n         * @function #erase\n         * @memberOf Highcharts\n         * @param {Array} arr - The array.\n         * @param {*} item - The item to remove.\n         */\n        H.erase = function(arr, item) {\n            var i = arr.length;\n            while (i--) {\n                if (arr[i] === item) {\n                    arr.splice(i, 1);\n                    break;\n                }\n            }\n        };\n\n        /**\n         * Check if an object is null or undefined.\n         *\n         * @function #defined\n         * @memberOf Highcharts\n         * @param {Object} obj - The object to check.\n         * @returns {Boolean} - False if the object is null or undefined, otherwise\n         *        true.\n         */\n        H.defined = function(obj) {\n            return obj !== undefined && obj !== null;\n        };\n\n        /**\n         * Set or get an attribute or an object of attributes. To use as a setter, pass\n         * a key and a value, or let the second argument be a collection of keys and\n         * values. To use as a getter, pass only a string as the second argument.\n         *\n         * @function #attr\n         * @memberOf Highcharts\n         * @param {Object} elem - The DOM element to receive the attribute(s).\n         * @param {String|Object} [prop] - The property or an object of key-value pairs.\n         * @param {String} [value] - The value if a single property is set.\n         * @returns {*} When used as a getter, return the value.\n         */\n        H.attr = function(elem, prop, value) {\n            var ret;\n\n            // if the prop is a string\n            if (H.isString(prop)) {\n                // set the value\n                if (H.defined(value)) {\n                    elem.setAttribute(prop, value);\n\n                    // get the value\n                } else if (elem && elem.getAttribute) {\n                    ret = elem.getAttribute(prop);\n                }\n\n                // else if prop is defined, it is a hash of key/value pairs\n            } else if (H.defined(prop) && H.isObject(prop)) {\n                H.objectEach(prop, function(val, key) {\n                    elem.setAttribute(key, val);\n                });\n            }\n            return ret;\n        };\n\n        /**\n         * Check if an element is an array, and if not, make it into an array.\n         *\n         * @function #splat\n         * @memberOf Highcharts\n         * @param obj {*} - The object to splat.\n         * @returns {Array} The produced or original array.\n         */\n        H.splat = function(obj) {\n            return H.isArray(obj) ? obj : [obj];\n        };\n\n        /**\n         * Set a timeout if the delay is given, otherwise perform the function\n         * synchronously.\n         *\n         * @function #syncTimeout\n         * @memberOf Highcharts\n         * @param   {Function} fn - The function callback.\n         * @param   {Number}   delay - Delay in milliseconds.\n         * @param   {Object}   [context] - The context.\n         * @returns {Number} An identifier for the timeout that can later be cleared\n         * with clearTimeout.\n         */\n        H.syncTimeout = function(fn, delay, context) {\n            if (delay) {\n                return setTimeout(fn, delay, context);\n            }\n            fn.call(0, context);\n        };\n\n\n        /**\n         * Return the first value that is not null or undefined.\n         *\n         * @function #pick\n         * @memberOf Highcharts\n         * @param {...*} items - Variable number of arguments to inspect.\n         * @returns {*} The value of the first argument that is not null or undefined.\n         */\n        H.pick = function() {\n            var args = arguments,\n                i,\n                arg,\n                length = args.length;\n            for (i = 0; i < length; i++) {\n                arg = args[i];\n                if (arg !== undefined && arg !== null) {\n                    return arg;\n                }\n            }\n        };\n\n        /**\n         * @typedef {Object} CSSObject - A style object with camel case property names.\n         * The properties can be whatever styles are supported on the given SVG or HTML\n         * element.\n         * @example\n         * {\n         *    fontFamily: 'monospace',\n         *    fontSize: '1.2em'\n         * }\n         */\n        /**\n         * Set CSS on a given element.\n         *\n         * @function #css\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement} el - A HTML DOM element.\n         * @param {CSSObject} styles - Style object with camel case property names.\n         *\n         */\n        H.css = function(el, styles) {\n            if (H.isMS && !H.svg) { // #2686\n                if (styles && styles.opacity !== undefined) {\n                    styles.filter = 'alpha(opacity=' + (styles.opacity * 100) + ')';\n                }\n            }\n            H.extend(el.style, styles);\n        };\n\n        /**\n         * A HTML DOM element.\n         * @typedef {Object} HTMLDOMElement\n         */\n\n        /**\n         * Utility function to create an HTML element with attributes and styles.\n         *\n         * @function #createElement\n         * @memberOf Highcharts\n         * @param {String} tag - The HTML tag.\n         * @param {Object} [attribs] - Attributes as an object of key-value pairs.\n         * @param {CSSObject} [styles] - Styles as an object of key-value pairs.\n         * @param {Object} [parent] - The parent HTML object.\n         * @param {Boolean} [nopad=false] - If true, remove all padding, border and\n         *    margin.\n         * @returns {HTMLDOMElement} The created DOM element.\n         */\n        H.createElement = function(tag, attribs, styles, parent, nopad) {\n            var el = doc.createElement(tag),\n                css = H.css;\n            if (attribs) {\n                H.extend(el, attribs);\n            }\n            if (nopad) {\n                css(el, {\n                    padding: 0,\n                    border: 'none',\n                    margin: 0\n                });\n            }\n            if (styles) {\n                css(el, styles);\n            }\n            if (parent) {\n                parent.appendChild(el);\n            }\n            return el;\n        };\n\n        /**\n         * Extend a prototyped class by new members.\n         *\n         * @function #extendClass\n         * @memberOf Highcharts\n         * @param {Object} parent - The parent prototype to inherit.\n         * @param {Object} members - A collection of prototype members to add or\n         *        override compared to the parent prototype.\n         * @returns {Object} A new prototype.\n         */\n        H.extendClass = function(parent, members) {\n            var object = function() {};\n            object.prototype = new parent(); // eslint-disable-line new-cap\n            H.extend(object.prototype, members);\n            return object;\n        };\n\n        /**\n         * Left-pad a string to a given length by adding a character repetetively.\n         *\n         * @function #pad\n         * @memberOf Highcharts\n         * @param {Number} number - The input string or number.\n         * @param {Number} length - The desired string length.\n         * @param {String} [padder=0] - The character to pad with.\n         * @returns {String} The padded string.\n         */\n        H.pad = function(number, length, padder) {\n            return new Array((length || 2) + 1 -\n                String(number).length).join(padder || 0) + number;\n        };\n\n        /**\n         * @typedef {Number|String} RelativeSize - If a number is given, it defines the\n         *    pixel length. If a percentage string is given, like for example `'50%'`,\n         *    the setting defines a length relative to a base size, for example the size\n         *    of a container.\n         */\n        /**\n         * Return a length based on either the integer value, or a percentage of a base.\n         *\n         * @function #relativeLength\n         * @memberOf Highcharts\n         * @param  {RelativeSize} value\n         *         A percentage string or a number.\n         * @param  {number} base\n         *         The full length that represents 100%.\n         * @param  {number} [offset=0]\n         *         A pixel offset to apply for percentage values. Used internally in\n         *         axis positioning.\n         * @return {number}\n         *         The computed length.\n         */\n        H.relativeLength = function(value, base, offset) {\n            return (/%$/).test(value) ?\n                (base * parseFloat(value) / 100) + (offset || 0) :\n                parseFloat(value);\n        };\n\n        /**\n         * Wrap a method with extended functionality, preserving the original function.\n         *\n         * @function #wrap\n         * @memberOf Highcharts\n         * @param {Object} obj - The context object that the method belongs to. In real\n         *        cases, this is often a prototype.\n         * @param {String} method - The name of the method to extend.\n         * @param {Function} func - A wrapper function callback. This function is called\n         *        with the same arguments as the original function, except that the\n         *        original function is unshifted and passed as the first argument.\n         *\n         */\n        H.wrap = function(obj, method, func) {\n            var proceed = obj[method];\n            obj[method] = function() {\n                var args = Array.prototype.slice.call(arguments),\n                    outerArgs = arguments,\n                    ctx = this,\n                    ret;\n                ctx.proceed = function() {\n                    proceed.apply(ctx, arguments.length ? arguments : outerArgs);\n                };\n                args.unshift(proceed);\n                ret = func.apply(this, args);\n                ctx.proceed = null;\n                return ret;\n            };\n        };\n\n        /**\n         * Get the time zone offset based on the current timezone information as set in\n         * the global options.\n         *\n         * @function #getTZOffset\n         * @memberOf Highcharts\n         * @param  {Number} timestamp - The JavaScript timestamp to inspect.\n         * @return {Number} - The timezone offset in minutes compared to UTC.\n         */\n        H.getTZOffset = function(timestamp) {\n            var d = H.Date;\n            return ((d.hcGetTimezoneOffset && d.hcGetTimezoneOffset(timestamp)) ||\n                d.hcTimezoneOffset || 0) * 60000;\n        };\n\n        /**\n         * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a\n         * human readable date string. The format is a subset of the formats for PHP's\n         * [strftime]{@link\n         * http://www.php.net/manual/en/function.strftime.php} function. Additional\n         * formats can be given in the {@link Highcharts.dateFormats} hook.\n         *\n         * @function #dateFormat\n         * @memberOf Highcharts\n         * @param {String} format - The desired format where various time\n         *        representations are prefixed with %.\n         * @param {Number} timestamp - The JavaScript timestamp.\n         * @param {Boolean} [capitalize=false] - Upper case first letter in the return.\n         * @returns {String} The formatted date.\n         */\n        H.dateFormat = function(format, timestamp, capitalize) {\n            if (!H.defined(timestamp) || isNaN(timestamp)) {\n                return H.defaultOptions.lang.invalidDate || '';\n            }\n            format = H.pick(format, '%Y-%m-%d %H:%M:%S');\n\n            var D = H.Date,\n                date = new D(timestamp - H.getTZOffset(timestamp)),\n                // get the basic time values\n                hours = date[D.hcGetHours](),\n                day = date[D.hcGetDay](),\n                dayOfMonth = date[D.hcGetDate](),\n                month = date[D.hcGetMonth](),\n                fullYear = date[D.hcGetFullYear](),\n                lang = H.defaultOptions.lang,\n                langWeekdays = lang.weekdays,\n                shortWeekdays = lang.shortWeekdays,\n                pad = H.pad,\n\n                // List all format keys. Custom formats can be added from the outside.\n                replacements = H.extend({\n\n                        //-- Day\n                        // Short weekday, like 'Mon'\n                        'a': shortWeekdays ?\n                            shortWeekdays[day] : langWeekdays[day].substr(0, 3),\n                        // Long weekday, like 'Monday'\n                        'A': langWeekdays[day],\n                        // Two digit day of the month, 01 to 31\n                        'd': pad(dayOfMonth),\n                        // Day of the month, 1 through 31\n                        'e': pad(dayOfMonth, 2, ' '),\n                        'w': day,\n\n                        // Week (none implemented)\n                        //'W': weekNumber(),\n\n                        //-- Month\n                        // Short month, like 'Jan'\n                        'b': lang.shortMonths[month],\n                        // Long month, like 'January'\n                        'B': lang.months[month],\n                        // Two digit month number, 01 through 12\n                        'm': pad(month + 1),\n\n                        //-- Year\n                        // Two digits year, like 09 for 2009\n                        'y': fullYear.toString().substr(2, 2),\n                        // Four digits year, like 2009\n                        'Y': fullYear,\n\n                        //-- Time\n                        // Two digits hours in 24h format, 00 through 23\n                        'H': pad(hours),\n                        // Hours in 24h format, 0 through 23\n                        'k': hours,\n                        // Two digits hours in 12h format, 00 through 11\n                        'I': pad((hours % 12) || 12),\n                        // Hours in 12h format, 1 through 12\n                        'l': (hours % 12) || 12,\n                        // Two digits minutes, 00 through 59\n                        'M': pad(date[D.hcGetMinutes]()),\n                        // Upper case AM or PM\n                        'p': hours < 12 ? 'AM' : 'PM',\n                        // Lower case AM or PM\n                        'P': hours < 12 ? 'am' : 'pm',\n                        // Two digits seconds, 00 through  59\n                        'S': pad(date.getSeconds()),\n                        // Milliseconds (naming from Ruby)\n                        'L': pad(Math.round(timestamp % 1000), 3)\n                    },\n\n                    /**\n                     * A hook for defining additional date format specifiers. New\n                     * specifiers are defined as key-value pairs by using the specifier\n                     * as key, and a function which takes the timestamp as value. This\n                     * function returns the formatted portion of the date.\n                     *\n                     * @type {Object}\n                     * @name dateFormats\n                     * @memberOf Highcharts\n                     * @sample highcharts/global/dateformats/ Adding support for week\n                     * number\n                     */\n                    H.dateFormats\n                );\n\n\n            // Do the replaces\n            H.objectEach(replacements, function(val, key) {\n                // Regex would do it in one line, but this is faster\n                while (format.indexOf('%' + key) !== -1) {\n                    format = format.replace(\n                        '%' + key,\n                        typeof val === 'function' ? val(timestamp) : val\n                    );\n                }\n\n            });\n\n            // Optionally capitalize the string and return\n            return capitalize ?\n                format.substr(0, 1).toUpperCase() + format.substr(1) :\n                format;\n        };\n\n        /**\n         * Format a single variable. Similar to sprintf, without the % prefix.\n         *\n         * @example\n         * formatSingle('.2f', 5); // => '5.00'.\n         *\n         * @function #formatSingle\n         * @memberOf Highcharts\n         * @param {String} format The format string.\n         * @param {*} val The value.\n         * @returns {String} The formatted representation of the value.\n         */\n        H.formatSingle = function(format, val) {\n            var floatRegex = /f$/,\n                decRegex = /\\.([0-9])/,\n                lang = H.defaultOptions.lang,\n                decimals;\n\n            if (floatRegex.test(format)) { // float\n                decimals = format.match(decRegex);\n                decimals = decimals ? decimals[1] : -1;\n                if (val !== null) {\n                    val = H.numberFormat(\n                        val,\n                        decimals,\n                        lang.decimalPoint,\n                        format.indexOf(',') > -1 ? lang.thousandsSep : ''\n                    );\n                }\n            } else {\n                val = H.dateFormat(format, val);\n            }\n            return val;\n        };\n\n        /**\n         * Format a string according to a subset of the rules of Python's String.format\n         * method.\n         *\n         * @function #format\n         * @memberOf Highcharts\n         * @param {String} str The string to format.\n         * @param {Object} ctx The context, a collection of key-value pairs where each\n         *        key is replaced by its value.\n         * @returns {String} The formatted string.\n         *\n         * @example\n         * var s = Highcharts.format(\n         *     'The {color} fox was {len:.2f} feet long',\n         *     { color: 'red', len: Math.PI }\n         * );\n         * // => The red fox was 3.14 feet long\n         */\n        H.format = function(str, ctx) {\n            var splitter = '{',\n                isInside = false,\n                segment,\n                valueAndFormat,\n                path,\n                i,\n                len,\n                ret = [],\n                val,\n                index;\n\n            while (str) {\n                index = str.indexOf(splitter);\n                if (index === -1) {\n                    break;\n                }\n\n                segment = str.slice(0, index);\n                if (isInside) { // we're on the closing bracket looking back\n\n                    valueAndFormat = segment.split(':');\n                    path = valueAndFormat.shift().split('.'); // get first and leave\n                    len = path.length;\n                    val = ctx;\n\n                    // Assign deeper paths\n                    for (i = 0; i < len; i++) {\n                        val = val[path[i]];\n                    }\n\n                    // Format the replacement\n                    if (valueAndFormat.length) {\n                        val = H.formatSingle(valueAndFormat.join(':'), val);\n                    }\n\n                    // Push the result and advance the cursor\n                    ret.push(val);\n\n                } else {\n                    ret.push(segment);\n\n                }\n                str = str.slice(index + 1); // the rest\n                isInside = !isInside; // toggle\n                splitter = isInside ? '}' : '{'; // now look for next matching bracket\n            }\n            ret.push(str);\n            return ret.join('');\n        };\n\n        /**\n         * Get the magnitude of a number.\n         *\n         * @function #getMagnitude\n         * @memberOf Highcharts\n         * @param {Number} number The number.\n         * @returns {Number} The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2\n         *        etc.\n         */\n        H.getMagnitude = function(num) {\n            return Math.pow(10, Math.floor(Math.log(num) / Math.LN10));\n        };\n\n        /**\n         * Take an interval and normalize it to multiples of round numbers.\n         *\n         * @todo  Move this function to the Axis prototype. It is here only for\n         *        historical reasons.\n         * @function #normalizeTickInterval\n         * @memberOf Highcharts\n         * @param {Number} interval - The raw, un-rounded interval.\n         * @param {Array} [multiples] - Allowed multiples.\n         * @param {Number} [magnitude] - The magnitude of the number.\n         * @param {Boolean} [allowDecimals] - Whether to allow decimals.\n         * @param {Boolean} [hasTickAmount] - If it has tickAmount, avoid landing\n         *        on tick intervals lower than original.\n         * @returns {Number} The normalized interval.\n         */\n        H.normalizeTickInterval = function(interval, multiples, magnitude,\n            allowDecimals, hasTickAmount) {\n            var normalized,\n                i,\n                retInterval = interval;\n\n            // round to a tenfold of 1, 2, 2.5 or 5\n            magnitude = H.pick(magnitude, 1);\n            normalized = interval / magnitude;\n\n            // multiples for a linear scale\n            if (!multiples) {\n                multiples = hasTickAmount ?\n                    // Finer grained ticks when the tick amount is hard set, including\n                    // when alignTicks is true on multiple axes (#4580).\n                    [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10] :\n\n                    // Else, let ticks fall on rounder numbers\n                    [1, 2, 2.5, 5, 10];\n\n\n                // the allowDecimals option\n                if (allowDecimals === false) {\n                    if (magnitude === 1) {\n                        multiples = H.grep(multiples, function(num) {\n                            return num % 1 === 0;\n                        });\n                    } else if (magnitude <= 0.1) {\n                        multiples = [1 / magnitude];\n                    }\n                }\n            }\n\n            // normalize the interval to the nearest multiple\n            for (i = 0; i < multiples.length; i++) {\n                retInterval = multiples[i];\n                // only allow tick amounts smaller than natural\n                if ((hasTickAmount && retInterval * magnitude >= interval) ||\n                    (!hasTickAmount && (normalized <= (multiples[i] +\n                        (multiples[i + 1] || multiples[i])) / 2))) {\n                    break;\n                }\n            }\n\n            // Multiply back to the correct magnitude. Correct floats to appropriate\n            // precision (#6085).\n            retInterval = H.correctFloat(\n                retInterval * magnitude, -Math.round(Math.log(0.001) / Math.LN10)\n            );\n\n            return retInterval;\n        };\n\n\n        /**\n         * Sort an object array and keep the order of equal items. The ECMAScript\n         * standard does not specify the behaviour when items are equal.\n         *\n         * @function #stableSort\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to sort.\n         * @param {Function} sortFunction - The function to sort it with, like with\n         *        regular Array.prototype.sort.\n         *\n         */\n        H.stableSort = function(arr, sortFunction) {\n            var length = arr.length,\n                sortValue,\n                i;\n\n            // Add index to each item\n            for (i = 0; i < length; i++) {\n                arr[i].safeI = i; // stable sort index\n            }\n\n            arr.sort(function(a, b) {\n                sortValue = sortFunction(a, b);\n                return sortValue === 0 ? a.safeI - b.safeI : sortValue;\n            });\n\n            // Remove index from items\n            for (i = 0; i < length; i++) {\n                delete arr[i].safeI; // stable sort index\n            }\n        };\n\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.min` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function #arrayMin\n         * @memberOf  Highcharts\n         * @param {Array} data An array of numbers.\n         * @returns {Number} The lowest number.\n         */\n        H.arrayMin = function(data) {\n            var i = data.length,\n                min = data[0];\n\n            while (i--) {\n                if (data[i] < min) {\n                    min = data[i];\n                }\n            }\n            return min;\n        };\n\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.max` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function #arrayMax\n         * @memberOf  Highcharts\n         * @param {Array} data - An array of numbers.\n         * @returns {Number} The highest number.\n         */\n        H.arrayMax = function(data) {\n            var i = data.length,\n                max = data[0];\n\n            while (i--) {\n                if (data[i] > max) {\n                    max = data[i];\n                }\n            }\n            return max;\n        };\n\n        /**\n         * Utility method that destroys any SVGElement instances that are properties on\n         * the given object. It loops all properties and invokes destroy if there is a\n         * destroy method. The property is then delete.\n         *\n         * @function #destroyObjectProperties\n         * @memberOf Highcharts\n         * @param {Object} obj - The object to destroy properties on.\n         * @param {Object} [except] - Exception, do not destroy this property, only\n         *    delete it.\n         *\n         */\n        H.destroyObjectProperties = function(obj, except) {\n            H.objectEach(obj, function(val, n) {\n                // If the object is non-null and destroy is defined\n                if (val && val !== except && val.destroy) {\n                    // Invoke the destroy\n                    val.destroy();\n                }\n\n                // Delete the property from the object.\n                delete obj[n];\n            });\n        };\n\n\n        /**\n         * Discard a HTML element by moving it to the bin and delete.\n         *\n         * @function #discardElement\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement} element - The HTML node to discard.\n         *\n         */\n        H.discardElement = function(element) {\n            var garbageBin = H.garbageBin;\n            // create a garbage bin element, not part of the DOM\n            if (!garbageBin) {\n                garbageBin = H.createElement('div');\n            }\n\n            // move the node and empty bin\n            if (element) {\n                garbageBin.appendChild(element);\n            }\n            garbageBin.innerHTML = '';\n        };\n\n        /**\n         * Fix JS round off float errors.\n         *\n         * @function #correctFloat\n         * @memberOf Highcharts\n         * @param {Number} num - A float number to fix.\n         * @param {Number} [prec=14] - The precision.\n         * @returns {Number} The corrected float number.\n         */\n        H.correctFloat = function(num, prec) {\n            return parseFloat(\n                num.toPrecision(prec || 14)\n            );\n        };\n\n        /**\n         * Set the global animation to either a given value, or fall back to the given\n         * chart's animation option.\n         *\n         * @function #setAnimation\n         * @memberOf Highcharts\n         * @param {Boolean|Animation} animation - The animation object.\n         * @param {Object} chart - The chart instance.\n         *\n         * @todo This function always relates to a chart, and sets a property on the\n         *        renderer, so it should be moved to the SVGRenderer.\n         */\n        H.setAnimation = function(animation, chart) {\n            chart.renderer.globalAnimation = H.pick(\n                animation,\n                chart.options.chart.animation,\n                true\n            );\n        };\n\n        /**\n         * Get the animation in object form, where a disabled animation is always\n         * returned as `{ duration: 0 }`.\n         *\n         * @function #animObject\n         * @memberOf Highcharts\n         * @param {Boolean|AnimationOptions} animation - An animation setting. Can be an\n         *        object with duration, complete and easing properties, or a boolean to\n         *        enable or disable.\n         * @returns {AnimationOptions} An object with at least a duration property.\n         */\n        H.animObject = function(animation) {\n            return H.isObject(animation) ?\n                H.merge(animation) : {\n                    duration: animation ? 500 : 0\n                };\n        };\n\n        /**\n         * The time unit lookup\n         */\n        H.timeUnits = {\n            millisecond: 1,\n            second: 1000,\n            minute: 60000,\n            hour: 3600000,\n            day: 24 * 3600000,\n            week: 7 * 24 * 3600000,\n            month: 28 * 24 * 3600000,\n            year: 364 * 24 * 3600000\n        };\n\n        /**\n         * Format a number and return a string based on input settings.\n         *\n         * @function #numberFormat\n         * @memberOf Highcharts\n         * @param {Number} number - The input number to format.\n         * @param {Number} decimals - The amount of decimals. A value of -1 preserves\n         *        the amount in the input number.\n         * @param {String} [decimalPoint] - The decimal point, defaults to the one given\n         *        in the lang options, or a dot.\n         * @param {String} [thousandsSep] - The thousands separator, defaults to the one\n         *        given in the lang options, or a space character.\n         * @returns {String} The formatted number.\n         *\n         * @sample members/highcharts-numberformat/ Custom number format\n         */\n        H.numberFormat = function(number, decimals, decimalPoint, thousandsSep) {\n            number = +number || 0;\n            decimals = +decimals;\n\n            var lang = H.defaultOptions.lang,\n                origDec = (number.toString().split('.')[1] || '').split('e')[0].length,\n                strinteger,\n                thousands,\n                ret,\n                roundedNumber,\n                exponent = number.toString().split('e');\n\n            if (decimals === -1) {\n                // Preserve decimals. Not huge numbers (#3793).\n                decimals = Math.min(origDec, 20);\n            } else if (!H.isNumber(decimals)) {\n                decimals = 2;\n            }\n\n            // Add another decimal to avoid rounding errors of float numbers. (#4573)\n            // Then use toFixed to handle rounding.\n            roundedNumber = (\n                Math.abs(exponent[1] ? exponent[0] : number) +\n                Math.pow(10, -Math.max(decimals, origDec) - 1)\n            ).toFixed(decimals);\n\n            // A string containing the positive integer component of the number\n            strinteger = String(H.pInt(roundedNumber));\n\n            // Leftover after grouping into thousands. Can be 0, 1 or 3.\n            thousands = strinteger.length > 3 ? strinteger.length % 3 : 0;\n\n            // Language\n            decimalPoint = H.pick(decimalPoint, lang.decimalPoint);\n            thousandsSep = H.pick(thousandsSep, lang.thousandsSep);\n\n            // Start building the return\n            ret = number < 0 ? '-' : '';\n\n            // Add the leftover after grouping into thousands. For example, in the\n            // number 42 000 000, this line adds 42.\n            ret += thousands ? strinteger.substr(0, thousands) + thousandsSep : '';\n\n            // Add the remaining thousands groups, joined by the thousands separator\n            ret += strinteger\n                .substr(thousands)\n                .replace(/(\\d{3})(?=\\d)/g, '$1' + thousandsSep);\n\n            // Add the decimal point and the decimal component\n            if (decimals) {\n                // Get the decimal component\n                ret += decimalPoint + roundedNumber.slice(-decimals);\n            }\n\n            if (exponent[1]) {\n                ret += 'e' + exponent[1];\n            }\n\n            return ret;\n        };\n\n        /**\n         * Easing definition\n         * @ignore\n         * @param   {Number} pos Current position, ranging from 0 to 1.\n         */\n        Math.easeInOutSine = function(pos) {\n            return -0.5 * (Math.cos(Math.PI * pos) - 1);\n        };\n\n        /**\n         * Get the computed CSS value for given element and property, only for numerical\n         * properties. For width and height, the dimension of the inner box (excluding\n         * padding) is returned. Used for fitting the chart within the container.\n         *\n         * @function #getStyle\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement} el - A HTML element.\n         * @param {String} prop - The property name.\n         * @param {Boolean} [toInt=true] - Parse to integer.\n         * @returns {Number} - The numeric value.\n         */\n        H.getStyle = function(el, prop, toInt) {\n\n            var style;\n\n            // For width and height, return the actual inner pixel size (#4913)\n            if (prop === 'width') {\n                return Math.min(el.offsetWidth, el.scrollWidth) -\n                    H.getStyle(el, 'padding-left') -\n                    H.getStyle(el, 'padding-right');\n            } else if (prop === 'height') {\n                return Math.min(el.offsetHeight, el.scrollHeight) -\n                    H.getStyle(el, 'padding-top') -\n                    H.getStyle(el, 'padding-bottom');\n            }\n\n            // Otherwise, get the computed style\n            style = win.getComputedStyle(el, undefined);\n            if (style) {\n                style = style.getPropertyValue(prop);\n                if (H.pick(toInt, true)) {\n                    style = H.pInt(style);\n                }\n            }\n            return style;\n        };\n\n        /**\n         * Search for an item in an array.\n         *\n         * @function #inArray\n         * @memberOf Highcharts\n         * @param {*} item - The item to search for.\n         * @param {arr} arr - The array or node collection to search in.\n         * @returns {Number} - The index within the array, or -1 if not found.\n         */\n        H.inArray = function(item, arr) {\n            return arr.indexOf ? arr.indexOf(item) : [].indexOf.call(arr, item);\n        };\n\n        /**\n         * Filter an array by a callback.\n         *\n         * @function #grep\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to filter.\n         * @param {Function} callback - The callback function. The function receives the\n         *        item as the first argument. Return `true` if the item is to be\n         *        preserved.\n         * @returns {Array} - A new, filtered array.\n         */\n        H.grep = function(arr, callback) {\n            return [].filter.call(arr, callback);\n        };\n\n        /**\n         * Return the value of the first element in the array that satisfies the\n         * provided testing function.\n         *\n         * @function #find\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to test.\n         * @param {Function} callback - The callback function. The function receives the\n         *        item as the first argument. Return `true` if this item satisfies the\n         *        condition.\n         * @returns {Mixed} - The value of the element.\n         */\n        H.find = function(arr, callback) {\n            return [].find.call(arr, callback);\n        };\n\n        /**\n         * Map an array by a callback.\n         *\n         * @function #map\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to map.\n         * @param {Function} fn - The callback function. Return the new value for the\n         *        new array.\n         * @returns {Array} - A new array item with modified items.\n         */\n        H.map = function(arr, fn) {\n            var results = [],\n                i = 0,\n                len = arr.length;\n\n            for (; i < len; i++) {\n                results[i] = fn.call(arr[i], arr[i], i, arr);\n            }\n\n            return results;\n        };\n\n        /**\n         * Get the element's offset position, corrected for `overflow: auto`.\n         *\n         * @function #offset\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement} el - The HTML element.\n         * @returns {Object} An object containing `left` and `top` properties for the\n         * position in the page.\n         */\n        H.offset = function(el) {\n            var docElem = doc.documentElement,\n                box = el.getBoundingClientRect();\n\n            return {\n                top: box.top + (win.pageYOffset || docElem.scrollTop) -\n                    (docElem.clientTop || 0),\n                left: box.left + (win.pageXOffset || docElem.scrollLeft) -\n                    (docElem.clientLeft || 0)\n            };\n        };\n\n        /**\n         * Stop running animation.\n         *\n         * @todo A possible extension to this would be to stop a single property, when\n         * we want to continue animating others. Then assign the prop to the timer\n         * in the Fx.run method, and check for the prop here. This would be an\n         * improvement in all cases where we stop the animation from .attr. Instead of\n         * stopping everything, we can just stop the actual attributes we're setting.\n         *\n         * @function #stop\n         * @memberOf Highcharts\n         * @param {SVGElement} el - The SVGElement to stop animation on.\n         * @param {string} [prop] - The property to stop animating. If given, the stop\n         *    method will stop a single property from animating, while others continue.\n         *\n         */\n        H.stop = function(el, prop) {\n\n            var i = timers.length;\n\n            // Remove timers related to this element (#4519)\n            while (i--) {\n                if (timers[i].elem === el && (!prop || prop === timers[i].prop)) {\n                    timers[i].stopped = true; // #4667\n                }\n            }\n        };\n\n        /**\n         * Iterate over an array.\n         *\n         * @function #each\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to iterate over.\n         * @param {Function} fn - The iterator callback. It passes three arguments:\n         * * item - The array item.\n         * * index - The item's index in the array.\n         * * arr - The array that each is being applied to.\n         * @param {Object} [ctx] The context.\n         */\n        H.each = function(arr, fn, ctx) { // modern browsers\n            return Array.prototype.forEach.call(arr, fn, ctx);\n        };\n\n        /**\n         * Iterate over object key pairs in an object.\n         *\n         * @function #objectEach\n         * @memberOf Highcharts\n         * @param  {Object}   obj - The object to iterate over.\n         * @param  {Function} fn  - The iterator callback. It passes three arguments:\n         * * value - The property value.\n         * * key - The property key.\n         * * obj - The object that objectEach is being applied to.\n         * @param  {Object}   ctx The context\n         */\n        H.objectEach = function(obj, fn, ctx) {\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    fn.call(ctx, obj[key], key, obj);\n                }\n            }\n        };\n\n        /**\n         * Add an event listener.\n         *\n         * @function #addEvent\n         * @memberOf Highcharts\n         * @param {Object} el - The element or object to add a listener to. It can be a\n         *        {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         * @param {String} type - The event type.\n         * @param {Function} fn - The function callback to execute when the event is\n         *        fired.\n         * @returns {Function} A callback function to remove the added event.\n         */\n        H.addEvent = function(el, type, fn) {\n\n            var events = el.hcEvents = el.hcEvents || {};\n\n            function wrappedFn(e) {\n                e.target = e.srcElement || win; // #2820\n                fn.call(el, e);\n            }\n\n            // Handle DOM events in modern browsers\n            if (el.addEventListener) {\n                el.addEventListener(type, fn, false);\n\n                // Handle old IE implementation\n            } else if (el.attachEvent) {\n\n                if (!el.hcEventsIE) {\n                    el.hcEventsIE = {};\n                }\n\n                // unique function string (#6746)\n                if (!fn.hcGetKey) {\n                    fn.hcGetKey = H.uniqueKey();\n                }\n\n                // Link wrapped fn with original fn, so we can get this in removeEvent\n                el.hcEventsIE[fn.hcGetKey] = wrappedFn;\n\n                el.attachEvent('on' + type, wrappedFn);\n            }\n\n            if (!events[type]) {\n                events[type] = [];\n            }\n\n            events[type].push(fn);\n\n            // Return a function that can be called to remove this event.\n            return function() {\n                H.removeEvent(el, type, fn);\n            };\n        };\n\n        /**\n         * Remove an event that was added with {@link Highcharts#addEvent}.\n         *\n         * @function #removeEvent\n         * @memberOf Highcharts\n         * @param {Object} el - The element to remove events on.\n         * @param {String} [type] - The type of events to remove. If undefined, all\n         *        events are removed from the element.\n         * @param {Function} [fn] - The specific callback to remove. If undefined, all\n         *        events that match the element and optionally the type are removed.\n         *\n         */\n        H.removeEvent = function(el, type, fn) {\n\n            var events,\n                hcEvents = el.hcEvents,\n                index;\n\n            function removeOneEvent(type, fn) {\n                if (el.removeEventListener) {\n                    el.removeEventListener(type, fn, false);\n                } else if (el.attachEvent) {\n                    fn = el.hcEventsIE[fn.hcGetKey];\n                    el.detachEvent('on' + type, fn);\n                }\n            }\n\n            function removeAllEvents() {\n                var types,\n                    len;\n\n                if (!el.nodeName) {\n                    return; // break on non-DOM events\n                }\n\n                if (type) {\n                    types = {};\n                    types[type] = true;\n                } else {\n                    types = hcEvents;\n                }\n\n                H.objectEach(types, function(val, n) {\n                    if (hcEvents[n]) {\n                        len = hcEvents[n].length;\n                        while (len--) {\n                            removeOneEvent(n, hcEvents[n][len]);\n                        }\n                    }\n                });\n            }\n\n            if (hcEvents) {\n                if (type) {\n                    events = hcEvents[type] || [];\n                    if (fn) {\n                        index = H.inArray(fn, events);\n                        if (index > -1) {\n                            events.splice(index, 1);\n                            hcEvents[type] = events;\n                        }\n                        removeOneEvent(type, fn);\n\n                    } else {\n                        removeAllEvents();\n                        hcEvents[type] = [];\n                    }\n                } else {\n                    removeAllEvents();\n                    el.hcEvents = {};\n                }\n            }\n        };\n\n        /**\n         * Fire an event that was registered with {@link Highcharts#addEvent}.\n         *\n         * @function #fireEvent\n         * @memberOf Highcharts\n         * @param {Object} el - The object to fire the event on. It can be a\n         *        {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         * @param {String} type - The type of event.\n         * @param {Object} [eventArguments] - Custom event arguments that are passed on\n         *        as an argument to the event handler.\n         * @param {Function} [defaultFunction] - The default function to execute if the\n         *        other listeners haven't returned false.\n         *\n         */\n        H.fireEvent = function(el, type, eventArguments, defaultFunction) {\n            var e,\n                hcEvents = el.hcEvents,\n                events,\n                len,\n                i,\n                fn;\n\n            eventArguments = eventArguments || {};\n\n            if (doc.createEvent && (el.dispatchEvent || el.fireEvent)) {\n                e = doc.createEvent('Events');\n                e.initEvent(type, true, true);\n                //e.target = el;\n\n                H.extend(e, eventArguments);\n\n                if (el.dispatchEvent) {\n                    el.dispatchEvent(e);\n                } else {\n                    el.fireEvent(type, e);\n                }\n\n            } else if (hcEvents) {\n\n                events = hcEvents[type] || [];\n                len = events.length;\n\n                if (!eventArguments.target) { // We're running a custom event\n\n                    H.extend(eventArguments, {\n                        // Attach a simple preventDefault function to skip default\n                        // handler if called. The built-in defaultPrevented property is\n                        // not overwritable (#5112)\n                        preventDefault: function() {\n                            eventArguments.defaultPrevented = true;\n                        },\n                        // Setting target to native events fails with clicking the\n                        // zoom-out button in Chrome.\n                        target: el,\n                        // If the type is not set, we're running a custom event (#2297).\n                        // If it is set, we're running a browser event, and setting it\n                        // will cause en error in IE8 (#2465).\n                        type: type\n                    });\n                }\n\n\n                for (i = 0; i < len; i++) {\n                    fn = events[i];\n\n                    // If the event handler return false, prevent the default handler\n                    // from executing\n                    if (fn && fn.call(el, eventArguments) === false) {\n                        eventArguments.preventDefault();\n                    }\n                }\n            }\n\n            // Run the default if not prevented\n            if (defaultFunction && !eventArguments.defaultPrevented) {\n                defaultFunction(eventArguments);\n            }\n        };\n\n        /**\n         * An animation configuration. Animation configurations can also be defined as\n         * booleans, where `false` turns off animation and `true` defaults to a duration\n         * of 500ms.\n         * @typedef {Object} AnimationOptions\n         * @property {Number} duration - The animation duration in milliseconds.\n         * @property {String} [easing] - The name of an easing function as defined on\n         *     the `Math` object.\n         * @property {Function} [complete] - A callback function to exectute when the\n         *     animation finishes.\n         * @property {Function} [step] - A callback function to execute on each step of\n         *     each attribute or CSS property that's being animated. The first argument\n         *     contains information about the animation and progress.\n         */\n\n\n        /**\n         * The global animate method, which uses Fx to create individual animators.\n         *\n         * @function #animate\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement|SVGElement} el - The element to animate.\n         * @param {Object} params - An object containing key-value pairs of the\n         *        properties to animate. Supports numeric as pixel-based CSS properties\n         *        for HTML objects and attributes for SVGElements.\n         * @param {AnimationOptions} [opt] - Animation options.\n         */\n        H.animate = function(el, params, opt) {\n            var start,\n                unit = '',\n                end,\n                fx,\n                args;\n\n            if (!H.isObject(opt)) { // Number or undefined/null\n                args = arguments;\n                opt = {\n                    duration: args[2],\n                    easing: args[3],\n                    complete: args[4]\n                };\n            }\n            if (!H.isNumber(opt.duration)) {\n                opt.duration = 400;\n            }\n            opt.easing = typeof opt.easing === 'function' ?\n                opt.easing :\n                (Math[opt.easing] || Math.easeInOutSine);\n            opt.curAnim = H.merge(params);\n\n            H.objectEach(params, function(val, prop) {\n                // Stop current running animation of this property\n                H.stop(el, prop);\n\n                fx = new H.Fx(el, opt, prop);\n                end = null;\n\n                if (prop === 'd') {\n                    fx.paths = fx.initPath(\n                        el,\n                        el.d,\n                        params.d\n                    );\n                    fx.toD = params.d;\n                    start = 0;\n                    end = 1;\n                } else if (el.attr) {\n                    start = el.attr(prop);\n                } else {\n                    start = parseFloat(H.getStyle(el, prop)) || 0;\n                    if (prop !== 'opacity') {\n                        unit = 'px';\n                    }\n                }\n\n                if (!end) {\n                    end = val;\n                }\n                if (end && end.match && end.match('px')) {\n                    end = end.replace(/px/g, ''); // #4351\n                }\n                fx.run(start, end, unit);\n            });\n        };\n\n        /**\n         * Factory to create new series prototypes.\n         *\n         * @function #seriesType\n         * @memberOf Highcharts\n         *\n         * @param {String} type - The series type name.\n         * @param {String} parent - The parent series type name. Use `line` to inherit\n         *        from the basic {@link Series} object.\n         * @param {Object} options - The additional default options that is merged with\n         *        the parent's options.\n         * @param {Object} props - The properties (functions and primitives) to set on\n         *        the new prototype.\n         * @param {Object} [pointProps] - Members for a series-specific extension of the\n         *        {@link Point} prototype if needed.\n         * @returns {*} - The newly created prototype as extended from {@link Series}\n         * or its derivatives.\n         */\n        // docs: add to API + extending Highcharts\n        H.seriesType = function(type, parent, options, props, pointProps) {\n            var defaultOptions = H.getOptions(),\n                seriesTypes = H.seriesTypes;\n\n            // Merge the options\n            defaultOptions.plotOptions[type] = H.merge(\n                defaultOptions.plotOptions[parent],\n                options\n            );\n\n            // Create the class\n            seriesTypes[type] = H.extendClass(seriesTypes[parent] ||\n                function() {}, props);\n            seriesTypes[type].prototype.type = type;\n\n            // Create the point class if needed\n            if (pointProps) {\n                seriesTypes[type].prototype.pointClass =\n                    H.extendClass(H.Point, pointProps);\n            }\n\n            return seriesTypes[type];\n        };\n\n        /**\n         * Get a unique key for using in internal element id's and pointers. The key\n         * is composed of a random hash specific to this Highcharts instance, and a\n         * counter.\n         * @function #uniqueKey\n         * @memberOf Highcharts\n         * @return {string} The key.\n         * @example\n         * var id = H.uniqueKey(); // => 'highcharts-x45f6hp-0'\n         */\n        H.uniqueKey = (function() {\n\n            var uniqueKeyHash = Math.random().toString(36).substring(2, 9),\n                idCounter = 0;\n\n            return function() {\n                return 'highcharts-' + uniqueKeyHash + '-' + idCounter++;\n            };\n        }());\n\n        /**\n         * Register Highcharts as a plugin in jQuery\n         */\n        if (win.jQuery) {\n            win.jQuery.fn.highcharts = function() {\n                var args = [].slice.call(arguments);\n\n                if (this[0]) { // this[0] is the renderTo div\n\n                    // Create the chart\n                    if (args[0]) {\n                        new H[ // eslint-disable-line no-new\n                            // Constructor defaults to Chart\n                            H.isString(args[0]) ? args.shift() : 'Chart'\n                        ](this[0], args[0], args[1]);\n                        return this;\n                    }\n\n                    // When called without parameters or with the return argument,\n                    // return an existing chart\n                    return charts[H.attr(this[0], 'data-highcharts-chart')];\n                }\n            };\n        }\n\n\n        /**\n         * Compatibility section to add support for legacy IE. This can be removed if\n         * old IE support is not needed.\n         */\n        if (doc && !doc.defaultView) {\n            H.getStyle = function(el, prop) {\n                var val,\n                    alias = {\n                        width: 'clientWidth',\n                        height: 'clientHeight'\n                    }[prop];\n\n                if (el.style[prop]) {\n                    return H.pInt(el.style[prop]);\n                }\n                if (prop === 'opacity') {\n                    prop = 'filter';\n                }\n\n                // Getting the rendered width and height\n                if (alias) {\n                    el.style.zoom = 1;\n                    return Math.max(el[alias] - 2 * H.getStyle(el, 'padding'), 0);\n                }\n\n                val = el.currentStyle[prop.replace(/\\-(\\w)/g, function(a, b) {\n                    return b.toUpperCase();\n                })];\n                if (prop === 'filter') {\n                    val = val.replace(\n                        /alpha\\(opacity=([0-9]+)\\)/,\n                        function(a, b) {\n                            return b / 100;\n                        }\n                    );\n                }\n\n                return val === '' ? 1 : H.pInt(val);\n            };\n        }\n\n        if (!Array.prototype.forEach) {\n            H.each = function(arr, fn, ctx) { // legacy\n                var i = 0,\n                    len = arr.length;\n                for (; i < len; i++) {\n                    if (fn.call(ctx, arr[i], i, arr) === false) {\n                        return i;\n                    }\n                }\n            };\n        }\n\n        if (!Array.prototype.indexOf) {\n            H.inArray = function(item, arr) {\n                var len,\n                    i = 0;\n\n                if (arr) {\n                    len = arr.length;\n\n                    for (; i < len; i++) {\n                        if (arr[i] === item) {\n                            return i;\n                        }\n                    }\n                }\n\n                return -1;\n            };\n        }\n\n        if (!Array.prototype.filter) {\n            H.grep = function(elements, fn) {\n                var ret = [],\n                    i = 0,\n                    length = elements.length;\n\n                for (; i < length; i++) {\n                    if (fn(elements[i], i)) {\n                        ret.push(elements[i]);\n                    }\n                }\n\n                return ret;\n            };\n        }\n\n        if (!Array.prototype.find) {\n            H.find = function(arr, fn) {\n                var i,\n                    length = arr.length;\n\n                for (i = 0; i < length; i++) {\n                    if (fn(arr[i], i)) {\n                        return arr[i];\n                    }\n                }\n            };\n        }\n\n        //--- End compatibility section ---\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var each = H.each,\n            isNumber = H.isNumber,\n            map = H.map,\n            merge = H.merge,\n            pInt = H.pInt;\n\n        /**\n         * @typedef {string} ColorString\n         * A valid color to be parsed and handled by Highcharts. Highcharts internally\n         * supports hex colors like `#ffffff`, rgb colors like `rgb(255,255,255)` and\n         * rgba colors like `rgba(255,255,255,1)`. Other colors may be supported by the\n         * browsers and displayed correctly, but Highcharts is not able to process them\n         * and apply concepts like opacity and brightening.\n         */\n        /**\n         * Handle color operations. The object methods are chainable.\n         * @param {String} input The input color in either rbga or hex format\n         */\n        H.Color = function(input) {\n            // Backwards compatibility, allow instanciation without new\n            if (!(this instanceof H.Color)) {\n                return new H.Color(input);\n            }\n            // Initialize\n            this.init(input);\n        };\n        H.Color.prototype = {\n\n            // Collection of parsers. This can be extended from the outside by pushing parsers\n            // to Highcharts.Color.prototype.parsers.\n            parsers: [{\n                // RGBA color\n                regex: /rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]?(?:\\.[0-9]+)?)\\s*\\)/,\n                parse: function(result) {\n                    return [pInt(result[1]), pInt(result[2]), pInt(result[3]), parseFloat(result[4], 10)];\n                }\n            }, {\n                // RGB color\n                regex: /rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/,\n                parse: function(result) {\n                    return [pInt(result[1]), pInt(result[2]), pInt(result[3]), 1];\n                }\n            }],\n\n            // Collection of named colors. Can be extended from the outside by adding\n            // colors to Highcharts.Color.prototype.names.\n            names: {\n                none: 'rgba(255,255,255,0)',\n                white: '#ffffff',\n                black: '#000000'\n            },\n\n            /**\n             * Parse the input color to rgba array\n             * @param {String} input\n             */\n            init: function(input) {\n                var result,\n                    rgba,\n                    i,\n                    parser,\n                    len;\n\n                this.input = input = this.names[\n                    input && input.toLowerCase ?\n                    input.toLowerCase() :\n                    ''\n                ] || input;\n\n                // Gradients\n                if (input && input.stops) {\n                    this.stops = map(input.stops, function(stop) {\n                        return new H.Color(stop[1]);\n                    });\n\n                    // Solid colors\n                } else {\n\n                    // Bitmasking as input[0] is not working for legacy IE.\n                    if (input && input.charAt() === '#') {\n\n                        len = input.length;\n                        input = parseInt(input.substr(1), 16);\n\n                        // Handle long-form, e.g. #AABBCC\n                        if (len === 7) {\n\n                            rgba = [\n                                (input & 0xFF0000) >> 16,\n                                (input & 0xFF00) >> 8,\n                                (input & 0xFF),\n                                1\n                            ];\n\n                            // Handle short-form, e.g. #ABC\n                            // In short form, the value is assumed to be the same\n                            // for both nibbles for each component. e.g. #ABC = #AABBCC\n                        } else if (len === 4) {\n\n                            rgba = [\n                                ((input & 0xF00) >> 4) | (input & 0xF00) >> 8,\n                                ((input & 0xF0) >> 4) | (input & 0xF0),\n                                ((input & 0xF) << 4) | (input & 0xF),\n                                1\n                            ];\n                        }\n                    }\n\n                    // Otherwise, check regex parsers\n                    if (!rgba) {\n                        i = this.parsers.length;\n                        while (i-- && !rgba) {\n                            parser = this.parsers[i];\n                            result = parser.regex.exec(input);\n                            if (result) {\n                                rgba = parser.parse(result);\n                            }\n                        }\n                    }\n                }\n                this.rgba = rgba || [];\n            },\n\n            /**\n             * Return the color a specified format\n             * @param {String} format\n             */\n            get: function(format) {\n                var input = this.input,\n                    rgba = this.rgba,\n                    ret;\n\n                if (this.stops) {\n                    ret = merge(input);\n                    ret.stops = [].concat(ret.stops);\n                    each(this.stops, function(stop, i) {\n                        ret.stops[i] = [ret.stops[i][0], stop.get(format)];\n                    });\n\n                    // it's NaN if gradient colors on a column chart\n                } else if (rgba && isNumber(rgba[0])) {\n                    if (format === 'rgb' || (!format && rgba[3] === 1)) {\n                        ret = 'rgb(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ')';\n                    } else if (format === 'a') {\n                        ret = rgba[3];\n                    } else {\n                        ret = 'rgba(' + rgba.join(',') + ')';\n                    }\n                } else {\n                    ret = input;\n                }\n                return ret;\n            },\n\n            /**\n             * Brighten the color\n             * @param {Number} alpha\n             */\n            brighten: function(alpha) {\n                var i,\n                    rgba = this.rgba;\n\n                if (this.stops) {\n                    each(this.stops, function(stop) {\n                        stop.brighten(alpha);\n                    });\n\n                } else if (isNumber(alpha) && alpha !== 0) {\n                    for (i = 0; i < 3; i++) {\n                        rgba[i] += pInt(alpha * 255);\n\n                        if (rgba[i] < 0) {\n                            rgba[i] = 0;\n                        }\n                        if (rgba[i] > 255) {\n                            rgba[i] = 255;\n                        }\n                    }\n                }\n                return this;\n            },\n\n            /**\n             * Set the color's opacity to a given alpha value\n             * @param {Number} alpha\n             */\n            setOpacity: function(alpha) {\n                this.rgba[3] = alpha;\n                return this;\n            },\n\n            /*\n             * Return an intermediate color between two colors.\n             *\n             * @param  {Highcharts.Color} to\n             *         The color object to tween to.\n             * @param  {Number} pos\n             *         The intermediate position, where 0 is the from color (current\n             *         color item), and 1 is the `to` color.\n             *\n             * @return {String}\n             *         The intermediate color in rgba notation.\n             */\n            tweenTo: function(to, pos) {\n                // Check for has alpha, because rgba colors perform worse due to lack of\n                // support in WebKit.\n                var from = this,\n                    hasAlpha,\n                    ret;\n\n                // Unsupported color, return to-color (#3920)\n                if (!to.rgba.length) {\n                    ret = to.input || 'none';\n\n                    // Interpolate\n                } else {\n                    from = from.rgba;\n                    to = to.rgba;\n                    hasAlpha = (to[3] !== 1 || from[3] !== 1);\n                    ret = (hasAlpha ? 'rgba(' : 'rgb(') +\n                        Math.round(to[0] + (from[0] - to[0]) * (1 - pos)) + ',' +\n                        Math.round(to[1] + (from[1] - to[1]) * (1 - pos)) + ',' +\n                        Math.round(to[2] + (from[2] - to[2]) * (1 - pos)) +\n                        (hasAlpha ?\n                            (',' + (to[3] + (from[3] - to[3]) * (1 - pos))) :\n                            '') + ')';\n                }\n                return ret;\n            }\n        };\n        H.color = function(input) {\n            return new H.Color(input);\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var SVGElement,\n            SVGRenderer,\n\n            addEvent = H.addEvent,\n            animate = H.animate,\n            attr = H.attr,\n            charts = H.charts,\n            color = H.color,\n            css = H.css,\n            createElement = H.createElement,\n            defined = H.defined,\n            deg2rad = H.deg2rad,\n            destroyObjectProperties = H.destroyObjectProperties,\n            doc = H.doc,\n            each = H.each,\n            extend = H.extend,\n            erase = H.erase,\n            grep = H.grep,\n            hasTouch = H.hasTouch,\n            inArray = H.inArray,\n            isArray = H.isArray,\n            isFirefox = H.isFirefox,\n            isMS = H.isMS,\n            isObject = H.isObject,\n            isString = H.isString,\n            isWebKit = H.isWebKit,\n            merge = H.merge,\n            noop = H.noop,\n            objectEach = H.objectEach,\n            pick = H.pick,\n            pInt = H.pInt,\n            removeEvent = H.removeEvent,\n            splat = H.splat,\n            stop = H.stop,\n            svg = H.svg,\n            SVG_NS = H.SVG_NS,\n            symbolSizes = H.symbolSizes,\n            win = H.win;\n\n        /**\n         * @typedef {Object} SVGDOMElement - An SVG DOM element.\n         */\n        /**\n         * The SVGElement prototype is a JavaScript wrapper for SVG elements used in the\n         * rendering layer of Highcharts. Combined with the {@link\n         * Highcharts.SVGRenderer} object, these prototypes allow freeform annotation\n         * in the charts or even in HTML pages without instanciating a chart. The\n         * SVGElement can also wrap HTML labels, when `text` or `label` elements are\n         * created with the `useHTML` parameter.\n         *\n         * The SVGElement instances are created through factory functions on the\n         * {@link Highcharts.SVGRenderer} object, like\n         * [rect]{@link Highcharts.SVGRenderer#rect}, [path]{@link\n         * Highcharts.SVGRenderer#path}, [text]{@link Highcharts.SVGRenderer#text},\n         * [label]{@link Highcharts.SVGRenderer#label}, [g]{@link\n         * Highcharts.SVGRenderer#g} and more.\n         *\n         * @class Highcharts.SVGElement\n         */\n        SVGElement = H.SVGElement = function() {\n            return this;\n        };\n        extend(SVGElement.prototype, /** @lends Highcharts.SVGElement.prototype */ {\n\n            // Default base for animation\n            opacity: 1,\n            SVG_NS: SVG_NS,\n\n            /**\n             * For labels, these CSS properties are applied to the `text` node directly.\n             *\n             * @private\n             * @type {Array.<string>}\n             */\n            textProps: ['direction', 'fontSize', 'fontWeight', 'fontFamily',\n                'fontStyle', 'color', 'lineHeight', 'width', 'textAlign',\n                'textDecoration', 'textOverflow', 'textOutline'\n            ],\n\n            /**\n             * Initialize the SVG renderer. This function only exists to make the\n             * initiation process overridable. It should not be called directly.\n             *\n             * @param  {SVGRenderer} renderer\n             *         The SVGRenderer instance to initialize to.\n             * @param  {String} nodeName\n             *         The SVG node name.\n             *\n             */\n            init: function(renderer, nodeName) {\n\n                /**\n                 * The primary DOM node. Each `SVGElement` instance wraps a main DOM\n                 * node, but may also represent more nodes.\n                 *\n                 * @name  element\n                 * @memberOf SVGElement\n                 * @type {SVGDOMNode|HTMLDOMNode}\n                 */\n                this.element = nodeName === 'span' ?\n                    createElement(nodeName) :\n                    doc.createElementNS(this.SVG_NS, nodeName);\n\n                /**\n                 * The renderer that the SVGElement belongs to.\n                 *\n                 * @name renderer\n                 * @memberOf SVGElement\n                 * @type {SVGRenderer}\n                 */\n                this.renderer = renderer;\n            },\n\n            /**\n             * Animate to given attributes or CSS properties.\n             *\n             * @param {SVGAttributes} params SVG attributes or CSS to animate.\n             * @param {AnimationOptions} [options] Animation options.\n             * @param {Function} [complete] Function to perform at the end of animation.\n             *\n             * @sample highcharts/members/element-on/\n             *         Setting some attributes by animation\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */\n            animate: function(params, options, complete) {\n                var animOptions = H.animObject(\n                    pick(options, this.renderer.globalAnimation, true)\n                );\n                if (animOptions.duration !== 0) {\n                    // allows using a callback with the global animation without\n                    // overwriting it\n                    if (complete) {\n                        animOptions.complete = complete;\n                    }\n                    animate(this, params, animOptions);\n                } else {\n                    this.attr(params, null, complete);\n                    if (animOptions.step) {\n                        animOptions.step.call(this);\n                    }\n                }\n                return this;\n            },\n\n            /**\n             * @typedef {Object} GradientOptions\n             * @property {Object} linearGradient Holds an object that defines the start\n             *    position and the end position relative to the shape.\n             * @property {Number} linearGradient.x1 Start horizontal position of the\n             *    gradient. Ranges 0-1.\n             * @property {Number} linearGradient.x2 End horizontal position of the\n             *    gradient. Ranges 0-1.\n             * @property {Number} linearGradient.y1 Start vertical position of the\n             *    gradient. Ranges 0-1.\n             * @property {Number} linearGradient.y2 End vertical position of the\n             *    gradient. Ranges 0-1.\n             * @property {Object} radialGradient Holds an object that defines the center\n             *    position and the radius.\n             * @property {Number} radialGradient.cx Center horizontal position relative\n             *    to the shape. Ranges 0-1.\n             * @property {Number} radialGradient.cy Center vertical position relative\n             *    to the shape. Ranges 0-1.\n             * @property {Number} radialGradient.r Radius relative to the shape. Ranges\n             *    0-1.\n             * @property {Array.<Array>} stops The first item in each tuple is the\n             *    position in the gradient, where 0 is the start of the gradient and 1\n             *    is the end of the gradient. Multiple stops can be applied. The second\n             *    item is the color for each stop. This color can also be given in the\n             *    rgba format.\n             *\n             * @example\n             * // Linear gradient used as a color option\n             * color: {\n             *     linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },\n             *         stops: [\n             *             [0, '#003399'], // start\n             *             [0.5, '#ffffff'], // middle\n             *             [1, '#3366AA'] // end\n             *         ]\n             *     }\n             * }\n             */\n            /**\n             * Build and apply an SVG gradient out of a common JavaScript configuration\n             * object. This function is called from the attribute setters.\n             *\n             * @private\n             * @param {GradientOptions} color The gradient options structure.\n             * @param {string} prop The property to apply, can either be `fill` or\n             * `stroke`.\n             * @param {SVGDOMElement} elem SVG DOM element to apply the gradient on.\n             */\n            colorGradient: function(color, prop, elem) {\n                var renderer = this.renderer,\n                    colorObject,\n                    gradName,\n                    gradAttr,\n                    radAttr,\n                    gradients,\n                    gradientObject,\n                    stops,\n                    stopColor,\n                    stopOpacity,\n                    radialReference,\n                    id,\n                    key = [],\n                    value;\n\n                // Apply linear or radial gradients\n                if (color.radialGradient) {\n                    gradName = 'radialGradient';\n                } else if (color.linearGradient) {\n                    gradName = 'linearGradient';\n                }\n\n                if (gradName) {\n                    gradAttr = color[gradName];\n                    gradients = renderer.gradients;\n                    stops = color.stops;\n                    radialReference = elem.radialReference;\n\n                    // Keep < 2.2 kompatibility\n                    if (isArray(gradAttr)) {\n                        color[gradName] = gradAttr = {\n                            x1: gradAttr[0],\n                            y1: gradAttr[1],\n                            x2: gradAttr[2],\n                            y2: gradAttr[3],\n                            gradientUnits: 'userSpaceOnUse'\n                        };\n                    }\n\n                    // Correct the radial gradient for the radial reference system\n                    if (\n                        gradName === 'radialGradient' &&\n                        radialReference &&\n                        !defined(gradAttr.gradientUnits)\n                    ) {\n                        radAttr = gradAttr; // Save the radial attributes for updating\n                        gradAttr = merge(\n                            gradAttr,\n                            renderer.getRadialAttr(radialReference, radAttr), {\n                                gradientUnits: 'userSpaceOnUse'\n                            }\n                        );\n                    }\n\n                    // Build the unique key to detect whether we need to create a new\n                    // element (#1282)\n                    objectEach(gradAttr, function(val, n) {\n                        if (n !== 'id') {\n                            key.push(n, val);\n                        }\n                    });\n                    objectEach(stops, function(val) {\n                        key.push(val);\n                    });\n                    key = key.join(',');\n\n                    // Check if a gradient object with the same config object is created\n                    // within this renderer\n                    if (gradients[key]) {\n                        id = gradients[key].attr('id');\n\n                    } else {\n\n                        // Set the id and create the element\n                        gradAttr.id = id = H.uniqueKey();\n                        gradients[key] = gradientObject =\n                            renderer.createElement(gradName)\n                            .attr(gradAttr)\n                            .add(renderer.defs);\n\n                        gradientObject.radAttr = radAttr;\n\n                        // The gradient needs to keep a list of stops to be able to\n                        // destroy them\n                        gradientObject.stops = [];\n                        each(stops, function(stop) {\n                            var stopObject;\n                            if (stop[1].indexOf('rgba') === 0) {\n                                colorObject = H.color(stop[1]);\n                                stopColor = colorObject.get('rgb');\n                                stopOpacity = colorObject.get('a');\n                            } else {\n                                stopColor = stop[1];\n                                stopOpacity = 1;\n                            }\n                            stopObject = renderer.createElement('stop').attr({\n                                offset: stop[0],\n                                'stop-color': stopColor,\n                                'stop-opacity': stopOpacity\n                            }).add(gradientObject);\n\n                            // Add the stop element to the gradient\n                            gradientObject.stops.push(stopObject);\n                        });\n                    }\n\n                    // Set the reference to the gradient object\n                    value = 'url(' + renderer.url + '#' + id + ')';\n                    elem.setAttribute(prop, value);\n                    elem.gradient = key;\n\n                    // Allow the color to be concatenated into tooltips formatters etc.\n                    // (#2995)\n                    color.toString = function() {\n                        return value;\n                    };\n                }\n            },\n\n            /**\n             * Apply a text outline through a custom CSS property, by copying the text\n             * element and apply stroke to the copy. Used internally. Contrast checks\n             * at http://jsfiddle.net/highcharts/43soe9m1/2/ .\n             *\n             * @private\n             * @param {String} textOutline A custom CSS `text-outline` setting, defined\n             *    by `width color`.\n             * @example\n             * // Specific color\n             * text.css({\n             *    textOutline: '1px black'\n             * });\n             * // Automatic contrast\n             * text.css({\n             *    color: '#000000', // black text\n             *    textOutline: '1px contrast' // => white outline\n             * });\n             */\n            applyTextOutline: function(textOutline) {\n                var elem = this.element,\n                    tspans,\n                    tspan,\n                    hasContrast = textOutline.indexOf('contrast') !== -1,\n                    styles = {},\n                    color,\n                    strokeWidth,\n                    firstRealChild,\n                    i;\n\n                // When the text shadow is set to contrast, use dark stroke for light\n                // text and vice versa.\n                if (hasContrast) {\n                    styles.textOutline = textOutline = textOutline.replace(\n                        /contrast/g,\n                        this.renderer.getContrast(elem.style.fill)\n                    );\n                }\n\n                // Extract the stroke width and color\n                textOutline = textOutline.split(' ');\n                color = textOutline[textOutline.length - 1];\n                strokeWidth = textOutline[0];\n\n                if (strokeWidth && strokeWidth !== 'none' && H.svg) {\n\n                    this.fakeTS = true; // Fake text shadow\n\n                    tspans = [].slice.call(elem.getElementsByTagName('tspan'));\n\n                    // In order to get the right y position of the clone,\n                    // copy over the y setter\n                    this.ySetter = this.xSetter;\n\n                    // Since the stroke is applied on center of the actual outline, we\n                    // need to double it to get the correct stroke-width outside the\n                    // glyphs.\n                    strokeWidth = strokeWidth.replace(\n                        /(^[\\d\\.]+)(.*?)$/g,\n                        function(match, digit, unit) {\n                            return (2 * digit) + unit;\n                        }\n                    );\n\n                    // Remove shadows from previous runs. Iterate from the end to\n                    // support removing items inside the cycle (#6472).\n                    i = tspans.length;\n                    while (i--) {\n                        tspan = tspans[i];\n                        if (tspan.getAttribute('class') === 'highcharts-text-outline') {\n                            // Remove then erase\n                            erase(tspans, elem.removeChild(tspan));\n                        }\n                    }\n\n                    // For each of the tspans, create a stroked copy behind it.\n                    firstRealChild = elem.firstChild;\n                    each(tspans, function(tspan, y) {\n                        var clone;\n\n                        // Let the first line start at the correct X position\n                        if (y === 0) {\n                            tspan.setAttribute('x', elem.getAttribute('x'));\n                            y = elem.getAttribute('y');\n                            tspan.setAttribute('y', y || 0);\n                            if (y === null) {\n                                elem.setAttribute('y', 0);\n                            }\n                        }\n\n                        // Create the clone and apply outline properties\n                        clone = tspan.cloneNode(1);\n                        attr(clone, {\n                            'class': 'highcharts-text-outline',\n                            'fill': color,\n                            'stroke': color,\n                            'stroke-width': strokeWidth,\n                            'stroke-linejoin': 'round'\n                        });\n                        elem.insertBefore(clone, firstRealChild);\n                    });\n                }\n            },\n\n            /**\n             *\n             * @typedef {Object} SVGAttributes An object of key-value pairs for SVG\n             *   attributes. Attributes in Highcharts elements for the most parts\n             *   correspond to SVG, but some are specific to Highcharts, like `zIndex`,\n             *   `rotation`, `translateX`, `translateY`, `scaleX` and `scaleY`. SVG\n             *   attributes containing a hyphen are _not_ camel-cased, they should be\n             *   quoted to preserve the hyphen.\n             * @example\n             * {\n             *     'stroke': '#ff0000', // basic\n             *     'stroke-width': 2, // hyphenated\n             *     'rotation': 45 // custom\n             *     'd': ['M', 10, 10, 'L', 30, 30, 'z'] // path definition, note format\n             * }\n             */\n            /**\n             * Apply native and custom attributes to the SVG elements.\n             *\n             * In order to set the rotation center for rotation, set x and y to 0 and\n             * use `translateX` and `translateY` attributes to position the element\n             * instead.\n             *\n             * Attributes frequently used in Highcharts are `fill`, `stroke`,\n             * `stroke-width`.\n             *\n             * @param {SVGAttributes|String} hash - The native and custom SVG\n             *    attributes.\n             * @param {string} [val] - If the type of the first argument is `string`,\n             *    the second can be a value, which will serve as a single attribute\n             *    setter. If the first argument is a string and the second is undefined,\n             *    the function serves as a getter and the current value of the property\n             *    is returned.\n             * @param {Function} [complete] - A callback function to execute after\n             *    setting the attributes. This makes the function compliant and\n             *    interchangeable with the {@link SVGElement#animate} function.\n             * @param {boolean} [continueAnimation=true] Used internally when `.attr` is\n             *    called as part of an animation step. Otherwise, calling `.attr` for an\n             *    attribute will stop animation for that attribute.\n             *\n             * @returns {SVGElement|string|number} If used as a setter, it returns the\n             *    current {@link SVGElement} so the calls can be chained. If used as a\n             *    getter, the current value of the attribute is returned.\n             *\n             * @sample highcharts/members/renderer-rect/\n             *         Setting some attributes\n             *\n             * @example\n             * // Set multiple attributes\n             * element.attr({\n             *     stroke: 'red',\n             *     fill: 'blue',\n             *     x: 10,\n             *     y: 10\n             * });\n             *\n             * // Set a single attribute\n             * element.attr('stroke', 'red');\n             *\n             * // Get an attribute\n             * element.attr('stroke'); // => 'red'\n             *\n             */\n            attr: function(hash, val, complete, continueAnimation) {\n                var key,\n                    element = this.element,\n                    hasSetSymbolSize,\n                    ret = this,\n                    skipAttr,\n                    setter;\n\n                // single key-value pair\n                if (typeof hash === 'string' && val !== undefined) {\n                    key = hash;\n                    hash = {};\n                    hash[key] = val;\n                }\n\n                // used as a getter: first argument is a string, second is undefined\n                if (typeof hash === 'string') {\n                    ret = (this[hash + 'Getter'] || this._defaultGetter).call(\n                        this,\n                        hash,\n                        element\n                    );\n\n                    // setter\n                } else {\n\n                    objectEach(hash, function(val, key) {\n                        skipAttr = false;\n\n                        // Unless .attr is from the animator update, stop current\n                        // running animation of this property\n                        if (!continueAnimation) {\n                            stop(this, key);\n                        }\n\n                        // Special handling of symbol attributes\n                        if (\n                            this.symbolName &&\n                            /^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)$/\n                            .test(key)\n                        ) {\n                            if (!hasSetSymbolSize) {\n                                this.symbolAttr(hash);\n                                hasSetSymbolSize = true;\n                            }\n                            skipAttr = true;\n                        }\n\n                        if (this.rotation && (key === 'x' || key === 'y')) {\n                            this.doTransform = true;\n                        }\n\n                        if (!skipAttr) {\n                            setter = this[key + 'Setter'] || this._defaultSetter;\n                            setter.call(this, val, key, element);\n\n\n                            // Let the shadow follow the main element\n                            if (\n                                this.shadows &&\n                                /^(width|height|visibility|x|y|d|transform|cx|cy|r)$/\n                                .test(key)\n                            ) {\n                                this.updateShadows(key, val, setter);\n                            }\n\n                        }\n                    }, this);\n\n                    this.afterSetters();\n                }\n\n                // In accordance with animate, run a complete callback\n                if (complete) {\n                    complete();\n                }\n\n                return ret;\n            },\n\n            /**\n             * This method is executed in the end of `attr()`, after setting all\n             * attributes in the hash. In can be used to efficiently consolidate\n             * multiple attributes in one SVG property -- e.g., translate, rotate and\n             * scale are merged in one \"transform\" attribute in the SVG node.\n             *\n             * @private\n             */\n            afterSetters: function() {\n                // Update transform. Do this outside the loop to prevent redundant\n                // updating for batch setting of attributes.\n                if (this.doTransform) {\n                    this.updateTransform();\n                    this.doTransform = false;\n                }\n            },\n\n\n            /**\n             * Update the shadow elements with new attributes.\n             *\n             * @private\n             * @param {String} key - The attribute name.\n             * @param {String|Number} value - The value of the attribute.\n             * @param {Function} setter - The setter function, inherited from the\n             *   parent wrapper\n             *\n             */\n            updateShadows: function(key, value, setter) {\n                var shadows = this.shadows,\n                    i = shadows.length;\n\n                while (i--) {\n                    setter.call(\n                        shadows[i],\n                        key === 'height' ?\n                        Math.max(value - (shadows[i].cutHeight || 0), 0) :\n                        key === 'd' ? this.d : value,\n                        key,\n                        shadows[i]\n                    );\n                }\n            },\n\n\n            /**\n             * Add a class name to an element.\n             *\n             * @param {string} className - The new class name to add.\n             * @param {boolean} [replace=false] - When true, the existing class name(s)\n             *    will be overwritten with the new one. When false, the new one is\n             *    added.\n             * @returns {SVGElement} Return the SVG element for chainability.\n             */\n            addClass: function(className, replace) {\n                var currentClassName = this.attr('class') || '';\n                if (currentClassName.indexOf(className) === -1) {\n                    if (!replace) {\n                        className =\n                            (currentClassName + (currentClassName ? ' ' : '') +\n                                className).replace('  ', ' ');\n                    }\n                    this.attr('class', className);\n                }\n\n                return this;\n            },\n\n            /**\n             * Check if an element has the given class name.\n             * @param  {string} className\n             *         The class name to check for.\n             * @return {Boolean}\n             *         Whether the class name is found.\n             */\n            hasClass: function(className) {\n                return inArray(\n                    className,\n                    (this.attr('class') || '').split(' ')\n                ) !== -1;\n            },\n\n            /**\n             * Remove a class name from the element.\n             * @param  {string} className The class name to remove.\n             * @return {SVGElement} Returns the SVG element for chainability.\n             */\n            removeClass: function(className) {\n                return this.attr(\n                    'class',\n                    (this.attr('class') || '').replace(className, '')\n                );\n            },\n\n            /**\n             * If one of the symbol size affecting parameters are changed,\n             * check all the others only once for each call to an element's\n             * .attr() method\n             * @param {Object} hash - The attributes to set.\n             * @private\n             */\n            symbolAttr: function(hash) {\n                var wrapper = this;\n\n                each([\n                    'x',\n                    'y',\n                    'r',\n                    'start',\n                    'end',\n                    'width',\n                    'height',\n                    'innerR',\n                    'anchorX',\n                    'anchorY'\n                ], function(key) {\n                    wrapper[key] = pick(hash[key], wrapper[key]);\n                });\n\n                wrapper.attr({\n                    d: wrapper.renderer.symbols[wrapper.symbolName](\n                        wrapper.x,\n                        wrapper.y,\n                        wrapper.width,\n                        wrapper.height,\n                        wrapper\n                    )\n                });\n            },\n\n            /**\n             * Apply a clipping rectangle to this element.\n             *\n             * @param {ClipRect} [clipRect] - The clipping rectangle. If skipped, the\n             *    current clip is removed.\n             * @returns {SVGElement} Returns the SVG element to allow chaining.\n             */\n            clip: function(clipRect) {\n                return this.attr(\n                    'clip-path',\n                    clipRect ?\n                    'url(' + this.renderer.url + '#' + clipRect.id + ')' :\n                    'none'\n                );\n            },\n\n            /**\n             * Calculate the coordinates needed for drawing a rectangle crisply and\n             * return the calculated attributes.\n             *\n             * @param {Object} rect - A rectangle.\n             * @param {number} rect.x - The x position.\n             * @param {number} rect.y - The y position.\n             * @param {number} rect.width - The width.\n             * @param {number} rect.height - The height.\n             * @param {number} [strokeWidth] - The stroke width to consider when\n             *    computing crisp positioning. It can also be set directly on the rect\n             *    parameter.\n             *\n             * @returns {{x: Number, y: Number, width: Number, height: Number}} The\n             *    modified rectangle arguments.\n             */\n            crisp: function(rect, strokeWidth) {\n\n                var wrapper = this,\n                    attribs = {},\n                    normalizer;\n\n                strokeWidth = strokeWidth || rect.strokeWidth || 0;\n                // Math.round because strokeWidth can sometimes have roundoff errors\n                normalizer = Math.round(strokeWidth) % 2 / 2;\n\n                // normalize for crisp edges\n                rect.x = Math.floor(rect.x || wrapper.x || 0) + normalizer;\n                rect.y = Math.floor(rect.y || wrapper.y || 0) + normalizer;\n                rect.width = Math.floor(\n                    (rect.width || wrapper.width || 0) - 2 * normalizer\n                );\n                rect.height = Math.floor(\n                    (rect.height || wrapper.height || 0) - 2 * normalizer\n                );\n                if (defined(rect.strokeWidth)) {\n                    rect.strokeWidth = strokeWidth;\n                }\n\n                objectEach(rect, function(val, key) {\n                    if (wrapper[key] !== val) { // only set attribute if changed\n                        wrapper[key] = attribs[key] = val;\n                    }\n                });\n\n                return attribs;\n            },\n\n            /**\n             * Set styles for the element. In addition to CSS styles supported by\n             * native SVG and HTML elements, there are also some custom made for\n             * Highcharts, like `width`, `ellipsis` and `textOverflow` for SVG text\n             * elements.\n             * @param {CSSObject} styles The new CSS styles.\n             * @returns {SVGElement} Return the SVG element for chaining.\n             *\n             * @sample highcharts/members/renderer-text-on-chart/\n             *         Styled text\n             */\n            css: function(styles) {\n                var oldStyles = this.styles,\n                    newStyles = {},\n                    elem = this.element,\n                    textWidth,\n                    serializedCss = '',\n                    hyphenate,\n                    hasNew = !oldStyles,\n                    // These CSS properties are interpreted internally by the SVG\n                    // renderer, but are not supported by SVG and should not be added to\n                    // the DOM. In styled mode, no CSS should find its way to the DOM\n                    // whatsoever (#6173, #6474).\n                    svgPseudoProps = ['textOutline', 'textOverflow', 'width'];\n\n                // convert legacy\n                if (styles && styles.color) {\n                    styles.fill = styles.color;\n                }\n\n                // Filter out existing styles to increase performance (#2640)\n                if (oldStyles) {\n                    objectEach(styles, function(style, n) {\n                        if (style !== oldStyles[n]) {\n                            newStyles[n] = style;\n                            hasNew = true;\n                        }\n                    });\n                }\n                if (hasNew) {\n\n                    // Merge the new styles with the old ones\n                    if (oldStyles) {\n                        styles = extend(\n                            oldStyles,\n                            newStyles\n                        );\n                    }\n\n                    // Get the text width from style\n                    textWidth = this.textWidth = (\n                        styles &&\n                        styles.width &&\n                        styles.width !== 'auto' &&\n                        elem.nodeName.toLowerCase() === 'text' &&\n                        pInt(styles.width)\n                    );\n\n                    // store object\n                    this.styles = styles;\n\n                    if (textWidth && (!svg && this.renderer.forExport)) {\n                        delete styles.width;\n                    }\n\n                    // serialize and set style attribute\n                    if (isMS && !svg) {\n                        css(this.element, styles);\n                    } else {\n                        hyphenate = function(a, b) {\n                            return '-' + b.toLowerCase();\n                        };\n                        objectEach(styles, function(style, n) {\n                            if (inArray(n, svgPseudoProps) === -1) {\n                                serializedCss +=\n                                    n.replace(/([A-Z])/g, hyphenate) + ':' +\n                                    style + ';';\n                            }\n                        });\n                        if (serializedCss) {\n                            attr(elem, 'style', serializedCss); // #1881\n                        }\n                    }\n\n\n                    if (this.added) {\n\n                        // Rebuild text after added. Cache mechanisms in the buildText\n                        // will prevent building if there are no significant changes.\n                        if (this.element.nodeName === 'text') {\n                            this.renderer.buildText(this);\n                        }\n\n                        // Apply text outline after added\n                        if (styles && styles.textOutline) {\n                            this.applyTextOutline(styles.textOutline);\n                        }\n                    }\n                }\n\n                return this;\n            },\n\n\n            /**\n             * Get the current stroke width. In classic mode, the setter registers it\n             * directly on the element.\n             * @returns {number} The stroke width in pixels.\n             * @ignore\n             */\n            strokeWidth: function() {\n                return this['stroke-width'] || 0;\n            },\n\n\n            /**\n             * Add an event listener. This is a simple setter that replaces all other\n             * events of the same type, opposed to the {@link Highcharts#addEvent}\n             * function.\n             * @param {string} eventType - The event type. If the type is `click`,\n             *    Highcharts will internally translate it to a `touchstart` event on\n             *    touch devices, to prevent the browser from waiting for a click event\n             *    from firing.\n             * @param {Function} handler - The handler callback.\n             * @returns {SVGElement} The SVGElement for chaining.\n             *\n             * @sample highcharts/members/element-on/\n             *         A clickable rectangle\n             */\n            on: function(eventType, handler) {\n                var svgElement = this,\n                    element = svgElement.element;\n\n                // touch\n                if (hasTouch && eventType === 'click') {\n                    element.ontouchstart = function(e) {\n                        svgElement.touchEventFired = Date.now(); // #2269\n                        e.preventDefault();\n                        handler.call(element, e);\n                    };\n                    element.onclick = function(e) {\n                        if (win.navigator.userAgent.indexOf('Android') === -1 ||\n                            Date.now() - (svgElement.touchEventFired || 0) > 1100) {\n                            handler.call(element, e);\n                        }\n                    };\n                } else {\n                    // simplest possible event model for internal use\n                    element['on' + eventType] = handler;\n                }\n                return this;\n            },\n\n            /**\n             * Set the coordinates needed to draw a consistent radial gradient across\n             * a shape regardless of positioning inside the chart. Used on pie slices\n             * to make all the slices have the same radial reference point.\n             *\n             * @param {Array} coordinates The center reference. The format is\n             *    `[centerX, centerY, diameter]` in pixels.\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */\n            setRadialReference: function(coordinates) {\n                var existingGradient = this.renderer.gradients[this.element.gradient];\n\n                this.element.radialReference = coordinates;\n\n                // On redrawing objects with an existing gradient, the gradient needs\n                // to be repositioned (#3801)\n                if (existingGradient && existingGradient.radAttr) {\n                    existingGradient.animate(\n                        this.renderer.getRadialAttr(\n                            coordinates,\n                            existingGradient.radAttr\n                        )\n                    );\n                }\n\n                return this;\n            },\n\n            /**\n             * Move an object and its children by x and y values.\n             *\n             * @param {number} x - The x value.\n             * @param {number} y - The y value.\n             */\n            translate: function(x, y) {\n                return this.attr({\n                    translateX: x,\n                    translateY: y\n                });\n            },\n\n            /**\n             * Invert a group, rotate and flip. This is used internally on inverted\n             * charts, where the points and graphs are drawn as if not inverted, then\n             * the series group elements are inverted.\n             *\n             * @param  {boolean} inverted\n             *         Whether to invert or not. An inverted shape can be un-inverted by\n             *         setting it to false.\n             * @return {SVGElement}\n             *         Return the SVGElement for chaining.\n             */\n            invert: function(inverted) {\n                var wrapper = this;\n                wrapper.inverted = inverted;\n                wrapper.updateTransform();\n                return wrapper;\n            },\n\n            /**\n             * Update the transform attribute based on internal properties. Deals with\n             * the custom `translateX`, `translateY`, `rotation`, `scaleX` and `scaleY`\n             * attributes and updates the SVG `transform` attribute.\n             * @private\n             *\n             */\n            updateTransform: function() {\n                var wrapper = this,\n                    translateX = wrapper.translateX || 0,\n                    translateY = wrapper.translateY || 0,\n                    scaleX = wrapper.scaleX,\n                    scaleY = wrapper.scaleY,\n                    inverted = wrapper.inverted,\n                    rotation = wrapper.rotation,\n                    element = wrapper.element,\n                    transform;\n\n                // Flipping affects translate as adjustment for flipping around the\n                // group's axis\n                if (inverted) {\n                    translateX += wrapper.width;\n                    translateY += wrapper.height;\n                }\n\n                // Apply translate. Nearly all transformed elements have translation,\n                // so instead of checking for translate = 0, do it always (#1767,\n                // #1846).\n                transform = ['translate(' + translateX + ',' + translateY + ')'];\n\n                // apply rotation\n                if (inverted) {\n                    transform.push('rotate(90) scale(-1,1)');\n                } else if (rotation) { // text rotation\n                    transform.push(\n                        'rotate(' + rotation + ' ' + (element.getAttribute('x') || 0) +\n                        ' ' + (element.getAttribute('y') || 0) + ')'\n                    );\n                }\n\n                // apply scale\n                if (defined(scaleX) || defined(scaleY)) {\n                    transform.push(\n                        'scale(' + pick(scaleX, 1) + ' ' + pick(scaleY, 1) + ')'\n                    );\n                }\n\n                if (transform.length) {\n                    element.setAttribute('transform', transform.join(' '));\n                }\n            },\n\n            /**\n             * Bring the element to the front. Alternatively, a new zIndex can be set.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             *\n             * @sample highcharts/members/element-tofront/\n             *         Click an element to bring it to front\n             */\n            toFront: function() {\n                var element = this.element;\n                element.parentNode.appendChild(element);\n                return this;\n            },\n\n\n            /**\n             * Align the element relative to the chart or another box.\n             *\n             * @param {Object} [alignOptions] The alignment options. The function can be\n             *   called without this parameter in order to re-align an element after the\n             *   box has been updated.\n             * @param {string} [alignOptions.align=left] Horizontal alignment. Can be\n             *   one of `left`, `center` and `right`.\n             * @param {string} [alignOptions.verticalAlign=top] Vertical alignment. Can\n             *   be one of `top`, `middle` and `bottom`.\n             * @param {number} [alignOptions.x=0] Horizontal pixel offset from\n             *   alignment.\n             * @param {number} [alignOptions.y=0] Vertical pixel offset from alignment.\n             * @param {Boolean} [alignByTranslate=false] Use the `transform` attribute\n             *   with translateX and translateY custom attributes to align this elements\n             *   rather than `x` and `y` attributes.\n             * @param {String|Object} box The box to align to, needs a width and height.\n             *   When the box is a string, it refers to an object in the Renderer. For\n             *   example, when box is `spacingBox`, it refers to `Renderer.spacingBox`\n             *   which holds `width`, `height`, `x` and `y` properties.\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */\n            align: function(alignOptions, alignByTranslate, box) {\n                var align,\n                    vAlign,\n                    x,\n                    y,\n                    attribs = {},\n                    alignTo,\n                    renderer = this.renderer,\n                    alignedObjects = renderer.alignedObjects,\n                    alignFactor,\n                    vAlignFactor;\n\n                // First call on instanciate\n                if (alignOptions) {\n                    this.alignOptions = alignOptions;\n                    this.alignByTranslate = alignByTranslate;\n                    if (!box || isString(box)) { // boxes other than renderer handle this internally\n                        this.alignTo = alignTo = box || 'renderer';\n                        erase(alignedObjects, this); // prevent duplicates, like legendGroup after resize\n                        alignedObjects.push(this);\n                        box = null; // reassign it below\n                    }\n\n                    // When called on resize, no arguments are supplied\n                } else {\n                    alignOptions = this.alignOptions;\n                    alignByTranslate = this.alignByTranslate;\n                    alignTo = this.alignTo;\n                }\n\n                box = pick(box, renderer[alignTo], renderer);\n\n                // Assign variables\n                align = alignOptions.align;\n                vAlign = alignOptions.verticalAlign;\n                x = (box.x || 0) + (alignOptions.x || 0); // default: left align\n                y = (box.y || 0) + (alignOptions.y || 0); // default: top align\n\n                // Align\n                if (align === 'right') {\n                    alignFactor = 1;\n                } else if (align === 'center') {\n                    alignFactor = 2;\n                }\n                if (alignFactor) {\n                    x += (box.width - (alignOptions.width || 0)) / alignFactor;\n                }\n                attribs[alignByTranslate ? 'translateX' : 'x'] = Math.round(x);\n\n\n                // Vertical align\n                if (vAlign === 'bottom') {\n                    vAlignFactor = 1;\n                } else if (vAlign === 'middle') {\n                    vAlignFactor = 2;\n                }\n                if (vAlignFactor) {\n                    y += (box.height - (alignOptions.height || 0)) / vAlignFactor;\n                }\n                attribs[alignByTranslate ? 'translateY' : 'y'] = Math.round(y);\n\n                // Animate only if already placed\n                this[this.placed ? 'animate' : 'attr'](attribs);\n                this.placed = true;\n                this.alignAttr = attribs;\n\n                return this;\n            },\n\n            /**\n             * Get the bounding box (width, height, x and y) for the element. Generally\n             * used to get rendered text size. Since this is called a lot in charts,\n             * the results are cached based on text properties, in order to save DOM\n             * traffic. The returned bounding box includes the rotation, so for example\n             * a single text line of rotation 90 will report a greater height, and a\n             * width corresponding to the line-height.\n             *\n             * @param {boolean} [reload] Skip the cache and get the updated DOM bouding\n             *   box.\n             * @param {number} [rot] Override the element's rotation. This is internally\n             *   used on axis labels with a value of 0 to find out what the bounding box\n             *   would be have been if it were not rotated.\n             * @returns {Object} The bounding box with `x`, `y`, `width` and `height`\n             * properties.\n             *\n             * @sample highcharts/members/renderer-on-chart/\n             *         Draw a rectangle based on a text's bounding box\n             */\n            getBBox: function(reload, rot) {\n                var wrapper = this,\n                    bBox, // = wrapper.bBox,\n                    renderer = wrapper.renderer,\n                    width,\n                    height,\n                    rotation,\n                    rad,\n                    element = wrapper.element,\n                    styles = wrapper.styles,\n                    fontSize,\n                    textStr = wrapper.textStr,\n                    toggleTextShadowShim,\n                    cache = renderer.cache,\n                    cacheKeys = renderer.cacheKeys,\n                    cacheKey;\n\n                rotation = pick(rot, wrapper.rotation);\n                rad = rotation * deg2rad;\n\n\n                fontSize = styles && styles.fontSize;\n\n\n                if (textStr !== undefined) {\n\n                    cacheKey = textStr.toString();\n\n                    // Since numbers are monospaced, and numerical labels appear a lot\n                    // in a chart, we assume that a label of n characters has the same\n                    // bounding box as others of the same length. Unless there is inner\n                    // HTML in the label. In that case, leave the numbers as is (#5899).\n                    if (cacheKey.indexOf('<') === -1) {\n                        cacheKey = cacheKey.replace(/[0-9]/g, '0');\n                    }\n\n                    // Properties that affect bounding box\n                    cacheKey += [\n                            '',\n                            rotation || 0,\n                            fontSize,\n                            styles && styles.width,\n                            styles && styles.textOverflow // #5968\n                        ]\n                        .join(',');\n\n                }\n\n                if (cacheKey && !reload) {\n                    bBox = cache[cacheKey];\n                }\n\n                // No cache found\n                if (!bBox) {\n\n                    // SVG elements\n                    if (element.namespaceURI === wrapper.SVG_NS || renderer.forExport) {\n                        try { // Fails in Firefox if the container has display: none.\n\n                            // When the text shadow shim is used, we need to hide the fake shadows\n                            // to get the correct bounding box (#3872)\n                            toggleTextShadowShim = this.fakeTS && function(display) {\n                                each(element.querySelectorAll('.highcharts-text-outline'), function(tspan) {\n                                    tspan.style.display = display;\n                                });\n                            };\n\n                            // Workaround for #3842, Firefox reporting wrong bounding box for shadows\n                            if (toggleTextShadowShim) {\n                                toggleTextShadowShim('none');\n                            }\n\n                            bBox = element.getBBox ?\n                                // SVG: use extend because IE9 is not allowed to change width and height in case\n                                // of rotation (below)\n                                extend({}, element.getBBox()) : {\n\n                                    // Legacy IE in export mode\n                                    width: element.offsetWidth,\n                                    height: element.offsetHeight\n                                };\n\n                            // #3842\n                            if (toggleTextShadowShim) {\n                                toggleTextShadowShim('');\n                            }\n                        } catch (e) {}\n\n                        // If the bBox is not set, the try-catch block above failed. The other condition\n                        // is for Opera that returns a width of -Infinity on hidden elements.\n                        if (!bBox || bBox.width < 0) {\n                            bBox = {\n                                width: 0,\n                                height: 0\n                            };\n                        }\n\n\n                        // VML Renderer or useHTML within SVG\n                    } else {\n\n                        bBox = wrapper.htmlGetBBox();\n\n                    }\n\n                    // True SVG elements as well as HTML elements in modern browsers using the .useHTML option\n                    // need to compensated for rotation\n                    if (renderer.isSVG) {\n                        width = bBox.width;\n                        height = bBox.height;\n\n                        // Workaround for wrong bounding box in IE, Edge and Chrome on\n                        // Windows. With Highcharts' default font, IE and Edge report\n                        // a box height of 16.899 and Chrome rounds it to 17. If this\n                        // stands uncorrected, it results in more padding added below\n                        // the text than above when adding a label border or background.\n                        // Also vertical positioning is affected.\n                        // http://jsfiddle.net/highcharts/em37nvuj/\n                        // (#1101, #1505, #1669, #2568, #6213).\n                        if (\n                            styles &&\n                            styles.fontSize === '11px' &&\n                            Math.round(height) === 17\n                        ) {\n                            bBox.height = height = 14;\n                        }\n\n                        // Adjust for rotated text\n                        if (rotation) {\n                            bBox.width = Math.abs(height * Math.sin(rad)) + Math.abs(width * Math.cos(rad));\n                            bBox.height = Math.abs(height * Math.cos(rad)) + Math.abs(width * Math.sin(rad));\n                        }\n                    }\n\n                    // Cache it. When loading a chart in a hidden iframe in Firefox and IE/Edge, the\n                    // bounding box height is 0, so don't cache it (#5620).\n                    if (cacheKey && bBox.height > 0) {\n\n                        // Rotate (#4681)\n                        while (cacheKeys.length > 250) {\n                            delete cache[cacheKeys.shift()];\n                        }\n\n                        if (!cache[cacheKey]) {\n                            cacheKeys.push(cacheKey);\n                        }\n                        cache[cacheKey] = bBox;\n                    }\n                }\n                return bBox;\n            },\n\n            /**\n             * Show the element after it has been hidden.\n             *\n             * @param {boolean} [inherit=false] Set the visibility attribute to\n             * `inherit` rather than `visible`. The difference is that an element with\n             * `visibility=\"visible\"` will be visible even if the parent is hidden.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */\n            show: function(inherit) {\n                return this.attr({\n                    visibility: inherit ? 'inherit' : 'visible'\n                });\n            },\n\n            /**\n             * Hide the element, equivalent to setting the `visibility` attribute to\n             * `hidden`.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */\n            hide: function() {\n                return this.attr({\n                    visibility: 'hidden'\n                });\n            },\n\n            /**\n             * Fade out an element by animating its opacity down to 0, and hide it on\n             * complete. Used internally for the tooltip.\n             *\n             * @param {number} [duration=150] The fade duration in milliseconds.\n             */\n            fadeOut: function(duration) {\n                var elemWrapper = this;\n                elemWrapper.animate({\n                    opacity: 0\n                }, {\n                    duration: duration || 150,\n                    complete: function() {\n                        // #3088, assuming we're only using this for tooltips\n                        elemWrapper.attr({\n                            y: -9999\n                        });\n                    }\n                });\n            },\n\n            /**\n             * Add the element to the DOM. All elements must be added this way.\n             *\n             * @param {SVGElement|SVGDOMElement} [parent] The parent item to add it to.\n             *   If undefined, the element is added to the {@link\n             *   Highcharts.SVGRenderer.box}.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             *\n             * @sample highcharts/members/renderer-g - Elements added to a group\n             */\n            add: function(parent) {\n\n                var renderer = this.renderer,\n                    element = this.element,\n                    inserted;\n\n                if (parent) {\n                    this.parentGroup = parent;\n                }\n\n                // mark as inverted\n                this.parentInverted = parent && parent.inverted;\n\n                // build formatted text\n                if (this.textStr !== undefined) {\n                    renderer.buildText(this);\n                }\n\n                // Mark as added\n                this.added = true;\n\n                // If we're adding to renderer root, or other elements in the group\n                // have a z index, we need to handle it\n                if (!parent || parent.handleZ || this.zIndex) {\n                    inserted = this.zIndexSetter();\n                }\n\n                // If zIndex is not handled, append at the end\n                if (!inserted) {\n                    (parent ? parent.element : renderer.box).appendChild(element);\n                }\n\n                // fire an event for internal hooks\n                if (this.onAdd) {\n                    this.onAdd();\n                }\n\n                return this;\n            },\n\n            /**\n             * Removes an element from the DOM.\n             *\n             * @private\n             * @param {SVGDOMElement|HTMLDOMElement} element The DOM node to remove.\n             */\n            safeRemoveChild: function(element) {\n                var parentNode = element.parentNode;\n                if (parentNode) {\n                    parentNode.removeChild(element);\n                }\n            },\n\n            /**\n             * Destroy the element and element wrapper and clear up the DOM and event\n             * hooks.\n             *\n             *\n             */\n            destroy: function() {\n                var wrapper = this,\n                    element = wrapper.element || {},\n                    parentToClean =\n                    wrapper.renderer.isSVG &&\n                    element.nodeName === 'SPAN' &&\n                    wrapper.parentGroup,\n                    grandParent,\n                    ownerSVGElement = element.ownerSVGElement,\n                    i;\n\n                // remove events\n                element.onclick = element.onmouseout = element.onmouseover =\n                    element.onmousemove = element.point = null;\n                stop(wrapper); // stop running animations\n\n                if (wrapper.clipPath && ownerSVGElement) {\n                    // Look for existing references to this clipPath and remove them\n                    // before destroying the element (#6196).\n                    each(\n                        ownerSVGElement.querySelectorAll('[clip-path]'),\n                        function(el) {\n                            // Include the closing paranthesis in the test to rule out\n                            // id's from 10 and above (#6550)\n                            if (el.getAttribute('clip-path')\n                                .indexOf(wrapper.clipPath.element.id + ')') > -1) {\n                                el.removeAttribute('clip-path');\n                            }\n                        }\n                    );\n                    wrapper.clipPath = wrapper.clipPath.destroy();\n                }\n\n                // Destroy stops in case this is a gradient object\n                if (wrapper.stops) {\n                    for (i = 0; i < wrapper.stops.length; i++) {\n                        wrapper.stops[i] = wrapper.stops[i].destroy();\n                    }\n                    wrapper.stops = null;\n                }\n\n                // remove element\n                wrapper.safeRemoveChild(element);\n\n\n                wrapper.destroyShadows();\n\n\n                // In case of useHTML, clean up empty containers emulating SVG groups\n                // (#1960, #2393, #2697).\n                while (\n                    parentToClean &&\n                    parentToClean.div &&\n                    parentToClean.div.childNodes.length === 0\n                ) {\n                    grandParent = parentToClean.parentGroup;\n                    wrapper.safeRemoveChild(parentToClean.div);\n                    delete parentToClean.div;\n                    parentToClean = grandParent;\n                }\n\n                // remove from alignObjects\n                if (wrapper.alignTo) {\n                    erase(wrapper.renderer.alignedObjects, wrapper);\n                }\n\n                objectEach(wrapper, function(val, key) {\n                    delete wrapper[key];\n                });\n\n                return null;\n            },\n\n\n            /**\n             * @typedef {Object} ShadowOptions\n             * @property {string} [color=#000000] The shadow color.\n             * @property {number} [offsetX=1] The horizontal offset from the element.\n             * @property {number} [offsetY=1] The vertical offset from the element.\n             * @property {number} [opacity=0.15] The shadow opacity.\n             * @property {number} [width=3] The shadow width or distance from the\n             *    element.\n             */\n            /**\n             * Add a shadow to the element. Must be called after the element is added to\n             * the DOM. In styled mode, this method is not used, instead use `defs` and\n             * filters.\n             *\n             * @param {boolean|ShadowOptions} shadowOptions The shadow options. If\n             *    `true`, the default options are applied. If `false`, the current\n             *    shadow will be removed.\n             * @param {SVGElement} [group] The SVG group element where the shadows will\n             *    be applied. The default is to add it to the same parent as the current\n             *    element. Internally, this is ised for pie slices, where all the\n             *    shadows are added to an element behind all the slices.\n             * @param {boolean} [cutOff] Used internally for column shadows.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             *\n             * @example\n             * renderer.rect(10, 100, 100, 100)\n             *     .attr({ fill: 'red' })\n             *     .shadow(true);\n             */\n            shadow: function(shadowOptions, group, cutOff) {\n                var shadows = [],\n                    i,\n                    shadow,\n                    element = this.element,\n                    strokeWidth,\n                    shadowWidth,\n                    shadowElementOpacity,\n\n                    // compensate for inverted plot area\n                    transform;\n\n                if (!shadowOptions) {\n                    this.destroyShadows();\n\n                } else if (!this.shadows) {\n                    shadowWidth = pick(shadowOptions.width, 3);\n                    shadowElementOpacity = (shadowOptions.opacity || 0.15) /\n                        shadowWidth;\n                    transform = this.parentInverted ?\n                        '(-1,-1)' :\n                        '(' + pick(shadowOptions.offsetX, 1) + ', ' +\n                        pick(shadowOptions.offsetY, 1) + ')';\n                    for (i = 1; i <= shadowWidth; i++) {\n                        shadow = element.cloneNode(0);\n                        strokeWidth = (shadowWidth * 2) + 1 - (2 * i);\n                        attr(shadow, {\n                            'isShadow': 'true',\n                            'stroke': shadowOptions.color || '#000000',\n                            'stroke-opacity': shadowElementOpacity * i,\n                            'stroke-width': strokeWidth,\n                            'transform': 'translate' + transform,\n                            'fill': 'none'\n                        });\n                        if (cutOff) {\n                            attr(\n                                shadow,\n                                'height',\n                                Math.max(attr(shadow, 'height') - strokeWidth, 0)\n                            );\n                            shadow.cutHeight = strokeWidth;\n                        }\n\n                        if (group) {\n                            group.element.appendChild(shadow);\n                        } else {\n                            element.parentNode.insertBefore(shadow, element);\n                        }\n\n                        shadows.push(shadow);\n                    }\n\n                    this.shadows = shadows;\n                }\n                return this;\n\n            },\n\n            /**\n             * Destroy shadows on the element.\n             * @private\n             */\n            destroyShadows: function() {\n                each(this.shadows || [], function(shadow) {\n                    this.safeRemoveChild(shadow);\n                }, this);\n                this.shadows = undefined;\n            },\n\n\n\n            xGetter: function(key) {\n                if (this.element.nodeName === 'circle') {\n                    if (key === 'x') {\n                        key = 'cx';\n                    } else if (key === 'y') {\n                        key = 'cy';\n                    }\n                }\n                return this._defaultGetter(key);\n            },\n\n            /**\n             * Get the current value of an attribute or pseudo attribute, used mainly\n             * for animation. Called internally from the {@link\n             * Highcharts.SVGRenderer#attr}\n             * function.\n             *\n             * @private\n             */\n            _defaultGetter: function(key) {\n                var ret = pick(\n                    this[key],\n                    this.element ? this.element.getAttribute(key) : null,\n                    0\n                );\n\n                if (/^[\\-0-9\\.]+$/.test(ret)) { // is numerical\n                    ret = parseFloat(ret);\n                }\n                return ret;\n            },\n\n\n            dSetter: function(value, key, element) {\n                if (value && value.join) { // join path\n                    value = value.join(' ');\n                }\n                if (/(NaN| {2}|^$)/.test(value)) {\n                    value = 'M 0 0';\n                }\n\n                // Check for cache before resetting. Resetting causes disturbance in the\n                // DOM, causing flickering in some cases in Edge/IE (#6747). Also\n                // possible performance gain.\n                if (this[key] !== value) {\n                    element.setAttribute(key, value);\n                    this[key] = value;\n                }\n\n            },\n\n            dashstyleSetter: function(value) {\n                var i,\n                    strokeWidth = this['stroke-width'];\n\n                // If \"inherit\", like maps in IE, assume 1 (#4981). With HC5 and the new\n                // strokeWidth function, we should be able to use that instead.\n                if (strokeWidth === 'inherit') {\n                    strokeWidth = 1;\n                }\n                value = value && value.toLowerCase();\n                if (value) {\n                    value = value\n                        .replace('shortdashdotdot', '3,1,1,1,1,1,')\n                        .replace('shortdashdot', '3,1,1,1')\n                        .replace('shortdot', '1,1,')\n                        .replace('shortdash', '3,1,')\n                        .replace('longdash', '8,3,')\n                        .replace(/dot/g, '1,3,')\n                        .replace('dash', '4,3,')\n                        .replace(/,$/, '')\n                        .split(','); // ending comma\n\n                    i = value.length;\n                    while (i--) {\n                        value[i] = pInt(value[i]) * strokeWidth;\n                    }\n                    value = value.join(',')\n                        .replace(/NaN/g, 'none'); // #3226\n                    this.element.setAttribute('stroke-dasharray', value);\n                }\n            },\n\n            alignSetter: function(value) {\n                var convert = {\n                    left: 'start',\n                    center: 'middle',\n                    right: 'end'\n                };\n                this.element.setAttribute('text-anchor', convert[value]);\n            },\n            opacitySetter: function(value, key, element) {\n                this[key] = value;\n                element.setAttribute(key, value);\n            },\n            titleSetter: function(value) {\n                var titleNode = this.element.getElementsByTagName('title')[0];\n                if (!titleNode) {\n                    titleNode = doc.createElementNS(this.SVG_NS, 'title');\n                    this.element.appendChild(titleNode);\n                }\n\n                // Remove text content if it exists\n                if (titleNode.firstChild) {\n                    titleNode.removeChild(titleNode.firstChild);\n                }\n\n                titleNode.appendChild(\n                    doc.createTextNode(\n                        (String(pick(value), '')).replace(/<[^>]*>/g, '') // #3276, #3895\n                    )\n                );\n            },\n            textSetter: function(value) {\n                if (value !== this.textStr) {\n                    // Delete bBox memo when the text changes\n                    delete this.bBox;\n\n                    this.textStr = value;\n                    if (this.added) {\n                        this.renderer.buildText(this);\n                    }\n                }\n            },\n            fillSetter: function(value, key, element) {\n                if (typeof value === 'string') {\n                    element.setAttribute(key, value);\n                } else if (value) {\n                    this.colorGradient(value, key, element);\n                }\n            },\n            visibilitySetter: function(value, key, element) {\n                // IE9-11 doesn't handle visibilty:inherit well, so we remove the attribute instead (#2881, #3909)\n                if (value === 'inherit') {\n                    element.removeAttribute(key);\n                } else if (this[key] !== value) { // #6747\n                    element.setAttribute(key, value);\n                }\n                this[key] = value;\n            },\n            zIndexSetter: function(value, key) {\n                var renderer = this.renderer,\n                    parentGroup = this.parentGroup,\n                    parentWrapper = parentGroup || renderer,\n                    parentNode = parentWrapper.element || renderer.box,\n                    childNodes,\n                    otherElement,\n                    otherZIndex,\n                    element = this.element,\n                    inserted,\n                    run = this.added,\n                    i;\n\n                if (defined(value)) {\n                    element.zIndex = value; // So we can read it for other elements in the group\n                    value = +value;\n                    if (this[key] === value) { // Only update when needed (#3865)\n                        run = false;\n                    }\n                    this[key] = value;\n                }\n\n                // Insert according to this and other elements' zIndex. Before .add() is called,\n                // nothing is done. Then on add, or by later calls to zIndexSetter, the node\n                // is placed on the right place in the DOM.\n                if (run) {\n                    value = this.zIndex;\n\n                    if (value && parentGroup) {\n                        parentGroup.handleZ = true;\n                    }\n\n                    childNodes = parentNode.childNodes;\n                    for (i = 0; i < childNodes.length && !inserted; i++) {\n                        otherElement = childNodes[i];\n                        otherZIndex = otherElement.zIndex;\n                        if (otherElement !== element && (\n                                // Insert before the first element with a higher zIndex\n                                pInt(otherZIndex) > value ||\n                                // If no zIndex given, insert before the first element with a zIndex\n                                (!defined(value) && defined(otherZIndex)) ||\n                                // Negative zIndex versus no zIndex:\n                                // On all levels except the highest. If the parent is <svg>,\n                                // then we don't want to put items before <desc> or <defs>\n                                (value < 0 && !defined(otherZIndex) && parentNode !== renderer.box)\n\n                            )) {\n                            parentNode.insertBefore(element, otherElement);\n                            inserted = true;\n                        }\n                    }\n                    if (!inserted) {\n                        parentNode.appendChild(element);\n                    }\n                }\n                return inserted;\n            },\n            _defaultSetter: function(value, key, element) {\n                element.setAttribute(key, value);\n            }\n        });\n\n        // Some shared setters and getters\n        SVGElement.prototype.yGetter = SVGElement.prototype.xGetter;\n        SVGElement.prototype.translateXSetter = SVGElement.prototype.translateYSetter =\n            SVGElement.prototype.rotationSetter = SVGElement.prototype.verticalAlignSetter =\n            SVGElement.prototype.scaleXSetter = SVGElement.prototype.scaleYSetter = function(value, key) {\n                this[key] = value;\n                this.doTransform = true;\n            };\n\n\n        // WebKit and Batik have problems with a stroke-width of zero, so in this case we remove the\n        // stroke attribute altogether. #1270, #1369, #3065, #3072.\n        SVGElement.prototype['stroke-widthSetter'] = SVGElement.prototype.strokeSetter = function(value, key, element) {\n            this[key] = value;\n            // Only apply the stroke attribute if the stroke width is defined and larger than 0\n            if (this.stroke && this['stroke-width']) {\n                SVGElement.prototype.fillSetter.call(this, this.stroke, 'stroke', element); // use prototype as instance may be overridden\n                element.setAttribute('stroke-width', this['stroke-width']);\n                this.hasStroke = true;\n            } else if (key === 'stroke-width' && value === 0 && this.hasStroke) {\n                element.removeAttribute('stroke');\n                this.hasStroke = false;\n            }\n        };\n\n\n        /**\n         * Allows direct access to the Highcharts rendering layer in order to draw\n         * primitive shapes like circles, rectangles, paths or text directly on a chart,\n         * or independent from any chart. The SVGRenderer represents a wrapper object\n         * for SVGin modern browsers and through the VMLRenderer, for VML in IE < 8.\n         *\n         * An existing chart's renderer can be accessed through {@link Chart.renderer}.\n         * The renderer can also be used completely decoupled from a chart.\n         *\n         * @param {HTMLDOMElement} container - Where to put the SVG in the web page.\n         * @param {number} width - The width of the SVG.\n         * @param {number} height - The height of the SVG.\n         * @param {boolean} [forExport=false] - Whether the rendered content is intended\n         *   for export.\n         * @param {boolean} [allowHTML=true] - Whether the renderer is allowed to\n         *   include HTML text, which will be projected on top of the SVG.\n         *\n         * @example\n         * // Use directly without a chart object.\n         * var renderer = new Highcharts.Renderer(parentNode, 600, 400);\n         *\n         * @sample highcharts/members/renderer-on-chart - Annotating a chart programmatically.\n         * @sample highcharts/members/renderer-basic - Independent SVG drawing.\n         *\n         * @class Highcharts.SVGRenderer\n         */\n        SVGRenderer = H.SVGRenderer = function() {\n            this.init.apply(this, arguments);\n        };\n        extend(SVGRenderer.prototype, /** @lends Highcharts.SVGRenderer.prototype */ {\n            /**\n             * A pointer to the renderer's associated Element class. The VMLRenderer\n             * will have a pointer to VMLElement here.\n             * @type {SVGElement}\n             */\n            Element: SVGElement,\n            SVG_NS: SVG_NS,\n            /**\n             * Initialize the SVGRenderer. Overridable initiator function that takes\n             * the same parameters as the constructor.\n             */\n            init: function(container, width, height, style, forExport, allowHTML) {\n                var renderer = this,\n                    boxWrapper,\n                    element,\n                    desc;\n\n                boxWrapper = renderer.createElement('svg')\n                    .attr({\n                        'version': '1.1',\n                        'class': 'highcharts-root'\n                    })\n\n                    .css(this.getStyle(style));\n                element = boxWrapper.element;\n                container.appendChild(element);\n\n                // For browsers other than IE, add the namespace attribute (#1978)\n                if (container.innerHTML.indexOf('xmlns') === -1) {\n                    attr(element, 'xmlns', this.SVG_NS);\n                }\n\n                // object properties\n                renderer.isSVG = true;\n\n                /**\n                 * The root `svg` node of the renderer.\n                 * @name box\n                 * @memberOf SVGRenderer\n                 * @type {SVGDOMElement}\n                 */\n                this.box = element;\n                /**\n                 * The wrapper for the root `svg` node of the renderer.\n                 *\n                 * @name boxWrapper\n                 * @memberOf SVGRenderer\n                 * @type {SVGElement}\n                 */\n                this.boxWrapper = boxWrapper;\n                renderer.alignedObjects = [];\n\n                /**\n                 * Page url used for internal references.\n                 * @type {string}\n                 */\n                // #24, #672, #1070\n                this.url = (isFirefox || isWebKit) && doc.getElementsByTagName('base').length ?\n                    win.location.href\n                    .replace(/#.*?$/, '') // remove the hash\n                    .replace(/<[^>]*>/g, '') // wing cut HTML\n                    .replace(/([\\('\\)])/g, '\\\\$1') // escape parantheses and quotes\n                    .replace(/ /g, '%20') : // replace spaces (needed for Safari only)\n                    '';\n\n                // Add description\n                desc = this.createElement('desc').add();\n                desc.element.appendChild(doc.createTextNode('Created with Highcharts 5.0.14'));\n\n                /**\n                 * A pointer to the `defs` node of the root SVG.\n                 * @type {SVGElement}\n                 * @name defs\n                 * @memberOf SVGRenderer\n                 */\n                renderer.defs = this.createElement('defs').add();\n                renderer.allowHTML = allowHTML;\n                renderer.forExport = forExport;\n                renderer.gradients = {}; // Object where gradient SvgElements are stored\n                renderer.cache = {}; // Cache for numerical bounding boxes\n                renderer.cacheKeys = [];\n                renderer.imgCount = 0;\n\n                renderer.setSize(width, height, false);\n\n\n\n                // Issue 110 workaround:\n                // In Firefox, if a div is positioned by percentage, its pixel position may land\n                // between pixels. The container itself doesn't display this, but an SVG element\n                // inside this container will be drawn at subpixel precision. In order to draw\n                // sharp lines, this must be compensated for. This doesn't seem to work inside\n                // iframes though (like in jsFiddle).\n                var subPixelFix, rect;\n                if (isFirefox && container.getBoundingClientRect) {\n                    subPixelFix = function() {\n                        css(container, {\n                            left: 0,\n                            top: 0\n                        });\n                        rect = container.getBoundingClientRect();\n                        css(container, {\n                            left: (Math.ceil(rect.left) - rect.left) + 'px',\n                            top: (Math.ceil(rect.top) - rect.top) + 'px'\n                        });\n                    };\n\n                    // run the fix now\n                    subPixelFix();\n\n                    // run it on resize\n                    renderer.unSubPixelFix = addEvent(win, 'resize', subPixelFix);\n                }\n            },\n\n\n\n            /**\n             * Get the global style setting for the renderer.\n             * @private\n             * @param  {CSSObject} style - Style settings.\n             * @return {CSSObject} The style settings mixed with defaults.\n             */\n            getStyle: function(style) {\n                this.style = extend({\n\n                    fontFamily: '\"Lucida Grande\", \"Lucida Sans Unicode\", Arial, Helvetica, sans-serif', // default font\n                    fontSize: '12px'\n\n                }, style);\n                return this.style;\n            },\n            /**\n             * Apply the global style on the renderer, mixed with the default styles.\n             *\n             * @param {CSSObject} style - CSS to apply.\n             */\n            setStyle: function(style) {\n                this.boxWrapper.css(this.getStyle(style));\n            },\n\n\n            /**\n             * Detect whether the renderer is hidden. This happens when one of the\n             * parent elements has `display: none`. Used internally to detect when we\n             * needto render preliminarily in another div to get the text bounding boxes\n             * right.\n             *\n             * @returns {boolean} True if it is hidden.\n             */\n            isHidden: function() { // #608\n                return !this.boxWrapper.getBBox().width;\n            },\n\n            /**\n             * Destroys the renderer and its allocated members.\n             */\n            destroy: function() {\n                var renderer = this,\n                    rendererDefs = renderer.defs;\n                renderer.box = null;\n                renderer.boxWrapper = renderer.boxWrapper.destroy();\n\n                // Call destroy on all gradient elements\n                destroyObjectProperties(renderer.gradients || {});\n                renderer.gradients = null;\n\n                // Defs are null in VMLRenderer\n                // Otherwise, destroy them here.\n                if (rendererDefs) {\n                    renderer.defs = rendererDefs.destroy();\n                }\n\n                // Remove sub pixel fix handler (#982)\n                if (renderer.unSubPixelFix) {\n                    renderer.unSubPixelFix();\n                }\n\n                renderer.alignedObjects = null;\n\n                return null;\n            },\n\n            /**\n             * Create a wrapper for an SVG element. Serves as a factory for\n             * {@link SVGElement}, but this function is itself mostly called from\n             * primitive factories like {@link SVGRenderer#path}, {@link\n             * SVGRenderer#rect} or {@link SVGRenderer#text}.\n             *\n             * @param {string} nodeName - The node name, for example `rect`, `g` etc.\n             * @returns {SVGElement} The generated SVGElement.\n             */\n            createElement: function(nodeName) {\n                var wrapper = new this.Element();\n                wrapper.init(this, nodeName);\n                return wrapper;\n            },\n\n            /**\n             * Dummy function for plugins, called every time the renderer is updated.\n             * Prior to Highcharts 5, this was used for the canvg renderer.\n             * @function\n             */\n            draw: noop,\n\n            /**\n             * Get converted radial gradient attributes according to the radial\n             * reference. Used internally from the {@link SVGElement#colorGradient}\n             * function.\n             *\n             * @private\n             */\n            getRadialAttr: function(radialReference, gradAttr) {\n                return {\n                    cx: (radialReference[0] - radialReference[2] / 2) + gradAttr.cx * radialReference[2],\n                    cy: (radialReference[1] - radialReference[2] / 2) + gradAttr.cy * radialReference[2],\n                    r: gradAttr.r * radialReference[2]\n                };\n            },\n\n            getSpanWidth: function(wrapper, tspan) {\n                var renderer = this,\n                    bBox = wrapper.getBBox(true),\n                    actualWidth = bBox.width;\n\n                // Old IE cannot measure the actualWidth for SVG elements (#2314)\n                if (!svg && renderer.forExport) {\n                    actualWidth = renderer.measureSpanWidth(tspan.firstChild.data, wrapper.styles);\n                }\n                return actualWidth;\n            },\n\n            applyEllipsis: function(wrapper, tspan, text, width) {\n                var renderer = this,\n                    rotation = wrapper.rotation,\n                    str = text,\n                    currentIndex,\n                    minIndex = 0,\n                    maxIndex = text.length,\n                    updateTSpan = function(s) {\n                        tspan.removeChild(tspan.firstChild);\n                        if (s) {\n                            tspan.appendChild(doc.createTextNode(s));\n                        }\n                    },\n                    actualWidth,\n                    wasTooLong;\n                wrapper.rotation = 0; // discard rotation when computing box\n                actualWidth = renderer.getSpanWidth(wrapper, tspan);\n                wasTooLong = actualWidth > width;\n                if (wasTooLong) {\n                    while (minIndex <= maxIndex) {\n                        currentIndex = Math.ceil((minIndex + maxIndex) / 2);\n                        str = text.substring(0, currentIndex) + '\\u2026';\n                        updateTSpan(str);\n                        actualWidth = renderer.getSpanWidth(wrapper, tspan);\n                        if (minIndex === maxIndex) {\n                            // Complete\n                            minIndex = maxIndex + 1;\n                        } else if (actualWidth > width) {\n                            // Too large. Set max index to current.\n                            maxIndex = currentIndex - 1;\n                        } else {\n                            // Within width. Set min index to current.\n                            minIndex = currentIndex;\n                        }\n                    }\n                    // If max index was 0 it means just ellipsis was also to large.\n                    if (maxIndex === 0) {\n                        // Remove ellipses.\n                        updateTSpan('');\n                    }\n                }\n                wrapper.rotation = rotation; // Apply rotation again.\n                return wasTooLong;\n            },\n\n            /**\n             * Parse a simple HTML string into SVG tspans. Called internally when text\n             *   is set on an SVGElement. The function supports a subset of HTML tags,\n             *   CSS text features like `width`, `text-overflow`, `white-space`, and\n             *   also attributes like `href` and `style`.\n             * @private\n             * @param {SVGElement} wrapper The parent SVGElement.\n             */\n            buildText: function(wrapper) {\n                var textNode = wrapper.element,\n                    renderer = this,\n                    forExport = renderer.forExport,\n                    textStr = pick(wrapper.textStr, '').toString(),\n                    hasMarkup = textStr.indexOf('<') !== -1,\n                    lines,\n                    childNodes = textNode.childNodes,\n                    clsRegex,\n                    styleRegex,\n                    hrefRegex,\n                    wasTooLong,\n                    parentX = attr(textNode, 'x'),\n                    textStyles = wrapper.styles,\n                    width = wrapper.textWidth,\n                    textLineHeight = textStyles && textStyles.lineHeight,\n                    textOutline = textStyles && textStyles.textOutline,\n                    ellipsis = textStyles && textStyles.textOverflow === 'ellipsis',\n                    noWrap = textStyles && textStyles.whiteSpace === 'nowrap',\n                    fontSize = textStyles && textStyles.fontSize,\n                    textCache,\n                    isSubsequentLine,\n                    i = childNodes.length,\n                    tempParent = width && !wrapper.added && this.box,\n                    getLineHeight = function(tspan) {\n                        var fontSizeStyle;\n\n                        fontSizeStyle = /(px|em)$/.test(tspan && tspan.style.fontSize) ?\n                            tspan.style.fontSize :\n                            (fontSize || renderer.style.fontSize || 12);\n\n\n                        return textLineHeight ?\n                            pInt(textLineHeight) :\n                            renderer.fontMetrics(\n                                fontSizeStyle,\n                                // Get the computed size from parent if not explicit\n                                tspan.getAttribute('style') ? tspan : textNode\n                            ).h;\n                    },\n                    unescapeAngleBrackets = function(inputStr) {\n                        return inputStr.replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n                    };\n\n                // The buildText code is quite heavy, so if we're not changing something\n                // that affects the text, skip it (#6113).\n                textCache = [\n                    textStr,\n                    ellipsis,\n                    noWrap,\n                    textLineHeight,\n                    textOutline,\n                    fontSize,\n                    width\n                ].join(',');\n                if (textCache === wrapper.textCache) {\n                    return;\n                }\n                wrapper.textCache = textCache;\n\n                /// remove old text\n                while (i--) {\n                    textNode.removeChild(childNodes[i]);\n                }\n\n                // Skip tspans, add text directly to text node. The forceTSpan is a hook\n                // used in text outline hack.\n                if (!hasMarkup && !textOutline && !ellipsis && !width && textStr.indexOf(' ') === -1) {\n                    textNode.appendChild(doc.createTextNode(unescapeAngleBrackets(textStr)));\n\n                    // Complex strings, add more logic\n                } else {\n\n                    clsRegex = /<.*class=\"([^\"]+)\".*>/;\n                    styleRegex = /<.*style=\"([^\"]+)\".*>/;\n                    hrefRegex = /<.*href=\"([^\"]+)\".*>/;\n\n                    if (tempParent) {\n                        tempParent.appendChild(textNode); // attach it to the DOM to read offset width\n                    }\n\n                    if (hasMarkup) {\n                        lines = textStr\n\n                            .replace(/<(b|strong)>/g, '<span style=\"font-weight:bold\">')\n                            .replace(/<(i|em)>/g, '<span style=\"font-style:italic\">')\n\n                            .replace(/<a/g, '<span')\n                            .replace(/<\\/(b|strong|i|em|a)>/g, '</span>')\n                            .split(/<br.*?>/g);\n\n                    } else {\n                        lines = [textStr];\n                    }\n\n\n                    // Trim empty lines (#5261)\n                    lines = grep(lines, function(line) {\n                        return line !== '';\n                    });\n\n\n                    // build the lines\n                    each(lines, function buildTextLines(line, lineNo) {\n                        var spans,\n                            spanNo = 0;\n                        line = line\n                            .replace(/^\\s+|\\s+$/g, '') // Trim to prevent useless/costly process on the spaces (#5258)\n                            .replace(/<span/g, '|||<span')\n                            .replace(/<\\/span>/g, '</span>|||');\n                        spans = line.split('|||');\n\n                        each(spans, function buildTextSpans(span) {\n                            if (span !== '' || spans.length === 1) {\n                                var attributes = {},\n                                    tspan = doc.createElementNS(renderer.SVG_NS, 'tspan'),\n                                    spanCls,\n                                    spanStyle; // #390\n                                if (clsRegex.test(span)) {\n                                    spanCls = span.match(clsRegex)[1];\n                                    attr(tspan, 'class', spanCls);\n                                }\n                                if (styleRegex.test(span)) {\n                                    spanStyle = span.match(styleRegex)[1].replace(/(;| |^)color([ :])/, '$1fill$2');\n                                    attr(tspan, 'style', spanStyle);\n                                }\n                                if (hrefRegex.test(span) && !forExport) { // Not for export - #1529\n                                    attr(tspan, 'onclick', 'location.href=\\\"' + span.match(hrefRegex)[1] + '\\\"');\n                                    css(tspan, {\n                                        cursor: 'pointer'\n                                    });\n                                }\n\n                                span = unescapeAngleBrackets(span.replace(/<(.|\\n)*?>/g, '') || ' ');\n\n                                // Nested tags aren't supported, and cause crash in Safari (#1596)\n                                if (span !== ' ') {\n\n                                    // add the text node\n                                    tspan.appendChild(doc.createTextNode(span));\n\n                                    if (!spanNo) { // first span in a line, align it to the left\n                                        if (lineNo && parentX !== null) {\n                                            attributes.x = parentX;\n                                        }\n                                    } else {\n                                        attributes.dx = 0; // #16\n                                    }\n\n                                    // add attributes\n                                    attr(tspan, attributes);\n\n                                    // Append it\n                                    textNode.appendChild(tspan);\n\n                                    // first span on subsequent line, add the line height\n                                    if (!spanNo && isSubsequentLine) {\n\n                                        // allow getting the right offset height in exporting in IE\n                                        if (!svg && forExport) {\n                                            css(tspan, {\n                                                display: 'block'\n                                            });\n                                        }\n\n                                        // Set the line height based on the font size of either\n                                        // the text element or the tspan element\n                                        attr(\n                                            tspan,\n                                            'dy',\n                                            getLineHeight(tspan)\n                                        );\n                                    }\n\n                                    /*if (width) {\n                                    \trenderer.breakText(wrapper, width);\n                                    }*/\n\n                                    // Check width and apply soft breaks or ellipsis\n                                    if (width) {\n                                        var words = span.replace(/([^\\^])-/g, '$1- ').split(' '), // #1273\n                                            hasWhiteSpace = spans.length > 1 || lineNo || (words.length > 1 && !noWrap),\n                                            tooLong,\n                                            rest = [],\n                                            actualWidth,\n                                            dy = getLineHeight(tspan),\n                                            rotation = wrapper.rotation;\n\n                                        if (ellipsis) {\n                                            wasTooLong = renderer.applyEllipsis(wrapper, tspan, span, width);\n                                        }\n\n                                        while (!ellipsis && hasWhiteSpace && (words.length || rest.length)) {\n                                            wrapper.rotation = 0; // discard rotation when computing box\n                                            actualWidth = renderer.getSpanWidth(wrapper, tspan);\n                                            tooLong = actualWidth > width;\n\n                                            // For ellipsis, do a binary search for the correct string length\n                                            if (wasTooLong === undefined) {\n                                                wasTooLong = tooLong; // First time\n                                            }\n\n                                            // Looping down, this is the first word sequence that is not too long,\n                                            // so we can move on to build the next line.\n                                            if (!tooLong || words.length === 1) {\n                                                words = rest;\n                                                rest = [];\n\n                                                if (words.length && !noWrap) {\n                                                    tspan = doc.createElementNS(SVG_NS, 'tspan');\n                                                    attr(tspan, {\n                                                        dy: dy,\n                                                        x: parentX\n                                                    });\n                                                    if (spanStyle) { // #390\n                                                        attr(tspan, 'style', spanStyle);\n                                                    }\n                                                    textNode.appendChild(tspan);\n                                                }\n                                                if (actualWidth > width) { // a single word is pressing it out\n                                                    width = actualWidth;\n                                                }\n                                            } else { // append to existing line tspan\n                                                tspan.removeChild(tspan.firstChild);\n                                                rest.unshift(words.pop());\n                                            }\n                                            if (words.length) {\n                                                tspan.appendChild(doc.createTextNode(words.join(' ').replace(/- /g, '-')));\n                                            }\n                                        }\n                                        wrapper.rotation = rotation;\n                                    }\n\n                                    spanNo++;\n                                }\n                            }\n                        });\n                        // To avoid beginning lines that doesn't add to the textNode (#6144)\n                        isSubsequentLine = isSubsequentLine || textNode.childNodes.length;\n                    });\n\n                    if (wasTooLong) {\n                        wrapper.attr('title', wrapper.textStr);\n                    }\n                    if (tempParent) {\n                        tempParent.removeChild(textNode); // attach it to the DOM to read offset width\n                    }\n\n                    // Apply the text outline\n                    if (textOutline && wrapper.applyTextOutline) {\n                        wrapper.applyTextOutline(textOutline);\n                    }\n                }\n            },\n\n\n\n            /*\n            breakText: function (wrapper, width) {\n            \tvar bBox = wrapper.getBBox(),\n            \t\tnode = wrapper.element,\n            \t\ttextLength = node.textContent.length,\n            \t\tpos = Math.round(width * textLength / bBox.width), // try this position first, based on average character width\n            \t\tincrement = 0,\n            \t\tfinalPos;\n\n            \tif (bBox.width > width) {\n            \t\twhile (finalPos === undefined) {\n            \t\t\ttextLength = node.getSubStringLength(0, pos);\n\n            \t\t\tif (textLength <= width) {\n            \t\t\t\tif (increment === -1) {\n            \t\t\t\t\tfinalPos = pos;\n            \t\t\t\t} else {\n            \t\t\t\t\tincrement = 1;\n            \t\t\t\t}\n            \t\t\t} else {\n            \t\t\t\tif (increment === 1) {\n            \t\t\t\t\tfinalPos = pos - 1;\n            \t\t\t\t} else {\n            \t\t\t\t\tincrement = -1;\n            \t\t\t\t}\n            \t\t\t}\n            \t\t\tpos += increment;\n            \t\t}\n            \t}\n            \tconsole.log('width', width, 'stringWidth', node.getSubStringLength(0, finalPos))\n            },\n            */\n\n            /**\n             * Returns white for dark colors and black for bright colors.\n             *\n             * @param {ColorString} rgba - The color to get the contrast for.\n             * @returns {string} The contrast color, either `#000000` or `#FFFFFF`.\n             */\n            getContrast: function(rgba) {\n                rgba = color(rgba).rgba;\n\n                // The threshold may be discussed. Here's a proposal for adding\n                // different weight to the color channels (#6216)\n                /*\n        rgba[0] *= 1; // red\n        rgba[1] *= 1.2; // green\n        rgba[2] *= 0.7; // blue\n        */\n\n                return rgba[0] + rgba[1] + rgba[2] > 2 * 255 ? '#000000' : '#FFFFFF';\n            },\n\n            /**\n             * Create a button with preset states.\n             * @param {string} text - The text or HTML to draw.\n             * @param {number} x - The x position of the button's left side.\n             * @param {number} y - The y position of the button's top side.\n             * @param {Function} callback - The function to execute on button click or\n             *    touch.\n             * @param {SVGAttributes} [normalState] - SVG attributes for the normal\n             *    state.\n             * @param {SVGAttributes} [hoverState] - SVG attributes for the hover state.\n             * @param {SVGAttributes} [pressedState] - SVG attributes for the pressed\n             *    state.\n             * @param {SVGAttributes} [disabledState] - SVG attributes for the disabled\n             *    state.\n             * @param {Symbol} [shape=rect] - The shape type.\n             * @returns {SVGRenderer} The button element.\n             */\n            button: function(text, x, y, callback, normalState, hoverState, pressedState, disabledState, shape) {\n                var label = this.label(text, x, y, shape, null, null, null, null, 'button'),\n                    curState = 0;\n\n                // Default, non-stylable attributes\n                label.attr(merge({\n                    'padding': 8,\n                    'r': 2\n                }, normalState));\n\n\n                // Presentational\n                var normalStyle,\n                    hoverStyle,\n                    pressedStyle,\n                    disabledStyle;\n\n                // Normal state - prepare the attributes\n                normalState = merge({\n                    fill: '#f7f7f7',\n                    stroke: '#cccccc',\n                    'stroke-width': 1,\n                    style: {\n                        color: '#333333',\n                        cursor: 'pointer',\n                        fontWeight: 'normal'\n                    }\n                }, normalState);\n                normalStyle = normalState.style;\n                delete normalState.style;\n\n                // Hover state\n                hoverState = merge(normalState, {\n                    fill: '#e6e6e6'\n                }, hoverState);\n                hoverStyle = hoverState.style;\n                delete hoverState.style;\n\n                // Pressed state\n                pressedState = merge(normalState, {\n                    fill: '#e6ebf5',\n                    style: {\n                        color: '#000000',\n                        fontWeight: 'bold'\n                    }\n                }, pressedState);\n                pressedStyle = pressedState.style;\n                delete pressedState.style;\n\n                // Disabled state\n                disabledState = merge(normalState, {\n                    style: {\n                        color: '#cccccc'\n                    }\n                }, disabledState);\n                disabledStyle = disabledState.style;\n                delete disabledState.style;\n\n\n                // Add the events. IE9 and IE10 need mouseover and mouseout to funciton (#667).\n                addEvent(label.element, isMS ? 'mouseover' : 'mouseenter', function() {\n                    if (curState !== 3) {\n                        label.setState(1);\n                    }\n                });\n                addEvent(label.element, isMS ? 'mouseout' : 'mouseleave', function() {\n                    if (curState !== 3) {\n                        label.setState(curState);\n                    }\n                });\n\n                label.setState = function(state) {\n                    // Hover state is temporary, don't record it\n                    if (state !== 1) {\n                        label.state = curState = state;\n                    }\n                    // Update visuals\n                    label.removeClass(/highcharts-button-(normal|hover|pressed|disabled)/)\n                        .addClass('highcharts-button-' + ['normal', 'hover', 'pressed', 'disabled'][state || 0]);\n\n\n                    label.attr([normalState, hoverState, pressedState, disabledState][state || 0])\n                        .css([normalStyle, hoverStyle, pressedStyle, disabledStyle][state || 0]);\n\n                };\n\n\n\n                // Presentational attributes\n                label\n                    .attr(normalState)\n                    .css(extend({\n                        cursor: 'default'\n                    }, normalStyle));\n\n\n                return label\n                    .on('click', function(e) {\n                        if (curState !== 3) {\n                            callback.call(label, e);\n                        }\n                    });\n            },\n\n            /**\n             * Make a straight line crisper by not spilling out to neighbour pixels.\n             *\n             * @param {Array} points - The original points on the format `['M', 0, 0,\n             *    'L', 100, 0]`.\n             * @param {number} width - The width of the line.\n             * @returns {Array} The original points array, but modified to render\n             * crisply.\n             */\n            crispLine: function(points, width) {\n                // normalize to a crisp line\n                if (points[1] === points[4]) {\n                    // Substract due to #1129. Now bottom and left axis gridlines behave the same.\n                    points[1] = points[4] = Math.round(points[1]) - (width % 2 / 2);\n                }\n                if (points[2] === points[5]) {\n                    points[2] = points[5] = Math.round(points[2]) + (width % 2 / 2);\n                }\n                return points;\n            },\n\n\n            /**\n             * Draw a path, wraps the SVG `path` element.\n             *\n             * @param {Array} [path] An SVG path definition in array form.\n             *\n             * @example\n             * var path = renderer.path(['M', 10, 10, 'L', 30, 30, 'z'])\n             *     .attr({ stroke: '#ff00ff' })\n             *     .add();\n             * @returns {SVGElement} The generated wrapper element.\n             *\n             * @sample highcharts/members/renderer-path-on-chart/\n             *         Draw a path in a chart\n             * @sample highcharts/members/renderer-path/\n             *         Draw a path independent from a chart\n             *\n             */\n            /**\n             * Draw a path, wraps the SVG `path` element.\n             *\n             * @param {SVGAttributes} [attribs] The initial attributes.\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            path: function(path) {\n                var attribs = {\n\n                    fill: 'none'\n\n                };\n                if (isArray(path)) {\n                    attribs.d = path;\n                } else if (isObject(path)) { // attributes\n                    extend(attribs, path);\n                }\n                return this.createElement('path').attr(attribs);\n            },\n\n            /**\n             * Draw a circle, wraps the SVG `circle` element.\n             *\n             * @param {number} [x] The center x position.\n             * @param {number} [y] The center y position.\n             * @param {number} [r] The radius.\n             * @returns {SVGElement} The generated wrapper element.\n             *\n             * @sample highcharts/members/renderer-circle/ Drawing a circle\n             */\n            /**\n             * Draw a circle, wraps the SVG `circle` element.\n             *\n             * @param {SVGAttributes} [attribs] The initial attributes.\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            circle: function(x, y, r) {\n                var attribs = isObject(x) ? x : {\n                        x: x,\n                        y: y,\n                        r: r\n                    },\n                    wrapper = this.createElement('circle');\n\n                // Setting x or y translates to cx and cy\n                wrapper.xSetter = wrapper.ySetter = function(value, key, element) {\n                    element.setAttribute('c' + key, value);\n                };\n\n                return wrapper.attr(attribs);\n            },\n\n            /**\n             * Draw and return an arc.\n             * @param {number} [x=0] Center X position.\n             * @param {number} [y=0] Center Y position.\n             * @param {number} [r=0] The outer radius of the arc.\n             * @param {number} [innerR=0] Inner radius like used in donut charts.\n             * @param {number} [start=0] The starting angle of the arc in radians, where\n             *    0 is to the right and `-Math.PI/2` is up.\n             * @param {number} [end=0] The ending angle of the arc in radians, where 0\n             *    is to the right and `-Math.PI/2` is up.\n             * @returns {SVGElement} The generated wrapper element.\n             *\n             * @sample highcharts/members/renderer-arc/\n             *         Drawing an arc\n             */\n            /**\n             * Draw and return an arc. Overloaded function that takes arguments object.\n             * @param {SVGAttributes} attribs Initial SVG attributes.\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            arc: function(x, y, r, innerR, start, end) {\n                var arc,\n                    options;\n\n                if (isObject(x)) {\n                    options = x;\n                    y = options.y;\n                    r = options.r;\n                    innerR = options.innerR;\n                    start = options.start;\n                    end = options.end;\n                    x = options.x;\n                } else {\n                    options = {\n                        innerR: innerR,\n                        start: start,\n                        end: end\n                    };\n                }\n\n                // Arcs are defined as symbols for the ability to set\n                // attributes in attr and animate\n                arc = this.symbol('arc', x, y, r, r, options);\n                arc.r = r; // #959\n                return arc;\n            },\n\n            /**\n             * Draw and return a rectangle.\n             * @param {number} [x] Left position.\n             * @param {number} [y] Top position.\n             * @param {number} [width] Width of the rectangle.\n             * @param {number} [height] Height of the rectangle.\n             * @param {number} [r] Border corner radius.\n             * @param {number} [strokeWidth] A stroke width can be supplied to allow\n             *    crisp drawing.\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            /**\n             * Draw and return a rectangle.\n             * @param  {SVGAttributes} [attributes]\n             *         General SVG attributes for the rectangle.\n             * @return {SVGElement}\n             *         The generated wrapper element.\n             *\n             * @sample highcharts/members/renderer-rect-on-chart/\n             *         Draw a rectangle in a chart\n             * @sample highcharts/members/renderer-rect/\n             *         Draw a rectangle independent from a chart\n             */\n            rect: function(x, y, width, height, r, strokeWidth) {\n\n                r = isObject(x) ? x.r : r;\n\n                var wrapper = this.createElement('rect'),\n                    attribs = isObject(x) ? x : x === undefined ? {} : {\n                        x: x,\n                        y: y,\n                        width: Math.max(width, 0),\n                        height: Math.max(height, 0)\n                    };\n\n\n                if (strokeWidth !== undefined) {\n                    attribs.strokeWidth = strokeWidth;\n                    attribs = wrapper.crisp(attribs);\n                }\n                attribs.fill = 'none';\n\n\n                if (r) {\n                    attribs.r = r;\n                }\n\n                wrapper.rSetter = function(value, key, element) {\n                    attr(element, {\n                        rx: value,\n                        ry: value\n                    });\n                };\n\n                return wrapper.attr(attribs);\n            },\n\n            /**\n             * Resize the {@link SVGRenderer#box} and re-align all aligned child\n             * elements.\n             * @param  {number} width\n             *         The new pixel width.\n             * @param  {number} height\n             *         The new pixel height.\n             * @param  {Boolean|AnimationOptions} [animate=true]\n             *         Whether and how to animate.\n             */\n            setSize: function(width, height, animate) {\n                var renderer = this,\n                    alignedObjects = renderer.alignedObjects,\n                    i = alignedObjects.length;\n\n                renderer.width = width;\n                renderer.height = height;\n\n                renderer.boxWrapper.animate({\n                    width: width,\n                    height: height\n                }, {\n                    step: function() {\n                        this.attr({\n                            viewBox: '0 0 ' + this.attr('width') + ' ' + this.attr('height')\n                        });\n                    },\n                    duration: pick(animate, true) ? undefined : 0\n                });\n\n                while (i--) {\n                    alignedObjects[i].align();\n                }\n            },\n\n            /**\n             * Create and return an svg group element. Child {@link Highcharts.SVGElement}\n             * objects are added to the group by using the group as the first parameter\n             * in {@link Highcharts.SVGElement#add|add()}.\n             *\n             * @param {string} [name] The group will be given a class name of\n             * `highcharts-{name}`. This can be used for styling and scripting.\n             * @returns {SVGElement} The generated wrapper element.\n             *\n             * @sample highcharts/members/renderer-g/\n             *         Show and hide grouped objects\n             */\n            g: function(name) {\n                var elem = this.createElement('g');\n                return name ? elem.attr({\n                    'class': 'highcharts-' + name\n                }) : elem;\n            },\n\n            /**\n             * Display an image.\n             * @param {string} src The image source.\n             * @param {number} [x] The X position.\n             * @param {number} [y] The Y position.\n             * @param {number} [width] The image width. If omitted, it defaults to the\n             *    image file width.\n             * @param {number} [height] The image height. If omitted it defaults to the\n             *    image file height.\n             * @returns {SVGElement} The generated wrapper element.\n             *\n             * @sample highcharts/members/renderer-image-on-chart/\n             *         Add an image in a chart\n             * @sample highcharts/members/renderer-image/\n             *         Add an image independent of a chart\n             */\n            image: function(src, x, y, width, height) {\n                var attribs = {\n                        preserveAspectRatio: 'none'\n                    },\n                    elemWrapper;\n\n                // optional properties\n                if (arguments.length > 1) {\n                    extend(attribs, {\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    });\n                }\n\n                elemWrapper = this.createElement('image').attr(attribs);\n\n                // set the href in the xlink namespace\n                if (elemWrapper.element.setAttributeNS) {\n                    elemWrapper.element.setAttributeNS('http://www.w3.org/1999/xlink',\n                        'href', src);\n                } else {\n                    // could be exporting in IE\n                    // using href throws \"not supported\" in ie7 and under, requries regex shim to fix later\n                    elemWrapper.element.setAttribute('hc-svg-href', src);\n                }\n                return elemWrapper;\n            },\n\n            /**\n             * Draw a symbol out of pre-defined shape paths from {@link SVGRenderer#symbols}.\n             * It is used in Highcharts for point makers, which cake a `symbol` option,\n             * and label and button backgrounds like in the tooltip and stock flags.\n             *\n             * @param {Symbol} symbol - The symbol name.\n             * @param {number} x - The X coordinate for the top left position.\n             * @param {number} y - The Y coordinate for the top left position.\n             * @param {number} width - The pixel width.\n             * @param {number} height - The pixel height.\n             * @param {Object} [options] - Additional options, depending on the actual\n             *    symbol drawn.\n             * @param {number} [options.anchorX] - The anchor X position for the\n             *    `callout` symbol. This is where the chevron points to.\n             * @param {number} [options.anchorY] - The anchor Y position for the\n             *    `callout` symbol. This is where the chevron points to.\n             * @param {number} [options.end] - The end angle of an `arc` symbol.\n             * @param {boolean} [options.open] - Whether to draw `arc` symbol open or\n             *    closed.\n             * @param {number} [options.r] - The radius of an `arc` symbol, or the\n             *    border radius for the `callout` symbol.\n             * @param {number} [options.start] - The start angle of an `arc` symbol.\n             */\n            symbol: function(symbol, x, y, width, height, options) {\n\n                var ren = this,\n                    obj,\n                    imageRegex = /^url\\((.*?)\\)$/,\n                    isImage = imageRegex.test(symbol),\n                    sym = !isImage && (this.symbols[symbol] ? symbol : 'circle'),\n\n\n                    // get the symbol definition function\n                    symbolFn = sym && this.symbols[sym],\n\n                    // check if there's a path defined for this symbol\n                    path = defined(x) && symbolFn && symbolFn.call(\n                        this.symbols,\n                        Math.round(x),\n                        Math.round(y),\n                        width,\n                        height,\n                        options\n                    ),\n                    imageSrc,\n                    centerImage;\n\n                if (symbolFn) {\n                    obj = this.path(path);\n\n\n                    obj.attr('fill', 'none');\n\n\n                    // expando properties for use in animate and attr\n                    extend(obj, {\n                        symbolName: sym,\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    });\n                    if (options) {\n                        extend(obj, options);\n                    }\n\n\n                    // Image symbols\n                } else if (isImage) {\n\n\n                    imageSrc = symbol.match(imageRegex)[1];\n\n                    // Create the image synchronously, add attribs async\n                    obj = this.image(imageSrc);\n\n                    // The image width is not always the same as the symbol width. The\n                    // image may be centered within the symbol, as is the case when\n                    // image shapes are used as label backgrounds, for example in flags.\n                    obj.imgwidth = pick(\n                        symbolSizes[imageSrc] && symbolSizes[imageSrc].width,\n                        options && options.width\n                    );\n                    obj.imgheight = pick(\n                        symbolSizes[imageSrc] && symbolSizes[imageSrc].height,\n                        options && options.height\n                    );\n                    /**\n                     * Set the size and position\n                     */\n                    centerImage = function() {\n                        obj.attr({\n                            width: obj.width,\n                            height: obj.height\n                        });\n                    };\n\n                    /**\n                     * Width and height setters that take both the image's physical size\n                     * and the label size into consideration, and translates the image\n                     * to center within the label.\n                     */\n                    each(['width', 'height'], function(key) {\n                        obj[key + 'Setter'] = function(value, key) {\n                            var attribs = {},\n                                imgSize = this['img' + key],\n                                trans = key === 'width' ? 'translateX' : 'translateY';\n                            this[key] = value;\n                            if (defined(imgSize)) {\n                                if (this.element) {\n                                    this.element.setAttribute(key, imgSize);\n                                }\n                                if (!this.alignByTranslate) {\n                                    attribs[trans] = ((this[key] || 0) - imgSize) / 2;\n                                    this.attr(attribs);\n                                }\n                            }\n                        };\n                    });\n\n\n                    if (defined(x)) {\n                        obj.attr({\n                            x: x,\n                            y: y\n                        });\n                    }\n                    obj.isImg = true;\n\n                    if (defined(obj.imgwidth) && defined(obj.imgheight)) {\n                        centerImage();\n                    } else {\n                        // Initialize image to be 0 size so export will still function if there's no cached sizes.\n                        obj.attr({\n                            width: 0,\n                            height: 0\n                        });\n\n                        // Create a dummy JavaScript image to get the width and height. Due to a bug in IE < 8,\n                        // the created element must be assigned to a variable in order to load (#292).\n                        createElement('img', {\n                            onload: function() {\n\n                                var chart = charts[ren.chartIndex];\n\n                                // Special case for SVGs on IE11, the width is not accessible until the image is\n                                // part of the DOM (#2854).\n                                if (this.width === 0) {\n                                    css(this, {\n                                        position: 'absolute',\n                                        top: '-999em'\n                                    });\n                                    doc.body.appendChild(this);\n                                }\n\n                                // Center the image\n                                symbolSizes[imageSrc] = { // Cache for next\n                                    width: this.width,\n                                    height: this.height\n                                };\n                                obj.imgwidth = this.width;\n                                obj.imgheight = this.height;\n\n                                if (obj.element) {\n                                    centerImage();\n                                }\n\n                                // Clean up after #2854 workaround.\n                                if (this.parentNode) {\n                                    this.parentNode.removeChild(this);\n                                }\n\n                                // Fire the load event when all external images are loaded\n                                ren.imgCount--;\n                                if (!ren.imgCount && chart && chart.onload) {\n                                    chart.onload();\n                                }\n                            },\n                            src: imageSrc\n                        });\n                        this.imgCount++;\n                    }\n                }\n\n                return obj;\n            },\n\n            /**\n             * @typedef {string} Symbol\n             *\n             * Can be one of `arc`, `callout`, `circle`, `diamond`, `square`,\n             * `triangle`, `triangle-down`. Symbols are used internally for point\n             * markers, button and label borders and backgrounds, or custom shapes.\n             * Extendable by adding to {@link SVGRenderer#symbols}.\n             */\n            /**\n             * An extendable collection of functions for defining symbol paths.\n             */\n            symbols: {\n                'circle': function(x, y, w, h) {\n                    // Return a full arc\n                    return this.arc(x + w / 2, y + h / 2, w / 2, h / 2, {\n                        start: 0,\n                        end: Math.PI * 2,\n                        open: false\n                    });\n                },\n\n                'square': function(x, y, w, h) {\n                    return [\n                        'M', x, y,\n                        'L', x + w, y,\n                        x + w, y + h,\n                        x, y + h,\n                        'Z'\n                    ];\n                },\n\n                'triangle': function(x, y, w, h) {\n                    return [\n                        'M', x + w / 2, y,\n                        'L', x + w, y + h,\n                        x, y + h,\n                        'Z'\n                    ];\n                },\n\n                'triangle-down': function(x, y, w, h) {\n                    return [\n                        'M', x, y,\n                        'L', x + w, y,\n                        x + w / 2, y + h,\n                        'Z'\n                    ];\n                },\n                'diamond': function(x, y, w, h) {\n                    return [\n                        'M', x + w / 2, y,\n                        'L', x + w, y + h / 2,\n                        x + w / 2, y + h,\n                        x, y + h / 2,\n                        'Z'\n                    ];\n                },\n                'arc': function(x, y, w, h, options) {\n                    var start = options.start,\n                        rx = options.r || w,\n                        ry = options.r || h || w,\n                        proximity = 0.001,\n                        fullCircle =\n                        Math.abs(options.end - options.start - 2 * Math.PI) <\n                        proximity,\n                        // Substract a small number to prevent cos and sin of start and\n                        // end from becoming equal on 360 arcs (related: #1561)\n                        end = options.end - proximity,\n                        innerRadius = options.innerR,\n                        open = pick(options.open, fullCircle),\n                        cosStart = Math.cos(start),\n                        sinStart = Math.sin(start),\n                        cosEnd = Math.cos(end),\n                        sinEnd = Math.sin(end),\n                        // Proximity takes care of rounding errors around PI (#6971)\n                        longArc = options.end - start - Math.PI < proximity ? 0 : 1,\n                        arc;\n\n                    arc = [\n                        'M',\n                        x + rx * cosStart,\n                        y + ry * sinStart,\n                        'A', // arcTo\n                        rx, // x radius\n                        ry, // y radius\n                        0, // slanting\n                        longArc, // long or short arc\n                        1, // clockwise\n                        x + rx * cosEnd,\n                        y + ry * sinEnd\n                    ];\n\n                    if (defined(innerRadius)) {\n                        arc.push(\n                            open ? 'M' : 'L',\n                            x + innerRadius * cosEnd,\n                            y + innerRadius * sinEnd,\n                            'A', // arcTo\n                            innerRadius, // x radius\n                            innerRadius, // y radius\n                            0, // slanting\n                            longArc, // long or short arc\n                            0, // clockwise\n                            x + innerRadius * cosStart,\n                            y + innerRadius * sinStart\n                        );\n                    }\n\n                    arc.push(open ? '' : 'Z'); // close\n                    return arc;\n                },\n\n                /**\n                 * Callout shape used for default tooltips, also used for rounded rectangles in VML\n                 */\n                callout: function(x, y, w, h, options) {\n                    var arrowLength = 6,\n                        halfDistance = 6,\n                        r = Math.min((options && options.r) || 0, w, h),\n                        safeDistance = r + halfDistance,\n                        anchorX = options && options.anchorX,\n                        anchorY = options && options.anchorY,\n                        path;\n\n                    path = [\n                        'M', x + r, y,\n                        'L', x + w - r, y, // top side\n                        'C', x + w, y, x + w, y, x + w, y + r, // top-right corner\n                        'L', x + w, y + h - r, // right side\n                        'C', x + w, y + h, x + w, y + h, x + w - r, y + h, // bottom-right corner\n                        'L', x + r, y + h, // bottom side\n                        'C', x, y + h, x, y + h, x, y + h - r, // bottom-left corner\n                        'L', x, y + r, // left side\n                        'C', x, y, x, y, x + r, y // top-left corner\n                    ];\n\n                    // Anchor on right side\n                    if (anchorX && anchorX > w) {\n\n                        // Chevron\n                        if (anchorY > y + safeDistance && anchorY < y + h - safeDistance) {\n                            path.splice(13, 3,\n                                'L', x + w, anchorY - halfDistance,\n                                x + w + arrowLength, anchorY,\n                                x + w, anchorY + halfDistance,\n                                x + w, y + h - r\n                            );\n\n                            // Simple connector\n                        } else {\n                            path.splice(13, 3,\n                                'L', x + w, h / 2,\n                                anchorX, anchorY,\n                                x + w, h / 2,\n                                x + w, y + h - r\n                            );\n                        }\n\n                        // Anchor on left side\n                    } else if (anchorX && anchorX < 0) {\n\n                        // Chevron\n                        if (anchorY > y + safeDistance && anchorY < y + h - safeDistance) {\n                            path.splice(33, 3,\n                                'L', x, anchorY + halfDistance,\n                                x - arrowLength, anchorY,\n                                x, anchorY - halfDistance,\n                                x, y + r\n                            );\n\n                            // Simple connector\n                        } else {\n                            path.splice(33, 3,\n                                'L', x, h / 2,\n                                anchorX, anchorY,\n                                x, h / 2,\n                                x, y + r\n                            );\n                        }\n\n                    } else if (anchorY && anchorY > h && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace bottom\n                        path.splice(23, 3,\n                            'L', anchorX + halfDistance, y + h,\n                            anchorX, y + h + arrowLength,\n                            anchorX - halfDistance, y + h,\n                            x + r, y + h\n                        );\n                    } else if (anchorY && anchorY < 0 && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace top\n                        path.splice(3, 3,\n                            'L', anchorX - halfDistance, y,\n                            anchorX, y - arrowLength,\n                            anchorX + halfDistance, y,\n                            w - r, y\n                        );\n                    }\n\n                    return path;\n                }\n            },\n\n            /**\n             * @typedef {SVGElement} ClipRect - A clipping rectangle that can be applied\n             * to one or more {@link SVGElement} instances. It is instanciated with the\n             * {@link SVGRenderer#clipRect} function and applied with the {@link\n             * SVGElement#clip} function.\n             *\n             * @example\n             * var circle = renderer.circle(100, 100, 100)\n             *     .attr({ fill: 'red' })\n             *     .add();\n             * var clipRect = renderer.clipRect(100, 100, 100, 100);\n             *\n             * // Leave only the lower right quarter visible\n             * circle.clip(clipRect);\n             */\n            /**\n             * Define a clipping rectangle. The clipping rectangle is later applied\n             * to {@link SVGElement} objects through the {@link SVGElement#clip}\n             * function.\n             *\n             * @param {String} id\n             * @param {number} x\n             * @param {number} y\n             * @param {number} width\n             * @param {number} height\n             * @returns {ClipRect} A clipping rectangle.\n             *\n             * @example\n             * var circle = renderer.circle(100, 100, 100)\n             *     .attr({ fill: 'red' })\n             *     .add();\n             * var clipRect = renderer.clipRect(100, 100, 100, 100);\n             *\n             * // Leave only the lower right quarter visible\n             * circle.clip(clipRect);\n             */\n            clipRect: function(x, y, width, height) {\n                var wrapper,\n                    id = H.uniqueKey(),\n\n                    clipPath = this.createElement('clipPath').attr({\n                        id: id\n                    }).add(this.defs);\n\n                wrapper = this.rect(x, y, width, height, 0).add(clipPath);\n                wrapper.id = id;\n                wrapper.clipPath = clipPath;\n                wrapper.count = 0;\n\n                return wrapper;\n            },\n\n\n\n\n\n            /**\n             * Draw text. The text can contain a subset of HTML, like spans and anchors\n             * and some basic text styling of these. For more advanced features like\n             * border and background, use {@link Highcharts.SVGRenderer#label} instead.\n             * To update the text after render, run `text.attr({ text: 'New text' })`.\n             * @param  {String} str\n             *         The text of (subset) HTML to draw.\n             * @param  {number} x\n             *         The x position of the text's lower left corner.\n             * @param  {number} y\n             *         The y position of the text's lower left corner.\n             * @param  {Boolean} [useHTML=false]\n             *         Use HTML to render the text.\n             *\n             * @return {SVGElement} The text object.\n             *\n             * @sample highcharts/members/renderer-text-on-chart/\n             *         Annotate the chart freely\n             * @sample highcharts/members/renderer-on-chart/\n             *         Annotate with a border and in response to the data\n             * @sample highcharts/members/renderer-text/\n             *         Formatted text\n             */\n            text: function(str, x, y, useHTML) {\n\n                // declare variables\n                var renderer = this,\n                    fakeSVG = !svg && renderer.forExport,\n                    wrapper,\n                    attribs = {};\n\n                if (useHTML && (renderer.allowHTML || !renderer.forExport)) {\n                    return renderer.html(str, x, y);\n                }\n\n                attribs.x = Math.round(x || 0); // X is always needed for line-wrap logic\n                if (y) {\n                    attribs.y = Math.round(y);\n                }\n                if (str || str === 0) {\n                    attribs.text = str;\n                }\n\n                wrapper = renderer.createElement('text')\n                    .attr(attribs);\n\n                // Prevent wrapping from creating false offsetWidths in export in legacy IE (#1079, #1063)\n                if (fakeSVG) {\n                    wrapper.css({\n                        position: 'absolute'\n                    });\n                }\n\n                if (!useHTML) {\n                    wrapper.xSetter = function(value, key, element) {\n                        var tspans = element.getElementsByTagName('tspan'),\n                            tspan,\n                            parentVal = element.getAttribute(key),\n                            i;\n                        for (i = 0; i < tspans.length; i++) {\n                            tspan = tspans[i];\n                            // If the x values are equal, the tspan represents a linebreak\n                            if (tspan.getAttribute(key) === parentVal) {\n                                tspan.setAttribute(key, value);\n                            }\n                        }\n                        element.setAttribute(key, value);\n                    };\n                }\n\n                return wrapper;\n            },\n\n            /**\n             * Utility to return the baseline offset and total line height from the font\n             * size.\n             *\n             * @param {?string} fontSize The current font size to inspect. If not given,\n             *   the font size will be found from the DOM element.\n             * @param {SVGElement|SVGDOMElement} [elem] The element to inspect for a\n             *   current font size.\n             * @returns {Object} An object containing `h`: the line height, `b`: the\n             * baseline relative to the top of the box, and `f`: the font size.\n             */\n            fontMetrics: function(fontSize, elem) {\n                var lineHeight,\n                    baseline;\n\n\n                fontSize = fontSize ||\n                    // When the elem is a DOM element (#5932)\n                    (elem && elem.style && elem.style.fontSize) ||\n                    // Fall back on the renderer style default\n                    (this.style && this.style.fontSize);\n\n\n\n                // Handle different units\n                if (/px/.test(fontSize)) {\n                    fontSize = pInt(fontSize);\n                } else if (/em/.test(fontSize)) {\n                    // The em unit depends on parent items\n                    fontSize = parseFloat(fontSize) *\n                        (elem ? this.fontMetrics(null, elem.parentNode).f : 16);\n                } else {\n                    fontSize = 12;\n                }\n\n                // Empirical values found by comparing font size and bounding box\n                // height. Applies to the default font family.\n                // http://jsfiddle.net/highcharts/7xvn7/\n                lineHeight = fontSize < 24 ? fontSize + 3 : Math.round(fontSize * 1.2);\n                baseline = Math.round(lineHeight * 0.8);\n\n                return {\n                    h: lineHeight,\n                    b: baseline,\n                    f: fontSize\n                };\n            },\n\n            /**\n             * Correct X and Y positioning of a label for rotation (#1764).\n             *\n             * @private\n             */\n            rotCorr: function(baseline, rotation, alterY) {\n                var y = baseline;\n                if (rotation && alterY) {\n                    y = Math.max(y * Math.cos(rotation * deg2rad), 4);\n                }\n                return {\n                    x: (-baseline / 3) * Math.sin(rotation * deg2rad),\n                    y: y\n                };\n            },\n\n            /**\n             * Draw a label, which is an extended text element with support for border\n             * and background. Highcharts creates a `g` element with a text and a `path`\n             * or `rect` inside, to make it behave somewhat like a HTML div. Border and\n             * background are set through `stroke`, `stroke-width` and `fill` attributes\n             * using the {@link Highcharts.SVGElement#attr|attr} method. To update the\n             * text after render, run `label.attr({ text: 'New text' })`.\n             *\n             * @param  {string} str\n             *         The initial text string or (subset) HTML to render.\n             * @param  {number} x\n             *         The x position of the label's left side.\n             * @param  {number} y\n             *         The y position of the label's top side or baseline, depending on\n             *         the `baseline` parameter.\n             * @param  {String} shape\n             *         The shape of the label's border/background, if any. Defaults to\n             *         `rect`. Other possible values are `callout` or other shapes\n             *         defined in {@link Highcharts.SVGRenderer#symbols}.\n             * @param  {number} anchorX\n             *         In case the `shape` has a pointer, like a flag, this is the\n             *         coordinates it should be pinned to.\n             * @param  {number} anchorY\n             *         In case the `shape` has a pointer, like a flag, this is the\n             *         coordinates it should be pinned to.\n             * @param  {Boolean} baseline\n             *         Whether to position the label relative to the text baseline,\n             *\t       like {@link Highcharts.SVGRenderer#text|renderer.text}, or to the\n             *\t       upper border of the rectangle.\n             * @param  {String} className\n             *         Class name for the group.\n             *\n             * @return {SVGElement}\n             *         The generated label.\n             *\n             * @sample highcharts/members/renderer-label-on-chart/\n             *         A label on the chart\n             */\n            label: function(str, x, y, shape, anchorX, anchorY, useHTML, baseline, className) {\n\n                var renderer = this,\n                    wrapper = renderer.g(className !== 'button' && 'label'),\n                    text = wrapper.text = renderer.text('', 0, 0, useHTML)\n                    .attr({\n                        zIndex: 1\n                    }),\n                    box,\n                    bBox,\n                    alignFactor = 0,\n                    padding = 3,\n                    paddingLeft = 0,\n                    width,\n                    height,\n                    wrapperX,\n                    wrapperY,\n                    textAlign,\n                    deferredAttr = {},\n                    strokeWidth,\n                    baselineOffset,\n                    hasBGImage = /^url\\((.*?)\\)$/.test(shape),\n                    needsBox = hasBGImage,\n                    getCrispAdjust,\n                    updateBoxSize,\n                    updateTextPadding,\n                    boxAttr;\n\n                if (className) {\n                    wrapper.addClass('highcharts-' + className);\n                }\n\n\n                needsBox = hasBGImage;\n                getCrispAdjust = function() {\n                    return (strokeWidth || 0) % 2 / 2;\n                };\n\n\n\n                /**\n                 * This function runs after the label is added to the DOM (when the bounding box is\n                 * available), and after the text of the label is updated to detect the new bounding\n                 * box and reflect it in the border box.\n                 */\n                updateBoxSize = function() {\n                    var style = text.element.style,\n                        crispAdjust,\n                        attribs = {};\n\n                    bBox = (width === undefined || height === undefined || textAlign) && defined(text.textStr) &&\n                        text.getBBox(); //#3295 && 3514 box failure when string equals 0\n                    wrapper.width = (width || bBox.width || 0) + 2 * padding + paddingLeft;\n                    wrapper.height = (height || bBox.height || 0) + 2 * padding;\n\n                    // Update the label-scoped y offset\n                    baselineOffset = padding + renderer.fontMetrics(style && style.fontSize, text).b;\n\n\n                    if (needsBox) {\n\n                        // Create the border box if it is not already present\n                        if (!box) {\n                            wrapper.box = box = renderer.symbols[shape] || hasBGImage ? // Symbol definition exists (#5324)\n                                renderer.symbol(shape) :\n                                renderer.rect();\n\n                            box.addClass(\n                                (className === 'button' ? '' : 'highcharts-label-box') + // Don't use label className for buttons\n                                (className ? ' highcharts-' + className + '-box' : '')\n                            );\n\n                            box.add(wrapper);\n\n                            crispAdjust = getCrispAdjust();\n                            attribs.x = crispAdjust;\n                            attribs.y = (baseline ? -baselineOffset : 0) + crispAdjust;\n                        }\n\n                        // Apply the box attributes\n                        attribs.width = Math.round(wrapper.width);\n                        attribs.height = Math.round(wrapper.height);\n\n                        box.attr(extend(attribs, deferredAttr));\n                        deferredAttr = {};\n                    }\n                };\n\n                /**\n                 * This function runs after setting text or padding, but only if padding is changed\n                 */\n                updateTextPadding = function() {\n                    var textX = paddingLeft + padding,\n                        textY;\n\n                    // determin y based on the baseline\n                    textY = baseline ? 0 : baselineOffset;\n\n                    // compensate for alignment\n                    if (defined(width) && bBox && (textAlign === 'center' || textAlign === 'right')) {\n                        textX += {\n                            center: 0.5,\n                            right: 1\n                        }[textAlign] * (width - bBox.width);\n                    }\n\n                    // update if anything changed\n                    if (textX !== text.x || textY !== text.y) {\n                        text.attr('x', textX);\n                        if (textY !== undefined) {\n                            text.attr('y', textY);\n                        }\n                    }\n\n                    // record current values\n                    text.x = textX;\n                    text.y = textY;\n                };\n\n                /**\n                 * Set a box attribute, or defer it if the box is not yet created\n                 * @param {Object} key\n                 * @param {Object} value\n                 */\n                boxAttr = function(key, value) {\n                    if (box) {\n                        box.attr(key, value);\n                    } else {\n                        deferredAttr[key] = value;\n                    }\n                };\n\n                /**\n                 * After the text element is added, get the desired size of the border box\n                 * and add it before the text in the DOM.\n                 */\n                wrapper.onAdd = function() {\n                    text.add(wrapper);\n                    wrapper.attr({\n                        text: (str || str === 0) ? str : '', // alignment is available now // #3295: 0 not rendered if given as a value\n                        x: x,\n                        y: y\n                    });\n\n                    if (box && defined(anchorX)) {\n                        wrapper.attr({\n                            anchorX: anchorX,\n                            anchorY: anchorY\n                        });\n                    }\n                };\n\n                /*\n                 * Add specific attribute setters.\n                 */\n\n                // only change local variables\n                wrapper.widthSetter = function(value) {\n                    width = H.isNumber(value) ? value : null; // width:auto => null\n                };\n                wrapper.heightSetter = function(value) {\n                    height = value;\n                };\n                wrapper['text-alignSetter'] = function(value) {\n                    textAlign = value;\n                };\n                wrapper.paddingSetter = function(value) {\n                    if (defined(value) && value !== padding) {\n                        padding = wrapper.padding = value;\n                        updateTextPadding();\n                    }\n                };\n                wrapper.paddingLeftSetter = function(value) {\n                    if (defined(value) && value !== paddingLeft) {\n                        paddingLeft = value;\n                        updateTextPadding();\n                    }\n                };\n\n\n                // change local variable and prevent setting attribute on the group\n                wrapper.alignSetter = function(value) {\n                    value = {\n                        left: 0,\n                        center: 0.5,\n                        right: 1\n                    }[value];\n                    if (value !== alignFactor) {\n                        alignFactor = value;\n                        if (bBox) { // Bounding box exists, means we're dynamically changing\n                            wrapper.attr({\n                                x: wrapperX\n                            }); // #5134\n                        }\n                    }\n                };\n\n                // apply these to the box and the text alike\n                wrapper.textSetter = function(value) {\n                    if (value !== undefined) {\n                        text.textSetter(value);\n                    }\n                    updateBoxSize();\n                    updateTextPadding();\n                };\n\n                // apply these to the box but not to the text\n                wrapper['stroke-widthSetter'] = function(value, key) {\n                    if (value) {\n                        needsBox = true;\n                    }\n                    strokeWidth = this['stroke-width'] = value;\n                    boxAttr(key, value);\n                };\n\n                wrapper.strokeSetter = wrapper.fillSetter = wrapper.rSetter = function(value, key) {\n                    if (key !== 'r') {\n                        if (key === 'fill' && value) {\n                            needsBox = true;\n                        }\n                        // for animation getter (#6776)\n                        wrapper[key] = value;\n                    }\n                    boxAttr(key, value);\n                };\n\n                wrapper.anchorXSetter = function(value, key) {\n                    anchorX = wrapper.anchorX = value;\n                    boxAttr(key, Math.round(value) - getCrispAdjust() - wrapperX);\n                };\n                wrapper.anchorYSetter = function(value, key) {\n                    anchorY = wrapper.anchorY = value;\n                    boxAttr(key, value - wrapperY);\n                };\n\n                // rename attributes\n                wrapper.xSetter = function(value) {\n                    wrapper.x = value; // for animation getter\n                    if (alignFactor) {\n                        value -= alignFactor * ((width || bBox.width) + 2 * padding);\n                    }\n                    wrapperX = Math.round(value);\n                    wrapper.attr('translateX', wrapperX);\n                };\n                wrapper.ySetter = function(value) {\n                    wrapperY = wrapper.y = Math.round(value);\n                    wrapper.attr('translateY', wrapperY);\n                };\n\n                // Redirect certain methods to either the box or the text\n                var baseCss = wrapper.css;\n                return extend(wrapper, {\n                    /**\n                     * Pick up some properties and apply them to the text instead of the\n                     * wrapper.\n                     * @ignore\n                     */\n                    css: function(styles) {\n                        if (styles) {\n                            var textStyles = {};\n                            styles = merge(styles); // create a copy to avoid altering the original object (#537)\n                            each(wrapper.textProps, function(prop) {\n                                if (styles[prop] !== undefined) {\n                                    textStyles[prop] = styles[prop];\n                                    delete styles[prop];\n                                }\n                            });\n                            text.css(textStyles);\n                        }\n                        return baseCss.call(wrapper, styles);\n                    },\n                    /**\n                     * Return the bounding box of the box, not the group.\n                     * @ignore\n                     */\n                    getBBox: function() {\n                        return {\n                            width: bBox.width + 2 * padding,\n                            height: bBox.height + 2 * padding,\n                            x: bBox.x - padding,\n                            y: bBox.y - padding\n                        };\n                    },\n\n                    /**\n                     * Apply the shadow to the box.\n                     * @ignore\n                     */\n                    shadow: function(b) {\n                        if (b) {\n                            updateBoxSize();\n                            if (box) {\n                                box.shadow(b);\n                            }\n                        }\n                        return wrapper;\n                    },\n\n                    /**\n                     * Destroy and release memory.\n                     * @ignore\n                     */\n                    destroy: function() {\n\n                        // Added by button implementation\n                        removeEvent(wrapper.element, 'mouseenter');\n                        removeEvent(wrapper.element, 'mouseleave');\n\n                        if (text) {\n                            text = text.destroy();\n                        }\n                        if (box) {\n                            box = box.destroy();\n                        }\n                        // Call base implementation to destroy the rest\n                        SVGElement.prototype.destroy.call(wrapper);\n\n                        // Release local pointers (#1298)\n                        wrapper = renderer = updateBoxSize = updateTextPadding = boxAttr = null;\n                    }\n                });\n            }\n        }); // end SVGRenderer\n\n\n        // general renderer\n        H.Renderer = SVGRenderer;\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        /* eslint max-len: [\"warn\", 80, 4] */\n        var attr = H.attr,\n            createElement = H.createElement,\n            css = H.css,\n            defined = H.defined,\n            each = H.each,\n            extend = H.extend,\n            isFirefox = H.isFirefox,\n            isMS = H.isMS,\n            isWebKit = H.isWebKit,\n            pInt = H.pInt,\n            SVGElement = H.SVGElement,\n            SVGRenderer = H.SVGRenderer,\n            win = H.win,\n            wrap = H.wrap;\n\n        // Extend SvgElement for useHTML option\n        extend(SVGElement.prototype, /** @lends SVGElement.prototype */ {\n            /**\n             * Apply CSS to HTML elements. This is used in text within SVG rendering and\n             * by the VML renderer\n             */\n            htmlCss: function(styles) {\n                var wrapper = this,\n                    element = wrapper.element,\n                    textWidth = styles && element.tagName === 'SPAN' && styles.width;\n\n                if (textWidth) {\n                    delete styles.width;\n                    wrapper.textWidth = textWidth;\n                    wrapper.updateTransform();\n                }\n                if (styles && styles.textOverflow === 'ellipsis') {\n                    styles.whiteSpace = 'nowrap';\n                    styles.overflow = 'hidden';\n                }\n                wrapper.styles = extend(wrapper.styles, styles);\n                css(wrapper.element, styles);\n\n                return wrapper;\n            },\n\n            /**\n             * VML and useHTML method for calculating the bounding box based on offsets\n             * @param {Boolean} refresh Whether to force a fresh value from the DOM or\n             * to use the cached value.\n             *\n             * @return {Object} A hash containing values for x, y, width and height\n             */\n\n            htmlGetBBox: function() {\n                var wrapper = this,\n                    element = wrapper.element;\n\n                // faking getBBox in exported SVG in legacy IE (is this a duplicate of\n                // the fix for #1079?)\n                if (element.nodeName === 'text') {\n                    element.style.position = 'absolute';\n                }\n\n                return {\n                    x: element.offsetLeft,\n                    y: element.offsetTop,\n                    width: element.offsetWidth,\n                    height: element.offsetHeight\n                };\n            },\n\n            /**\n             * VML override private method to update elements based on internal\n             * properties based on SVG transform\n             */\n            htmlUpdateTransform: function() {\n                // aligning non added elements is expensive\n                if (!this.added) {\n                    this.alignOnAdd = true;\n                    return;\n                }\n\n                var wrapper = this,\n                    renderer = wrapper.renderer,\n                    elem = wrapper.element,\n                    translateX = wrapper.translateX || 0,\n                    translateY = wrapper.translateY || 0,\n                    x = wrapper.x || 0,\n                    y = wrapper.y || 0,\n                    align = wrapper.textAlign || 'left',\n                    alignCorrection = {\n                        left: 0,\n                        center: 0.5,\n                        right: 1\n                    }[align],\n                    styles = wrapper.styles;\n\n                // apply translate\n                css(elem, {\n                    marginLeft: translateX,\n                    marginTop: translateY\n                });\n\n\n                if (wrapper.shadows) { // used in labels/tooltip\n                    each(wrapper.shadows, function(shadow) {\n                        css(shadow, {\n                            marginLeft: translateX + 1,\n                            marginTop: translateY + 1\n                        });\n                    });\n                }\n\n\n                // apply inversion\n                if (wrapper.inverted) { // wrapper is a group\n                    each(elem.childNodes, function(child) {\n                        renderer.invertChild(child, elem);\n                    });\n                }\n\n                if (elem.tagName === 'SPAN') {\n\n                    var rotation = wrapper.rotation,\n                        baseline,\n                        textWidth = pInt(wrapper.textWidth),\n                        whiteSpace = styles && styles.whiteSpace,\n                        currentTextTransform = [\n                            rotation,\n                            align,\n                            elem.innerHTML,\n                            wrapper.textWidth,\n                            wrapper.textAlign\n                        ].join(',');\n\n                    // Do the calculations and DOM access only if properties changed\n                    if (currentTextTransform !== wrapper.cTT) {\n\n\n                        baseline = renderer.fontMetrics(elem.style.fontSize).b;\n\n                        // Renderer specific handling of span rotation\n                        if (defined(rotation)) {\n                            wrapper.setSpanRotation(\n                                rotation,\n                                alignCorrection,\n                                baseline\n                            );\n                        }\n\n                        // Reset multiline/ellipsis in order to read width (#4928,\n                        // #5417)\n                        css(elem, {\n                            width: '',\n                            whiteSpace: whiteSpace || 'nowrap'\n                        });\n\n                        // Update textWidth\n                        if (\n                            elem.offsetWidth > textWidth &&\n                            /[ \\-]/.test(elem.textContent || elem.innerText)\n                        ) { // #983, #1254\n                            css(elem, {\n                                width: textWidth + 'px',\n                                display: 'block',\n                                whiteSpace: whiteSpace || 'normal' // #3331\n                            });\n                        }\n\n\n                        wrapper.getSpanCorrection(\n                            elem.offsetWidth,\n                            baseline,\n                            alignCorrection,\n                            rotation,\n                            align\n                        );\n                    }\n\n                    // apply position with correction\n                    css(elem, {\n                        left: (x + (wrapper.xCorr || 0)) + 'px',\n                        top: (y + (wrapper.yCorr || 0)) + 'px'\n                    });\n\n                    // Force reflow in webkit to apply the left and top on useHTML\n                    // element (#1249)\n                    if (isWebKit) {\n                        // Assigned to baseline for lint purpose\n                        baseline = elem.offsetHeight;\n                    }\n\n                    // record current text transform\n                    wrapper.cTT = currentTextTransform;\n                }\n            },\n\n            /**\n             * Set the rotation of an individual HTML span\n             */\n            setSpanRotation: function(rotation, alignCorrection, baseline) {\n                var rotationStyle = {},\n                    cssTransformKey =\n                    isMS ?\n                    '-ms-transform' :\n                    isWebKit ?\n                    '-webkit-transform' :\n                    isFirefox ?\n                    'MozTransform' :\n                    win.opera ?\n                    '-o-transform' :\n                    '';\n\n                rotationStyle[cssTransformKey] = rotationStyle.transform =\n                    'rotate(' + rotation + 'deg)';\n                rotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] =\n                    rotationStyle.transformOrigin =\n                    (alignCorrection * 100) + '% ' + baseline + 'px';\n                css(this.element, rotationStyle);\n            },\n\n            /**\n             * Get the correction in X and Y positioning as the element is rotated.\n             */\n            getSpanCorrection: function(width, baseline, alignCorrection) {\n                this.xCorr = -width * alignCorrection;\n                this.yCorr = -baseline;\n            }\n        });\n\n        // Extend SvgRenderer for useHTML option.\n        extend(SVGRenderer.prototype, /** @lends SVGRenderer.prototype */ {\n            /**\n             * Create HTML text node. This is used by the VML renderer as well as the\n             * SVG renderer through the useHTML option.\n             *\n             * @param {String} str\n             * @param {Number} x\n             * @param {Number} y\n             */\n            html: function(str, x, y) {\n                var wrapper = this.createElement('span'),\n                    element = wrapper.element,\n                    renderer = wrapper.renderer,\n                    isSVG = renderer.isSVG,\n                    addSetters = function(element, style) {\n                        // These properties are set as attributes on the SVG group, and\n                        // as identical CSS properties on the div. (#3542)\n                        each(['opacity', 'visibility'], function(prop) {\n                            wrap(element, prop + 'Setter', function(\n                                proceed,\n                                value,\n                                key,\n                                elem\n                            ) {\n                                proceed.call(this, value, key, elem);\n                                style[key] = value;\n                            });\n                        });\n                    };\n\n                // Text setter\n                wrapper.textSetter = function(value) {\n                    if (value !== element.innerHTML) {\n                        delete this.bBox;\n                    }\n                    element.innerHTML = this.textStr = value;\n                    wrapper.htmlUpdateTransform();\n                };\n\n                // Add setters for the element itself (#4938)\n                if (isSVG) { // #4938, only for HTML within SVG\n                    addSetters(wrapper, wrapper.element.style);\n                }\n\n                // Various setters which rely on update transform\n                wrapper.xSetter =\n                    wrapper.ySetter =\n                    wrapper.alignSetter =\n                    wrapper.rotationSetter =\n                    function(value, key) {\n                        if (key === 'align') {\n                            // Do not overwrite the SVGElement.align method. Same as VML.\n                            key = 'textAlign';\n                        }\n                        wrapper[key] = value;\n                        wrapper.htmlUpdateTransform();\n                    };\n\n                // Set the default attributes\n                wrapper\n                    .attr({\n                        text: str,\n                        x: Math.round(x),\n                        y: Math.round(y)\n                    })\n                    .css({\n\n                        fontFamily: this.style.fontFamily,\n                        fontSize: this.style.fontSize,\n\n                        position: 'absolute'\n                    });\n\n                // Keep the whiteSpace style outside the wrapper.styles collection\n                element.style.whiteSpace = 'nowrap';\n\n                // Use the HTML specific .css method\n                wrapper.css = wrapper.htmlCss;\n\n                // This is specific for HTML within SVG\n                if (isSVG) {\n                    wrapper.add = function(svgGroupWrapper) {\n\n                        var htmlGroup,\n                            container = renderer.box.parentNode,\n                            parentGroup,\n                            parents = [];\n\n                        this.parentGroup = svgGroupWrapper;\n\n                        // Create a mock group to hold the HTML elements\n                        if (svgGroupWrapper) {\n                            htmlGroup = svgGroupWrapper.div;\n                            if (!htmlGroup) {\n\n                                // Read the parent chain into an array and read from top\n                                // down\n                                parentGroup = svgGroupWrapper;\n                                while (parentGroup) {\n\n                                    parents.push(parentGroup);\n\n                                    // Move up to the next parent group\n                                    parentGroup = parentGroup.parentGroup;\n                                }\n\n                                // Ensure dynamically updating position when any parent\n                                // is translated\n                                each(parents.reverse(), function(parentGroup) {\n                                    var htmlGroupStyle,\n                                        cls = attr(parentGroup.element, 'class');\n\n                                    if (cls) {\n                                        cls = {\n                                            className: cls\n                                        };\n                                    } // else null\n\n                                    // Create a HTML div and append it to the parent div\n                                    // to emulate the SVG group structure\n                                    htmlGroup =\n                                        parentGroup.div =\n                                        parentGroup.div || createElement('div', cls, {\n                                            position: 'absolute',\n                                            left: (parentGroup.translateX || 0) + 'px',\n                                            top: (parentGroup.translateY || 0) + 'px',\n                                            display: parentGroup.display,\n                                            opacity: parentGroup.opacity, // #5075\n                                            pointerEvents: (\n                                                parentGroup.styles &&\n                                                parentGroup.styles.pointerEvents\n                                            ) // #5595\n\n                                            // the top group is appended to container\n                                        }, htmlGroup || container);\n\n                                    // Shortcut\n                                    htmlGroupStyle = htmlGroup.style;\n\n                                    // Set listeners to update the HTML div's position\n                                    // whenever the SVG group position is changed.\n                                    extend(parentGroup, {\n                                        classSetter: function(value) {\n                                            this.element.setAttribute('class', value);\n                                            htmlGroup.className = value;\n                                        },\n                                        on: function() {\n                                            if (parents[0].div) { // #6418\n                                                wrapper.on.apply({\n                                                        element: parents[0].div\n                                                    },\n                                                    arguments\n                                                );\n                                            }\n                                            return parentGroup;\n                                        },\n                                        translateXSetter: function(value, key) {\n                                            htmlGroupStyle.left = value + 'px';\n                                            parentGroup[key] = value;\n                                            parentGroup.doTransform = true;\n                                        },\n                                        translateYSetter: function(value, key) {\n                                            htmlGroupStyle.top = value + 'px';\n                                            parentGroup[key] = value;\n                                            parentGroup.doTransform = true;\n                                        }\n                                    });\n                                    addSetters(parentGroup, htmlGroupStyle);\n                                });\n\n                            }\n                        } else {\n                            htmlGroup = container;\n                        }\n\n                        htmlGroup.appendChild(element);\n\n                        // Shared with VML:\n                        wrapper.added = true;\n                        if (wrapper.alignOnAdd) {\n                            wrapper.htmlUpdateTransform();\n                        }\n\n                        return wrapper;\n                    };\n                }\n                return wrapper;\n            }\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n\n        var VMLRenderer,\n            VMLRendererExtension,\n            VMLElement,\n\n            createElement = H.createElement,\n            css = H.css,\n            defined = H.defined,\n            deg2rad = H.deg2rad,\n            discardElement = H.discardElement,\n            doc = H.doc,\n            each = H.each,\n            erase = H.erase,\n            extend = H.extend,\n            extendClass = H.extendClass,\n            isArray = H.isArray,\n            isNumber = H.isNumber,\n            isObject = H.isObject,\n            merge = H.merge,\n            noop = H.noop,\n            pick = H.pick,\n            pInt = H.pInt,\n            svg = H.svg,\n            SVGElement = H.SVGElement,\n            SVGRenderer = H.SVGRenderer,\n            win = H.win;\n\n        /* ****************************************************************************\n         *                                                                            *\n         * START OF INTERNET EXPLORER <= 8 SPECIFIC CODE                              *\n         *                                                                            *\n         * For applications and websites that don't need IE support, like platform    *\n         * targeted mobile apps and web apps, this code can be removed.               *\n         *                                                                            *\n         *****************************************************************************/\n\n        /**\n         * @constructor\n         */\n        if (!svg) {\n\n            /**\n             * The VML element wrapper.\n             */\n            VMLElement = {\n\n                docMode8: doc && doc.documentMode === 8,\n\n                /**\n                 * Initialize a new VML element wrapper. It builds the markup as a string\n                 * to minimize DOM traffic.\n                 * @param {Object} renderer\n                 * @param {Object} nodeName\n                 */\n                init: function(renderer, nodeName) {\n                    var wrapper = this,\n                        markup = ['<', nodeName, ' filled=\"f\" stroked=\"f\"'],\n                        style = ['position: ', 'absolute', ';'],\n                        isDiv = nodeName === 'div';\n\n                    // divs and shapes need size\n                    if (nodeName === 'shape' || isDiv) {\n                        style.push('left:0;top:0;width:1px;height:1px;');\n                    }\n                    style.push('visibility: ', isDiv ? 'hidden' : 'visible');\n\n                    markup.push(' style=\"', style.join(''), '\"/>');\n\n                    // create element with default attributes and style\n                    if (nodeName) {\n                        markup = isDiv || nodeName === 'span' || nodeName === 'img' ?\n                            markup.join('') :\n                            renderer.prepVML(markup);\n                        wrapper.element = createElement(markup);\n                    }\n\n                    wrapper.renderer = renderer;\n                },\n\n                /**\n                 * Add the node to the given parent\n                 * @param {Object} parent\n                 */\n                add: function(parent) {\n                    var wrapper = this,\n                        renderer = wrapper.renderer,\n                        element = wrapper.element,\n                        box = renderer.box,\n                        inverted = parent && parent.inverted,\n\n                        // get the parent node\n                        parentNode = parent ?\n                        parent.element || parent :\n                        box;\n\n                    if (parent) {\n                        this.parentGroup = parent;\n                    }\n\n                    // if the parent group is inverted, apply inversion on all children\n                    if (inverted) { // only on groups\n                        renderer.invertChild(element, parentNode);\n                    }\n\n                    // append it\n                    parentNode.appendChild(element);\n\n                    // align text after adding to be able to read offset\n                    wrapper.added = true;\n                    if (wrapper.alignOnAdd && !wrapper.deferUpdateTransform) {\n                        wrapper.updateTransform();\n                    }\n\n                    // fire an event for internal hooks\n                    if (wrapper.onAdd) {\n                        wrapper.onAdd();\n                    }\n\n                    // IE8 Standards can't set the class name before the element is appended\n                    if (this.className) {\n                        this.attr('class', this.className);\n                    }\n\n                    return wrapper;\n                },\n\n                /**\n                 * VML always uses htmlUpdateTransform\n                 */\n                updateTransform: SVGElement.prototype.htmlUpdateTransform,\n\n                /**\n                 * Set the rotation of a span with oldIE's filter\n                 */\n                setSpanRotation: function() {\n                    // Adjust for alignment and rotation. Rotation of useHTML content is not yet implemented\n                    // but it can probably be implemented for Firefox 3.5+ on user request. FF3.5+\n                    // has support for CSS3 transform. The getBBox method also needs to be updated\n                    // to compensate for the rotation, like it currently does for SVG.\n                    // Test case: http://jsfiddle.net/highcharts/Ybt44/\n\n                    var rotation = this.rotation,\n                        costheta = Math.cos(rotation * deg2rad),\n                        sintheta = Math.sin(rotation * deg2rad);\n\n                    css(this.element, {\n                        filter: rotation ? ['progid:DXImageTransform.Microsoft.Matrix(M11=', costheta,\n                            ', M12=', -sintheta, ', M21=', sintheta, ', M22=', costheta,\n                            ', sizingMethod=\\'auto expand\\')'\n                        ].join('') : 'none'\n                    });\n                },\n\n                /**\n                 * Get the positioning correction for the span after rotating.\n                 */\n                getSpanCorrection: function(width, baseline, alignCorrection, rotation, align) {\n\n                    var costheta = rotation ? Math.cos(rotation * deg2rad) : 1,\n                        sintheta = rotation ? Math.sin(rotation * deg2rad) : 0,\n                        height = pick(this.elemHeight, this.element.offsetHeight),\n                        quad,\n                        nonLeft = align && align !== 'left';\n\n                    // correct x and y\n                    this.xCorr = costheta < 0 && -width;\n                    this.yCorr = sintheta < 0 && -height;\n\n                    // correct for baseline and corners spilling out after rotation\n                    quad = costheta * sintheta < 0;\n                    this.xCorr += sintheta * baseline * (quad ? 1 - alignCorrection : alignCorrection);\n                    this.yCorr -= costheta * baseline * (rotation ? (quad ? alignCorrection : 1 - alignCorrection) : 1);\n                    // correct for the length/height of the text\n                    if (nonLeft) {\n                        this.xCorr -= width * alignCorrection * (costheta < 0 ? -1 : 1);\n                        if (rotation) {\n                            this.yCorr -= height * alignCorrection * (sintheta < 0 ? -1 : 1);\n                        }\n                        css(this.element, {\n                            textAlign: align\n                        });\n                    }\n                },\n\n                /**\n                 * Converts a subset of an SVG path definition to its VML counterpart. Takes an array\n                 * as the parameter and returns a string.\n                 */\n                pathToVML: function(value) {\n                    // convert paths\n                    var i = value.length,\n                        path = [];\n\n                    while (i--) {\n\n                        // Multiply by 10 to allow subpixel precision.\n                        // Substracting half a pixel seems to make the coordinates\n                        // align with SVG, but this hasn't been tested thoroughly\n                        if (isNumber(value[i])) {\n                            path[i] = Math.round(value[i] * 10) - 5;\n                        } else if (value[i] === 'Z') { // close the path\n                            path[i] = 'x';\n                        } else {\n                            path[i] = value[i];\n\n                            // When the start X and end X coordinates of an arc are too close,\n                            // they are rounded to the same value above. In this case, substract or\n                            // add 1 from the end X and Y positions. #186, #760, #1371, #1410.\n                            if (value.isArc && (value[i] === 'wa' || value[i] === 'at')) {\n                                // Start and end X\n                                if (path[i + 5] === path[i + 7]) {\n                                    path[i + 7] += value[i + 7] > value[i + 5] ? 1 : -1;\n                                }\n                                // Start and end Y\n                                if (path[i + 6] === path[i + 8]) {\n                                    path[i + 8] += value[i + 8] > value[i + 6] ? 1 : -1;\n                                }\n                            }\n                        }\n                    }\n\n\n                    // Loop up again to handle path shortcuts (#2132)\n                    /*while (i++ < path.length) {\n                    \tif (path[i] === 'H') { // horizontal line to\n                    \t\tpath[i] = 'L';\n                    \t\tpath.splice(i + 2, 0, path[i - 1]);\n                    \t} else if (path[i] === 'V') { // vertical line to\n                    \t\tpath[i] = 'L';\n                    \t\tpath.splice(i + 1, 0, path[i - 2]);\n                    \t}\n                    }*/\n                    return path.join(' ') || 'x';\n                },\n\n                /**\n                 * Set the element's clipping to a predefined rectangle\n                 *\n                 * @param {String} id The id of the clip rectangle\n                 */\n                clip: function(clipRect) {\n                    var wrapper = this,\n                        clipMembers,\n                        cssRet;\n\n                    if (clipRect) {\n                        clipMembers = clipRect.members;\n                        erase(clipMembers, wrapper); // Ensure unique list of elements (#1258)\n                        clipMembers.push(wrapper);\n                        wrapper.destroyClip = function() {\n                            erase(clipMembers, wrapper);\n                        };\n                        cssRet = clipRect.getCSS(wrapper);\n\n                    } else {\n                        if (wrapper.destroyClip) {\n                            wrapper.destroyClip();\n                        }\n                        cssRet = {\n                            clip: wrapper.docMode8 ? 'inherit' : 'rect(auto)'\n                        }; // #1214\n                    }\n\n                    return wrapper.css(cssRet);\n\n                },\n\n                /**\n                 * Set styles for the element\n                 * @param {Object} styles\n                 */\n                css: SVGElement.prototype.htmlCss,\n\n                /**\n                 * Removes a child either by removeChild or move to garbageBin.\n                 * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.\n                 */\n                safeRemoveChild: function(element) {\n                    // discardElement will detach the node from its parent before attaching it\n                    // to the garbage bin. Therefore it is important that the node is attached and have parent.\n                    if (element.parentNode) {\n                        discardElement(element);\n                    }\n                },\n\n                /**\n                 * Extend element.destroy by removing it from the clip members array\n                 */\n                destroy: function() {\n                    if (this.destroyClip) {\n                        this.destroyClip();\n                    }\n\n                    return SVGElement.prototype.destroy.apply(this);\n                },\n\n                /**\n                 * Add an event listener. VML override for normalizing event parameters.\n                 * @param {String} eventType\n                 * @param {Function} handler\n                 */\n                on: function(eventType, handler) {\n                    // simplest possible event model for internal use\n                    this.element['on' + eventType] = function() {\n                        var evt = win.event;\n                        evt.target = evt.srcElement;\n                        handler(evt);\n                    };\n                    return this;\n                },\n\n                /**\n                 * In stacked columns, cut off the shadows so that they don't overlap\n                 */\n                cutOffPath: function(path, length) {\n\n                    var len;\n\n                    path = path.split(/[ ,]/); // The extra comma tricks the trailing comma remover in \"gulp scripts\" task\n                    len = path.length;\n\n                    if (len === 9 || len === 11) {\n                        path[len - 4] = path[len - 2] = pInt(path[len - 2]) - 10 * length;\n                    }\n                    return path.join(' ');\n                },\n\n                /**\n                 * Apply a drop shadow by copying elements and giving them different strokes\n                 * @param {Boolean|Object} shadowOptions\n                 */\n                shadow: function(shadowOptions, group, cutOff) {\n                    var shadows = [],\n                        i,\n                        element = this.element,\n                        renderer = this.renderer,\n                        shadow,\n                        elemStyle = element.style,\n                        markup,\n                        path = element.path,\n                        strokeWidth,\n                        modifiedPath,\n                        shadowWidth,\n                        shadowElementOpacity;\n\n                    // some times empty paths are not strings\n                    if (path && typeof path.value !== 'string') {\n                        path = 'x';\n                    }\n                    modifiedPath = path;\n\n                    if (shadowOptions) {\n                        shadowWidth = pick(shadowOptions.width, 3);\n                        shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;\n                        for (i = 1; i <= 3; i++) {\n\n                            strokeWidth = (shadowWidth * 2) + 1 - (2 * i);\n\n                            // Cut off shadows for stacked column items\n                            if (cutOff) {\n                                modifiedPath = this.cutOffPath(path.value, strokeWidth + 0.5);\n                            }\n\n                            markup = ['<shape isShadow=\"true\" strokeweight=\"', strokeWidth,\n                                '\" filled=\"false\" path=\"', modifiedPath,\n                                '\" coordsize=\"10 10\" style=\"', element.style.cssText, '\" />'\n                            ];\n\n                            shadow = createElement(renderer.prepVML(markup),\n                                null, {\n                                    left: pInt(elemStyle.left) + pick(shadowOptions.offsetX, 1),\n                                    top: pInt(elemStyle.top) + pick(shadowOptions.offsetY, 1)\n                                }\n                            );\n                            if (cutOff) {\n                                shadow.cutOff = strokeWidth + 1;\n                            }\n\n                            // apply the opacity\n                            markup = [\n                                '<stroke color=\"',\n                                shadowOptions.color || '#000000',\n                                '\" opacity=\"', shadowElementOpacity * i, '\"/>'\n                            ];\n                            createElement(renderer.prepVML(markup), null, null, shadow);\n\n\n                            // insert it\n                            if (group) {\n                                group.element.appendChild(shadow);\n                            } else {\n                                element.parentNode.insertBefore(shadow, element);\n                            }\n\n                            // record it\n                            shadows.push(shadow);\n\n                        }\n\n                        this.shadows = shadows;\n                    }\n                    return this;\n                },\n                updateShadows: noop, // Used in SVG only\n\n                setAttr: function(key, value) {\n                    if (this.docMode8) { // IE8 setAttribute bug\n                        this.element[key] = value;\n                    } else {\n                        this.element.setAttribute(key, value);\n                    }\n                },\n                classSetter: function(value) {\n                    // IE8 Standards mode has problems retrieving the className unless set like this.\n                    // IE8 Standards can't set the class name before the element is appended.\n                    (this.added ? this.element : this).className = value;\n                },\n                dashstyleSetter: function(value, key, element) {\n                    var strokeElem = element.getElementsByTagName('stroke')[0] ||\n                        createElement(this.renderer.prepVML(['<stroke/>']), null, null, element);\n                    strokeElem[key] = value || 'solid';\n                    this[key] = value;\n                    /* because changing stroke-width will change the dash length\n\t\t\t\tand cause an epileptic effect */\n                },\n                dSetter: function(value, key, element) {\n                    var i,\n                        shadows = this.shadows;\n                    value = value || [];\n                    this.d = value.join && value.join(' '); // used in getter for animation\n\n                    element.path = value = this.pathToVML(value);\n\n                    // update shadows\n                    if (shadows) {\n                        i = shadows.length;\n                        while (i--) {\n                            shadows[i].path = shadows[i].cutOff ? this.cutOffPath(value, shadows[i].cutOff) : value;\n                        }\n                    }\n                    this.setAttr(key, value);\n                },\n                fillSetter: function(value, key, element) {\n                    var nodeName = element.nodeName;\n                    if (nodeName === 'SPAN') { // text color\n                        element.style.color = value;\n                    } else if (nodeName !== 'IMG') { // #1336\n                        element.filled = value !== 'none';\n                        this.setAttr('fillcolor', this.renderer.color(value, element, key, this));\n                    }\n                },\n                'fill-opacitySetter': function(value, key, element) {\n                    createElement(\n                        this.renderer.prepVML(['<', key.split('-')[0], ' opacity=\"', value, '\"/>']),\n                        null,\n                        null,\n                        element\n                    );\n                },\n                opacitySetter: noop, // Don't bother - animation is too slow and filters introduce artifacts\n                rotationSetter: function(value, key, element) {\n                    var style = element.style;\n                    this[key] = style[key] = value; // style is for #1873\n\n                    // Correction for the 1x1 size of the shape container. Used in gauge needles.\n                    style.left = -Math.round(Math.sin(value * deg2rad) + 1) + 'px';\n                    style.top = Math.round(Math.cos(value * deg2rad)) + 'px';\n                },\n                strokeSetter: function(value, key, element) {\n                    this.setAttr('strokecolor', this.renderer.color(value, element, key, this));\n                },\n                'stroke-widthSetter': function(value, key, element) {\n                    element.stroked = !!value; // VML \"stroked\" attribute\n                    this[key] = value; // used in getter, issue #113\n                    if (isNumber(value)) {\n                        value += 'px';\n                    }\n                    this.setAttr('strokeweight', value);\n                },\n                titleSetter: function(value, key) {\n                    this.setAttr(key, value);\n                },\n                visibilitySetter: function(value, key, element) {\n\n                    // Handle inherited visibility\n                    if (value === 'inherit') {\n                        value = 'visible';\n                    }\n\n                    // Let the shadow follow the main element\n                    if (this.shadows) {\n                        each(this.shadows, function(shadow) {\n                            shadow.style[key] = value;\n                        });\n                    }\n\n                    // Instead of toggling the visibility CSS property, move the div out of the viewport.\n                    // This works around #61 and #586\n                    if (element.nodeName === 'DIV') {\n                        value = value === 'hidden' ? '-999em' : 0;\n\n                        // In order to redraw, IE7 needs the div to be visible when tucked away\n                        // outside the viewport. So the visibility is actually opposite of\n                        // the expected value. This applies to the tooltip only.\n                        if (!this.docMode8) {\n                            element.style[key] = value ? 'visible' : 'hidden';\n                        }\n                        key = 'top';\n                    }\n                    element.style[key] = value;\n                },\n                xSetter: function(value, key, element) {\n                    this[key] = value; // used in getter\n\n                    if (key === 'x') {\n                        key = 'left';\n                    } else if (key === 'y') {\n                        key = 'top';\n                    }\n                    /* else {\n                    \t\t\t\tvalue = Math.max(0, value); // don't set width or height below zero (#311)\n                    \t\t\t}*/\n\n                    // clipping rectangle special\n                    if (this.updateClipping) {\n                        this[key] = value; // the key is now 'left' or 'top' for 'x' and 'y'\n                        this.updateClipping();\n                    } else {\n                        // normal\n                        element.style[key] = value;\n                    }\n                },\n                zIndexSetter: function(value, key, element) {\n                    element.style[key] = value;\n                }\n            };\n            VMLElement['stroke-opacitySetter'] = VMLElement['fill-opacitySetter'];\n            H.VMLElement = VMLElement = extendClass(SVGElement, VMLElement);\n\n            // Some shared setters\n            VMLElement.prototype.ySetter =\n                VMLElement.prototype.widthSetter =\n                VMLElement.prototype.heightSetter =\n                VMLElement.prototype.xSetter;\n\n\n            /**\n             * The VML renderer\n             */\n            VMLRendererExtension = { // inherit SVGRenderer\n\n                Element: VMLElement,\n                isIE8: win.navigator.userAgent.indexOf('MSIE 8.0') > -1,\n\n\n                /**\n                 * Initialize the VMLRenderer\n                 * @param {Object} container\n                 * @param {Number} width\n                 * @param {Number} height\n                 */\n                init: function(container, width, height) {\n                    var renderer = this,\n                        boxWrapper,\n                        box,\n                        css;\n\n                    renderer.alignedObjects = [];\n\n                    boxWrapper = renderer.createElement('div')\n                        .css({\n                            position: 'relative'\n                        });\n                    box = boxWrapper.element;\n                    container.appendChild(boxWrapper.element);\n\n\n                    // generate the containing box\n                    renderer.isVML = true;\n                    renderer.box = box;\n                    renderer.boxWrapper = boxWrapper;\n                    renderer.gradients = {};\n                    renderer.cache = {}; // Cache for numerical bounding boxes\n                    renderer.cacheKeys = [];\n                    renderer.imgCount = 0;\n\n\n                    renderer.setSize(width, height, false);\n\n                    // The only way to make IE6 and IE7 print is to use a global namespace. However,\n                    // with IE8 the only way to make the dynamic shapes visible in screen and print mode\n                    // seems to be to add the xmlns attribute and the behaviour style inline.\n                    if (!doc.namespaces.hcv) {\n\n                        doc.namespaces.add('hcv', 'urn:schemas-microsoft-com:vml');\n\n                        // Setup default CSS (#2153, #2368, #2384)\n                        css = 'hcv\\\\:fill, hcv\\\\:path, hcv\\\\:shape, hcv\\\\:stroke' +\n                            '{ behavior:url(#default#VML); display: inline-block; } ';\n                        try {\n                            doc.createStyleSheet().cssText = css;\n                        } catch (e) {\n                            doc.styleSheets[0].cssText += css;\n                        }\n\n                    }\n                },\n\n\n                /**\n                 * Detect whether the renderer is hidden. This happens when one of the parent elements\n                 * has display: none\n                 */\n                isHidden: function() {\n                    return !this.box.offsetWidth;\n                },\n\n                /**\n                 * Define a clipping rectangle. In VML it is accomplished by storing the values\n                 * for setting the CSS style to all associated members.\n                 *\n                 * @param {Number} x\n                 * @param {Number} y\n                 * @param {Number} width\n                 * @param {Number} height\n                 */\n                clipRect: function(x, y, width, height) {\n\n                    // create a dummy element\n                    var clipRect = this.createElement(),\n                        isObj = isObject(x);\n\n                    // mimic a rectangle with its style object for automatic updating in attr\n                    return extend(clipRect, {\n                        members: [],\n                        count: 0,\n                        left: (isObj ? x.x : x) + 1,\n                        top: (isObj ? x.y : y) + 1,\n                        width: (isObj ? x.width : width) - 1,\n                        height: (isObj ? x.height : height) - 1,\n                        getCSS: function(wrapper) {\n                            var element = wrapper.element,\n                                nodeName = element.nodeName,\n                                isShape = nodeName === 'shape',\n                                inverted = wrapper.inverted,\n                                rect = this,\n                                top = rect.top - (isShape ? element.offsetTop : 0),\n                                left = rect.left,\n                                right = left + rect.width,\n                                bottom = top + rect.height,\n                                ret = {\n                                    clip: 'rect(' +\n                                        Math.round(inverted ? left : top) + 'px,' +\n                                        Math.round(inverted ? bottom : right) + 'px,' +\n                                        Math.round(inverted ? right : bottom) + 'px,' +\n                                        Math.round(inverted ? top : left) + 'px)'\n                                };\n\n                            // issue 74 workaround\n                            if (!inverted && wrapper.docMode8 && nodeName === 'DIV') {\n                                extend(ret, {\n                                    width: right + 'px',\n                                    height: bottom + 'px'\n                                });\n                            }\n                            return ret;\n                        },\n\n                        // used in attr and animation to update the clipping of all members\n                        updateClipping: function() {\n                            each(clipRect.members, function(member) {\n                                // Member.element is falsy on deleted series, like in\n                                // stock/members/series-remove demo. Should be removed\n                                // from members, but this will do.\n                                if (member.element) {\n                                    member.css(clipRect.getCSS(member));\n                                }\n                            });\n                        }\n                    });\n\n                },\n\n\n                /**\n                 * Take a color and return it if it's a string, make it a gradient if it's a\n                 * gradient configuration object, and apply opacity.\n                 *\n                 * @param {Object} color The color or config object\n                 */\n                color: function(color, elem, prop, wrapper) {\n                    var renderer = this,\n                        colorObject,\n                        regexRgba = /^rgba/,\n                        markup,\n                        fillType,\n                        ret = 'none';\n\n                    // Check for linear or radial gradient\n                    if (color && color.linearGradient) {\n                        fillType = 'gradient';\n                    } else if (color && color.radialGradient) {\n                        fillType = 'pattern';\n                    }\n\n\n                    if (fillType) {\n\n                        var stopColor,\n                            stopOpacity,\n                            gradient = color.linearGradient || color.radialGradient,\n                            x1,\n                            y1,\n                            x2,\n                            y2,\n                            opacity1,\n                            opacity2,\n                            color1,\n                            color2,\n                            fillAttr = '',\n                            stops = color.stops,\n                            firstStop,\n                            lastStop,\n                            colors = [],\n                            addFillNode = function() {\n                                // Add the fill subnode. When colors attribute is used, the meanings of opacity and o:opacity2\n                                // are reversed.\n                                markup = ['<fill colors=\"' + colors.join(',') +\n                                    '\" opacity=\"', opacity2, '\" o:opacity2=\"',\n                                    opacity1, '\" type=\"', fillType, '\" ', fillAttr,\n                                    'focus=\"100%\" method=\"any\" />'\n                                ];\n                                createElement(renderer.prepVML(markup), null, null, elem);\n                            };\n\n                        // Extend from 0 to 1\n                        firstStop = stops[0];\n                        lastStop = stops[stops.length - 1];\n                        if (firstStop[0] > 0) {\n                            stops.unshift([\n                                0,\n                                firstStop[1]\n                            ]);\n                        }\n                        if (lastStop[0] < 1) {\n                            stops.push([\n                                1,\n                                lastStop[1]\n                            ]);\n                        }\n\n                        // Compute the stops\n                        each(stops, function(stop, i) {\n                            if (regexRgba.test(stop[1])) {\n                                colorObject = H.color(stop[1]);\n                                stopColor = colorObject.get('rgb');\n                                stopOpacity = colorObject.get('a');\n                            } else {\n                                stopColor = stop[1];\n                                stopOpacity = 1;\n                            }\n\n                            // Build the color attribute\n                            colors.push((stop[0] * 100) + '% ' + stopColor);\n\n                            // Only start and end opacities are allowed, so we use the first and the last\n                            if (!i) {\n                                opacity1 = stopOpacity;\n                                color2 = stopColor;\n                            } else {\n                                opacity2 = stopOpacity;\n                                color1 = stopColor;\n                            }\n                        });\n\n                        // Apply the gradient to fills only.\n                        if (prop === 'fill') {\n\n                            // Handle linear gradient angle\n                            if (fillType === 'gradient') {\n                                x1 = gradient.x1 || gradient[0] || 0;\n                                y1 = gradient.y1 || gradient[1] || 0;\n                                x2 = gradient.x2 || gradient[2] || 0;\n                                y2 = gradient.y2 || gradient[3] || 0;\n                                fillAttr = 'angle=\"' + (90 - Math.atan(\n                                    (y2 - y1) / // y vector\n                                    (x2 - x1) // x vector\n                                ) * 180 / Math.PI) + '\"';\n\n                                addFillNode();\n\n                                // Radial (circular) gradient\n                            } else {\n\n                                var r = gradient.r,\n                                    sizex = r * 2,\n                                    sizey = r * 2,\n                                    cx = gradient.cx,\n                                    cy = gradient.cy,\n                                    radialReference = elem.radialReference,\n                                    bBox,\n                                    applyRadialGradient = function() {\n                                        if (radialReference) {\n                                            bBox = wrapper.getBBox();\n                                            cx += (radialReference[0] - bBox.x) / bBox.width - 0.5;\n                                            cy += (radialReference[1] - bBox.y) / bBox.height - 0.5;\n                                            sizex *= radialReference[2] / bBox.width;\n                                            sizey *= radialReference[2] / bBox.height;\n                                        }\n                                        fillAttr = 'src=\"' + H.getOptions().global.VMLRadialGradientURL + '\" ' +\n                                            'size=\"' + sizex + ',' + sizey + '\" ' +\n                                            'origin=\"0.5,0.5\" ' +\n                                            'position=\"' + cx + ',' + cy + '\" ' +\n                                            'color2=\"' + color2 + '\" ';\n\n                                        addFillNode();\n                                    };\n\n                                // Apply radial gradient\n                                if (wrapper.added) {\n                                    applyRadialGradient();\n                                } else {\n                                    // We need to know the bounding box to get the size and position right\n                                    wrapper.onAdd = applyRadialGradient;\n                                }\n\n                                // The fill element's color attribute is broken in IE8 standards mode, so we\n                                // need to set the parent shape's fillcolor attribute instead.\n                                ret = color1;\n                            }\n\n                            // Gradients are not supported for VML stroke, return the first color. #722.\n                        } else {\n                            ret = stopColor;\n                        }\n\n                        // If the color is an rgba color, split it and add a fill node\n                        // to hold the opacity component\n                    } else if (regexRgba.test(color) && elem.tagName !== 'IMG') {\n\n                        colorObject = H.color(color);\n\n                        wrapper[prop + '-opacitySetter'](colorObject.get('a'), prop, elem);\n\n                        ret = colorObject.get('rgb');\n\n\n                    } else {\n                        var propNodes = elem.getElementsByTagName(prop); // 'stroke' or 'fill' node\n                        if (propNodes.length) {\n                            propNodes[0].opacity = 1;\n                            propNodes[0].type = 'solid';\n                        }\n                        ret = color;\n                    }\n\n                    return ret;\n                },\n\n                /**\n                 * Take a VML string and prepare it for either IE8 or IE6/IE7.\n                 * @param {Array} markup A string array of the VML markup to prepare\n                 */\n                prepVML: function(markup) {\n                    var vmlStyle = 'display:inline-block;behavior:url(#default#VML);',\n                        isIE8 = this.isIE8;\n\n                    markup = markup.join('');\n\n                    if (isIE8) { // add xmlns and style inline\n                        markup = markup.replace('/>', ' xmlns=\"urn:schemas-microsoft-com:vml\" />');\n                        if (markup.indexOf('style=\"') === -1) {\n                            markup = markup.replace('/>', ' style=\"' + vmlStyle + '\" />');\n                        } else {\n                            markup = markup.replace('style=\"', 'style=\"' + vmlStyle);\n                        }\n\n                    } else { // add namespace\n                        markup = markup.replace('<', '<hcv:');\n                    }\n\n                    return markup;\n                },\n\n                /**\n                 * Create rotated and aligned text\n                 * @param {String} str\n                 * @param {Number} x\n                 * @param {Number} y\n                 */\n                text: SVGRenderer.prototype.html,\n\n                /**\n                 * Create and return a path element\n                 * @param {Array} path\n                 */\n                path: function(path) {\n                    var attr = {\n                        // subpixel precision down to 0.1 (width and height = 1px)\n                        coordsize: '10 10'\n                    };\n                    if (isArray(path)) {\n                        attr.d = path;\n                    } else if (isObject(path)) { // attributes\n                        extend(attr, path);\n                    }\n                    // create the shape\n                    return this.createElement('shape').attr(attr);\n                },\n\n                /**\n                 * Create and return a circle element. In VML circles are implemented as\n                 * shapes, which is faster than v:oval\n                 * @param {Number} x\n                 * @param {Number} y\n                 * @param {Number} r\n                 */\n                circle: function(x, y, r) {\n                    var circle = this.symbol('circle');\n                    if (isObject(x)) {\n                        r = x.r;\n                        y = x.y;\n                        x = x.x;\n                    }\n                    circle.isCircle = true; // Causes x and y to mean center (#1682)\n                    circle.r = r;\n                    return circle.attr({\n                        x: x,\n                        y: y\n                    });\n                },\n\n                /**\n                 * Create a group using an outer div and an inner v:group to allow rotating\n                 * and flipping. A simple v:group would have problems with positioning\n                 * child HTML elements and CSS clip.\n                 *\n                 * @param {String} name The name of the group\n                 */\n                g: function(name) {\n                    var wrapper,\n                        attribs;\n\n                    // set the class name\n                    if (name) {\n                        attribs = {\n                            'className': 'highcharts-' + name,\n                            'class': 'highcharts-' + name\n                        };\n                    }\n\n                    // the div to hold HTML and clipping\n                    wrapper = this.createElement('div').attr(attribs);\n\n                    return wrapper;\n                },\n\n                /**\n                 * VML override to create a regular HTML image\n                 * @param {String} src\n                 * @param {Number} x\n                 * @param {Number} y\n                 * @param {Number} width\n                 * @param {Number} height\n                 */\n                image: function(src, x, y, width, height) {\n                    var obj = this.createElement('img')\n                        .attr({\n                            src: src\n                        });\n\n                    if (arguments.length > 1) {\n                        obj.attr({\n                            x: x,\n                            y: y,\n                            width: width,\n                            height: height\n                        });\n                    }\n                    return obj;\n                },\n\n                /**\n                 * For rectangles, VML uses a shape for rect to overcome bugs and rotation problems\n                 */\n                createElement: function(nodeName) {\n                    return nodeName === 'rect' ?\n                        this.symbol(nodeName) :\n                        SVGRenderer.prototype.createElement.call(this, nodeName);\n                },\n\n                /**\n                 * In the VML renderer, each child of an inverted div (group) is inverted\n                 * @param {Object} element\n                 * @param {Object} parentNode\n                 */\n                invertChild: function(element, parentNode) {\n                    var ren = this,\n                        parentStyle = parentNode.style,\n                        imgStyle = element.tagName === 'IMG' && element.style; // #1111\n\n                    css(element, {\n                        flip: 'x',\n                        left: pInt(parentStyle.width) - (imgStyle ? pInt(imgStyle.top) : 1),\n                        top: pInt(parentStyle.height) - (imgStyle ? pInt(imgStyle.left) : 1),\n                        rotation: -90\n                    });\n\n                    // Recursively invert child elements, needed for nested composite\n                    // shapes like box plots and error bars. #1680, #1806.\n                    each(element.childNodes, function(child) {\n                        ren.invertChild(child, element);\n                    });\n                },\n\n                /**\n                 * Symbol definitions that override the parent SVG renderer's symbols\n                 *\n                 */\n                symbols: {\n                    // VML specific arc function\n                    arc: function(x, y, w, h, options) {\n                        var start = options.start,\n                            end = options.end,\n                            radius = options.r || w || h,\n                            innerRadius = options.innerR,\n                            cosStart = Math.cos(start),\n                            sinStart = Math.sin(start),\n                            cosEnd = Math.cos(end),\n                            sinEnd = Math.sin(end),\n                            ret;\n\n                        if (end - start === 0) { // no angle, don't show it.\n                            return ['x'];\n                        }\n\n                        ret = [\n                            'wa', // clockwise arc to\n                            x - radius, // left\n                            y - radius, // top\n                            x + radius, // right\n                            y + radius, // bottom\n                            x + radius * cosStart, // start x\n                            y + radius * sinStart, // start y\n                            x + radius * cosEnd, // end x\n                            y + radius * sinEnd // end y\n                        ];\n\n                        if (options.open && !innerRadius) {\n                            ret.push(\n                                'e',\n                                'M',\n                                x, // - innerRadius,\n                                y // - innerRadius\n                            );\n                        }\n\n                        ret.push(\n                            'at', // anti clockwise arc to\n                            x - innerRadius, // left\n                            y - innerRadius, // top\n                            x + innerRadius, // right\n                            y + innerRadius, // bottom\n                            x + innerRadius * cosEnd, // start x\n                            y + innerRadius * sinEnd, // start y\n                            x + innerRadius * cosStart, // end x\n                            y + innerRadius * sinStart, // end y\n                            'x', // finish path\n                            'e' // close\n                        );\n\n                        ret.isArc = true;\n                        return ret;\n\n                    },\n                    // Add circle symbol path. This performs significantly faster than v:oval.\n                    circle: function(x, y, w, h, wrapper) {\n\n                        if (wrapper && defined(wrapper.r)) {\n                            w = h = 2 * wrapper.r;\n                        }\n\n                        // Center correction, #1682\n                        if (wrapper && wrapper.isCircle) {\n                            x -= w / 2;\n                            y -= h / 2;\n                        }\n\n                        // Return the path\n                        return [\n                            'wa', // clockwisearcto\n                            x, // left\n                            y, // top\n                            x + w, // right\n                            y + h, // bottom\n                            x + w, // start x\n                            y + h / 2, // start y\n                            x + w, // end x\n                            y + h / 2, // end y\n                            //'x', // finish path\n                            'e' // close\n                        ];\n                    },\n                    /**\n                     * Add rectangle symbol path which eases rotation and omits arcsize problems\n                     * compared to the built-in VML roundrect shape. When borders are not rounded,\n                     * use the simpler square path, else use the callout path without the arrow.\n                     */\n                    rect: function(x, y, w, h, options) {\n                        return SVGRenderer.prototype.symbols[!defined(options) || !options.r ? 'square' : 'callout'].call(0, x, y, w, h, options);\n                    }\n                }\n            };\n            H.VMLRenderer = VMLRenderer = function() {\n                this.init.apply(this, arguments);\n            };\n            VMLRenderer.prototype = merge(SVGRenderer.prototype, VMLRendererExtension);\n\n            // general renderer\n            H.Renderer = VMLRenderer;\n        }\n\n        // This method is used with exporting in old IE, when emulating SVG (see #2314)\n        SVGRenderer.prototype.measureSpanWidth = function(text, styles) {\n            var measuringSpan = doc.createElement('span'),\n                offsetWidth,\n                textNode = doc.createTextNode(text);\n\n            measuringSpan.appendChild(textNode);\n            css(measuringSpan, styles);\n            this.box.appendChild(measuringSpan);\n            offsetWidth = measuringSpan.offsetWidth;\n            discardElement(measuringSpan); // #2463\n            return offsetWidth;\n        };\n\n\n        /* ****************************************************************************\n         *                                                                            *\n         * END OF INTERNET EXPLORER <= 8 SPECIFIC CODE                                *\n         *                                                                            *\n         *****************************************************************************/\n\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var color = H.color,\n            each = H.each,\n            getTZOffset = H.getTZOffset,\n            isTouchDevice = H.isTouchDevice,\n            merge = H.merge,\n            pick = H.pick,\n            svg = H.svg,\n            win = H.win;\n\n        /* ****************************************************************************\n         * Handle the options                                                         *\n         *****************************************************************************/\n        /**\n         * @optionparent\n         */\n        H.defaultOptions = {\n\n\n            /**\n             * An array containing the default colors for the chart's series. When\n             * all colors are used, new colors are pulled from the start again.\n             *\n             * Default colors can also be set on a series or series.type basis,\n             * see [column.colors](#plotOptions.column.colors), [pie.colors](#plotOptions.\n             * pie.colors).\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the colors option doesn't exist. Instead, colors\n             * are defined in CSS and applied either through series or point class\n             * names, or through the [chart.colorCount](#chart.colorCount) option.\n             *\n             *\n             * ### Legacy\n             *\n             * In Highcharts 3.x, the default colors were:\n             *\n             * <pre>colors: ['#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce',\n             *\n             * '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a']</pre>\n             *\n             * In Highcharts 2.x, the default colors were:\n             *\n             * <pre>colors: ['#4572A7', '#AA4643', '#89A54E', '#80699B', '#3D96AE',\n             *\n             *    '#DB843D', '#92A8CD', '#A47D7C', '#B5CA92']</pre>\n             *\n             * @type {Array<Color>}\n             * @sample {highcharts} highcharts/chart/colors/ Assign a global color theme\n             * @default [ \"#7cb5ec\" , \"#434348\" , \"#90ed7d\" , \"#f7a35c\" , \"#8085e9\" ,\n             *          \"#f15c80\" , \"#e4d354\" , \"#2b908f\" , \"#f45b5b\" , \"#91e8e1\"]\n             * @product highcharts highstock highmaps\n             */\n            colors: '#7cb5ec #434348 #90ed7d #f7a35c #8085e9 #f15c80 #e4d354 #2b908f #f45b5b #91e8e1'.split(' '),\n\n\n            /**\n             */\n            symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],\n            lang: {\n\n                /**\n                 * The loading text that appears when the chart is set into the loading\n                 * state following a call to `chart.showLoading`.\n                 *\n                 * @type {String}\n                 * @default Loading...\n                 * @product highcharts highstock highmaps\n                 */\n                loading: 'Loading...',\n\n                /**\n                 * An array containing the months names. Corresponds to the `%B` format\n                 * in `Highcharts.dateFormat()`.\n                 *\n                 * @type {Array<String>}\n                 * @default [ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" ,\n                 *          \"June\" , \"July\" , \"August\" , \"September\" , \"October\" ,\n                 *          \"November\" , \"December\"]\n                 * @product highcharts highstock highmaps\n                 */\n                months: [\n                    'January', 'February', 'March', 'April', 'May', 'June', 'July',\n                    'August', 'September', 'October', 'November', 'December'\n                ],\n\n                /**\n                 * An array containing the months names in abbreviated form. Corresponds\n                 * to the `%b` format in `Highcharts.dateFormat()`.\n                 *\n                 * @type {Array<String>}\n                 * @default [ \"Jan\" , \"Feb\" , \"Mar\" , \"Apr\" , \"May\" , \"Jun\" ,\n                 *          \"Jul\" , \"Aug\" , \"Sep\" , \"Oct\" , \"Nov\" , \"Dec\"]\n                 */\n                shortMonths: [\n                    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n                    'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n                ],\n\n                /**\n                 * An array containing the weekday names.\n                 *\n                 * @type {Array<String>}\n                 * @default [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n                 *          \"Friday\", \"Saturday\"]\n                 * @product highcharts highstock highmaps\n                 */\n                weekdays: [\n                    'Sunday', 'Monday', 'Tuesday', 'Wednesday',\n                    'Thursday', 'Friday', 'Saturday'\n                ],\n                // invalidDate: '',\n\n                /**\n                 * The default decimal point used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments.\n                 *\n                 * @type {String}\n                 * @default .\n                 * @since 1.2.2\n                 * @product highcharts highstock highmaps\n                 */\n                decimalPoint: '.',\n\n                /**\n                 * [Metric prefixes](http://en.wikipedia.org/wiki/Metric_prefix) used\n                 * to shorten high numbers in axis labels. Replacing any of the positions\n                 * with `null` causes the full number to be written. Setting `numericSymbols`\n                 * to `null` disables shortening altogether.\n                 *\n                 * @type {Array<String>}\n                 * @sample {highcharts} highcharts/lang/numericsymbols/ Replacing the symbols with text\n                 * @sample {highstock} highcharts/lang/numericsymbols/ Replacing the symbols with text\n                 * @default [ \"k\" , \"M\" , \"G\" , \"T\" , \"P\" , \"E\"]\n                 * @since 2.3.0\n                 * @product highcharts highstock highmaps\n                 */\n                numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'], // SI prefixes used in axis labels\n\n                /**\n                 * The text for the label appearing when a chart is zoomed.\n                 *\n                 * @type {String}\n                 * @default Reset zoom\n                 * @since 1.2.4\n                 * @product highcharts highstock highmaps\n                 */\n                resetZoom: 'Reset zoom',\n\n                /**\n                 * The tooltip title for the label appearing when a chart is zoomed.\n                 *\n                 * @type {String}\n                 * @default Reset zoom level 1:1\n                 * @since 1.2.4\n                 * @product highcharts highstock highmaps\n                 */\n                resetZoomTitle: 'Reset zoom level 1:1',\n\n                /**\n                 * The default thousands separator used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Since\n                 * Highcharts 4.1 it defaults to a single space character, which is\n                 * compatible with ISO and works across Anglo-American and continental\n                 * European languages.\n                 *\n                 * The default is a single space.\n                 *\n                 * @type {String}\n                 * @default\n                 * @since 1.2.2\n                 * @product highcharts highstock highmaps\n                 */\n                thousandsSep: ' '\n            },\n\n            /**\n             * Global options that don't apply to each chart. These options, like\n             * the `lang` options, must be set using the `Highcharts.setOptions`\n             * method.\n             *\n             * <pre>Highcharts.setOptions({\n             * global: {\n             * useUTC: false\n             * }\n             * });</pre>\n             *\n             * @product highcharts highstock highmaps\n             */\n            global: {\n\n                /**\n                 * Whether to use UTC time for axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`. Advantages of using UTC\n                 * is that the time displays equally regardless of the user agent's\n                 * time zone settings. Local time can be used when the data is loaded\n                 * in real time or when correct Daylight Saving Time transitions are\n                 * required.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/global/useutc-true/ True by default\n                 * @sample {highcharts} highcharts/global/useutc-false/ False\n                 * @default true\n                 * @product highcharts highstock highmaps\n                 */\n                useUTC: true,\n                //timezoneOffset: 0,\n\n\n                /**\n                 * Path to the pattern image required by VML browsers in order to\n                 * draw radial gradients.\n                 *\n                 * @type {String}\n                 * @default {highcharts} http://code.highcharts.com/{version}/gfx/vml-radial-gradient.png\n                 * @default {highstock} http://code.highcharts.com/highstock/{version}/gfx/vml-radial-gradient.png\n                 * @default {highmaps} http://code.highcharts.com/{version}/gfx/vml-radial-gradient.png\n                 * @since 2.3.0\n                 * @product highcharts highstock highmaps\n                 */\n                VMLRadialGradientURL: 'http://code.highcharts.com/5.0.14/gfx/vml-radial-gradient.png'\n\n            },\n            chart: {\n\n                /**\n                 * When using multiple axis, the ticks of two or more opposite axes\n                 * will automatically be aligned by adding ticks to the axis or axes\n                 * with the least ticks, as if `tickAmount` were specified.\n                 *\n                 * This can be prevented by setting `alignTicks` to false. If the grid\n                 * lines look messy, it's a good idea to hide them for the secondary\n                 * axis by setting `gridLineWidth` to 0.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/alignticks-true/ True by default\n                 * @sample {highcharts} highcharts/chart/alignticks-false/ False\n                 * @sample {highstock} stock/chart/alignticks-true/\n                 *         True by default\n                 * @sample {highstock} stock/chart/alignticks-false/\n                 *         False\n                 * @default true\n                 * @product highcharts highstock\n                 * @apioption chart.alignTicks\n                 */\n\n\n                /**\n                 * Set the overall animation for all chart updating. Animation can be\n                 * disabled throughout the chart by setting it to false here. It can\n                 * be overridden for each individual API method as a function parameter.\n                 * The only animation not affected by this option is the initial series\n                 * animation, see [plotOptions.series.animation](#plotOptions.series.\n                 * animation).\n                 *\n                 * The animation can either be set as a boolean or a configuration\n                 * object. If `true`, it will use the 'swing' jQuery easing and a\n                 * duration of 500 ms. If used as a configuration object, the following\n                 * properties are supported:\n                 *\n                 * <dl>\n                 *\n                 * <dt>duration</dt>\n                 *\n                 * <dd>The duration of the animation in milliseconds.</dd>\n                 *\n                 * <dt>easing</dt>\n                 *\n                 * <dd>A string reference to an easing function set on the `Math` object.\n                 * See [the easing demo](http://jsfiddle.net/gh/get/library/pure/\n                 * highcharts/highcharts/tree/master/samples/highcharts/plotoptions/\n                 * series-animation-easing/).</dd>\n                 *\n                 * </dl>\n                 *\n                 * @type {Boolean|Object}\n                 * @sample {highcharts} highcharts/chart/animation-none/\n                 *         Updating with no animation\n                 * @sample {highcharts} highcharts/chart/animation-duration/\n                 *         With a longer duration\n                 * @sample {highcharts} highcharts/chart/animation-easing/\n                 *         With a jQuery UI easing\n                 * @sample {highmaps} maps/chart/animation-none/\n                 *         Updating with no animation\n                 * @sample {highmaps} maps/chart/animation-duration/\n                 *         With a longer duration\n                 * @default true\n                 * @apioption chart.animation\n                 */\n\n                /**\n                 * A CSS class name to apply to the charts container `div`, allowing\n                 * unique CSS styling for each chart.\n                 *\n                 * @type {String}\n                 * @apioption chart.className\n                 */\n\n                /**\n                 * Event listeners for the chart.\n                 *\n                 * @apioption chart.events\n                 */\n\n                /**\n                 * Fires when a series is added to the chart after load time, using\n                 * the `addSeries` method. One parameter, `event`, is passed to the\n                 * function, containing common event information.\n                 * Through `event.options` you can access the series options that was\n                 * passed to the `addSeries` method. Returning false prevents the series\n                 * from being added.\n                 *\n                 * @type {Function}\n                 * @context Chart\n                 * @sample {highcharts} highcharts/chart/events-addseries/ Alert on add series\n                 * @sample {highstock} stock/chart/events-addseries/ Alert on add series\n                 * @since 1.2.0\n                 * @apioption chart.events.addSeries\n                 */\n\n                /**\n                 * Fires when clicking on the plot background. One parameter, `event`,\n                 * is passed to the function, containing common event information.\n                 *\n                 * Information on the clicked spot can be found through `event.xAxis`\n                 * and `event.yAxis`, which are arrays containing the axes of each dimension\n                 * and each axis' value at the clicked spot. The primary axes are `event.\n                 * xAxis[0]` and `event.yAxis[0]`. Remember the unit of a datetime axis\n                 * is milliseconds since 1970-01-01 00:00:00.\n                 *\n                 * <pre>click: function(e) {\n                 * console.log(\n                 * Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value),\n                 * e.yAxis[0].value\n                 * )\n                 * }</pre>\n                 *\n                 * @type {Function}\n                 * @context Chart\n                 * @sample {highcharts} highcharts/chart/events-click/\n                 *         Alert coordinates on click\n                 * @sample {highcharts} highcharts/chart/events-container/\n                 *         Alternatively, attach event to container\n                 * @sample {highstock} stock/chart/events-click/\n                 *         Alert coordinates on click\n                 * @sample {highstock} highcharts/chart/events-container/\n                 *         Alternatively, attach event to container\n                 * @sample {highmaps} maps/chart/events-click/\n                 *         Record coordinates on click\n                 * @sample {highmaps} highcharts/chart/events-container/\n                 *         Alternatively, attach event to container\n                 * @since 1.2.0\n                 * @apioption chart.events.click\n                 */\n\n\n                /**\n                 * Fires when the chart is finished loading. Since v4.2.2, it also waits\n                 * for images to be loaded, for example from point markers. One parameter,\n                 * `event`, is passed to the function, containing common event information.\n                 *\n                 * There is also a second parameter to the chart constructor where a\n                 * callback function can be passed to be executed on chart.load.\n                 *\n                 * @type {Function}\n                 * @context Chart\n                 * @sample {highcharts} highcharts/chart/events-load/\n                 *         Alert on chart load\n                 * @sample {highstock} stock/chart/events-load/\n                 *         Alert on chart load\n                 * @sample {highmaps} maps/chart/events-load/\n                 *         Add series on chart load\n                 * @apioption chart.events.load\n                 */\n\n                /**\n                 * Fires when the chart is redrawn, either after a call to chart.redraw()\n                 * or after an axis, series or point is modified with the `redraw` option\n                 * set to true. One parameter, `event`, is passed to the function, containing common event information.\n                 *\n                 * @type {Function}\n                 * @context Chart\n                 * @sample {highcharts} highcharts/chart/events-redraw/\n                 *         Alert on chart redraw\n                 * @sample {highstock} stock/chart/events-redraw/\n                 *         Alert on chart redraw when adding a series or moving the\n                 *         zoomed range\n                 * @sample {highmaps} maps/chart/events-redraw/\n                 *         Set subtitle on chart redraw\n                 * @since 1.2.0\n                 * @apioption chart.events.redraw\n                 */\n\n                /**\n                 * Fires after initial load of the chart (directly after the `load`\n                 * event), and after each redraw (directly after the `redraw` event).\n                 *\n                 * @type {Function}\n                 * @context Chart\n                 * @since 5.0.7\n                 * @apioption chart.events.render\n                 */\n\n                /**\n                 * Fires when an area of the chart has been selected. Selection is enabled\n                 * by setting the chart's zoomType. One parameter, `event`, is passed\n                 * to the function, containing common event information. The default action for the selection event is to\n                 * zoom the chart to the selected area. It can be prevented by calling\n                 * `event.preventDefault()`.\n                 *\n                 * Information on the selected area can be found through `event.xAxis`\n                 * and `event.yAxis`, which are arrays containing the axes of each dimension\n                 * and each axis' min and max values. The primary axes are `event.xAxis[0]`\n                 * and `event.yAxis[0]`. Remember the unit of a datetime axis is milliseconds\n                 * since 1970-01-01 00:00:00.\n                 *\n                 * <pre>selection: function(event) {\n                 * // log the min and max of the primary, datetime x-axis\n                 * console.log(\n                 * Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', event.xAxis[0].min),\n                 *\n                 * Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', event.xAxis[0].max)\n                 * );\n                 * // log the min and max of the y axis\n                 * console.log(event.yAxis[0].min, event.yAxis[0].max);\n                 * }</pre>\n                 *\n                 * @type {Function}\n                 * @sample {highcharts} highcharts/chart/events-selection/\n                 *         Report on selection and reset\n                 * @sample {highcharts} highcharts/chart/events-selection-points/\n                 *         Select a range of points through a drag selection\n                 * @sample {highstock} stock/chart/events-selection/\n                 *         Report on selection and reset\n                 * @sample {highstock} highcharts/chart/events-selection-points/\n                 *         Select a range of points through a drag selection (Highcharts)\n                 * @apioption chart.events.selection\n                 */\n\n                /**\n                 * The margin between the outer edge of the chart and the plot area.\n                 * The numbers in the array designate top, right, bottom and left\n                 * respectively. Use the options `marginTop`, `marginRight`,\n                 * `marginBottom` and `marginLeft` for shorthand setting of one option.\n                 *\n                 * By default there is no margin. The actual space is dynamically calculated\n                 * from the offset of axis labels, axis title, title, subtitle and legend\n                 * in addition to the `spacingTop`, `spacingRight`, `spacingBottom`\n                 * and `spacingLeft` options.\n                 *\n                 * @type {Array}\n                 * @sample {highcharts} highcharts/chart/margins-zero/\n                 *         Zero margins\n                 * @sample {highstock} stock/chart/margin-zero/\n                 *         Zero margins\n                 *\n                 * @defaults {all} null\n                 * @apioption chart.margin\n                 */\n\n                /**\n                 * The margin between the bottom outer edge of the chart and the plot\n                 * area. Use this to set a fixed pixel value for the margin as opposed\n                 * to the default dynamic margin. See also `spacingBottom`.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/marginbottom/\n                 *         100px bottom margin\n                 * @sample {highstock} stock/chart/marginbottom/\n                 *         100px bottom margin\n                 * @sample {highmaps} maps/chart/margin/\n                 *         100px margins\n                 * @since 2.0\n                 * @apioption chart.marginBottom\n                 */\n\n                /**\n                 * The margin between the left outer edge of the chart and the plot\n                 * area. Use this to set a fixed pixel value for the margin as opposed\n                 * to the default dynamic margin. See also `spacingLeft`.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/marginleft/\n                 *         150px left margin\n                 * @sample {highstock} stock/chart/marginleft/\n                 *         150px left margin\n                 * @sample {highmaps} maps/chart/margin/\n                 *         100px margins\n                 * @default null\n                 * @since 2.0\n                 * @apioption chart.marginLeft\n                 */\n\n                /**\n                 * The margin between the right outer edge of the chart and the plot\n                 * area. Use this to set a fixed pixel value for the margin as opposed\n                 * to the default dynamic margin. See also `spacingRight`.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/marginright/\n                 *         100px right margin\n                 * @sample {highstock} stock/chart/marginright/\n                 *         100px right margin\n                 * @sample {highmaps} maps/chart/margin/\n                 *         100px margins\n                 * @default null\n                 * @since 2.0\n                 * @apioption chart.marginRight\n                 */\n\n                /**\n                 * The margin between the top outer edge of the chart and the plot area.\n                 * Use this to set a fixed pixel value for the margin as opposed to\n                 * the default dynamic margin. See also `spacingTop`.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/margintop/ 100px top margin\n                 * @sample {highstock} stock/chart/margintop/\n                 *         100px top margin\n                 * @sample {highmaps} maps/chart/margin/\n                 *         100px margins\n                 * @default null\n                 * @since 2.0\n                 * @apioption chart.marginTop\n                 */\n\n                /**\n                 * Allows setting a key to switch between zooming and panning. Can be\n                 * one of `alt`, `ctrl`, `meta` (the command key on Mac and Windows\n                 * key on Windows) or `shift`. The keys are mapped directly to the key\n                 * properties of the click event argument (`event.altKey`, `event.ctrlKey`,\n                 * `event.metaKey` and `event.shiftKey`).\n                 *\n                 * @validvalue [null, \"alt\", \"ctrl\", \"meta\", \"shift\"]\n                 * @type {String}\n                 * @since 4.0.3\n                 * @product highcharts\n                 * @apioption chart.panKey\n                 */\n\n                /**\n                 * Allow panning in a chart. Best used with [panKey](#chart.panKey)\n                 * to combine zooming and panning.\n                 *\n                 * On touch devices, when the [tooltip.followTouchMove](#tooltip.followTouchMove)\n                 * option is `true` (default), panning requires two fingers. To allow\n                 * panning with one finger, set `followTouchMove` to `false`.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/pankey/ Zooming and panning\n                 * @default {highcharts} false\n                 * @default {highstock} true\n                 * @since 4.0.3\n                 * @product highcharts highstock\n                 * @apioption chart.panning\n                 */\n\n\n                /**\n                 * Equivalent to [zoomType](#chart.zoomType), but for multitouch gestures\n                 * only. By default, the `pinchType` is the same as the `zoomType` setting.\n                 * However, pinching can be enabled separately in some cases, for example\n                 * in stock charts where a mouse drag pans the chart, while pinching\n                 * is enabled. When [tooltip.followTouchMove](#tooltip.followTouchMove)\n                 * is true, pinchType only applies to two-finger touches.\n                 *\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @type {String}\n                 * @default {highcharts} null\n                 * @default {highstock} x\n                 * @since 3.0\n                 * @product highcharts highstock\n                 * @apioption chart.pinchType\n                 */\n\n                /**\n                 * The corner radius of the outer chart border.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/borderradius/ 20px radius\n                 * @sample {highstock} stock/chart/border/ 10px radius\n                 * @sample {highmaps} maps/chart/border/ Border options\n                 * @default 0\n                 * @product highcharts highstock highmaps\n                 */\n                borderRadius: 0,\n\n\n                /**\n                 * Alias of `type`.\n                 *\n                 * @validvalue [\"line\", \"spline\", \"column\", \"area\", \"areaspline\", \"pie\"]\n                 * @type {String}\n                 * @deprecated\n                 * @sample {highcharts} highcharts/chart/defaultseriestype/ Bar\n                 * @default line\n                 * @product highcharts\n                 */\n                defaultSeriesType: 'line',\n\n                /**\n                 * If true, the axes will scale to the remaining visible series once\n                 * one series is hidden. If false, hiding and showing a series will\n                 * not affect the axes or the other series. For stacks, once one series\n                 * within the stack is hidden, the rest of the stack will close in\n                 * around it even if the axis is not affected.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/ignorehiddenseries-true/\n                 *         True by default\n                 * @sample {highcharts} highcharts/chart/ignorehiddenseries-false/\n                 *         False\n                 * @sample {highcharts} highcharts/chart/ignorehiddenseries-true-stacked/\n                 *         True with stack\n                 * @sample {highstock} stock/chart/ignorehiddenseries-true/\n                 *         True by default\n                 * @sample {highstock} stock/chart/ignorehiddenseries-false/\n                 *         False\n                 * @default true\n                 * @since 1.2.0\n                 * @product highcharts highstock\n                 */\n                ignoreHiddenSeries: true,\n\n\n                /**\n                 * Whether to invert the axes so that the x axis is vertical and y axis\n                 * is horizontal. When `true`, the x axis is [reversed](#xAxis.reversed)\n                 * by default.\n                 *\n                 * @productdesc {highcharts}\n                 * If a bar series is present in the chart, it will be inverted\n                 * automatically. Inverting the chart doesn't have an effect if there\n                 * are no cartesian series in the chart, or if the chart is\n                 * [polar](#chart.polar).\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/inverted/\n                 *         Inverted line\n                 * @sample {highstock} stock/navigator/inverted/\n                 *         Inverted stock chart\n                 * @default false\n                 * @product highcharts highstock\n                 * @apioption chart.inverted\n                 */\n\n                /**\n                 * The distance between the outer edge of the chart and the content,\n                 * like title or legend, or axis title and labels if present. The\n                 * numbers in the array designate top, right, bottom and left respectively.\n                 * Use the options spacingTop, spacingRight, spacingBottom and spacingLeft\n                 * options for shorthand setting of one option.\n                 *\n                 * @type {Array<Number>}\n                 * @see [chart.margin](#chart.margin)\n                 * @default [10, 10, 15, 10]\n                 * @since 3.0.6\n                 * @product highcharts highstock highmaps\n                 */\n                spacing: [10, 10, 15, 10],\n\n                /**\n                 * The button that appears after a selection zoom, allowing the user\n                 * to reset zoom.\n                 *\n                 * @product highcharts highstock highmaps\n                 */\n                resetZoomButton: {\n\n                    /**\n                     * A collection of attributes for the button. The object takes SVG\n                     * attributes like `fill`, `stroke`, `stroke-width` or `r`, the border\n                     * radius. The theme also supports `style`, a collection of CSS properties\n                     * for the text. Equivalent attributes for the hover state are given\n                     * in `theme.states.hover`.\n                     *\n                     * @type {Object}\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-theme/ Theming the button\n                     * @sample {highstock} highcharts/chart/resetzoombutton-theme/ Theming the button\n                     * @since 2.2\n                     * @product highcharts highstock highmaps\n                     */\n                    theme: {\n\n                        /**\n                         */\n                        zIndex: 20\n                    },\n\n                    /**\n                     * The position of the button.\n                     *\n                     * @type {Object}\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @since 2.2\n                     * @product highcharts highstock highmaps\n                     */\n                    position: {\n\n                        /**\n                         * The horizontal alignment of the button.\n                         *\n                         * @type {String}\n                         */\n                        align: 'right',\n\n                        /**\n                         * The horizontal offset of the button.\n                         *\n                         * @type {Number}\n                         */\n                        x: -10,\n\n                        /**\n                         * The vertical alignment of the button.\n                         *\n                         * @validvalue [\"top\", \"middle\", \"bottom\"]\n                         * @type {String}\n                         * @default top\n                         * @apioption chart.resetZoomButton.position.verticalAlign\n                         */\n\n                        /**\n                         * The vertical offset of the button.\n                         *\n                         * @type {Number}\n                         */\n                        y: 10\n                    }\n\n                    /**\n                     * What frame the button should be placed related to. Can be either\n                     * `plot` or `chart`\n                     *\n                     * @validvalue [\"plot\", \"chart\"]\n                     * @type {String}\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     * @default plot\n                     * @since 2.2\n                     * @apioption chart.resetZoomButton.relativeTo\n                     */\n                },\n\n                /**\n                 * An explicit width for the chart. By default (when `null`) the width\n                 * is calculated from the offset width of the containing element.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/width/ 800px wide\n                 * @sample {highstock} stock/chart/width/ 800px wide\n                 * @sample {highmaps} maps/chart/size/ Chart with explicit size\n                 * @default null\n                 * @product highcharts highstock highmaps\n                 */\n                width: null,\n\n                /**\n                 * An explicit height for the chart. If a _number_, the height is\n                 * given in pixels. If given a _percentage string_ (for example `'56%'`),\n                 * the height is given as the percentage of the actual chart width.\n                 * This allows for preserving the aspect ratio across responsive\n                 * sizes.\n                 *\n                 * By default (when `null`) the height is calculated from the offset\n                 * height of the containing element, or 400 pixels if the containing\n                 * element's height is 0.\n                 *\n                 * @type {Number|String}\n                 * @sample {highcharts} highcharts/chart/height/\n                 *         500px height\n                 * @sample {highstock} stock/chart/height/\n                 *         300px height\n                 * @sample {highmaps} maps/chart/size/\n                 *         Chart with explicit size\n                 * @sample highcharts/chart/height-percent/\n                 *         Highcharts with percentage height\n                 * @default null\n                 * @product highcharts highstock highmaps\n                 */\n                height: null,\n\n\n\n                /**\n                 * The color of the outer chart border.\n                 *\n                 * @type {Color}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke is set with the `.highcharts-background`\n                 * class.\n                 * @sample {highcharts} highcharts/chart/bordercolor/ Brown border\n                 * @sample {highstock} stock/chart/border/ Brown border\n                 * @sample {highmaps} maps/chart/border/ Border options\n                 * @default #335cad\n                 * @product highcharts highstock highmaps\n                 */\n                borderColor: '#335cad',\n\n                /**\n                 * The pixel width of the outer chart border.\n                 *\n                 * @type {Number}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke is set with the `.highcharts-background`\n                 * class.\n                 * @sample {highcharts} highcharts/chart/borderwidth/ 5px border\n                 * @sample {highstock} stock/chart/border/\n                 *         2px border\n                 * @sample {highmaps} maps/chart/border/\n                 *         Border options\n                 * @default 0\n                 * @apioption chart.borderWidth\n                 */\n\n                //style: {\n                //\tfontFamily: '\"Lucida Grande\", \"Lucida Sans Unicode\", Verdana, Arial, Helvetica, sans-serif', // default font\n                //\tfontSize: '12px'\n                //},\n\n                /**\n                 * The background color or gradient for the outer chart area.\n                 *\n                 * @type {Color}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the background is set with the `.highcharts-\n                 * background` class.\n                 * @sample {highcharts} highcharts/chart/backgroundcolor-color/ Color\n                 * @sample {highcharts} highcharts/chart/backgroundcolor-gradient/ Gradient\n                 * @sample {highstock} stock/chart/backgroundcolor-color/\n                 *         Color\n                 * @sample {highstock} stock/chart/backgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highmaps} maps/chart/backgroundcolor-color/\n                 *         Color\n                 * @sample {highmaps} maps/chart/backgroundcolor-gradient/\n                 *         Gradient\n                 * @default #FFFFFF\n                 * @product highcharts highstock highmaps\n                 */\n                backgroundColor: '#ffffff',\n\n                /**\n                 * The background color or gradient for the plot area.\n                 *\n                 * @type {Color}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the plot background is set with the `.highcharts-\n                 * plot-background` class.\n                 * @sample {highcharts} highcharts/chart/plotbackgroundcolor-color/\n                 *         Color\n                 * @sample {highcharts} highcharts/chart/plotbackgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highstock} stock/chart/plotbackgroundcolor-color/\n                 *         Color\n                 * @sample {highstock} stock/chart/plotbackgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highmaps} maps/chart/plotbackgroundcolor-color/\n                 *         Color\n                 * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/\n                 *         Gradient\n                 * @default null\n                 * @apioption chart.plotBackgroundColor\n                 */\n\n\n                /**\n                 * The URL for an image to use as the plot background. To set an image\n                 * as the background for the entire chart, set a CSS background image\n                 * to the container element. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export server.\n                 *\n                 * @type {String}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), a plot background image can be set with the\n                 * `.highcharts-plot-background` class and a [custom pattern](http://www.\n                 * highcharts.com/docs/chart-design-and-style/gradients-shadows-and-\n                 * patterns).\n                 * @sample {highcharts} highcharts/chart/plotbackgroundimage/ Skies\n                 * @sample {highstock} stock/chart/plotbackgroundimage/ Skies\n                 * @default null\n                 * @apioption chart.plotBackgroundImage\n                 */\n\n                /**\n                 * The color of the inner chart or plot area border.\n                 *\n                 * @type {Color}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), a plot border stroke can be set with the `.\n                 * highcharts-plot-border` class.\n                 * @sample {highcharts} highcharts/chart/plotbordercolor/ Blue border\n                 * @sample {highstock} stock/chart/plotborder/ Blue border\n                 * @sample {highmaps} maps/chart/plotborder/ Plot border options\n                 * @default #cccccc\n                 * @product highcharts highstock highmaps\n                 */\n                plotBorderColor: '#cccccc'\n\n\n                /**\n                 * The pixel width of the plot area border.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/plotborderwidth/ 1px border\n                 * @sample {highstock} stock/chart/plotborder/\n                 *         2px border\n                 * @sample {highmaps} maps/chart/plotborder/\n                 *         Plot border options\n                 * @default 0\n                 * @apioption chart.plotBorderWidth\n                 */\n\n                /**\n                 * Whether to apply a drop shadow to the plot area. Requires that\n                 * plotBackgroundColor be set. The shadow can be an object configuration\n                 * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n                 *\n                 * @type {Boolean|Object}\n                 * @sample {highcharts} highcharts/chart/plotshadow/ Plot shadow\n                 * @sample {highstock} stock/chart/plotshadow/\n                 *         Plot shadow\n                 * @sample {highmaps} maps/chart/plotborder/\n                 *         Plot border options\n                 * @default false\n                 * @apioption chart.plotShadow\n                 */\n\n                /**\n                 * When true, cartesian charts like line, spline, area and column are\n                 * transformed into the polar coordinate system. Requires `highcharts-\n                 * more.js`.\n                 *\n                 * @type {Boolean}\n                 * @default false\n                 * @since 2.3.0\n                 * @product highcharts\n                 * @apioption chart.polar\n                 */\n\n                /**\n                 * Whether to reflow the chart to fit the width of the container div\n                 * on resizing the window.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/reflow-true/ True by default\n                 * @sample {highcharts} highcharts/chart/reflow-false/ False\n                 * @sample {highstock} stock/chart/reflow-true/\n                 *         True by default\n                 * @sample {highstock} stock/chart/reflow-false/\n                 *         False\n                 * @sample {highmaps} maps/chart/reflow-true/\n                 *         True by default\n                 * @sample {highmaps} maps/chart/reflow-false/\n                 *         False\n                 * @default true\n                 * @since 2.1\n                 * @apioption chart.reflow\n                 */\n\n\n\n\n                /**\n                 * The HTML element where the chart will be rendered. If it is a string,\n                 * the element by that id is used. The HTML element can also be passed\n                 * by direct reference, or as the first argument of the chart constructor,\n                 *  in which case the option is not needed.\n                 *\n                 * @type {String|Object}\n                 * @sample {highcharts} highcharts/chart/reflow-true/\n                 *         String\n                 * @sample {highcharts} highcharts/chart/renderto-object/\n                 *         Object reference\n                 * @sample {highcharts} highcharts/chart/renderto-jquery/\n                 *         Object reference through jQuery\n                 * @sample {highstock} stock/chart/renderto-string/\n                 *         String\n                 * @sample {highstock} stock/chart/renderto-object/\n                 *         Object reference\n                 * @sample {highstock} stock/chart/renderto-jquery/\n                 *         Object reference through jQuery\n                 * @apioption chart.renderTo\n                 */\n\n                /**\n                 * The background color of the marker square when selecting (zooming\n                 * in on) an area of the chart.\n                 *\n                 * @type {Color}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the selection marker fill is set with the\n                 * `.highcharts-selection-marker` class.\n                 * @default rgba(51,92,173,0.25)\n                 * @since 2.1.7\n                 * @apioption chart.selectionMarkerFill\n                 */\n\n                /**\n                 * Whether to apply a drop shadow to the outer chart area. Requires\n                 * that backgroundColor be set. The shadow can be an object configuration\n                 * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n                 *\n                 * @type {Boolean|Object}\n                 * @sample {highcharts} highcharts/chart/shadow/ Shadow\n                 * @sample {highstock} stock/chart/shadow/\n                 *         Shadow\n                 * @sample {highmaps} maps/chart/border/\n                 *         Chart border and shadow\n                 * @default false\n                 * @apioption chart.shadow\n                 */\n\n                /**\n                 * Whether to show the axes initially. This only applies to empty charts\n                 * where series are added dynamically, as axes are automatically added\n                 * to cartesian series.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/showaxes-false/ False by default\n                 * @sample {highcharts} highcharts/chart/showaxes-true/ True\n                 * @since 1.2.5\n                 * @product highcharts\n                 * @apioption chart.showAxes\n                 */\n\n                /**\n                 * The space between the bottom edge of the chart and the content (plot\n                 * area, axis title and labels, title, subtitle or legend in top position).\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/spacingbottom/\n                 *         Spacing bottom set to 100\n                 * @sample {highstock} stock/chart/spacingbottom/\n                 *         Spacing bottom set to 100\n                 * @sample {highmaps} maps/chart/spacing/\n                 *         Spacing 100 all around\n                 * @default 15\n                 * @since 2.1\n                 * @apioption chart.spacingBottom\n                 */\n\n                /**\n                 * The space between the left edge of the chart and the content (plot\n                 * area, axis title and labels, title, subtitle or legend in top position).\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/spacingleft/\n                 *         Spacing left set to 100\n                 * @sample {highstock} stock/chart/spacingleft/\n                 *         Spacing left set to 100\n                 * @sample {highmaps} maps/chart/spacing/\n                 *         Spacing 100 all around\n                 * @default 10\n                 * @since 2.1\n                 * @apioption chart.spacingLeft\n                 */\n\n                /**\n                 * The space between the right edge of the chart and the content (plot\n                 * area, axis title and labels, title, subtitle or legend in top\n                 * position).\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/spacingright-100/\n                 *         Spacing set to 100\n                 * @sample {highcharts} highcharts/chart/spacingright-legend/\n                 *         Legend in right position with default spacing\n                 * @sample {highstock} stock/chart/spacingright/\n                 *         Spacing set to 100\n                 * @sample {highmaps} maps/chart/spacing/\n                 *         Spacing 100 all around\n                 * @default 10\n                 * @since 2.1\n                 * @apioption chart.spacingRight\n                 */\n\n                /**\n                 * The space between the top edge of the chart and the content (plot\n                 * area, axis title and labels, title, subtitle or legend in top\n                 * position).\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/chart/spacingtop-100/\n                 * A top spacing of 100\n                 * @sample {highcharts} highcharts/chart/spacingtop-10/\n                 *         Floating chart title makes the plot area align to the default\n                 *         spacingTop of 10.\n                 * @sample {highstock} stock/chart/spacingtop/\n                 *         A top spacing of 100\n                 * @sample {highmaps} maps/chart/spacing/\n                 *         Spacing 100 all around\n                 * @default 10\n                 * @since 2.1\n                 * @apioption chart.spacingTop\n                 */\n\n                /**\n                 * Additional CSS styles to apply inline to the container `div`. Note\n                 * that since the default font styles are applied in the renderer, it\n                 * is ignorant of the individual chart options and must be set globally.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), general chart styles can be set with the `.highcharts-\n                 * root` class.\n                 * @sample {highcharts} highcharts/chart/style-serif-font/\n                 *         Using a serif type font\n                 * @sample {highcharts} highcharts/css/em/\n                 *         Styled mode with relative font sizes\n                 * @sample {highstock} stock/chart/style/\n                 *         Using a serif type font\n                 * @sample {highmaps} maps/chart/style-serif-font/\n                 *         Using a serif type font\n                 * @default {\"fontFamily\":\"\\\"Lucida Grande\\\", \\\"Lucida Sans Unicode\\\", Verdana, Arial, Helvetica, sans-serif\",\"fontSize\":\"12px\"}\n                 * @apioption chart.style\n                 */\n\n                /**\n                 * The default series type for the chart. Can be any of the chart types\n                 * listed under [plotOptions](#plotOptions).\n                 *\n                 * @validvalue [\"line\", \"spline\", \"column\", \"bar\", \"area\", \"areaspline\", \"pie\", \"arearange\", \"areasplinerange\", \"boxplot\", \"bubble\", \"columnrange\", \"errorbar\", \"funnel\", \"gauge\", \"heatmap\", \"polygon\", \"pyramid\", \"scatter\", \"solidgauge\", \"treemap\", \"waterfall\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/chart/type-bar/ Bar\n                 * @sample {highstock} stock/chart/type/\n                 *         Areaspline\n                 * @sample {highmaps} maps/chart/type-mapline/\n                 *         Mapline\n                 * @default {highcharts} line\n                 * @default {highstock} line\n                 * @default {highmaps} map\n                 * @since 2.1.0\n                 * @apioption chart.type\n                 */\n\n                /**\n                 * Decides in what dimensions the user can zoom by dragging the mouse.\n                 * Can be one of `x`, `y` or `xy`.\n                 *\n                 * @validvalue [null, \"x\", \"y\", \"xy\"]\n                 * @type {String}\n                 * @see [panKey](#chart.panKey)\n                 * @sample {highcharts} highcharts/chart/zoomtype-none/ None by default\n                 * @sample {highcharts} highcharts/chart/zoomtype-x/ X\n                 * @sample {highcharts} highcharts/chart/zoomtype-y/ Y\n                 * @sample {highcharts} highcharts/chart/zoomtype-xy/ Xy\n                 * @sample {highstock} stock/demo/basic-line/ None by default\n                 * @sample {highstock} stock/chart/zoomtype-x/ X\n                 * @sample {highstock} stock/chart/zoomtype-y/ Y\n                 * @sample {highstock} stock/chart/zoomtype-xy/ Xy\n                 * @product highcharts highstock\n                 * @apioption chart.zoomType\n                 */\n            },\n\n            /**\n             * The chart's main title.\n             *\n             * @sample {highmaps} maps/title/title/ Title options demonstrated\n             * @product highcharts highstock highmaps\n             */\n            title: {\n\n                /**\n                 * The title of the chart. To disable the title, set the `text` to\n                 * `null`.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/title/text/ Custom title\n                 * @sample {highstock} stock/chart/title-text/ Custom title\n                 * @default {highcharts} Chart title\n                 * @default {highstock} null\n                 * @default {highmaps} Chart title\n                 * @product highcharts highstock highmaps\n                 */\n                text: 'Chart title',\n\n                /**\n                 * The horizontal alignment of the title. Can be one of \"left\", \"center\"\n                 * and \"right\".\n                 *\n                 * @validvalue [\"left\", \"center\", \"right\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/title/align/ Aligned to the plot area (x = 70px     = margin left - spacing left)\n                 * @sample {highstock} stock/chart/title-align/ Aligned to the plot area (x = 50px     = margin left - spacing left)\n                 * @default center\n                 * @since 2.0\n                 * @product highcharts highstock highmaps\n                 */\n                align: 'center',\n                // floating: false,\n\n                /**\n                 * The margin between the title and the plot area, or if a subtitle\n                 * is present, the margin between the subtitle and the plot area.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/title/margin-50/ A chart title margin of 50\n                 * @sample {highcharts} highcharts/title/margin-subtitle/ The same margin applied with a subtitle\n                 * @sample {highstock} stock/chart/title-margin/ A chart title margin of 50\n                 * @default 15\n                 * @since 2.1\n                 * @product highcharts highstock highmaps\n                 */\n                margin: 15,\n                // x: 0,\n                // verticalAlign: 'top',\n                // y: null,\n                // style: {}, // defined inline\n\n                /**\n                 * Adjustment made to the title width, normally to reserve space for\n                 * the exporting burger menu.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/title/widthadjust/ Wider menu, greater padding\n                 * @sample {highstock} highcharts/title/widthadjust/ Wider menu, greater padding\n                 * @sample {highmaps} highcharts/title/widthadjust/ Wider menu, greater padding\n                 * @default -44\n                 * @since 4.2.5\n                 * @product highcharts highstock highmaps\n                 */\n                widthAdjust: -44\n\n            },\n\n            /**\n             * The chart's subtitle. This can be used both to display a subtitle below\n             * the main title, and to display random text anywhere in the chart. The\n             * subtitle can be updated after chart initialization through the\n             * `Chart.setTitle` method.\n             *\n             * @sample {highmaps} maps/title/subtitle/ Subtitle options demonstrated\n             * @product highcharts highstock highmaps\n             */\n            subtitle: {\n\n                /**\n                 * The subtitle of the chart.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/subtitle/text/ Custom subtitle\n                 * @sample {highcharts} highcharts/subtitle/text-formatted/ Formatted and linked text.\n                 * @sample {highstock} stock/chart/subtitle-text Custom subtitle\n                 * @sample {highstock} stock/chart/subtitle-text-formatted Formatted and linked text.\n                 * @product highcharts highstock highmaps\n                 */\n                text: '',\n\n                /**\n                 * The horizontal alignment of the subtitle. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @validvalue [\"left\", \"center\", \"right\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/subtitle/align/ Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote Footnote at bottom right of plot area\n                 * @default center\n                 * @since 2.0\n                 * @product highcharts highstock highmaps\n                 */\n                align: 'center',\n                // floating: false\n                // x: 0,\n                // verticalAlign: 'top',\n                // y: null,\n                // style: {}, // defined inline\n\n                /**\n                 * Adjustment made to the subtitle width, normally to reserve space\n                 * for the exporting burger menu.\n                 *\n                 * @type {Number}\n                 * @see [title.widthAdjust](#title.widthAdjust)\n                 * @sample {highcharts} highcharts/title/widthadjust/ Wider menu, greater padding\n                 * @sample {highstock} highcharts/title/widthadjust/ Wider menu, greater padding\n                 * @sample {highmaps} highcharts/title/widthadjust/ Wider menu, greater padding\n                 * @default -44\n                 * @since 4.2.5\n                 * @product highcharts highstock highmaps\n                 */\n                widthAdjust: -44\n            },\n\n            /**\n             * The plotOptions is a wrapper object for config objects for each series\n             * type. The config objects for each series can also be overridden for\n             * each series item as given in the series array.\n             *\n             * Configuration options for the series are given in three levels. Options\n             * for all series in a chart are given in the [plotOptions.series](#plotOptions.\n             * series) object. Then options for all series of a specific type are\n             * given in the plotOptions of that type, for example plotOptions.line.\n             * Next, options for one single series are given in [the series array](#series).\n             *\n             * @product highcharts highstock highmaps\n             */\n            plotOptions: {},\n\n            /**\n             * HTML labels that can be positioned anywhere in the chart area.\n             *\n             * @product highcharts highstock highmaps\n             */\n            labels: {\n                //items: [],\n\n                /**\n                 * Shared CSS styles for all labels.\n                 *\n                 * @type {CSSObject}\n                 * @default { \"color\": \"#333333\" }\n                 * @product highcharts highstock highmaps\n                 */\n                style: {\n                    //font: defaultFont,\n\n                    /**\n                     */\n                    position: 'absolute',\n\n                    /**\n                     */\n                    color: '#333333'\n                }\n            },\n\n            /**\n             * The legend is a box containing a symbol and name for each series\n             * item or point item in the chart. Each series (or points in case\n             * of pie charts) is represented by a symbol and its name in the legend.\n             *\n             * It is possible to override the symbol creator function and\n             * create [custom legend symbols](http://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/studies/legend-\n             * custom-symbol/).\n             *\n             * @productdesc {highmaps}\n             * A Highmaps legend by default contains one legend item per series, but if\n             * a `colorAxis` is defined, the axis will be displayed in the legend.\n             * Either as a gradient, or as multiple legend items for `dataClasses`.\n             */\n            legend: {\n\n                /**\n                 * Enable or disable the legend.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/legend/enabled-false/ Legend disabled\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/enabled-false/ Legend disabled\n                 * @default {highstock} false\n                 * @default {highmaps} true\n                 * @product highcharts highstock highmaps\n                 */\n                enabled: true,\n\n                /**\n                 * The horizontal alignment of the legend box within the chart area.\n                 * Valid values are `left`, `center` and `right`.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * @validvalue [\"left\", \"center\", \"right\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/legend/align/ Legend at the right of the chart\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/alignment/ Legend alignment\n                 * @default center\n                 * @since 2.0\n                 * @product highcharts highstock highmaps\n                 */\n                align: 'center',\n                //floating: false,\n\n                /**\n                 * The layout of the legend items. Can be one of \"horizontal\" or \"vertical\".\n                 *\n                 * @validvalue [\"horizontal\", \"vertical\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/ Horizontal by default\n                 * @sample {highcharts} highcharts/legend/layout-vertical/ Vertical\n                 * @sample {highstock} stock/legend/layout-horizontal/ Horizontal by default\n                 * @sample {highmaps} maps/legend/padding-itemmargin/ Vertical with data classes\n                 * @sample {highmaps} maps/legend/layout-vertical/ Vertical with color axis gradient\n                 * @default horizontal\n                 * @product highcharts highstock highmaps\n                 */\n                layout: 'horizontal',\n\n                /**\n                 * Callback function to format each of the series' labels. The `this`\n                 * keyword refers to the series object, or the point object in case\n                 * of pie charts. By default the series or point name is printed.\n                 *\n                 * @productdesc {highmaps}\n                 *              In Highmaps the context can also be a data class in case\n                 *              of a `colorAxis`.\n                 *\n                 * @type {Function}\n                 * @sample {highcharts} highcharts/legend/labelformatter/ Add text\n                 * @sample {highmaps} maps/legend/labelformatter/ Data classes with label formatter\n                 * @context {Series|Point}\n                 */\n                labelFormatter: function() {\n                    return this.name;\n                },\n                //borderWidth: 0,\n\n                /**\n                 * The color of the drawn border around the legend.\n                 *\n                 * @type {Color}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the legend border stroke can be applied with\n                 * the `.highcharts-legend-box` class.\n                 * @sample {highcharts} highcharts/legend/bordercolor/ Brown border\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/border-background/ Border and background options\n                 * @default #999999\n                 * @product highcharts highstock highmaps\n                 */\n                borderColor: '#999999',\n\n                /**\n                 * The border corner radius of the legend.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/borderradius-default/ Square by default\n                 * @sample {highcharts} highcharts/legend/borderradius-round/ 5px rounded\n                 * @sample {highmaps} maps/legend/border-background/ Border and background options\n                 * @default 0\n                 * @product highcharts highstock highmaps\n                 */\n                borderRadius: 0,\n\n                /**\n                 * Options for the paging or navigation appearing when the legend\n                 * is overflown. Navigation works well on screen, but not in static\n                 * exported images. One way of working around that is to [increase\n                 * the chart height in export](http://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/legend/navigation-\n                 * enabled-false/).\n                 *\n                 * @product highcharts highstock highmaps\n                 */\n                navigation: {\n\n\n                    /**\n                     * The color for the active up or down arrow in the legend page navigation.\n                     *\n                     * @type {Color}\n                     * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the active arrow be styled with the `.highcharts-\n                     * legend-nav-active` class.\n                     * @sample {highcharts} highcharts/legend/navigation/ Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/ Legend page navigation demonstrated\n                     * @default #003399\n                     * @since 2.2.4\n                     * @product highcharts highstock highmaps\n                     */\n                    activeColor: '#003399',\n\n                    /**\n                     * The color of the inactive up or down arrow in the legend page\n                     * navigation. .\n                     *\n                     * @type {Color}\n                     * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the inactive arrow be styled with the `.highcharts-\n                     * legend-nav-inactive` class.\n                     * @sample {highcharts} highcharts/legend/navigation/ Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/ Legend page navigation demonstrated\n                     * @default {highcharts} #cccccc\n                     * @default {highstock} #cccccc\n                     * @default {highmaps} ##cccccc\n                     * @since 2.2.4\n                     * @product highcharts highstock highmaps\n                     */\n                    inactiveColor: '#cccccc'\n\n                    // animation: true,\n                    // arrowSize: 12\n                    // style: {} // text styles\n                },\n                // margin: 20,\n                // reversed: false,\n                // backgroundColor: null,\n                /*style: {\n                \tpadding: '5px'\n                },*/\n\n\n                /**\n                 * CSS styles for each legend item. Only a subset of CSS is supported,\n                 * notably those options related to text. The default `textOverflow`\n                 * property makes long texts truncate. Set it to `null` to wrap text\n                 * instead. A `width` property can be added to control the text width.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the legend items can be styled with the `.\n                 * highcharts-legend-item` class.\n                 * @sample {highcharts} highcharts/legend/itemstyle/ Bold black text\n                 * @sample {highmaps} maps/legend/itemstyle/ Item text styles\n                 * @default { \"color\": \"#333333\", \"cursor\": \"pointer\", \"fontSize\": \"12px\", \"fontWeight\": \"bold\", \"textOverflow\": \"ellipsis\" }\n                 * @product highcharts highstock highmaps\n                 */\n                itemStyle: {\n\n                    /**\n                     */\n                    color: '#333333',\n\n                    /**\n                     */\n                    fontSize: '12px',\n\n                    /**\n                     */\n                    fontWeight: 'bold',\n\n                    /**\n                     */\n                    textOverflow: 'ellipsis'\n                },\n\n                /**\n                 * CSS styles for each legend item in hover mode. Only a subset of\n                 * CSS is supported, notably those options related to text. Properties\n                 * are inherited from `style` unless overridden here.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the hovered legend items can be styled with\n                 * the `.highcharts-legend-item:hover` pesudo-class.\n                 * @sample {highcharts} highcharts/legend/itemhoverstyle/ Red on hover\n                 * @sample {highmaps} maps/legend/itemstyle/ Item text styles\n                 * @default { \"color\": \"#000000\" }\n                 * @product highcharts highstock highmaps\n                 */\n                itemHoverStyle: {\n                    //cursor: 'pointer', removed as of #601\n\n                    /**\n                     */\n                    color: '#000000'\n                },\n\n                /**\n                 * CSS styles for each legend item when the corresponding series or\n                 * point is hidden. Only a subset of CSS is supported, notably those\n                 * options related to text. Properties are inherited from `style`\n                 * unless overridden here.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the hidden legend items can be styled with\n                 * the `.highcharts-legend-item-hidden` class.\n                 * @sample {highcharts} highcharts/legend/itemhiddenstyle/ Darker gray color\n                 * @default { \"color\": \"#cccccc\" }\n                 * @product highcharts highstock highmaps\n                 */\n                itemHiddenStyle: {\n\n                    /**\n                     */\n                    color: '#cccccc'\n                },\n\n                /**\n                 * Whether to apply a drop shadow to the legend. A `backgroundColor`\n                 * also needs to be applied for this to take effect. The shadow can be\n                 * an object configuration containing `color`, `offsetX`, `offsetY`,\n                 * `opacity` and `width`.\n                 *\n                 * @type {Boolean|Object}\n                 * @sample {highcharts} highcharts/legend/shadow/\n                 *         White background and drop shadow\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 * @default false\n                 * @product highcharts highstock highmaps\n                 */\n                shadow: false,\n\n\n                /**\n                 */\n                itemCheckboxStyle: {\n\n                    /**\n                     */\n                    position: 'absolute',\n\n                    /**\n                     */\n                    width: '13px', // for IE precision\n\n                    /**\n                     */\n                    height: '13px'\n                },\n                // itemWidth: undefined,\n\n                /**\n                 * When this is true, the legend symbol width will be the same as\n                 * the symbol height, which in turn defaults to the font size of the\n                 * legend items.\n                 *\n                 * @type {Boolean}\n                 * @default true\n                 * @since 5.0.0\n                 * @product highcharts highstock highmaps\n                 */\n                squareSymbol: true,\n\n                /**\n                 * The pixel height of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to the font size of legend items.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a vertical color\n                 * axis, the height defaults to 200.\n                 *\n                 * @type {Number}\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         No distance between data classes\n                 * @since 3.0.8\n                 * @apioption legend.symbolHeight\n                 */\n\n                /**\n                 * The border radius of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to half the `symbolHeight`.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/symbolradius/ Round symbols\n                 * @sample {highstock} highcharts/legend/symbolradius/ Round symbols\n                 * @sample {highmaps} highcharts/legend/symbolradius/ Round symbols\n                 * @since 3.0.8\n                 * @apioption legend.symbolRadius\n                 */\n\n                /**\n                 * The pixel width of the legend item symbol. When the `squareSymbol`\n                 * option is set, this defaults to the `symbolHeight`, otherwise 16.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a horizontal color\n                 * axis, the width defaults to 200.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/symbolwidth/\n                 *         Greater symbol width and padding\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 * @apioption legend.symbolWidth\n                 */\n\n                /**\n                 * Whether to [use HTML](http://www.highcharts.com/docs/chart-concepts/labels-\n                 * and-string-formatting#html) to render the legend item texts. Prior\n                 * to 4.1.7, when using HTML, [legend.navigation](#legend.navigation)\n                 * was disabled.\n                 *\n                 * @type {Boolean}\n                 * @default false\n                 * @apioption legend.useHTML\n                 */\n\n                /**\n                 * The width of the legend box.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/width/ Aligned to the plot area\n                 * @default null\n                 * @since 2.0\n                 * @apioption legend.width\n                 */\n\n                /**\n                 * The pixel padding between the legend item symbol and the legend\n                 * item text.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/symbolpadding/ Greater symbol width and padding\n                 * @default 5\n                 * @product highcharts highstock highmaps\n                 */\n                symbolPadding: 5,\n\n                /**\n                 * The vertical alignment of the legend box. Can be one of `top`,\n                 * `middle` or `bottom`. Vertical position can be further determined\n                 * by the `y` option.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * @validvalue [\"top\", \"middle\", \"bottom\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/legend/verticalalign/ Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/alignment/ Legend alignment\n                 * @default bottom\n                 * @since 2.0\n                 * @product highcharts highstock highmaps\n                 */\n                verticalAlign: 'bottom',\n                // width: undefined,\n\n                /**\n                 * The x offset of the legend relative to its horizontal alignment\n                 * `align` within chart.spacingLeft and chart.spacingRight. Negative\n                 * x moves it to the left, positive x moves it to the right.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/width/ Aligned to the plot area\n                 * @default 0\n                 * @since 2.0\n                 * @product highcharts highstock highmaps\n                 */\n                x: 0,\n\n                /**\n                 * The vertical offset of the legend relative to it's vertical alignment\n                 * `verticalAlign` within chart.spacingTop and chart.spacingBottom.\n                 *  Negative y moves it up, positive y moves it down.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/legend/verticalalign/ Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/alignment/ Legend alignment\n                 * @default 0\n                 * @since 2.0\n                 * @product highcharts highstock highmaps\n                 */\n                y: 0,\n\n                /**\n                 * A title to be added on top of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/title/ Legend title\n                 * @sample {highmaps} maps/legend/alignment/ Legend with title\n                 * @since 3.0\n                 * @product highcharts highstock highmaps\n                 */\n                title: {\n                    //text: null,\n\n\n                    /**\n                     * Generic CSS styles for the legend title.\n                     *\n                     * @type {CSSObject}\n                     * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the legend title is styled with the `.highcharts-\n                     * legend-title` class.\n                     * @default {\"fontWeight\":\"bold\"}\n                     * @since 3.0\n                     * @product highcharts highstock highmaps\n                     */\n                    style: {\n\n                        /**\n                         */\n                        fontWeight: 'bold'\n                    }\n\n                }\n            },\n\n\n            /**\n             * The loading options control the appearance of the loading screen\n             * that covers the plot area on chart operations. This screen only\n             * appears after an explicit call to `chart.showLoading()`. It is a\n             * utility for developers to communicate to the end user that something\n             * is going on, for example while retrieving new data via an XHR connection.\n             * The \"Loading...\" text itself is not part of this configuration\n             * object, but part of the `lang` object.\n             *\n             * @product highcharts highstock highmaps\n             */\n            loading: {\n\n                /**\n                 * The duration in milliseconds of the fade out effect.\n                 *\n                 * @type {Number}\n                 * @sample highcharts/loading/hideduration/ Fade in and out over a second\n                 * @default 100\n                 * @since 1.2.0\n                 * @apioption loading.hideDuration\n                 */\n\n                /**\n                 * The duration in milliseconds of the fade in effect.\n                 *\n                 * @type {Number}\n                 * @sample highcharts/loading/hideduration/ Fade in and out over a second\n                 * @default 100\n                 * @since 1.2.0\n                 * @apioption loading.showDuration\n                 */\n\n\n                /**\n                 * CSS styles for the loading label `span`.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the loading label is styled with the\n                 * `.highcharts-legend-loading-inner` class.\n                 * @sample {highcharts|highmaps} highcharts/loading/labelstyle/ Vertically centered\n                 * @sample {highstock} stock/loading/general/ Label styles\n                 * @default { \"fontWeight\": \"bold\", \"position\": \"relative\", \"top\": \"45%\" }\n                 * @since 1.2.0\n                 * @product highcharts highstock highmaps\n                 */\n                labelStyle: {\n                    fontWeight: 'bold',\n                    position: 'relative',\n                    top: '45%'\n                },\n\n                /**\n                 * CSS styles for the loading screen that covers the plot area.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the loading label is styled with the `.highcharts-\n                 * legend-loading` class.\n                 * @sample {highcharts|highmaps} highcharts/loading/style/ Gray plot area, white text\n                 * @sample {highstock} stock/loading/general/ Gray plot area, white text\n                 * @default { \"position\": \"absolute\", \"backgroundColor\": \"#ffffff\", \"opacity\": 0.5, \"textAlign\": \"center\" }\n                 * @since 1.2.0\n                 */\n                style: {\n                    position: 'absolute',\n                    backgroundColor: '#ffffff',\n                    opacity: 0.5,\n                    textAlign: 'center'\n                }\n\n            },\n\n\n            /**\n             * Options for the tooltip that appears when the user hovers over a\n             * series or point.\n             *\n             * @product highcharts highstock highmaps\n             */\n            tooltip: {\n\n                /**\n                 * Enable or disable the tooltip.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/tooltip/enabled/ Disabled\n                 * @sample {highcharts} highcharts/plotoptions/series-point-events-mouseover/ Disable tooltip and show values on chart instead\n                 * @default true\n                 * @product highcharts highstock highmaps\n                 */\n                enabled: true,\n\n                /**\n                 * Enable or disable animation of the tooltip. In slow legacy IE browsers\n                 * the animation is disabled by default.\n                 *\n                 * @type {Boolean}\n                 * @default true\n                 * @since 2.3.0\n                 * @product highcharts highstock highmaps\n                 */\n                animation: svg,\n                //crosshairs: null,\n\n                /**\n                 * The radius of the rounded border corners.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ 5px by default\n                 * @sample {highcharts} highcharts/tooltip/borderradius-0/ Square borders\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and border demo\n                 * @default 3\n                 * @product highcharts highstock highmaps\n                 */\n                borderRadius: 3,\n\n                /**\n                 * For series on a datetime axes, the date format in the tooltip's\n                 * header will by default be guessed based on the closest data points.\n                 * This member gives the default string representations used for\n                 * each unit. For an overview of the replacement codes, see [dateFormat](#Highcharts.\n                 * dateFormat).\n                 *\n                 * Defaults to:\n                 *\n                 * <pre>{\n                 * millisecond:\"%A, %b %e, %H:%M:%S.%L\",\n                 * second:\"%A, %b %e, %H:%M:%S\",\n                 * minute:\"%A, %b %e, %H:%M\",\n                 * hour:\"%A, %b %e, %H:%M\",\n                 * day:\"%A, %b %e, %Y\",\n                 * week:\"Week from %A, %b %e, %Y\",\n                 * month:\"%B %Y\",\n                 * year:\"%Y\"\n                 * }</pre>\n                 *\n                 * @type {Object}\n                 * @see [xAxis.dateTimeLabelFormats](#xAxis.dateTimeLabelFormats)\n                 * @product highcharts highstock\n                 */\n                dateTimeLabelFormats: {\n\n                    /**\n                     */\n                    millisecond: '%A, %b %e, %H:%M:%S.%L',\n\n                    /**\n                     */\n                    second: '%A, %b %e, %H:%M:%S',\n\n                    /**\n                     */\n                    minute: '%A, %b %e, %H:%M',\n\n                    /**\n                     */\n                    hour: '%A, %b %e, %H:%M',\n\n                    /**\n                     */\n                    day: '%A, %b %e, %Y',\n\n                    /**\n                     */\n                    week: 'Week from %A, %b %e, %Y',\n\n                    /**\n                     */\n                    month: '%B %Y',\n\n                    /**\n                     */\n                    year: '%Y'\n                },\n\n                /**\n                 * A string to append to the tooltip format.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/tooltip/footerformat/ A table for value alignment\n                 * @sample {highmaps} maps/tooltip/format/ Format demo\n                 * @default false\n                 * @since 2.2\n                 * @product highcharts highmaps\n                 */\n                footerFormat: '',\n                //formatter: defaultFormatter,\n                /* todo: em font-size when finished comparing against HC4\n                headerFormat: '<span style=\"font-size: 0.85em\">{point.key}</span><br/>',\n                */\n\n                /**\n                 * Padding inside the tooltip, in pixels.\n                 *\n                 * @type {Number}\n                 * @default 8\n                 * @since 5.0.0\n                 * @product highcharts highstock highmaps\n                 */\n                padding: 8,\n\n                //shape: 'callout',\n                //shared: false,\n\n                /**\n                 * Proximity snap for graphs or single points. It defaults to 10 for\n                 * mouse-powered devices and 25 for touch devices.\n                 *\n                 * Note that in most cases the whole plot area captures the mouse\n                 * movement, and in these cases `tooltip.snap` doesn't make sense.\n                 * This applies when [stickyTracking](#plotOptions.series.stickyTracking)\n                 * is `true` (default) and when the tooltip is [shared](#tooltip.shared)\n                 * or [split](#tooltip.split).\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ 10 px by default\n                 * @sample {highcharts} highcharts/tooltip/snap-50/ 50 px on graph\n                 * @default 10/25\n                 * @since 1.2.0\n                 * @product highcharts highstock\n                 */\n                snap: isTouchDevice ? 25 : 10,\n\n\n                /**\n                 * The background color or gradient for the tooltip.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke width is set in the `.highcharts-\n                 * tooltip-box` class.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-solid/ Yellowish background\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-gradient/ Gradient\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/ Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/ Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/ Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/ Tooltip in styled mode\n                 * @default rgba(247,247,247,0.85)\n                 * @product highcharts highstock highmaps\n                 */\n                backgroundColor: color('#f7f7f7').setOpacity(0.85).get(),\n\n                /**\n                 * The pixel width of the tooltip border.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke width is set in the `.highcharts-\n                 * tooltip-box` class.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ 2px by default\n                 * @sample {highcharts} highcharts/tooltip/borderwidth/ No border (shadow only)\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/ Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/ Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/ Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/ Tooltip in styled mode\n                 * @default 1\n                 * @product highcharts highstock highmaps\n                 */\n                borderWidth: 1,\n\n                /**\n                 * The HTML of the tooltip header line. Variables are enclosed by\n                 * curly brackets. Available variables are `point.key`, `series.name`,\n                 * `series.color` and other members from the `point` and `series`\n                 * objects. The `point.key` variable contains the category name, x\n                 * value or datetime string depending on the type of axis. For datetime\n                 * axes, the `point.key` date format can be set using tooltip.xDateFormat.\n                 *\n                 *\n                 * Defaults to `<span style=\"font-size: 10px\">{point.key}</span><br/>`\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/tooltip/footerformat/ A HTML table in the tooltip\n                 * @sample {highstock} highcharts/tooltip/footerformat/ A HTML table in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/ Format demo\n                 * @product highcharts highstock highmaps\n                 */\n                headerFormat: '<span style=\"font-size: 10px\">{point.key}</span><br/>',\n\n                /**\n                 * The HTML of the point's line in the tooltip. Variables are enclosed\n                 * by curly brackets. Available variables are point.x, point.y, series.\n                 * name and series.color and other properties on the same form. Furthermore,\n                 * point.y can be extended by the `tooltip.valuePrefix` and `tooltip.\n                 * valueSuffix` variables. This can also be overridden for each series,\n                 * which makes it a good hook for displaying units.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the dot is colored by a class name rather\n                 * than the point color.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/tooltip/pointformat/ A different point format with value suffix\n                 * @sample {highmaps} maps/tooltip/format/ Format demo\n                 * @default <span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>\n                 * @since 2.2\n                 * @product highcharts highstock highmaps\n                 */\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>',\n\n                /**\n                 * Whether to apply a drop shadow to the tooltip.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ True by default\n                 * @sample {highcharts} highcharts/tooltip/shadow/ False\n                 * @sample {highmaps} maps/tooltip/positioner/ Fixed tooltip position, border and shadow disabled\n                 * @default true\n                 * @product highcharts highstock highmaps\n                 */\n                shadow: true,\n\n                /**\n                 * CSS styles for the tooltip. The tooltip can also be styled through\n                 * the CSS class `.highcharts-tooltip`.\n                 *\n                 * @type {CSSObject}\n                 * @sample {highcharts} highcharts/tooltip/style/ Greater padding, bold text\n                 * @default { \"color\": \"#333333\", \"cursor\": \"default\", \"fontSize\": \"12px\", \"pointerEvents\": \"none\", \"whiteSpace\": \"nowrap\" }\n                 * @product highcharts highstock highmaps\n                 */\n                style: {\n\n                    /**\n                     */\n                    color: '#333333',\n\n                    /**\n                     */\n                    cursor: 'default',\n\n                    /**\n                     */\n                    fontSize: '12px',\n\n                    /**\n                     */\n                    pointerEvents: 'none', // #1686 http://caniuse.com/#feat=pointer-events\n\n                    /**\n                     */\n                    whiteSpace: 'nowrap'\n                }\n\n                //xDateFormat: '%A, %b %e, %Y',\n                //valueDecimals: null,\n                //valuePrefix: '',\n                //valueSuffix: ''\n            },\n\n\n            /**\n             * Highchart by default puts a credits label in the lower right corner\n             * of the chart. This can be changed using these options.\n             *\n             * @product highcharts highstock highmaps\n             */\n            credits: {\n\n                /**\n                 * Whether to show the credits text.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/credits/enabled-false/ Credits disabled\n                 * @sample {highstock} stock/credits/enabled/ Credits disabled\n                 * @sample {highmaps} maps/credits/enabled-false/ Credits disabled\n                 * @default true\n                 * @product highcharts highstock highmaps\n                 */\n                enabled: true,\n\n                /**\n                 * The URL for the credits label.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/credits/href/ Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/ Custom URL and text\n                 * @default {highcharts} http://www.highcharts.com\n                 * @default {highstock} \"http://www.highcharts.com\"\n                 * @default {highmaps} http://www.highcharts.com\n                 * @product highcharts highstock highmaps\n                 */\n                href: 'http://www.highcharts.com',\n\n                /**\n                 * Position configuration for the credits label.\n                 *\n                 * @type {Object}\n                 * @sample {highcharts} highcharts/credits/position-left/ Left aligned\n                 * @sample {highcharts} highcharts/credits/position-left/ Left aligned\n                 * @sample {highmaps} maps/credits/customized/ Left aligned\n                 * @sample {highmaps} maps/credits/customized/ Left aligned\n                 * @since 2.1\n                 * @product highcharts highstock highmaps\n                 */\n                position: {\n\n                    /**\n                     * Horizontal alignment of the credits.\n                     *\n                     * @validvalue [\"left\", \"center\", \"right\"]\n                     * @type {String}\n                     * @default right\n                     * @product highcharts highstock highmaps\n                     */\n                    align: 'right',\n\n                    /**\n                     * Horizontal pixel offset of the credits.\n                     *\n                     * @type {Number}\n                     * @default -10\n                     * @product highcharts highstock highmaps\n                     */\n                    x: -10,\n\n                    /**\n                     * Vertical alignment of the credits.\n                     *\n                     * @validvalue [\"top\", \"middle\", \"bottom\"]\n                     * @type {String}\n                     * @default bottom\n                     * @product highcharts highstock highmaps\n                     */\n                    verticalAlign: 'bottom',\n\n                    /**\n                     * Vertical pixel offset of the credits.\n                     *\n                     * @type {Number}\n                     * @default -5\n                     * @product highcharts highstock highmaps\n                     */\n                    y: -5\n                },\n\n\n                /**\n                 * CSS styles for the credits label.\n                 *\n                 * @type {CSSObject}\n                 * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), credits styles can be set with the `.highcharts-\n                 * credits` class.\n                 * @default { \"cursor\": \"pointer\", \"color\": \"#999999\", \"fontSize\": \"10px\" }\n                 * @product highcharts highstock highmaps\n                 */\n                style: {\n\n                    /**\n                     */\n                    cursor: 'pointer',\n\n                    /**\n                     */\n                    color: '#999999',\n\n                    /**\n                     */\n                    fontSize: '9px'\n                },\n\n\n                /**\n                 * The text for the credits label.\n                 *\n                 * @productdesc {highmaps}\n                 * If a map is loaded as GeoJSON, the text defaults to `Highcharts @\n                 * {map-credits}`. Otherwise, it defaults to `Highcharts.com`.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/credits/href/ Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/ Custom URL and text\n                 * @default {highcharts|highstock} Highcharts.com\n                 */\n                text: 'Highcharts.com'\n            }\n        };\n\n\n\n        /**\n         * Sets the getTimezoneOffset function. If the timezone option is set, a default\n         * getTimezoneOffset function with that timezone is returned. If not, the\n         * specified getTimezoneOffset function is returned. If neither are specified,\n         * undefined is returned.\n         * @return {function} a getTimezoneOffset function or undefined\n         */\n        function getTimezoneOffsetOption() {\n            var globalOptions = H.defaultOptions.global,\n                moment = win.moment;\n\n            if (globalOptions.timezone) {\n                if (!moment) {\n                    // getTimezoneOffset-function stays undefined because it depends on\n                    // Moment.js\n                    H.error(25);\n\n                } else {\n                    return function(timestamp) {\n                        return -moment.tz(\n                            timestamp,\n                            globalOptions.timezone\n                        ).utcOffset();\n                    };\n                }\n            }\n\n            // If not timezone is set, look for the getTimezoneOffset callback\n            return globalOptions.useUTC && globalOptions.getTimezoneOffset;\n        }\n\n        /**\n         * Set the time methods globally based on the useUTC option. Time method can be\n         *   either local time or UTC (default). It is called internally on initiating\n         *   Highcharts and after running `Highcharts.setOptions`.\n         *\n         * @private\n         */\n        function setTimeMethods() {\n            var globalOptions = H.defaultOptions.global,\n                Date,\n                useUTC = globalOptions.useUTC,\n                GET = useUTC ? 'getUTC' : 'get',\n                SET = useUTC ? 'setUTC' : 'set';\n\n            H.Date = Date = globalOptions.Date || win.Date; // Allow using a different Date class\n            Date.hcTimezoneOffset = useUTC && globalOptions.timezoneOffset;\n            Date.hcGetTimezoneOffset = getTimezoneOffsetOption();\n            Date.hcMakeTime = function(year, month, date, hours, minutes, seconds) {\n                var d;\n                if (useUTC) {\n                    d = Date.UTC.apply(0, arguments);\n                    d += getTZOffset(d);\n                } else {\n                    d = new Date(\n                        year,\n                        month,\n                        pick(date, 1),\n                        pick(hours, 0),\n                        pick(minutes, 0),\n                        pick(seconds, 0)\n                    ).getTime();\n                }\n                return d;\n            };\n            each(['Minutes', 'Hours', 'Day', 'Date', 'Month', 'FullYear'], function(s) {\n                Date['hcGet' + s] = GET + s;\n            });\n            each(['Milliseconds', 'Seconds', 'Minutes', 'Hours', 'Date', 'Month', 'FullYear'], function(s) {\n                Date['hcSet' + s] = SET + s;\n            });\n        }\n\n        /**\n         * Merge the default options with custom options and return the new options\n         * structure. Commonly used for defining reusable templates.\n         *\n         * @function #setOptions\n         * @memberOf  Highcharts\n         * @sample highcharts/global/useutc-false Setting a global option\n         * @sample highcharts/members/setoptions Applying a global theme\n         * @param {Object} options The new custom chart options.\n         * @returns {Object} Updated options.\n         */\n        H.setOptions = function(options) {\n\n            // Copy in the default options\n            H.defaultOptions = merge(true, H.defaultOptions, options);\n\n            // Apply UTC\n            setTimeMethods();\n\n            return H.defaultOptions;\n        };\n\n        /**\n         * Get the updated default options. Until 3.0.7, merely exposing defaultOptions for outside modules\n         * wasn't enough because the setOptions method created a new object.\n         */\n        H.getOptions = function() {\n            return H.defaultOptions;\n        };\n\n\n        // Series defaults\n        H.defaultPlotOptions = H.defaultOptions.plotOptions;\n\n        // set the default time methods\n        setTimeMethods();\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var correctFloat = H.correctFloat,\n            defined = H.defined,\n            destroyObjectProperties = H.destroyObjectProperties,\n            isNumber = H.isNumber,\n            merge = H.merge,\n            pick = H.pick,\n            deg2rad = H.deg2rad;\n\n        /**\n         * The Tick class\n         */\n        H.Tick = function(axis, pos, type, noLabel) {\n            this.axis = axis;\n            this.pos = pos;\n            this.type = type || '';\n            this.isNew = true;\n            this.isNewLabel = true;\n\n            if (!type && !noLabel) {\n                this.addLabel();\n            }\n        };\n\n        H.Tick.prototype = {\n            /**\n             * Write the tick label\n             */\n            addLabel: function() {\n                var tick = this,\n                    axis = tick.axis,\n                    options = axis.options,\n                    chart = axis.chart,\n                    categories = axis.categories,\n                    names = axis.names,\n                    pos = tick.pos,\n                    labelOptions = options.labels,\n                    str,\n                    tickPositions = axis.tickPositions,\n                    isFirst = pos === tickPositions[0],\n                    isLast = pos === tickPositions[tickPositions.length - 1],\n                    value = categories ?\n                    pick(categories[pos], names[pos], pos) :\n                    pos,\n                    label = tick.label,\n                    tickPositionInfo = tickPositions.info,\n                    dateTimeLabelFormat;\n\n                // Set the datetime label format. If a higher rank is set for this position, use that. If not,\n                // use the general format.\n                if (axis.isDatetimeAxis && tickPositionInfo) {\n                    dateTimeLabelFormat =\n                        options.dateTimeLabelFormats[\n                            tickPositionInfo.higherRanks[pos] || tickPositionInfo.unitName\n                        ];\n                }\n                // set properties for access in render method\n                tick.isFirst = isFirst;\n                tick.isLast = isLast;\n\n                // get the string\n                str = axis.labelFormatter.call({\n                    axis: axis,\n                    chart: chart,\n                    isFirst: isFirst,\n                    isLast: isLast,\n                    dateTimeLabelFormat: dateTimeLabelFormat,\n                    value: axis.isLog ? correctFloat(axis.lin2log(value)) : value,\n                    pos: pos\n                });\n\n                // prepare CSS\n                //css = width && { width: Math.max(1, Math.round(width - 2 * (labelOptions.padding || 10))) + 'px' };\n\n                // first call\n                if (!defined(label)) {\n\n                    tick.label = label =\n                        defined(str) && labelOptions.enabled ?\n                        chart.renderer.text(\n                            str,\n                            0,\n                            0,\n                            labelOptions.useHTML\n                        )\n\n                        // without position absolute, IE export sometimes is wrong\n                        .css(merge(labelOptions.style))\n\n                        .add(axis.labelGroup) :\n                        null;\n                    tick.labelLength = label && label.getBBox().width; // Un-rotated length\n                    tick.rotation = 0; // Base value to detect change for new calls to getBBox\n\n                    // update\n                } else if (label) {\n                    label.attr({\n                        text: str\n                    });\n                }\n            },\n\n            /**\n             * Get the offset height or width of the label\n             */\n            getLabelSize: function() {\n                return this.label ?\n                    this.label.getBBox()[this.axis.horiz ? 'height' : 'width'] :\n                    0;\n            },\n\n            /**\n             * Handle the label overflow by adjusting the labels to the left and right edge, or\n             * hide them if they collide into the neighbour label.\n             */\n            handleOverflow: function(xy) {\n                var axis = this.axis,\n                    pxPos = xy.x,\n                    chartWidth = axis.chart.chartWidth,\n                    spacing = axis.chart.spacing,\n                    leftBound = pick(axis.labelLeft, Math.min(axis.pos, spacing[3])),\n                    rightBound = pick(axis.labelRight, Math.max(axis.pos + axis.len, chartWidth - spacing[1])),\n                    label = this.label,\n                    rotation = this.rotation,\n                    factor = {\n                        left: 0,\n                        center: 0.5,\n                        right: 1\n                    }[axis.labelAlign],\n                    labelWidth = label.getBBox().width,\n                    slotWidth = axis.getSlotWidth(),\n                    modifiedSlotWidth = slotWidth,\n                    xCorrection = factor,\n                    goRight = 1,\n                    leftPos,\n                    rightPos,\n                    textWidth,\n                    css = {};\n\n                // Check if the label overshoots the chart spacing box. If it does, move it.\n                // If it now overshoots the slotWidth, add ellipsis.\n                if (!rotation) {\n                    leftPos = pxPos - factor * labelWidth;\n                    rightPos = pxPos + (1 - factor) * labelWidth;\n\n                    if (leftPos < leftBound) {\n                        modifiedSlotWidth = xy.x + modifiedSlotWidth * (1 - factor) - leftBound;\n                    } else if (rightPos > rightBound) {\n                        modifiedSlotWidth = rightBound - xy.x + modifiedSlotWidth * factor;\n                        goRight = -1;\n                    }\n\n                    modifiedSlotWidth = Math.min(slotWidth, modifiedSlotWidth); // #4177\n                    if (modifiedSlotWidth < slotWidth && axis.labelAlign === 'center') {\n                        xy.x += goRight * (slotWidth - modifiedSlotWidth - xCorrection *\n                            (slotWidth - Math.min(labelWidth, modifiedSlotWidth)));\n                    }\n                    // If the label width exceeds the available space, set a text width to be\n                    // picked up below. Also, if a width has been set before, we need to set a new\n                    // one because the reported labelWidth will be limited by the box (#3938).\n                    if (labelWidth > modifiedSlotWidth || (axis.autoRotation && (label.styles || {}).width)) {\n                        textWidth = modifiedSlotWidth;\n                    }\n\n                    // Add ellipsis to prevent rotated labels to be clipped against the edge of the chart\n                } else if (rotation < 0 && pxPos - factor * labelWidth < leftBound) {\n                    textWidth = Math.round(pxPos / Math.cos(rotation * deg2rad) - leftBound);\n                } else if (rotation > 0 && pxPos + factor * labelWidth > rightBound) {\n                    textWidth = Math.round((chartWidth - pxPos) / Math.cos(rotation * deg2rad));\n                }\n\n                if (textWidth) {\n                    css.width = textWidth;\n                    if (!(axis.options.labels.style || {}).textOverflow) {\n                        css.textOverflow = 'ellipsis';\n                    }\n                    label.css(css);\n                }\n            },\n\n            /**\n             * Get the x and y position for ticks and labels\n             */\n            getPosition: function(horiz, pos, tickmarkOffset, old) {\n                var axis = this.axis,\n                    chart = axis.chart,\n                    cHeight = (old && chart.oldChartHeight) || chart.chartHeight;\n\n                return {\n                    x: horiz ?\n                        axis.translate(pos + tickmarkOffset, null, null, old) + axis.transB : axis.left + axis.offset +\n                        (axis.opposite ?\n                            ((old && chart.oldChartWidth) || chart.chartWidth) - axis.right - axis.left :\n                            0\n                        ),\n\n                    y: horiz ?\n                        cHeight - axis.bottom + axis.offset - (axis.opposite ? axis.height : 0) : cHeight - axis.translate(pos + tickmarkOffset, null, null, old) - axis.transB\n                };\n\n            },\n\n            /**\n             * Get the x, y position of the tick label\n             */\n            getLabelPosition: function(x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {\n                var axis = this.axis,\n                    transA = axis.transA,\n                    reversed = axis.reversed,\n                    staggerLines = axis.staggerLines,\n                    rotCorr = axis.tickRotCorr || {\n                        x: 0,\n                        y: 0\n                    },\n                    yOffset = labelOptions.y,\n                    line;\n\n                if (!defined(yOffset)) {\n                    if (axis.side === 0) {\n                        yOffset = label.rotation ? -8 : -label.getBBox().height;\n                    } else if (axis.side === 2) {\n                        yOffset = rotCorr.y + 8;\n                    } else {\n                        // #3140, #3140\n                        yOffset = Math.cos(label.rotation * deg2rad) * (rotCorr.y - label.getBBox(false, 0).height / 2);\n                    }\n                }\n\n                x = x + labelOptions.x + rotCorr.x - (tickmarkOffset && horiz ?\n                    tickmarkOffset * transA * (reversed ? -1 : 1) : 0);\n                y = y + yOffset - (tickmarkOffset && !horiz ?\n                    tickmarkOffset * transA * (reversed ? 1 : -1) : 0);\n\n                // Correct for staggered labels\n                if (staggerLines) {\n                    line = (index / (step || 1) % staggerLines);\n                    if (axis.opposite) {\n                        line = staggerLines - line - 1;\n                    }\n                    y += line * (axis.labelOffset / staggerLines);\n                }\n\n                return {\n                    x: x,\n                    y: Math.round(y)\n                };\n            },\n\n            /**\n             * Extendible method to return the path of the marker\n             */\n            getMarkPath: function(x, y, tickLength, tickWidth, horiz, renderer) {\n                return renderer.crispLine([\n                    'M',\n                    x,\n                    y,\n                    'L',\n                    x + (horiz ? 0 : -tickLength),\n                    y + (horiz ? tickLength : 0)\n                ], tickWidth);\n            },\n\n            /**\n             * Renders the gridLine.\n             * @param  {Boolean} old         Whether or not the tick is old\n             * @param  {number} opacity      The opacity of the grid line\n             * @param  {number} reverseCrisp Modifier for avoiding overlapping 1 or -1\n             * @return {undefined}\n             */\n            renderGridLine: function(old, opacity, reverseCrisp) {\n                var tick = this,\n                    axis = tick.axis,\n                    options = axis.options,\n                    gridLine = tick.gridLine,\n                    gridLinePath,\n                    attribs = {},\n                    pos = tick.pos,\n                    type = tick.type,\n                    tickmarkOffset = axis.tickmarkOffset,\n                    renderer = axis.chart.renderer;\n\n\n                var gridPrefix = type ? type + 'Grid' : 'grid',\n                    gridLineWidth = options[gridPrefix + 'LineWidth'],\n                    gridLineColor = options[gridPrefix + 'LineColor'],\n                    dashStyle = options[gridPrefix + 'LineDashStyle'];\n\n\n                if (!gridLine) {\n\n                    attribs.stroke = gridLineColor;\n                    attribs['stroke-width'] = gridLineWidth;\n                    if (dashStyle) {\n                        attribs.dashstyle = dashStyle;\n                    }\n\n                    if (!type) {\n                        attribs.zIndex = 1;\n                    }\n                    if (old) {\n                        attribs.opacity = 0;\n                    }\n                    tick.gridLine = gridLine = renderer.path()\n                        .attr(attribs)\n                        .addClass(\n                            'highcharts-' + (type ? type + '-' : '') + 'grid-line'\n                        )\n                        .add(axis.gridGroup);\n                }\n\n                // If the parameter 'old' is set, the current call will be followed\n                // by another call, therefore do not do any animations this time\n                if (!old && gridLine) {\n                    gridLinePath = axis.getPlotLinePath(\n                        pos + tickmarkOffset,\n                        gridLine.strokeWidth() * reverseCrisp,\n                        old, true\n                    );\n                    if (gridLinePath) {\n                        gridLine[tick.isNew ? 'attr' : 'animate']({\n                            d: gridLinePath,\n                            opacity: opacity\n                        });\n                    }\n                }\n            },\n\n            /**\n             * Renders the tick mark.\n             * @param  {Object} xy           The position vector of the mark\n             * @param  {number} xy.x         The x position of the mark\n             * @param  {number} xy.y         The y position of the mark\n             * @param  {number} opacity      The opacity of the mark\n             * @param  {number} reverseCrisp Modifier for avoiding overlapping 1 or -1\n             * @return {undefined}\n             */\n            renderMark: function(xy, opacity, reverseCrisp) {\n                var tick = this,\n                    axis = tick.axis,\n                    options = axis.options,\n                    renderer = axis.chart.renderer,\n                    type = tick.type,\n                    tickPrefix = type ? type + 'Tick' : 'tick',\n                    tickSize = axis.tickSize(tickPrefix),\n                    mark = tick.mark,\n                    isNewMark = !mark,\n                    x = xy.x,\n                    y = xy.y;\n\n\n                var tickWidth = pick(\n                        options[tickPrefix + 'Width'], !type && axis.isXAxis ? 1 : 0\n                    ), // X axis defaults to 1\n                    tickColor = options[tickPrefix + 'Color'];\n\n\n                if (tickSize) {\n\n                    // negate the length\n                    if (axis.opposite) {\n                        tickSize[0] = -tickSize[0];\n                    }\n\n                    // First time, create it\n                    if (isNewMark) {\n                        tick.mark = mark = renderer.path()\n                            .addClass('highcharts-' + (type ? type + '-' : '') + 'tick')\n                            .add(axis.axisGroup);\n\n\n                        mark.attr({\n                            stroke: tickColor,\n                            'stroke-width': tickWidth\n                        });\n\n                    }\n                    mark[isNewMark ? 'attr' : 'animate']({\n                        d: tick.getMarkPath(\n                            x,\n                            y,\n                            tickSize[0],\n                            mark.strokeWidth() * reverseCrisp,\n                            axis.horiz,\n                            renderer),\n                        opacity: opacity\n                    });\n\n                }\n            },\n\n            /**\n             * Renders the tick label.\n             * Note: The label should already be created in init(), so it should only\n             * have to be moved into place.\n             * @param  {Object} xy      The position vector of the label\n             * @param  {number} xy.x    The x position of the label\n             * @param  {number} xy.y    The y position of the label\n             * @param  {Boolean} old    Whether or not the tick is old\n             * @param  {number} opacity The opacity of the label\n             * @param  {number} index   The index of the tick\n             * @return {undefined}\n             */\n            renderLabel: function(xy, old, opacity, index) {\n                var tick = this,\n                    axis = tick.axis,\n                    horiz = axis.horiz,\n                    options = axis.options,\n                    label = tick.label,\n                    labelOptions = options.labels,\n                    step = labelOptions.step,\n                    tickmarkOffset = axis.tickmarkOffset,\n                    show = true,\n                    x = xy.x,\n                    y = xy.y;\n                if (label && isNumber(x)) {\n                    label.xy = xy = tick.getLabelPosition(\n                        x,\n                        y,\n                        label,\n                        horiz,\n                        labelOptions,\n                        tickmarkOffset,\n                        index,\n                        step\n                    );\n\n                    // Apply show first and show last. If the tick is both first and\n                    // last, it is a single centered tick, in which case we show the\n                    // label anyway (#2100).\n                    if (\n                        (\n                            tick.isFirst &&\n                            !tick.isLast &&\n                            !pick(options.showFirstLabel, 1)\n                        ) ||\n                        (\n                            tick.isLast &&\n                            !tick.isFirst &&\n                            !pick(options.showLastLabel, 1)\n                        )\n                    ) {\n                        show = false;\n\n                        // Handle label overflow and show or hide accordingly\n                    } else if (horiz && !axis.isRadial && !labelOptions.step &&\n                        !labelOptions.rotation && !old && opacity !== 0) {\n                        tick.handleOverflow(xy);\n                    }\n\n                    // apply step\n                    if (step && index % step) {\n                        // show those indices dividable by step\n                        show = false;\n                    }\n\n                    // Set the new position, and show or hide\n                    if (show && isNumber(xy.y)) {\n                        xy.opacity = opacity;\n                        label[tick.isNewLabel ? 'attr' : 'animate'](xy);\n                        tick.isNewLabel = false;\n                    } else {\n                        label.attr('y', -9999); // #1338\n                        tick.isNewLabel = true;\n                    }\n                    tick.isNew = false;\n                }\n            },\n\n            /**\n             * Put everything in place\n             *\n             * @param index {Number}\n             * @param old {Boolean} Use old coordinates to prepare an animation into new\n             *                      position\n             */\n            render: function(index, old, opacity) {\n                var tick = this,\n                    axis = tick.axis,\n                    horiz = axis.horiz,\n                    pos = tick.pos,\n                    tickmarkOffset = axis.tickmarkOffset,\n                    xy = tick.getPosition(horiz, pos, tickmarkOffset, old),\n                    x = xy.x,\n                    y = xy.y,\n                    reverseCrisp = ((horiz && x === axis.pos + axis.len) ||\n                        (!horiz && y === axis.pos)) ? -1 : 1; // #1480, #1687\n\n                opacity = pick(opacity, 1);\n                this.isActive = true;\n\n                // Create the grid line\n                this.renderGridLine(old, opacity, reverseCrisp);\n\n                // create the tick mark\n                this.renderMark(xy, opacity, reverseCrisp);\n\n                // the label is created on init - now move it into place\n                this.renderLabel(xy, old, opacity, index);\n            },\n\n            /**\n             * Destructor for the tick prototype\n             */\n            destroy: function() {\n                destroyObjectProperties(this, this.axis);\n            }\n        };\n\n    }(Highcharts));\n    var Axis = (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n\n        var addEvent = H.addEvent,\n            animObject = H.animObject,\n            arrayMax = H.arrayMax,\n            arrayMin = H.arrayMin,\n            color = H.color,\n            correctFloat = H.correctFloat,\n            defaultOptions = H.defaultOptions,\n            defined = H.defined,\n            deg2rad = H.deg2rad,\n            destroyObjectProperties = H.destroyObjectProperties,\n            each = H.each,\n            extend = H.extend,\n            fireEvent = H.fireEvent,\n            format = H.format,\n            getMagnitude = H.getMagnitude,\n            grep = H.grep,\n            inArray = H.inArray,\n            isArray = H.isArray,\n            isNumber = H.isNumber,\n            isString = H.isString,\n            merge = H.merge,\n            normalizeTickInterval = H.normalizeTickInterval,\n            objectEach = H.objectEach,\n            pick = H.pick,\n            removeEvent = H.removeEvent,\n            splat = H.splat,\n            syncTimeout = H.syncTimeout,\n            Tick = H.Tick;\n\n        /**\n         * Create a new axis object. Called internally when instanciating a new chart or\n         * adding axes by {@link Highcharts.Chart#addAxis}.\n         *\n         * A chart can have from 0 axes (pie chart) to multiples. In a normal, single\n         * series cartesian chart, there is one X axis and one Y axis.\n         *\n         * The X axis or axes are referenced by {@link Highcharts.Chart.xAxis}, which is\n         * an array of Axis objects. If there is only one axis, it can be referenced\n         * through `chart.xAxis[0]`, and multiple axes have increasing indices. The same\n         * pattern goes for Y axes.\n         *\n         * If you need to get the axes from a series object, use the `series.xAxis` and\n         * `series.yAxis` properties. These are not arrays, as one series can only be\n         * associated to one X and one Y axis.\n         *\n         * A third way to reference the axis programmatically is by `id`. Add an `id` in\n         * the axis configuration options, and get the axis by\n         * {@link Highcharts.Chart#get}.\n         *\n         * Configuration options for the axes are given in options.xAxis and\n         * options.yAxis.\n         *\n         * @class Highcharts.Axis\n         * @memberOf Highcharts\n         * @param {Highcharts.Chart} chart - The Chart instance to apply the axis on.\n         * @param {Object} options - Axis options\n         */\n        var Axis = function() {\n            this.init.apply(this, arguments);\n        };\n\n        H.extend(Axis.prototype, /** @lends Highcharts.Axis.prototype */ {\n\n            /**\n             * The X axis or category axis. Normally this is the horizontal axis,\n             * though if the chart is inverted this is the vertical axis. In case of\n             * multiple axes, the xAxis node is an array of configuration objects.\n             *\n             * See [../class-reference/Highcharts.Axis](the Axis object) for\n             * programmatic access to the axis.\n             *\n             * @productdesc {highmaps}\n             * In Highmaps, the axis is hidden, but it is used behind the scenes to\n             * control features like zooming and panning. Zooming is in effect the same\n             * as setting the extremes of one of the exes.\n             *\n             * @optionparent xAxis\n             */\n            defaultOptions: {\n                // allowDecimals: null,\n                // alternateGridColor: null,\n                // categories: [],\n\n                /**\n                 * For a datetime axis, the scale will automatically adjust to the\n                 * appropriate unit. This member gives the default string representations\n                 * used for each unit. For intermediate values, different units may\n                 * be used, for example the `day` unit can be used on midnight and\n                 * `hour` unit be used for intermediate values on the same axis. For\n                 * an overview of the replacement codes, see [dateFormat](#Highcharts.\n                 * dateFormat). Defaults to:\n                 *\n                 * <pre>{\n                 * millisecond: '%H:%M:%S.%L',\n                 * second: '%H:%M:%S',\n                 * minute: '%H:%M',\n                 * hour: '%H:%M',\n                 * day: '%e. %b',\n                 * week: '%e. %b',\n                 * month: '%b \\'%y',\n                 * year: '%Y'\n                 * }</pre>\n                 *\n                 * @type {Object}\n                 * @sample {highcharts} highcharts/xaxis/datetimelabelformats/ Different day format on X axis\n                 * @sample {highstock} stock/xaxis/datetimelabelformats/ More information in x axis labels\n                 * @product highcharts highstock\n                 */\n                dateTimeLabelFormats: {\n\n                    /**\n                     */\n                    millisecond: '%H:%M:%S.%L',\n\n                    /**\n                     */\n                    second: '%H:%M:%S',\n\n                    /**\n                     */\n                    minute: '%H:%M',\n\n                    /**\n                     */\n                    hour: '%H:%M',\n\n                    /**\n                     */\n                    day: '%e. %b',\n\n                    /**\n                     */\n                    week: '%e. %b',\n\n                    /**\n                     */\n                    month: '%b \\'%y',\n\n                    /**\n                     */\n                    year: '%Y'\n                },\n\n                /**\n                 * Whether to force the axis to end on a tick. Use this option with\n                 * the `maxPadding` option to control the axis end.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/reflow-true/ True by default\n                 * @sample {highcharts} highcharts/yaxis/endontick/ False\n                 * @sample {highstock} stock/demo/basic-line/ True by default\n                 * @sample {highstock} stock/xaxis/endontick/ False\n                 * @default false\n                 * @since 1.2.0\n                 * @product highcharts highstock highmaps\n                 */\n                endOnTick: false,\n                // reversed: false,\n\n\n                /**\n                 * The axis labels show the number or category for each tick.\n                 *\n                 * @productdesc {highmaps}\n                 * X and Y axis labels are by default disabled in Highmaps, but the\n                 * functionality is inherited from Highcharts and used on `colorAxis`,\n                 * and can be enabled on X and Y axes too.\n                 */\n                labels: {\n\n                    /**\n                     * Enable or disable the axis labels.\n                     *\n                     * @type {Boolean}\n                     * @sample {highcharts} highcharts/xaxis/labels-enabled/ X axis labels disabled\n                     * @sample {highstock} stock/xaxis/labels-enabled/ X axis labels disabled\n                     * @default {highstock} true\n                     * @default {highmaps} false\n                     * @product highcharts highstock highmaps\n                     */\n                    enabled: true,\n                    // rotation: 0,\n                    // align: 'center',\n                    // step: null,\n\n\n                    /**\n                     * CSS styles for the label. Use `whiteSpace: 'nowrap'` to prevent\n                     * wrapping of category labels. Use `textOverflow: 'none'` to prevent\n                     * ellipsis (dots).\n                     *\n                     * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the labels are styled with the `.highcharts-\n                     * axis-labels` class.\n                     *\n                     * @type {CSSObject}\n                     * @sample {highcharts} highcharts/xaxis/labels-style/ Red X axis labels\n                     * @default { \"color\": \"#666666\", \"cursor\": \"default\", \"fontSize\": \"11px\" }\n                     * @product highcharts highstock highmaps\n                     */\n                    style: {\n\n                        /**\n                         */\n                        color: '#666666',\n\n                        /**\n                         */\n                        cursor: 'default',\n\n                        /**\n                         */\n                        fontSize: '11px'\n                    },\n\n\n                    /**\n                     * The x position offset of the label relative to the tick position\n                     * on the axis.\n                     *\n                     * @type {Number}\n                     * @sample {highcharts} highcharts/xaxis/labels-x/ Y axis labels placed on grid lines\n                     * @default 0\n                     * @product highcharts highstock highmaps\n                     */\n                    x: 0\n                    //y: undefined\n                    /*formatter: function () {\n                    \treturn this.value;\n                    },*/\n                },\n                //linkedTo: null,\n                //max: undefined,\n                //min: undefined,\n\n                /**\n                 * Padding of the min value relative to the length of the axis. A\n                 * padding of 0.05 will make a 100px axis 5px longer. This is useful\n                 * when you don't want the lowest data value to appear on the edge\n                 * of the plot area. When the axis' `min` option is set or a min extreme\n                 * is set using `axis.setExtremes()`, the minPadding will be ignored.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/minpadding/ Min padding of 0.2\n                 * @sample {highstock} stock/xaxis/minpadding-maxpadding/ Greater min- and maxPadding\n                 * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/ Add some padding\n                 * @default {highcharts} 0.01\n                 * @default {highstock} 0\n                 * @default {highmaps} 0\n                 * @since 1.2.0\n                 * @product highcharts highstock highmaps\n                 */\n                minPadding: 0.01,\n\n                /**\n                 * Padding of the max value relative to the length of the axis. A\n                 * padding of 0.05 will make a 100px axis 5px longer. This is useful\n                 * when you don't want the highest data value to appear on the edge\n                 * of the plot area. When the axis' `max` option is set or a max extreme\n                 * is set using `axis.setExtremes()`, the maxPadding will be ignored.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/maxpadding/ Max padding of 0.25 on y axis\n                 * @sample {highstock} stock/xaxis/minpadding-maxpadding/ Greater min- and maxPadding\n                 * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/ Add some padding\n                 * @default {highcharts} 0.01\n                 * @default {highstock} 0\n                 * @default {highmaps} 0\n                 * @since 1.2.0\n                 * @product highcharts highstock highmaps\n                 */\n                maxPadding: 0.01,\n                //minRange: null,\n                //minorTickInterval: null,\n\n                /**\n                 * The pixel length of the minor tick marks.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/minorticklength/ 10px on Y axis\n                 * @sample {highstock} stock/xaxis/minorticks/ 10px on Y axis\n                 * @default 2\n                 * @product highcharts highstock highmaps\n                 */\n                minorTickLength: 2,\n\n                /**\n                 * The position of the minor tick marks relative to the axis line.\n                 *  Can be one of `inside` and `outside`.\n                 *\n                 * @validvalue [\"inside\", \"outside\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/yaxis/minortickposition-outside/ Outside by default\n                 * @sample {highcharts} highcharts/yaxis/minortickposition-inside/ Inside\n                 * @sample {highstock} stock/xaxis/minorticks/ Inside\n                 * @default outside\n                 * @product highcharts highstock highmaps\n                 */\n                minorTickPosition: 'outside', // inside or outside\n                //opposite: false,\n                //offset: 0,\n                //plotBands: [{\n                //\tevents: {},\n                //\tzIndex: 1,\n                //\tlabels: { align, x, verticalAlign, y, style, rotation, textAlign }\n                //}],\n                //plotLines: [{\n                //\tevents: {}\n                //  dashStyle: {}\n                //\tzIndex:\n                //\tlabels: { align, x, verticalAlign, y, style, rotation, textAlign }\n                //}],\n                //reversed: false,\n                // showFirstLabel: true,\n                // showLastLabel: true,\n\n                /**\n                 * For datetime axes, this decides where to put the tick between weeks.\n                 *  0 = Sunday, 1 = Monday.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/xaxis/startofweek-monday/ Monday by default\n                 * @sample {highcharts} highcharts/xaxis/startofweek-sunday/ Sunday\n                 * @sample {highstock} stock/xaxis/startofweek-1 Monday by default\n                 * @sample {highstock} stock/xaxis/startofweek-0 Sunday\n                 * @default 1\n                 * @product highcharts highstock\n                 */\n                startOfWeek: 1,\n\n                /**\n                 * Whether to force the axis to start on a tick. Use this option with\n                 * the `minPadding` option to control the axis start.\n                 *\n                 * @productdesc {highstock}\n                 * In Highstock, `startOnTick` is always false when the navigator is\n                 * enabled, to prevent jumpy scrolling.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/xaxis/startontick-false/ False by default\n                 * @sample {highcharts} highcharts/xaxis/startontick-true/ True\n                 * @sample {highstock} stock/xaxis/endontick/ False for Y axis\n                 * @default false\n                 * @since 1.2.0\n                 */\n                startOnTick: false,\n                //tickInterval: null,\n\n                /**\n                 * The pixel length of the main tick marks.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/xaxis/ticklength/ 20 px tick length on the X axis\n                 * @sample {highstock} stock/xaxis/ticks/ Formatted ticks on X axis\n                 * @default 10\n                 * @product highcharts highstock highmaps\n                 */\n                tickLength: 10,\n\n                /**\n                 * For categorized axes only. If `on` the tick mark is placed in the\n                 * center of the category, if `between` the tick mark is placed between\n                 * categories. The default is `between` if the `tickInterval` is 1,\n                 *  else `on`.\n                 *\n                 * @validvalue [null, \"on\", \"between\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/xaxis/tickmarkplacement-between/ \"between\" by default\n                 * @sample {highcharts} highcharts/xaxis/tickmarkplacement-on/ \"on\"\n                 * @default null\n                 * @product highcharts\n                 */\n                tickmarkPlacement: 'between', // on or between\n\n                /**\n                 * If tickInterval is `null` this option sets the approximate pixel\n                 * interval of the tick marks. Not applicable to categorized axis.\n                 *\n                 *\n                 * The tick interval is also influenced by the [minTickInterval](#xAxis.\n                 * minTickInterval) option, that, by default prevents ticks from being\n                 * denser than the data points.\n                 *\n                 * Defaults to `72` for the Y axis and `100` for the X axis.\n                 *\n                 * @type {Number}\n                 * @see [tickInterval](#xAxis.tickInterval), [tickPositioner](#xAxis.tickPositioner),\n                 *  [tickPositions](#xAxis.tickPositions)-\n                 * @sample {highcharts} highcharts/xaxis/tickpixelinterval-50/ 50 px on X axis\n                 * @sample {highstock} stock/xaxis/tickpixelinterval/ 200 px on X axis\n                 * @product highcharts highstock highmaps\n                 */\n                tickPixelInterval: 100,\n\n                /**\n                 * The position of the major tick marks relative to the axis line.\n                 *  Can be one of `inside` and `outside`.\n                 *\n                 * @validvalue [\"inside\", \"outside\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/xaxis/tickposition-outside/ \"outside\" by default\n                 * @sample {highcharts} highcharts/xaxis/tickposition-inside/ \"inside\"\n                 * @sample {highstock} stock/xaxis/ticks/ Formatted ticks on X axis\n                 * @default {highcharts} outside\n                 * @default {highstock} \"outside\"\n                 * @default {highmaps} outside\n                 * @product highcharts highstock highmaps\n                 */\n                tickPosition: 'outside',\n\n                /**\n                 * The axis title, showing next to the axis line.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, the axis is hidden by default, but adding an axis title\n                 * is still possible. X axis and Y axis titles will appear at the bottom\n                 * and left by default.\n                 */\n                title: {\n                    //text: null,\n\n                    /**\n                     * Alignment of the title relative to the axis values. Possible values\n                     * are \"low\", \"middle\" or \"high\".\n                     *\n                     * @validvalue [\"low\", \"middle\", \"high\"]\n                     * @type {String}\n                     * @sample {highcharts} highcharts/xaxis/title-align-low/ \"low\"\n                     * @sample {highcharts} highcharts/xaxis/title-align-center/ \"middle\" by default\n                     * @sample {highcharts} highcharts/xaxis/title-align-high/ \"high\"\n                     * @sample {highcharts} highcharts/yaxis/title-offset/ Place the Y axis title on top of the axis\n                     * @sample {highstock} stock/xaxis/title-align/ Aligned to \"high\" value\n                     * @default {highcharts} middle\n                     * @default {highstock} \"middle\"\n                     * @default {highmaps} middle\n                     * @product highcharts highstock highmaps\n                     */\n                    align: 'middle', // low, middle or high\n                    //margin: 0 for horizontal, 10 for vertical axes,\n                    // reserveSpace: true,\n                    //rotation: 0,\n                    //side: 'outside',\n\n\n                    /**\n                     * CSS styles for the title. If the title text is longer than the\n                     * axis length, it will wrap to multiple lines by default. This can\n                     * be customized by setting `textOverflow: 'ellipsis'`, by\n                     * setting a specific `width` or by setting `wordSpace: 'nowrap'`.\n                     *\n                     *\n                     * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the stroke width is given in the\n                     * `.highcharts-axis-title` class.\n                     *\n                     * @type {CSSObject}\n                     * @sample {highcharts} highcharts/xaxis/title-style/ Red\n                     * @sample {highcharts} highcharts/css/axis/ Styled mode\n                     * @default { \"color\": \"#666666\" }\n                     * @product highcharts highstock highmaps\n                     */\n                    style: {\n\n                        /**\n                         */\n                        color: '#666666'\n                    }\n\n                    //x: 0,\n                    //y: 0\n                },\n\n                /**\n                 * The type of axis. Can be one of `linear`, `logarithmic`, `datetime`\n                 * or `category`. In a datetime axis, the numbers are given in milliseconds,\n                 * and tick marks are placed on appropriate values like full hours\n                 * or days. In a category axis, the [point names](#series<line>.data.\n                 * name) of the chart's series are used for categories, if not a [categories](#xAxis.\n                 * categories) array is defined.\n                 *\n                 * @validvalue [\"linear\", \"logarithmic\", \"datetime\", \"category\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/xaxis/type-linear/ Linear\n                 * @sample {highcharts} highcharts/yaxis/type-log/ Logarithmic\n                 * @sample {highcharts} highcharts/yaxis/type-log-minorgrid/ Logarithmic with minor grid lines\n                 * @sample {highcharts} highcharts/xaxis/type-log-both/ Logarithmic on two axes\n                 * @sample {highcharts} highcharts/yaxis/type-log-negative/ Logarithmic with extension to emulate negative values\n                 * @default linear\n                 * @product highcharts\n                 */\n                type: 'linear', // linear, logarithmic or datetime\n                //visible: true\n\n\n                /**\n                 * Color of the minor, secondary grid lines.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke width is given in the `.highcharts-\n                 * minor-grid-line` class.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/yaxis/minorgridlinecolor/ Bright grey lines from Y axis\n                 * @sample {highcharts} highcharts/css/axis-grid/ Styled mode\n                 * @sample {highstock} stock/xaxis/minorgridlinecolor/ Bright grey lines from Y axis\n                 * @sample {highstock} highcharts/css/axis-grid/ Styled mode\n                 * @default #f2f2f2\n                 * @product highcharts highstock highmaps\n                 */\n                minorGridLineColor: '#f2f2f2',\n                // minorGridLineDashStyle: null,\n\n                /**\n                 * Width of the minor, secondary grid lines.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke width is given in the `.highcharts-\n                 * grid-line` class.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/minorgridlinewidth/ 2px lines from Y axis\n                 * @sample {highcharts} highcharts/css/axis-grid/ Styled mode\n                 * @sample {highstock} stock/xaxis/minorgridlinewidth/ 2px lines from Y axis\n                 * @sample {highstock} highcharts/css/axis-grid/ Styled mode\n                 * @default 1\n                 * @product highcharts highstock highmaps\n                 */\n                minorGridLineWidth: 1,\n\n                /**\n                 * Color for the minor tick marks.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/yaxis/minortickcolor/ Black tick marks on Y axis\n                 * @sample {highstock} stock/xaxis/minorticks/ Black tick marks on Y axis\n                 * @default #999999\n                 * @product highcharts highstock highmaps\n                 */\n                minorTickColor: '#999999',\n                //minorTickWidth: 0,\n\n                /**\n                 * The color of the line marking the axis itself.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the line stroke is given in the `.highcharts-\n                 * axis-line` or `.highcharts-xaxis-line` class.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, the axis line is hidden by default.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/yaxis/linecolor/ A red line on Y axis\n                 * @sample {highcharts} highcharts/css/axis/ Axes in styled mode\n                 * @sample {highstock} stock/xaxis/linecolor/ A red line on X axis\n                 * @sample {highstock} highcharts/css/axis/ Axes in styled mode\n                 * @default #ccd6eb\n                 * @product highcharts highstock highmaps\n                 */\n                lineColor: '#ccd6eb',\n\n                /**\n                 * The width of the line marking the axis itself.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke width is given in the `.highcharts-\n                 * axis-line` or `.highcharts-xaxis-line` class.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/linecolor/ A 1px line on Y axis\n                 * @sample {highcharts} highcharts/css/axis/ Axes in styled mode\n                 * @sample {highstock} stock/xaxis/linewidth/ A 2px line on X axis\n                 * @sample {highstock} highcharts/css/axis/ Axes in styled mode\n                 * @default {highcharts} 1\n                 * @default {highstock} 1\n                 * @default {highmaps} 0\n                 * @product highcharts highstock highmaps\n                 */\n                lineWidth: 1,\n\n                /**\n                 * Color of the grid lines extending the ticks across the plot area.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke is given in the `.highcharts-grid-\n                 * line` class.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, the grid lines are hidden by default.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/yaxis/gridlinecolor/ Green lines\n                 * @sample {highcharts} highcharts/css/axis-grid/ Styled mode\n                 * @sample {highstock} stock/xaxis/gridlinecolor/ Green lines\n                 * @sample {highstock} highcharts/css/axis-grid/ Styled mode\n                 * @default #e6e6e6\n                 * @product highcharts highstock highmaps\n                 */\n                gridLineColor: '#e6e6e6',\n                // gridLineDashStyle: 'solid',\n                // gridLineWidth: 0,\n\n                /**\n                 * Color for the main tick marks.\n                 *\n                 * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                 * style/style-by-css), the stroke is given in the `.highcharts-tick`\n                 * class.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/xaxis/tickcolor/ Red ticks on X axis\n                 * @sample {highcharts} highcharts/css/axis-grid/ Styled mode\n                 * @sample {highstock} stock/xaxis/ticks/ Formatted ticks on X axis\n                 * @sample {highstock} highcharts/css/axis-grid/ Styled mode\n                 * @default #ccd6eb\n                 * @product highcharts highstock highmaps\n                 */\n                tickColor: '#ccd6eb'\n                // tickWidth: 1\n\n            },\n\n            /**\n             * This option set extends the defaultOptions for Y axes.\n             * @extends xAxis\n             * @optionparent yAxis\n             */\n            defaultYAxisOptions: {\n\n                /**\n                 * Whether to force the axis to end on a tick. Use this option with\n                 * the `maxPadding` option to control the axis end.\n                 *\n                 * @productdesc {highstock}\n                 * In Highstock, `endOnTick` is always false when the navigator is\n                 * enabled, to prevent jumpy scrolling.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/chart/reflow-true/ True by default\n                 * @sample {highcharts} highcharts/yaxis/endontick-false/ False\n                 * @sample {highcharts} highcharts/yaxis/endontick-log-false/ False\n                 * @sample {highstock} stock/demo/basic-line/ True by default\n                 * @sample {highstock} stock/xaxis/endontick/ False\n                 * @default true\n                 * @since 1.2.0\n                 * @product highcharts highstock\n                 */\n                endOnTick: true,\n\n                /**\n                 */\n                tickPixelInterval: 72,\n\n                /**\n                 * Whether to show the last tick label. Defaults to `true` on cartesian\n                 * charts, and `false` on polar charts.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/xaxis/showlastlabel-true/ Set to true on X axis\n                 * @sample {highstock} stock/xaxis/showfirstlabel/ Labels below plot lines on Y axis\n                 * @default false\n                 * @product highcharts highstock\n                 */\n                showLastLabel: true,\n\n                /**\n                 * @extends xAxis.labels\n                 * @product highcharts highstock highmaps\n                 */\n                labels: {\n\n                    /**\n                     * The x position offset of the label relative to the tick position\n                     * on the axis. Defaults to -15 for left axis, 15 for right axis.\n                     *\n                     * @type {Number}\n                     * @sample {highcharts} highcharts/xaxis/labels-x/ Y axis labels placed on grid lines\n                     * @default 0\n                     * @product highcharts highstock highmaps\n                     */\n                    x: -8\n                },\n\n                /**\n                 * Padding of the max value relative to the length of the axis. A\n                 * padding of 0.05 will make a 100px axis 5px longer. This is useful\n                 * when you don't want the highest data value to appear on the edge\n                 * of the plot area. When the axis' `max` option is set or a max extreme\n                 * is set using `axis.setExtremes()`, the maxPadding will be ignored.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/maxpadding-02/ Max padding of 0.2\n                 * @sample {highstock} stock/xaxis/minpadding-maxpadding/ Greater min- and maxPadding\n                 * @default 0.05\n                 * @since 1.2.0\n                 * @product highcharts highstock\n                 */\n                maxPadding: 0.05,\n\n                /**\n                 * Padding of the min value relative to the length of the axis. A\n                 * padding of 0.05 will make a 100px axis 5px longer. This is useful\n                 * when you don't want the lowest data value to appear on the edge\n                 * of the plot area. When the axis' `min` option is set or a max extreme\n                 * is set using `axis.setExtremes()`, the maxPadding will be ignored.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/minpadding/ Min padding of 0.2\n                 * @sample {highstock} stock/xaxis/minpadding-maxpadding/ Greater min- and maxPadding\n                 * @default 0.05\n                 * @since 1.2.0\n                 * @product highcharts highstock\n                 */\n                minPadding: 0.05,\n\n                /**\n                 * Whether to force the axis to start on a tick. Use this option with\n                 * the `maxPadding` option to control the axis start.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/xaxis/startontick-false/ False by default\n                 * @sample {highcharts} highcharts/xaxis/startontick-true/ True\n                 * @sample {highstock} stock/xaxis/endontick/ False for Y axis\n                 * @default true\n                 * @since 1.2.0\n                 * @product highcharts highstock\n                 */\n                startOnTick: true,\n\n                /**\n                 * @extends xAxis.title\n                 * @product highcharts highstock highmaps\n                 */\n                title: {\n\n                    /**\n                     * The rotation of the text in degrees. 0 is horizontal, 270 is vertical\n                     * reading from bottom to top.\n                     *\n                     * @type {Number}\n                     * @sample {highcharts} highcharts/yaxis/title-offset/ Horizontal\n                     * @default 270\n                     * @product highcharts highstock highmaps\n                     */\n                    rotation: 270,\n\n                    /**\n                     * The actual text of the axis title. Horizontal texts can contain\n                     * HTML, but rotated texts are painted using vector techniques and\n                     * must be clean text. The Y axis title is disabled by setting the\n                     * `text` option to `null`.\n                     *\n                     * @type {String}\n                     * @sample {highcharts} highcharts/xaxis/title-text/ Custom HTML\n                     * @default Values\n                     * @product highcharts\n                     */\n                    text: 'Values'\n                },\n\n                /**\n                 * The stack labels show the total value for each bar in a stacked\n                 * column or bar chart. The label will be placed on top of positive\n                 * columns and below negative columns. In case of an inverted column\n                 * chart or a bar chart the label is placed to the right of positive\n                 * bars and to the left of negative bars.\n                 *\n                 * @product highcharts\n                 */\n                stackLabels: {\n\n                    /**\n                     * Allow the stack labels to overlap.\n                     *\n                     * @type {Boolean}\n                     * @sample {highcharts} highcharts/yaxis/stacklabels-allowoverlap-false/\n                     *         Default false\n                     * @since 5.0.13\n                     * @product highcharts\n                     */\n                    allowOverlap: false,\n\n                    /**\n                     * Enable or disable the stack total labels.\n                     *\n                     * @type {Boolean}\n                     * @sample {highcharts} highcharts/yaxis/stacklabels-enabled/ Enabled stack total labels\n                     * @since 2.1.5\n                     * @product highcharts\n                     */\n                    enabled: false,\n                    //align: dynamic,\n                    //y: dynamic,\n                    //x: dynamic,\n                    //verticalAlign: dynamic,\n                    //textAlign: dynamic,\n                    //rotation: 0,\n\n                    /**\n                     * Callback JavaScript function to format the label. The value is\n                     * given by `this.total`. Defaults to:\n                     *\n                     * <pre>function() {\n                     * return this.total;\n                     * }</pre>\n                     *\n                     * @type {Function}\n                     * @sample {highcharts} highcharts/yaxis/stacklabels-formatter/ Added units to stack total value\n                     * @since 2.1.5\n                     * @product highcharts\n                     */\n                    formatter: function() {\n                        return H.numberFormat(this.total, -1);\n                    },\n\n\n                    /**\n                     * CSS styles for the label.\n                     *\n                     * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the styles are set in the `.highcharts-stack-\n                     * label` class.\n                     *\n                     * @type {CSSObject}\n                     * @sample {highcharts} highcharts/yaxis/stacklabels-style/ Red stack total labels\n                     * @default { \"color\": \"#000000\", \"fontSize\": \"11px\", \"fontWeight\": \"bold\", \"textShadow\": \"1px 1px contrast, -1px -1px contrast, -1px 1px contrast, 1px -1px contrast\" }\n                     * @since 2.1.5\n                     * @product highcharts\n                     */\n                    style: {\n\n                        /**\n                         */\n                        fontSize: '11px',\n\n                        /**\n                         */\n                        fontWeight: 'bold',\n\n                        /**\n                         */\n                        color: '#000000',\n\n                        /**\n                         */\n                        textOutline: '1px contrast'\n                    }\n\n                },\n\n\n                /**\n                 * The width of the grid lines extending the ticks across the plot\n                 * area.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, the grid lines are hidden by default.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/gridlinewidth/ 2px lines\n                 * @sample {highstock} stock/xaxis/gridlinewidth/ 2px lines\n                 * @default 1\n                 * @product highcharts highstock\n                 */\n                gridLineWidth: 1,\n\n                /**\n                 * The width of the line marking the axis itself.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/yaxis/linecolor/ A 1px line on Y axis\n                 * @sample {highstock} stock/xaxis/linewidth/ A 2px line on X axis\n                 * @default 0\n                 * @product highcharts highstock\n                 */\n                lineWidth: 0\n                // tickWidth: 0\n\n            },\n\n            /**\n             * These options extend the defaultOptions for left axes.\n             *\n             * @private\n             * @type {Object}\n             */\n            defaultLeftAxisOptions: {\n                labels: {\n                    x: -15\n                },\n                title: {\n                    rotation: 270\n                }\n            },\n\n            /**\n             * These options extend the defaultOptions for right axes.\n             *\n             * @private\n             * @type {Object}\n             */\n            defaultRightAxisOptions: {\n                labels: {\n                    x: 15\n                },\n                title: {\n                    rotation: 90\n                }\n            },\n\n            /**\n             * These options extend the defaultOptions for bottom axes.\n             *\n             * @private\n             * @type {Object}\n             */\n            defaultBottomAxisOptions: {\n                labels: {\n                    autoRotation: [-45],\n                    x: 0\n                    // overflow: undefined,\n                    // staggerLines: null\n                },\n                title: {\n                    rotation: 0\n                }\n            },\n            /**\n             * These options extend the defaultOptions for top axes.\n             *\n             * @private\n             * @type {Object}\n             */\n            defaultTopAxisOptions: {\n                labels: {\n                    autoRotation: [-45],\n                    x: 0\n                    // overflow: undefined\n                    // staggerLines: null\n                },\n                title: {\n                    rotation: 0\n                }\n            },\n\n            /**\n             * Overrideable function to initialize the axis.\n             *\n             * @see {@link Axis}\n             */\n            init: function(chart, userOptions) {\n\n\n                var isXAxis = userOptions.isX,\n                    axis = this;\n\n\n                /**\n                 * The Chart that the axis belongs to.\n                 *\n                 * @name chart\n                 * @memberOf Axis\n                 * @type {Chart}\n                 */\n                axis.chart = chart;\n\n                /**\n                 * Whether the axis is horizontal.\n                 *\n                 * @name horiz\n                 * @memberOf Axis\n                 * @type {Boolean}\n                 */\n                axis.horiz = chart.inverted && !axis.isZAxis ? !isXAxis : isXAxis;\n\n                // Flag, isXAxis\n                axis.isXAxis = isXAxis;\n\n                /**\n                 * The collection where the axis belongs, for example `xAxis`, `yAxis`\n                 * or `colorAxis`. Corresponds to properties on Chart, for example\n                 * {@link Chart.xAxis}.\n                 *\n                 * @name coll\n                 * @memberOf Axis\n                 * @type {String}\n                 */\n                axis.coll = axis.coll || (isXAxis ? 'xAxis' : 'yAxis');\n\n\n                axis.opposite = userOptions.opposite; // needed in setOptions\n\n                /**\n                 * The side on which the axis is rendered. 0 is top, 1 is right, 2 is\n                 * bottom and 3 is left.\n                 *\n                 * @name side\n                 * @memberOf Axis\n                 * @type {Number}\n                 */\n                axis.side = userOptions.side || (axis.horiz ?\n                    (axis.opposite ? 0 : 2) : // top : bottom\n                    (axis.opposite ? 1 : 3)); // right : left\n\n                axis.setOptions(userOptions);\n\n\n                var options = this.options,\n                    type = options.type,\n                    isDatetimeAxis = type === 'datetime';\n\n                axis.labelFormatter = options.labels.formatter ||\n                    axis.defaultLabelFormatter; // can be overwritten by dynamic format\n\n\n                // Flag, stagger lines or not\n                axis.userOptions = userOptions;\n\n                //axis.axisTitleMargin = undefined,// = options.title.margin,\n                axis.minPixelPadding = 0;\n\n\n                /**\n                 * Whether the axis is reversed. Based on the `axis.reversed`,\n                 * option, but inverted charts have reversed xAxis by default.\n                 *\n                 * @name reversed\n                 * @memberOf Axis\n                 * @type {Boolean}\n                 */\n                axis.reversed = options.reversed;\n                axis.visible = options.visible !== false;\n                axis.zoomEnabled = options.zoomEnabled !== false;\n\n                // Initial categories\n                axis.hasNames = type === 'category' || options.categories === true;\n                axis.categories = options.categories || axis.hasNames;\n                axis.names = axis.names || []; // Preserve on update (#3830)\n\n                // Elements\n                //axis.axisGroup = undefined;\n                //axis.gridGroup = undefined;\n                //axis.axisTitle = undefined;\n                //axis.axisLine = undefined;\n\n                // Placeholder for plotlines and plotbands groups\n                axis.plotLinesAndBandsGroups = {};\n\n                // Shorthand types\n                axis.isLog = type === 'logarithmic';\n                axis.isDatetimeAxis = isDatetimeAxis;\n                axis.positiveValuesOnly = axis.isLog && !axis.allowNegativeLog;\n\n                // Flag, if axis is linked to another axis\n                axis.isLinked = defined(options.linkedTo);\n                // Linked axis.\n                //axis.linkedParent = undefined;\n\n                // Major ticks\n                axis.ticks = {};\n                axis.labelEdge = [];\n                // Minor ticks\n                axis.minorTicks = {};\n\n                // List of plotLines/Bands\n                axis.plotLinesAndBands = [];\n\n                // Alternate bands\n                axis.alternateBands = {};\n\n                // Axis metrics\n                //axis.left = undefined;\n                //axis.top = undefined;\n                //axis.width = undefined;\n                //axis.height = undefined;\n                //axis.bottom = undefined;\n                //axis.right = undefined;\n                //axis.transA = undefined;\n                //axis.transB = undefined;\n                //axis.oldTransA = undefined;\n                axis.len = 0;\n                //axis.oldMin = undefined;\n                //axis.oldMax = undefined;\n                //axis.oldUserMin = undefined;\n                //axis.oldUserMax = undefined;\n                //axis.oldAxisLength = undefined;\n                axis.minRange = axis.userMinRange = options.minRange || options.maxZoom;\n                axis.range = options.range;\n                axis.offset = options.offset || 0;\n\n\n                // Dictionary for stacks\n                axis.stacks = {};\n                axis.oldStacks = {};\n                axis.stacksTouched = 0;\n\n                // Min and max in the data\n                //axis.dataMin = undefined,\n                //axis.dataMax = undefined,\n\n                /**\n                 * The maximum value of the axis. In a logarithmic axis, this is the\n                 * logarithm of the real value, and the real value can be obtained from\n                 * {@link Axis#getExtremes}.\n                 *\n                 * @name max\n                 * @memberOf Axis\n                 * @type {Number}\n                 */\n                axis.max = null;\n                /**\n                 * The minimum value of the axis. In a logarithmic axis, this is the\n                 * logarithm of the real value, and the real value can be obtained from\n                 * {@link Axis#getExtremes}.\n                 *\n                 * @name min\n                 * @memberOf Axis\n                 * @type {Number}\n                 */\n                axis.min = null;\n\n                // User set min and max\n                //axis.userMin = undefined,\n                //axis.userMax = undefined,\n\n                /**\n                 * The processed crosshair options.\n                 *\n                 * @name crosshair\n                 * @memberOf Axis\n                 * @type {AxisCrosshairOptions}\n                 */\n                axis.crosshair = pick(\n                    options.crosshair,\n                    splat(chart.options.tooltip.crosshairs)[isXAxis ? 0 : 1],\n                    false\n                );\n\n                var events = axis.options.events;\n\n                // Register. Don't add it again on Axis.update().\n                if (inArray(axis, chart.axes) === -1) { //\n                    if (isXAxis) { // #2713\n                        chart.axes.splice(chart.xAxis.length, 0, axis);\n                    } else {\n                        chart.axes.push(axis);\n                    }\n\n                    chart[axis.coll].push(axis);\n                }\n\n                /**\n                 * All series associated to the axis.\n                 *\n                 * @name series\n                 * @memberOf Axis\n                 * @type {Array.<Series>}\n                 */\n                axis.series = axis.series || []; // populated by Series\n\n                // Reversed axis\n                if (\n                    chart.inverted &&\n                    !axis.isZAxis &&\n                    isXAxis &&\n                    axis.reversed === undefined\n                ) {\n                    axis.reversed = true;\n                }\n\n                // register event listeners\n                objectEach(events, function(event, eventType) {\n                    addEvent(axis, eventType, event);\n                });\n\n                // extend logarithmic axis\n                axis.lin2log = options.linearToLogConverter || axis.lin2log;\n                if (axis.isLog) {\n                    axis.val2lin = axis.log2lin;\n                    axis.lin2val = axis.lin2log;\n                }\n            },\n\n            /**\n             * Merge and set options.\n             *\n             * @private\n             */\n            setOptions: function(userOptions) {\n                this.options = merge(\n                    this.defaultOptions,\n                    this.coll === 'yAxis' && this.defaultYAxisOptions, [\n                        this.defaultTopAxisOptions,\n                        this.defaultRightAxisOptions,\n                        this.defaultBottomAxisOptions,\n                        this.defaultLeftAxisOptions\n                    ][this.side],\n                    merge(\n                        defaultOptions[this.coll], // if set in setOptions (#1053)\n                        userOptions\n                    )\n                );\n            },\n\n            /**\n             * The default label formatter. The context is a special config object for\n             * the label. In apps, use the {@link\n             * https://api.highcharts.com/highcharts/xAxis.labels.formatter|\n             * labels.formatter} instead except when a modification is needed.\n             *\n             * @private\n             */\n            defaultLabelFormatter: function() {\n                var axis = this.axis,\n                    value = this.value,\n                    categories = axis.categories,\n                    dateTimeLabelFormat = this.dateTimeLabelFormat,\n                    lang = defaultOptions.lang,\n                    numericSymbols = lang.numericSymbols,\n                    numSymMagnitude = lang.numericSymbolMagnitude || 1000,\n                    i = numericSymbols && numericSymbols.length,\n                    multi,\n                    ret,\n                    formatOption = axis.options.labels.format,\n\n                    // make sure the same symbol is added for all labels on a linear\n                    // axis\n                    numericSymbolDetector = axis.isLog ?\n                    Math.abs(value) :\n                    axis.tickInterval;\n\n                if (formatOption) {\n                    ret = format(formatOption, this);\n\n                } else if (categories) {\n                    ret = value;\n\n                } else if (dateTimeLabelFormat) { // datetime axis\n                    ret = H.dateFormat(dateTimeLabelFormat, value);\n\n                } else if (i && numericSymbolDetector >= 1000) {\n                    // Decide whether we should add a numeric symbol like k (thousands)\n                    // or M (millions). If we are to enable this in tooltip or other\n                    // places as well, we can move this logic to the numberFormatter and\n                    // enable it by a parameter.\n                    while (i-- && ret === undefined) {\n                        multi = Math.pow(numSymMagnitude, i + 1);\n                        if (\n                            numericSymbolDetector >= multi &&\n                            (value * 10) % multi === 0 &&\n                            numericSymbols[i] !== null &&\n                            value !== 0\n                        ) { // #5480\n                            ret = H.numberFormat(value / multi, -1) + numericSymbols[i];\n                        }\n                    }\n                }\n\n                if (ret === undefined) {\n                    if (Math.abs(value) >= 10000) { // add thousands separators\n                        ret = H.numberFormat(value, -1);\n                    } else { // small numbers\n                        ret = H.numberFormat(value, -1, undefined, ''); // #2466\n                    }\n                }\n\n                return ret;\n            },\n\n            /**\n             * Get the minimum and maximum for the series of each axis. The function\n             * analyzes the axis series and updates `this.dataMin` and `this.dataMax`.\n             *\n             * @private\n             */\n            getSeriesExtremes: function() {\n                var axis = this,\n                    chart = axis.chart;\n                axis.hasVisibleSeries = false;\n\n                // Reset properties in case we're redrawing (#3353)\n                axis.dataMin = axis.dataMax = axis.threshold = null;\n                axis.softThreshold = !axis.isXAxis;\n\n                if (axis.buildStacks) {\n                    axis.buildStacks();\n                }\n\n                // loop through this axis' series\n                each(axis.series, function(series) {\n\n                    if (series.visible || !chart.options.chart.ignoreHiddenSeries) {\n\n                        var seriesOptions = series.options,\n                            xData,\n                            threshold = seriesOptions.threshold,\n                            seriesDataMin,\n                            seriesDataMax;\n\n                        axis.hasVisibleSeries = true;\n\n                        // Validate threshold in logarithmic axes\n                        if (axis.positiveValuesOnly && threshold <= 0) {\n                            threshold = null;\n                        }\n\n                        // Get dataMin and dataMax for X axes\n                        if (axis.isXAxis) {\n                            xData = series.xData;\n                            if (xData.length) {\n                                // If xData contains values which is not numbers, then\n                                // filter them out. To prevent performance hit, we only\n                                // do this after we have already found seriesDataMin\n                                // because in most cases all data is valid. #5234.\n                                seriesDataMin = arrayMin(xData);\n                                if (!isNumber(seriesDataMin) &&\n                                    !(seriesDataMin instanceof Date) // #5010\n                                ) {\n                                    xData = grep(xData, function(x) {\n                                        return isNumber(x);\n                                    });\n                                    seriesDataMin = arrayMin(xData); // Do it again with valid data\n                                }\n\n                                axis.dataMin = Math.min(\n                                    pick(axis.dataMin, xData[0]),\n                                    seriesDataMin\n                                );\n                                axis.dataMax = Math.max(\n                                    pick(axis.dataMax, xData[0]),\n                                    arrayMax(xData)\n                                );\n\n                            }\n\n                            // Get dataMin and dataMax for Y axes, as well as handle\n                            // stacking and processed data\n                        } else {\n\n                            // Get this particular series extremes\n                            series.getExtremes();\n                            seriesDataMax = series.dataMax;\n                            seriesDataMin = series.dataMin;\n\n                            // Get the dataMin and dataMax so far. If percentage is\n                            // used, the min and max are always 0 and 100. If\n                            // seriesDataMin and seriesDataMax is null, then series\n                            // doesn't have active y data, we continue with nulls\n                            if (defined(seriesDataMin) && defined(seriesDataMax)) {\n                                axis.dataMin = Math.min(\n                                    pick(axis.dataMin, seriesDataMin),\n                                    seriesDataMin\n                                );\n                                axis.dataMax = Math.max(\n                                    pick(axis.dataMax, seriesDataMax),\n                                    seriesDataMax\n                                );\n                            }\n\n                            // Adjust to threshold\n                            if (defined(threshold)) {\n                                axis.threshold = threshold;\n                            }\n                            // If any series has a hard threshold, it takes precedence\n                            if (!seriesOptions.softThreshold ||\n                                axis.positiveValuesOnly\n                            ) {\n                                axis.softThreshold = false;\n                            }\n                        }\n                    }\n                });\n            },\n\n            /**\n             * Translate from axis value to pixel position on the chart, or back. Use\n             * the `toPixels` and `toValue` functions in applications.\n             *\n             * @private\n             */\n            translate: function(val, backwards, cvsCoord, old, handleLog, pointPlacement) {\n                var axis = this.linkedParent || this, // #1417\n                    sign = 1,\n                    cvsOffset = 0,\n                    localA = old ? axis.oldTransA : axis.transA,\n                    localMin = old ? axis.oldMin : axis.min,\n                    returnValue,\n                    minPixelPadding = axis.minPixelPadding,\n                    doPostTranslate = (axis.isOrdinal || axis.isBroken || (axis.isLog && handleLog)) && axis.lin2val;\n\n                if (!localA) {\n                    localA = axis.transA;\n                }\n\n                // In vertical axes, the canvas coordinates start from 0 at the top like in\n                // SVG.\n                if (cvsCoord) {\n                    sign *= -1; // canvas coordinates inverts the value\n                    cvsOffset = axis.len;\n                }\n\n                // Handle reversed axis\n                if (axis.reversed) {\n                    sign *= -1;\n                    cvsOffset -= sign * (axis.sector || axis.len);\n                }\n\n                // From pixels to value\n                if (backwards) { // reverse translation\n\n                    val = val * sign + cvsOffset;\n                    val -= minPixelPadding;\n                    returnValue = val / localA + localMin; // from chart pixel to value\n                    if (doPostTranslate) { // log and ordinal axes\n                        returnValue = axis.lin2val(returnValue);\n                    }\n\n                    // From value to pixels\n                } else {\n                    if (doPostTranslate) { // log and ordinal axes\n                        val = axis.val2lin(val);\n                    }\n                    returnValue = sign * (val - localMin) * localA + cvsOffset +\n                        (sign * minPixelPadding) +\n                        (isNumber(pointPlacement) ? localA * pointPlacement : 0);\n                }\n\n                return returnValue;\n            },\n\n            /**\n             * Translate a value in terms of axis units into pixels within the chart.\n             *\n             * @param  {Number} value\n             *         A value in terms of axis units.\n             * @param  {Boolean} paneCoordinates\n             *         Whether to return the pixel coordinate relative to the chart or\n             *         just the axis/pane itself.\n             * @return {Number} Pixel position of the value on the chart or axis.\n             */\n            toPixels: function(value, paneCoordinates) {\n                return this.translate(value, false, !this.horiz, null, true) +\n                    (paneCoordinates ? 0 : this.pos);\n            },\n\n            /**\n             * Translate a pixel position along the axis to a value in terms of axis\n             * units.\n             * @param  {Number} pixel\n             *         The pixel value coordinate.\n             * @param  {Boolean} paneCoordiantes\n             *         Whether the input pixel is relative to the chart or just the\n             *         axis/pane itself.\n             * @return {Number} The axis value.\n             */\n            toValue: function(pixel, paneCoordinates) {\n                return this.translate(\n                    pixel - (paneCoordinates ? 0 : this.pos),\n                    true, !this.horiz,\n                    null,\n                    true\n                );\n            },\n\n            /**\n             * Create the path for a plot line that goes from the given value on\n             * this axis, across the plot to the opposite side. Also used internally for\n             * grid lines and crosshairs.\n             *\n             * @param  {Number} value\n             *         Axis value.\n             * @param  {Number} [lineWidth=1]\n             *         Used for calculation crisp line coordinates.\n             * @param  {Boolean} [old=false]\n             *         Use old coordinates (for resizing and rescaling).\n             * @param  {Boolean} [force=false]\n             *         If `false`, the function will return null when it falls outside\n             *         the axis bounds.\n             * @param  {Number} [translatedValue]\n             *         If given, return the plot line path of a pixel position on the\n             *         axis.\n             *\n             * @return {Array.<String|Number>}\n             *         The SVG path definition for the plot line.\n             */\n            getPlotLinePath: function(value, lineWidth, old, force, translatedValue) {\n                var axis = this,\n                    chart = axis.chart,\n                    axisLeft = axis.left,\n                    axisTop = axis.top,\n                    x1,\n                    y1,\n                    x2,\n                    y2,\n                    cHeight = (old && chart.oldChartHeight) || chart.chartHeight,\n                    cWidth = (old && chart.oldChartWidth) || chart.chartWidth,\n                    skip,\n                    transB = axis.transB,\n                    /**\n                     * Check if x is between a and b. If not, either move to a/b or skip,\n                     * depending on the force parameter.\n                     */\n                    between = function(x, a, b) {\n                        if (x < a || x > b) {\n                            if (force) {\n                                x = Math.min(Math.max(a, x), b);\n                            } else {\n                                skip = true;\n                            }\n                        }\n                        return x;\n                    };\n\n                translatedValue = pick(translatedValue, axis.translate(value, null, null, old));\n                x1 = x2 = Math.round(translatedValue + transB);\n                y1 = y2 = Math.round(cHeight - translatedValue - transB);\n                if (!isNumber(translatedValue)) { // no min or max\n                    skip = true;\n\n                } else if (axis.horiz) {\n                    y1 = axisTop;\n                    y2 = cHeight - axis.bottom;\n                    x1 = x2 = between(x1, axisLeft, axisLeft + axis.width);\n                } else {\n                    x1 = axisLeft;\n                    x2 = cWidth - axis.right;\n                    y1 = y2 = between(y1, axisTop, axisTop + axis.height);\n                }\n                return skip && !force ?\n                    null :\n                    chart.renderer.crispLine(['M', x1, y1, 'L', x2, y2], lineWidth || 1);\n            },\n\n            /**\n             * Internal function to et the tick positions of a linear axis to round\n             * values like whole tens or every five.\n             *\n             * @param  {Number} tickInterval\n             *         The normalized tick interval\n             * @param  {Number} min\n             *         Axis minimum.\n             * @param  {Number} max\n             *         Axis maximum.\n             *\n             * @return {Array.<Number>}\n             *         An array of axis values where ticks should be placed.\n             */\n            getLinearTickPositions: function(tickInterval, min, max) {\n                var pos,\n                    lastPos,\n                    roundedMin = correctFloat(Math.floor(min / tickInterval) * tickInterval),\n                    roundedMax = correctFloat(Math.ceil(max / tickInterval) * tickInterval),\n                    tickPositions = [];\n\n                // For single points, add a tick regardless of the relative position\n                // (#2662, #6274)\n                if (this.single) {\n                    return [min];\n                }\n\n                // Populate the intermediate values\n                pos = roundedMin;\n                while (pos <= roundedMax) {\n\n                    // Place the tick on the rounded value\n                    tickPositions.push(pos);\n\n                    // Always add the raw tickInterval, not the corrected one.\n                    pos = correctFloat(pos + tickInterval);\n\n                    // If the interval is not big enough in the current min - max range to actually increase\n                    // the loop variable, we need to break out to prevent endless loop. Issue #619\n                    if (pos === lastPos) {\n                        break;\n                    }\n\n                    // Record the last value\n                    lastPos = pos;\n                }\n                return tickPositions;\n            },\n\n            /**\n             * Internal function to return the minor tick positions. For logarithmic\n             * axes, the same logic as for major ticks is reused.\n             *\n             * @return {Array.<Number>}\n             *         An array of axis values where ticks should be placed.\n             */\n            getMinorTickPositions: function() {\n                var axis = this,\n                    options = axis.options,\n                    tickPositions = axis.tickPositions,\n                    minorTickInterval = axis.minorTickInterval,\n                    minorTickPositions = [],\n                    pos,\n                    pointRangePadding = axis.pointRangePadding || 0,\n                    min = axis.min - pointRangePadding, // #1498\n                    max = axis.max + pointRangePadding, // #1498\n                    range = max - min;\n\n                // If minor ticks get too dense, they are hard to read, and may cause long running script. So we don't draw them.\n                if (range && range / minorTickInterval < axis.len / 3) { // #3875\n\n                    if (axis.isLog) {\n                        // For each interval in the major ticks, compute the minor ticks\n                        // separately.\n                        each(this.paddedTicks, function(pos, i, paddedTicks) {\n                            if (i) {\n                                minorTickPositions.push.apply(\n                                    minorTickPositions,\n                                    axis.getLogTickPositions(\n                                        minorTickInterval,\n                                        paddedTicks[i - 1],\n                                        paddedTicks[i],\n                                        true\n                                    )\n                                );\n                            }\n                        });\n\n                    } else if (axis.isDatetimeAxis && options.minorTickInterval === 'auto') { // #1314\n                        minorTickPositions = minorTickPositions.concat(\n                            axis.getTimeTicks(\n                                axis.normalizeTimeTickInterval(minorTickInterval),\n                                min,\n                                max,\n                                options.startOfWeek\n                            )\n                        );\n                    } else {\n                        for (\n                            pos = min + (tickPositions[0] - min) % minorTickInterval; pos <= max; pos += minorTickInterval\n                        ) {\n                            // Very, very, tight grid lines (#5771)\n                            if (pos === minorTickPositions[0]) {\n                                break;\n                            }\n                            minorTickPositions.push(pos);\n                        }\n                    }\n                }\n\n                if (minorTickPositions.length !== 0) {\n                    axis.trimTicks(minorTickPositions); // #3652 #3743 #1498 #6330\n                }\n                return minorTickPositions;\n            },\n\n            /**\n             * Adjust the min and max for the minimum range. Keep in mind that the series data is\n             * not yet processed, so we don't have information on data cropping and grouping, or\n             * updated axis.pointRange or series.pointRange. The data can't be processed until\n             * we have finally established min and max.\n             *\n             * @private\n             */\n            adjustForMinRange: function() {\n                var axis = this,\n                    options = axis.options,\n                    min = axis.min,\n                    max = axis.max,\n                    zoomOffset,\n                    spaceAvailable,\n                    closestDataRange,\n                    i,\n                    distance,\n                    xData,\n                    loopLength,\n                    minArgs,\n                    maxArgs,\n                    minRange;\n\n                // Set the automatic minimum range based on the closest point distance\n                if (axis.isXAxis && axis.minRange === undefined && !axis.isLog) {\n\n                    if (defined(options.min) || defined(options.max)) {\n                        axis.minRange = null; // don't do this again\n\n                    } else {\n\n                        // Find the closest distance between raw data points, as opposed to\n                        // closestPointRange that applies to processed points (cropped and grouped)\n                        each(axis.series, function(series) {\n                            xData = series.xData;\n                            loopLength = series.xIncrement ? 1 : xData.length - 1;\n                            for (i = loopLength; i > 0; i--) {\n                                distance = xData[i] - xData[i - 1];\n                                if (closestDataRange === undefined || distance < closestDataRange) {\n                                    closestDataRange = distance;\n                                }\n                            }\n                        });\n                        axis.minRange = Math.min(closestDataRange * 5, axis.dataMax - axis.dataMin);\n                    }\n                }\n\n                // if minRange is exceeded, adjust\n                if (max - min < axis.minRange) {\n\n                    spaceAvailable = axis.dataMax - axis.dataMin >= axis.minRange;\n                    minRange = axis.minRange;\n                    zoomOffset = (minRange - max + min) / 2;\n\n                    // if min and max options have been set, don't go beyond it\n                    minArgs = [min - zoomOffset, pick(options.min, min - zoomOffset)];\n                    if (spaceAvailable) { // if space is available, stay within the data range\n                        minArgs[2] = axis.isLog ? axis.log2lin(axis.dataMin) : axis.dataMin;\n                    }\n                    min = arrayMax(minArgs);\n\n                    maxArgs = [min + minRange, pick(options.max, min + minRange)];\n                    if (spaceAvailable) { // if space is availabe, stay within the data range\n                        maxArgs[2] = axis.isLog ? axis.log2lin(axis.dataMax) : axis.dataMax;\n                    }\n\n                    max = arrayMin(maxArgs);\n\n                    // now if the max is adjusted, adjust the min back\n                    if (max - min < minRange) {\n                        minArgs[0] = max - minRange;\n                        minArgs[1] = pick(options.min, max - minRange);\n                        min = arrayMax(minArgs);\n                    }\n                }\n\n                // Record modified extremes\n                axis.min = min;\n                axis.max = max;\n            },\n\n            /**\n             * Find the closestPointRange across all series.\n             *\n             * @private\n             */\n            getClosest: function() {\n                var ret;\n\n                if (this.categories) {\n                    ret = 1;\n                } else {\n                    each(this.series, function(series) {\n                        var seriesClosest = series.closestPointRange,\n                            visible = series.visible ||\n                            !series.chart.options.chart.ignoreHiddenSeries;\n\n                        if (!series.noSharedTooltip &&\n                            defined(seriesClosest) &&\n                            visible\n                        ) {\n                            ret = defined(ret) ?\n                                Math.min(ret, seriesClosest) :\n                                seriesClosest;\n                        }\n                    });\n                }\n                return ret;\n            },\n\n            /**\n             * When a point name is given and no x, search for the name in the existing\n             * categories, or if categories aren't provided, search names or create a\n             * new category (#2522).\n             *\n             * @private\n             *\n             * @param  {Point}\n             *         The point to inspect.\n             *\n             * @return {Number}\n             *         The X value that the point is given.\n             */\n            nameToX: function(point) {\n                var explicitCategories = isArray(this.categories),\n                    names = explicitCategories ? this.categories : this.names,\n                    nameX = point.options.x,\n                    x;\n\n                point.series.requireSorting = false;\n\n                if (!defined(nameX)) {\n                    nameX = this.options.uniqueNames === false ?\n                        point.series.autoIncrement() :\n                        inArray(point.name, names);\n                }\n                if (nameX === -1) { // The name is not found in currenct categories\n                    if (!explicitCategories) {\n                        x = names.length;\n                    }\n                } else {\n                    x = nameX;\n                }\n\n                // Write the last point's name to the names array\n                if (x !== undefined) {\n                    this.names[x] = point.name;\n                }\n\n                return x;\n            },\n\n            /**\n             * When changes have been done to series data, update the axis.names.\n             *\n             * @private\n             */\n            updateNames: function() {\n                var axis = this;\n\n                if (this.names.length > 0) {\n                    this.names.length = 0;\n                    this.minRange = this.userMinRange; // Reset\n                    each(this.series || [], function(series) {\n\n                        // Reset incrementer (#5928)\n                        series.xIncrement = null;\n\n                        // When adding a series, points are not yet generated\n                        if (!series.points || series.isDirtyData) {\n                            series.processData();\n                            series.generatePoints();\n                        }\n\n                        each(series.points, function(point, i) {\n                            var x;\n                            if (point.options) {\n                                x = axis.nameToX(point);\n                                if (x !== undefined && x !== point.x) {\n                                    point.x = x;\n                                    series.xData[i] = x;\n                                }\n                            }\n                        });\n                    });\n                }\n            },\n\n            /**\n             * Update translation information.\n             *\n             * @private\n             */\n            setAxisTranslation: function(saveOld) {\n                var axis = this,\n                    range = axis.max - axis.min,\n                    pointRange = axis.axisPointRange || 0,\n                    closestPointRange,\n                    minPointOffset = 0,\n                    pointRangePadding = 0,\n                    linkedParent = axis.linkedParent,\n                    ordinalCorrection,\n                    hasCategories = !!axis.categories,\n                    transA = axis.transA,\n                    isXAxis = axis.isXAxis;\n\n                // Adjust translation for padding. Y axis with categories need to go through the same (#1784).\n                if (isXAxis || hasCategories || pointRange) {\n\n                    // Get the closest points\n                    closestPointRange = axis.getClosest();\n\n                    if (linkedParent) {\n                        minPointOffset = linkedParent.minPointOffset;\n                        pointRangePadding = linkedParent.pointRangePadding;\n                    } else {\n                        each(axis.series, function(series) {\n                            var seriesPointRange = hasCategories ?\n                                1 :\n                                (isXAxis ?\n                                    pick(series.options.pointRange, closestPointRange, 0) :\n                                    (axis.axisPointRange || 0)), // #2806\n                                pointPlacement = series.options.pointPlacement;\n\n                            pointRange = Math.max(pointRange, seriesPointRange);\n\n                            if (!axis.single) {\n                                // minPointOffset is the value padding to the left of the axis in order to make\n                                // room for points with a pointRange, typically columns. When the pointPlacement option\n                                // is 'between' or 'on', this padding does not apply.\n                                minPointOffset = Math.max(\n                                    minPointOffset,\n                                    isString(pointPlacement) ? 0 : seriesPointRange / 2\n                                );\n\n                                // Determine the total padding needed to the length of the axis to make room for the\n                                // pointRange. If the series' pointPlacement is 'on', no padding is added.\n                                pointRangePadding = Math.max(\n                                    pointRangePadding,\n                                    pointPlacement === 'on' ? 0 : seriesPointRange\n                                );\n                            }\n                        });\n                    }\n\n                    // Record minPointOffset and pointRangePadding\n                    ordinalCorrection = axis.ordinalSlope && closestPointRange ? axis.ordinalSlope / closestPointRange : 1; // #988, #1853\n                    axis.minPointOffset = minPointOffset = minPointOffset * ordinalCorrection;\n                    axis.pointRangePadding = pointRangePadding = pointRangePadding * ordinalCorrection;\n\n                    // pointRange means the width reserved for each point, like in a column chart\n                    axis.pointRange = Math.min(pointRange, range);\n\n                    // closestPointRange means the closest distance between points. In columns\n                    // it is mostly equal to pointRange, but in lines pointRange is 0 while closestPointRange\n                    // is some other value\n                    if (isXAxis) {\n                        axis.closestPointRange = closestPointRange;\n                    }\n                }\n\n                // Secondary values\n                if (saveOld) {\n                    axis.oldTransA = transA;\n                }\n                axis.translationSlope = axis.transA = transA =\n                    axis.options.staticScale ||\n                    axis.len / ((range + pointRangePadding) || 1);\n                axis.transB = axis.horiz ? axis.left : axis.bottom; // translation addend\n                axis.minPixelPadding = transA * minPointOffset;\n            },\n\n            minFromRange: function() {\n                return this.max - this.range;\n            },\n\n            /**\n             * Set the tick positions to round values and optionally extend the extremes\n             * to the nearest tick.\n             *\n             * @private\n             */\n            setTickInterval: function(secondPass) {\n                var axis = this,\n                    chart = axis.chart,\n                    options = axis.options,\n                    isLog = axis.isLog,\n                    log2lin = axis.log2lin,\n                    isDatetimeAxis = axis.isDatetimeAxis,\n                    isXAxis = axis.isXAxis,\n                    isLinked = axis.isLinked,\n                    maxPadding = options.maxPadding,\n                    minPadding = options.minPadding,\n                    length,\n                    linkedParentExtremes,\n                    tickIntervalOption = options.tickInterval,\n                    minTickInterval,\n                    tickPixelIntervalOption = options.tickPixelInterval,\n                    categories = axis.categories,\n                    threshold = axis.threshold,\n                    softThreshold = axis.softThreshold,\n                    thresholdMin,\n                    thresholdMax,\n                    hardMin,\n                    hardMax;\n\n                if (!isDatetimeAxis && !categories && !isLinked) {\n                    this.getTickAmount();\n                }\n\n                // Min or max set either by zooming/setExtremes or initial options\n                hardMin = pick(axis.userMin, options.min);\n                hardMax = pick(axis.userMax, options.max);\n\n                // Linked axis gets the extremes from the parent axis\n                if (isLinked) {\n                    axis.linkedParent = chart[axis.coll][options.linkedTo];\n                    linkedParentExtremes = axis.linkedParent.getExtremes();\n                    axis.min = pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);\n                    axis.max = pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);\n                    if (options.type !== axis.linkedParent.options.type) {\n                        H.error(11, 1); // Can't link axes of different type\n                    }\n\n                    // Initial min and max from the extreme data values\n                } else {\n\n                    // Adjust to hard threshold\n                    if (!softThreshold && defined(threshold)) {\n                        if (axis.dataMin >= threshold) {\n                            thresholdMin = threshold;\n                            minPadding = 0;\n                        } else if (axis.dataMax <= threshold) {\n                            thresholdMax = threshold;\n                            maxPadding = 0;\n                        }\n                    }\n\n                    axis.min = pick(hardMin, thresholdMin, axis.dataMin);\n                    axis.max = pick(hardMax, thresholdMax, axis.dataMax);\n\n                }\n\n                if (isLog) {\n                    if (\n                        axis.positiveValuesOnly &&\n                        !secondPass &&\n                        Math.min(axis.min, pick(axis.dataMin, axis.min)) <= 0\n                    ) { // #978\n                        H.error(10, 1); // Can't plot negative values on log axis\n                    }\n                    // The correctFloat cures #934, float errors on full tens. But it\n                    // was too aggressive for #4360 because of conversion back to lin,\n                    // therefore use precision 15.\n                    axis.min = correctFloat(log2lin(axis.min), 15);\n                    axis.max = correctFloat(log2lin(axis.max), 15);\n                }\n\n                // handle zoomed range\n                if (axis.range && defined(axis.max)) {\n                    axis.userMin = axis.min = hardMin = Math.max(axis.dataMin, axis.minFromRange()); // #618, #6773\n                    axis.userMax = hardMax = axis.max;\n\n                    axis.range = null; // don't use it when running setExtremes\n                }\n\n                // Hook for Highstock Scroller. Consider combining with beforePadding.\n                fireEvent(axis, 'foundExtremes');\n\n                // Hook for adjusting this.min and this.max. Used by bubble series.\n                if (axis.beforePadding) {\n                    axis.beforePadding();\n                }\n\n                // adjust min and max for the minimum range\n                axis.adjustForMinRange();\n\n                // Pad the values to get clear of the chart's edges. To avoid tickInterval taking the padding\n                // into account, we do this after computing tick interval (#1337).\n                if (!categories && !axis.axisPointRange && !axis.usePercentage && !isLinked && defined(axis.min) && defined(axis.max)) {\n                    length = axis.max - axis.min;\n                    if (length) {\n                        if (!defined(hardMin) && minPadding) {\n                            axis.min -= length * minPadding;\n                        }\n                        if (!defined(hardMax) && maxPadding) {\n                            axis.max += length * maxPadding;\n                        }\n                    }\n                }\n\n                // Handle options for floor, ceiling, softMin and softMax (#6359)\n                if (isNumber(options.softMin)) {\n                    axis.min = Math.min(axis.min, options.softMin);\n                }\n                if (isNumber(options.softMax)) {\n                    axis.max = Math.max(axis.max, options.softMax);\n                }\n                if (isNumber(options.floor)) {\n                    axis.min = Math.max(axis.min, options.floor);\n                }\n                if (isNumber(options.ceiling)) {\n                    axis.max = Math.min(axis.max, options.ceiling);\n                }\n\n\n                // When the threshold is soft, adjust the extreme value only if\n                // the data extreme and the padded extreme land on either side of the threshold. For example,\n                // a series of [0, 1, 2, 3] would make the yAxis add a tick for -1 because of the\n                // default minPadding and startOnTick options. This is prevented by the softThreshold\n                // option.\n                if (softThreshold && defined(axis.dataMin)) {\n                    threshold = threshold || 0;\n                    if (!defined(hardMin) && axis.min < threshold && axis.dataMin >= threshold) {\n                        axis.min = threshold;\n                    } else if (!defined(hardMax) && axis.max > threshold && axis.dataMax <= threshold) {\n                        axis.max = threshold;\n                    }\n                }\n\n\n                // get tickInterval\n                if (axis.min === axis.max || axis.min === undefined || axis.max === undefined) {\n                    axis.tickInterval = 1;\n                } else if (isLinked && !tickIntervalOption &&\n                    tickPixelIntervalOption === axis.linkedParent.options.tickPixelInterval) {\n                    axis.tickInterval = tickIntervalOption = axis.linkedParent.tickInterval;\n                } else {\n                    axis.tickInterval = pick(\n                        tickIntervalOption,\n                        this.tickAmount ? ((axis.max - axis.min) / Math.max(this.tickAmount - 1, 1)) : undefined,\n                        categories ? // for categoried axis, 1 is default, for linear axis use tickPix\n                        1 :\n                        // don't let it be more than the data range\n                        (axis.max - axis.min) * tickPixelIntervalOption / Math.max(axis.len, tickPixelIntervalOption)\n                    );\n                }\n\n                // Now we're finished detecting min and max, crop and group series data. This\n                // is in turn needed in order to find tick positions in ordinal axes.\n                if (isXAxis && !secondPass) {\n                    each(axis.series, function(series) {\n                        series.processData(axis.min !== axis.oldMin || axis.max !== axis.oldMax);\n                    });\n                }\n\n                // set the translation factor used in translate function\n                axis.setAxisTranslation(true);\n\n                // hook for ordinal axes and radial axes\n                if (axis.beforeSetTickPositions) {\n                    axis.beforeSetTickPositions();\n                }\n\n                // hook for extensions, used in Highstock ordinal axes\n                if (axis.postProcessTickInterval) {\n                    axis.tickInterval = axis.postProcessTickInterval(axis.tickInterval);\n                }\n\n                // In column-like charts, don't cramp in more ticks than there are points (#1943, #4184)\n                if (axis.pointRange && !tickIntervalOption) {\n                    axis.tickInterval = Math.max(axis.pointRange, axis.tickInterval);\n                }\n\n                // Before normalizing the tick interval, handle minimum tick interval. This applies only if tickInterval is not defined.\n                minTickInterval = pick(options.minTickInterval, axis.isDatetimeAxis && axis.closestPointRange);\n                if (!tickIntervalOption && axis.tickInterval < minTickInterval) {\n                    axis.tickInterval = minTickInterval;\n                }\n\n                // for linear axes, get magnitude and normalize the interval\n                if (!isDatetimeAxis && !isLog && !tickIntervalOption) {\n                    axis.tickInterval = normalizeTickInterval(\n                        axis.tickInterval,\n                        null,\n                        getMagnitude(axis.tickInterval),\n                        // If the tick interval is between 0.5 and 5 and the axis max is in the order of\n                        // thousands, chances are we are dealing with years. Don't allow decimals. #3363.\n                        pick(options.allowDecimals, !(axis.tickInterval > 0.5 && axis.tickInterval < 5 && axis.max > 1000 && axis.max < 9999)), !!this.tickAmount\n                    );\n                }\n\n                // Prevent ticks from getting so close that we can't draw the labels\n                if (!this.tickAmount) {\n                    axis.tickInterval = axis.unsquish();\n                }\n\n                this.setTickPositions();\n            },\n\n            /**\n             * Now we have computed the normalized tickInterval, get the tick positions\n             */\n            setTickPositions: function() {\n\n                var options = this.options,\n                    tickPositions,\n                    tickPositionsOption = options.tickPositions,\n                    tickPositioner = options.tickPositioner,\n                    startOnTick = options.startOnTick,\n                    endOnTick = options.endOnTick;\n\n                // Set the tickmarkOffset\n                this.tickmarkOffset = (this.categories && options.tickmarkPlacement === 'between' &&\n                    this.tickInterval === 1) ? 0.5 : 0; // #3202\n\n\n                // get minorTickInterval\n                this.minorTickInterval = options.minorTickInterval === 'auto' && this.tickInterval ?\n                    this.tickInterval / 5 : options.minorTickInterval;\n\n                // When there is only one point, or all points have the same value on\n                // this axis, then min and max are equal and tickPositions.length is 0\n                // or 1. In this case, add some padding in order to center the point,\n                // but leave it with one tick. #1337.\n                this.single =\n                    this.min === this.max &&\n                    defined(this.min) &&\n                    !this.tickAmount &&\n                    (\n                        // Data is on integer (#6563)\n                        parseInt(this.min, 10) === this.min ||\n\n                        // Between integers and decimals are not allowed (#6274)\n                        options.allowDecimals !== false\n                    );\n\n                // Find the tick positions\n                this.tickPositions = tickPositions = tickPositionsOption && tickPositionsOption.slice(); // Work on a copy (#1565)\n                if (!tickPositions) {\n\n                    if (this.isDatetimeAxis) {\n                        tickPositions = this.getTimeTicks(\n                            this.normalizeTimeTickInterval(\n                                this.tickInterval,\n                                options.units\n                            ),\n                            this.min,\n                            this.max,\n                            options.startOfWeek,\n                            this.ordinalPositions,\n                            this.closestPointRange,\n                            true\n                        );\n                    } else if (this.isLog) {\n                        tickPositions = this.getLogTickPositions(\n                            this.tickInterval,\n                            this.min,\n                            this.max\n                        );\n                    } else {\n                        tickPositions = this.getLinearTickPositions(\n                            this.tickInterval,\n                            this.min,\n                            this.max\n                        );\n                    }\n\n                    // Too dense ticks, keep only the first and last (#4477)\n                    if (tickPositions.length > this.len) {\n                        tickPositions = [tickPositions[0], tickPositions.pop()];\n                    }\n\n                    this.tickPositions = tickPositions;\n\n                    // Run the tick positioner callback, that allows modifying auto tick positions.\n                    if (tickPositioner) {\n                        tickPositioner = tickPositioner.apply(this, [this.min, this.max]);\n                        if (tickPositioner) {\n                            this.tickPositions = tickPositions = tickPositioner;\n                        }\n                    }\n\n                }\n\n                // Reset min/max or remove extremes based on start/end on tick\n                this.paddedTicks = tickPositions.slice(0); // Used for logarithmic minor\n                this.trimTicks(tickPositions, startOnTick, endOnTick);\n                if (!this.isLinked) {\n\n                    // Substract half a unit (#2619, #2846, #2515, #3390),\n                    // but not in case of multiple ticks (#6897)\n                    if (this.single && tickPositions.length < 2) {\n                        this.min -= 0.5;\n                        this.max += 0.5;\n                    }\n                    if (!tickPositionsOption && !tickPositioner) {\n                        this.adjustTickAmount();\n                    }\n                }\n            },\n\n            /**\n             * Handle startOnTick and endOnTick by either adapting to padding min/max or\n             * rounded min/max. Also handle single data points.\n             *\n             * @private\n             */\n            trimTicks: function(tickPositions, startOnTick, endOnTick) {\n                var roundedMin = tickPositions[0],\n                    roundedMax = tickPositions[tickPositions.length - 1],\n                    minPointOffset = this.minPointOffset || 0;\n\n                if (!this.isLinked) {\n                    if (startOnTick && roundedMin !== -Infinity) { // #6502\n                        this.min = roundedMin;\n                    } else {\n                        while (this.min - minPointOffset > tickPositions[0]) {\n                            tickPositions.shift();\n                        }\n                    }\n\n                    if (endOnTick) {\n                        this.max = roundedMax;\n                    } else {\n                        while (this.max + minPointOffset < tickPositions[tickPositions.length - 1]) {\n                            tickPositions.pop();\n                        }\n                    }\n\n                    // If no tick are left, set one tick in the middle (#3195)\n                    if (tickPositions.length === 0 && defined(roundedMin)) {\n                        tickPositions.push((roundedMax + roundedMin) / 2);\n                    }\n                }\n            },\n\n            /**\n             * Check if there are multiple axes in the same pane.\n             *\n             * @private\n             * @return {Boolean}\n             *         True if there are other axes.\n             */\n            alignToOthers: function() {\n                var others = {}, // Whether there is another axis to pair with this one\n                    hasOther,\n                    options = this.options;\n\n                if (\n                    // Only if alignTicks is true\n                    this.chart.options.chart.alignTicks !== false &&\n                    options.alignTicks !== false &&\n\n                    // Don't try to align ticks on a log axis, they are not evenly\n                    // spaced (#6021)\n                    !this.isLog\n                ) {\n                    each(this.chart[this.coll], function(axis) {\n                        var otherOptions = axis.options,\n                            horiz = axis.horiz,\n                            key = [\n                                horiz ? otherOptions.left : otherOptions.top,\n                                otherOptions.width,\n                                otherOptions.height,\n                                otherOptions.pane\n                            ].join(',');\n\n\n                        if (axis.series.length) { // #4442\n                            if (others[key]) {\n                                hasOther = true; // #4201\n                            } else {\n                                others[key] = 1;\n                            }\n                        }\n                    });\n                }\n                return hasOther;\n            },\n\n            /**\n             * Find the max ticks of either the x and y axis collection, and record it\n             * in `this.tickAmount`.\n             *\n             * @private\n             */\n            getTickAmount: function() {\n                var options = this.options,\n                    tickAmount = options.tickAmount,\n                    tickPixelInterval = options.tickPixelInterval;\n\n                if (!defined(options.tickInterval) && this.len < tickPixelInterval && !this.isRadial &&\n                    !this.isLog && options.startOnTick && options.endOnTick) {\n                    tickAmount = 2;\n                }\n\n                if (!tickAmount && this.alignToOthers()) {\n                    // Add 1 because 4 tick intervals require 5 ticks (including first and last)\n                    tickAmount = Math.ceil(this.len / tickPixelInterval) + 1;\n                }\n\n                // For tick amounts of 2 and 3, compute five ticks and remove the intermediate ones. This\n                // prevents the axis from adding ticks that are too far away from the data extremes.\n                if (tickAmount < 4) {\n                    this.finalTickAmt = tickAmount;\n                    tickAmount = 5;\n                }\n\n                this.tickAmount = tickAmount;\n            },\n\n            /**\n             * When using multiple axes, adjust the number of ticks to match the highest\n             * number of ticks in that group.\n             *\n             * @private\n             */\n            adjustTickAmount: function() {\n                var tickInterval = this.tickInterval,\n                    tickPositions = this.tickPositions,\n                    tickAmount = this.tickAmount,\n                    finalTickAmt = this.finalTickAmt,\n                    currentTickAmount = tickPositions && tickPositions.length,\n                    i,\n                    len;\n\n                if (currentTickAmount < tickAmount) {\n                    while (tickPositions.length < tickAmount) {\n                        tickPositions.push(correctFloat(\n                            tickPositions[tickPositions.length - 1] + tickInterval\n                        ));\n                    }\n                    this.transA *= (currentTickAmount - 1) / (tickAmount - 1);\n                    this.max = tickPositions[tickPositions.length - 1];\n\n                    // We have too many ticks, run second pass to try to reduce ticks\n                } else if (currentTickAmount > tickAmount) {\n                    this.tickInterval *= 2;\n                    this.setTickPositions();\n                }\n\n                // The finalTickAmt property is set in getTickAmount\n                if (defined(finalTickAmt)) {\n                    i = len = tickPositions.length;\n                    while (i--) {\n                        if (\n                            (finalTickAmt === 3 && i % 2 === 1) || // Remove every other tick\n                            (finalTickAmt <= 2 && i > 0 && i < len - 1) // Remove all but first and last\n                        ) {\n                            tickPositions.splice(i, 1);\n                        }\n                    }\n                    this.finalTickAmt = undefined;\n                }\n            },\n\n            /**\n             * Set the scale based on data min and max, user set min and max or options.\n             *\n             * @private\n             */\n            setScale: function() {\n                var axis = this,\n                    isDirtyData,\n                    isDirtyAxisLength;\n\n                axis.oldMin = axis.min;\n                axis.oldMax = axis.max;\n                axis.oldAxisLength = axis.len;\n\n                // set the new axisLength\n                axis.setAxisSize();\n                //axisLength = horiz ? axisWidth : axisHeight;\n                isDirtyAxisLength = axis.len !== axis.oldAxisLength;\n\n                // is there new data?\n                each(axis.series, function(series) {\n                    if (series.isDirtyData || series.isDirty ||\n                        series.xAxis.isDirty) { // when x axis is dirty, we need new data extremes for y as well\n                        isDirtyData = true;\n                    }\n                });\n\n                // do we really need to go through all this?\n                if (isDirtyAxisLength || isDirtyData || axis.isLinked || axis.forceRedraw ||\n                    axis.userMin !== axis.oldUserMin || axis.userMax !== axis.oldUserMax || axis.alignToOthers()) {\n\n                    if (axis.resetStacks) {\n                        axis.resetStacks();\n                    }\n\n                    axis.forceRedraw = false;\n\n                    // get data extremes if needed\n                    axis.getSeriesExtremes();\n\n                    // get fixed positions based on tickInterval\n                    axis.setTickInterval();\n\n                    // record old values to decide whether a rescale is necessary later on (#540)\n                    axis.oldUserMin = axis.userMin;\n                    axis.oldUserMax = axis.userMax;\n\n                    // Mark as dirty if it is not already set to dirty and extremes have changed. #595.\n                    if (!axis.isDirty) {\n                        axis.isDirty = isDirtyAxisLength || axis.min !== axis.oldMin || axis.max !== axis.oldMax;\n                    }\n                } else if (axis.cleanStacks) {\n                    axis.cleanStacks();\n                }\n            },\n\n            /**\n             * Set the minimum and maximum of the axes after render time. If the\n             * `startOnTick` and `endOnTick` options are true, the minimum and maximum\n             * values are rounded off to the nearest tick. To prevent this, these\n             * options can be set to false before calling setExtremes. Also, setExtremes\n             * will not allow a range lower than the `minRange` option, which by default\n             * is the range of five points.\n             *\n             * @param  {Number} [newMin]\n             *         The new minimum value.\n             * @param  {Number} [newMax]\n             *         The new maximum value.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart or wait for an explicit call to\n             *         {@link Highcharts.Chart#redraw}\n             * @param  {AnimationOptions} [animation=true]\n             *         Enable or modify animations.\n             * @param  {Object} [eventArguments]\n             *         Arguments to be accessed in event handler.\n             *\n             * @sample highcharts/members/axis-setextremes/\n             *         Set extremes from a button\n             * @sample highcharts/members/axis-setextremes-datetime/\n             *         Set extremes on a datetime axis\n             * @sample highcharts/members/axis-setextremes-off-ticks/\n             *         Set extremes off ticks\n             * @sample stock/members/axis-setextremes/\n             *         Set extremes in Highstock\n             * @sample maps/members/axis-setextremes/\n             *         Set extremes in Highmaps\n             */\n            setExtremes: function(newMin, newMax, redraw, animation, eventArguments) {\n                var axis = this,\n                    chart = axis.chart;\n\n                redraw = pick(redraw, true); // defaults to true\n\n                each(axis.series, function(serie) {\n                    delete serie.kdTree;\n                });\n\n                // Extend the arguments with min and max\n                eventArguments = extend(eventArguments, {\n                    min: newMin,\n                    max: newMax\n                });\n\n                // Fire the event\n                fireEvent(axis, 'setExtremes', eventArguments, function() { // the default event handler\n\n                    axis.userMin = newMin;\n                    axis.userMax = newMax;\n                    axis.eventArgs = eventArguments;\n\n                    if (redraw) {\n                        chart.redraw(animation);\n                    }\n                });\n            },\n\n            /**\n             * Overridable method for zooming chart. Pulled out in a separate method to\n             * allow overriding in stock charts.\n             *\n             * @private\n             */\n            zoom: function(newMin, newMax) {\n                var dataMin = this.dataMin,\n                    dataMax = this.dataMax,\n                    options = this.options,\n                    min = Math.min(dataMin, pick(options.min, dataMin)),\n                    max = Math.max(dataMax, pick(options.max, dataMax));\n\n                if (newMin !== this.min || newMax !== this.max) { // #5790\n\n                    // Prevent pinch zooming out of range. Check for defined is for #1946. #1734.\n                    if (!this.allowZoomOutside) {\n                        // #6014, sometimes newMax will be smaller than min (or newMin will be larger than max).\n                        if (defined(dataMin)) {\n                            if (newMin < min) {\n                                newMin = min;\n                            }\n                            if (newMin > max) {\n                                newMin = max;\n                            }\n                        }\n                        if (defined(dataMax)) {\n                            if (newMax < min) {\n                                newMax = min;\n                            }\n                            if (newMax > max) {\n                                newMax = max;\n                            }\n                        }\n                    }\n\n                    // In full view, displaying the reset zoom button is not required\n                    this.displayBtn = newMin !== undefined || newMax !== undefined;\n\n                    // Do it\n                    this.setExtremes(\n                        newMin,\n                        newMax,\n                        false,\n                        undefined, {\n                            trigger: 'zoom'\n                        }\n                    );\n                }\n\n                return true;\n            },\n\n            /**\n             * Update the axis metrics.\n             *\n             * @private\n             */\n            setAxisSize: function() {\n                var chart = this.chart,\n                    options = this.options,\n                    offsets = options.offsets || [0, 0, 0, 0], // top / right / bottom / left\n                    horiz = this.horiz,\n\n                    // Check for percentage based input values. Rounding fixes problems\n                    // with column overflow and plot line filtering (#4898, #4899)\n                    width = this.width = Math.round(H.relativeLength(\n                        pick(\n                            options.width,\n                            chart.plotWidth - offsets[3] + offsets[1]\n                        ),\n                        chart.plotWidth\n                    )),\n                    height = this.height = Math.round(H.relativeLength(\n                        pick(\n                            options.height,\n                            chart.plotHeight - offsets[0] + offsets[2]\n                        ),\n                        chart.plotHeight\n                    )),\n                    top = this.top = Math.round(H.relativeLength(\n                        pick(options.top, chart.plotTop + offsets[0]),\n                        chart.plotHeight,\n                        chart.plotTop\n                    )),\n                    left = this.left = Math.round(H.relativeLength(\n                        pick(options.left, chart.plotLeft + offsets[3]),\n                        chart.plotWidth,\n                        chart.plotLeft\n                    ));\n\n                // Expose basic values to use in Series object and navigator\n                this.bottom = chart.chartHeight - height - top;\n                this.right = chart.chartWidth - width - left;\n\n                // Direction agnostic properties\n                this.len = Math.max(horiz ? width : height, 0); // Math.max fixes #905\n                this.pos = horiz ? left : top; // distance from SVG origin\n            },\n\n            /**\n             * The returned object literal from the {@link Highcharts.Axis#getExtremes}\n             * function.\n             * @typedef {Object} Extremes\n             * @property {Number} dataMax\n             *         The maximum value of the axis' associated series.\n             * @property {Number} dataMin\n             *         The minimum value of the axis' associated series.\n             * @property {Number} max\n             *         The maximum axis value, either automatic or set manually. If the\n             *         `max` option is not set, `maxPadding` is 0 and `endOnTick` is\n             *         false, this value will be the same as `dataMax`.\n             * @property {Number} min\n             *         The minimum axis value, either automatic or set manually. If the\n             *         `min` option is not set, `minPadding` is 0 and `startOnTick` is\n             *         false, this value will be the same as `dataMin`.\n             */\n            /**\n             * Get the current extremes for the axis.\n             *\n             * @returns {Extremes}\n             * An object containing extremes information.\n             *\n             * @sample  members/axis-getextremes/\n             *          Report extremes by click on a button\n             * @sample  maps/members/axis-getextremes/\n             *          Get extremes in Highmaps\n             */\n            getExtremes: function() {\n                var axis = this,\n                    isLog = axis.isLog,\n                    lin2log = axis.lin2log;\n\n                return {\n                    min: isLog ? correctFloat(lin2log(axis.min)) : axis.min,\n                    max: isLog ? correctFloat(lin2log(axis.max)) : axis.max,\n                    dataMin: axis.dataMin,\n                    dataMax: axis.dataMax,\n                    userMin: axis.userMin,\n                    userMax: axis.userMax\n                };\n            },\n\n            /**\n             * Get the zero plane either based on zero or on the min or max value.\n             * Used in bar and area plots.\n             *\n             * @param  {Number} threshold\n             *         The threshold in axis values.\n             *\n             * @return {Number}\n             *         The translated threshold position in terms of pixels, and\n             *         corrected to stay within the axis bounds.\n             */\n            getThreshold: function(threshold) {\n                var axis = this,\n                    isLog = axis.isLog,\n                    lin2log = axis.lin2log,\n                    realMin = isLog ? lin2log(axis.min) : axis.min,\n                    realMax = isLog ? lin2log(axis.max) : axis.max;\n\n                if (threshold === null) {\n                    threshold = realMin;\n                } else if (realMin > threshold) {\n                    threshold = realMin;\n                } else if (realMax < threshold) {\n                    threshold = realMax;\n                }\n\n                return axis.translate(threshold, 0, 1, 0, 1);\n            },\n\n            /**\n             * Compute auto alignment for the axis label based on which side the axis is\n             * on and the given rotation for the label.\n             *\n             * @param  {Number} rotation\n             *         The rotation in degrees as set by either the `rotation` or\n             *         `autoRotation` options.\n             * @private\n             */\n            autoLabelAlign: function(rotation) {\n                var ret,\n                    angle = (pick(rotation, 0) - (this.side * 90) + 720) % 360;\n\n                if (angle > 15 && angle < 165) {\n                    ret = 'right';\n                } else if (angle > 195 && angle < 345) {\n                    ret = 'left';\n                } else {\n                    ret = 'center';\n                }\n                return ret;\n            },\n\n            /**\n             * Get the tick length and width for the axis based on axis options.\n             *\n             * @private\n             *\n             * @param  {String} prefix\n             *         'tick' or 'minorTick'\n             * @return {Array.<Number>}\n             *         An array of tickLength and tickWidth\n             */\n            tickSize: function(prefix) {\n                var options = this.options,\n                    tickLength = options[prefix + 'Length'],\n                    tickWidth = pick(options[prefix + 'Width'], prefix === 'tick' && this.isXAxis ? 1 : 0); // X axis defaults to 1\n\n                if (tickWidth && tickLength) {\n                    // Negate the length\n                    if (options[prefix + 'Position'] === 'inside') {\n                        tickLength = -tickLength;\n                    }\n                    return [tickLength, tickWidth];\n                }\n\n            },\n\n            /**\n             * Return the size of the labels.\n             *\n             * @private\n             */\n            labelMetrics: function() {\n                var index = this.tickPositions && this.tickPositions[0] || 0;\n                return this.chart.renderer.fontMetrics(\n                    this.options.labels.style && this.options.labels.style.fontSize,\n                    this.ticks[index] && this.ticks[index].label\n                );\n            },\n\n            /**\n             * Prevent the ticks from getting so close we can't draw the labels. On a\n             * horizontal axis, this is handled by rotating the labels, removing ticks\n             * and adding ellipsis. On a vertical axis remove ticks and add ellipsis.\n             *\n             * @private\n             */\n            unsquish: function() {\n                var labelOptions = this.options.labels,\n                    horiz = this.horiz,\n                    tickInterval = this.tickInterval,\n                    newTickInterval = tickInterval,\n                    slotSize = this.len / (((this.categories ? 1 : 0) + this.max - this.min) / tickInterval),\n                    rotation,\n                    rotationOption = labelOptions.rotation,\n                    labelMetrics = this.labelMetrics(),\n                    step,\n                    bestScore = Number.MAX_VALUE,\n                    autoRotation,\n                    // Return the multiple of tickInterval that is needed to avoid collision\n                    getStep = function(spaceNeeded) {\n                        var step = spaceNeeded / (slotSize || 1);\n                        step = step > 1 ? Math.ceil(step) : 1;\n                        return step * tickInterval;\n                    };\n\n                if (horiz) {\n                    autoRotation = !labelOptions.staggerLines && !labelOptions.step && ( // #3971\n                        defined(rotationOption) ? [rotationOption] :\n                        slotSize < pick(labelOptions.autoRotationLimit, 80) && labelOptions.autoRotation\n                    );\n\n                    if (autoRotation) {\n\n                        // Loop over the given autoRotation options, and determine which gives the best score. The\n                        // best score is that with the lowest number of steps and a rotation closest to horizontal.\n                        each(autoRotation, function(rot) {\n                            var score;\n\n                            if (rot === rotationOption || (rot && rot >= -90 && rot <= 90)) { // #3891\n\n                                step = getStep(Math.abs(labelMetrics.h / Math.sin(deg2rad * rot)));\n\n                                score = step + Math.abs(rot / 360);\n\n                                if (score < bestScore) {\n                                    bestScore = score;\n                                    rotation = rot;\n                                    newTickInterval = step;\n                                }\n                            }\n                        });\n                    }\n\n                } else if (!labelOptions.step) { // #4411\n                    newTickInterval = getStep(labelMetrics.h);\n                }\n\n                this.autoRotation = autoRotation;\n                this.labelRotation = pick(rotation, rotationOption);\n\n                return newTickInterval;\n            },\n\n            /**\n             * Get the general slot width for labels/categories on this axis. This may\n             * change between the pre-render (from Axis.getOffset) and the final tick\n             * rendering and placement.\n             *\n             * @private\n             * @return {Number}\n             *         The pixel width allocated to each axis label.\n             */\n            getSlotWidth: function() {\n                // #5086, #1580, #1931\n                var chart = this.chart,\n                    horiz = this.horiz,\n                    labelOptions = this.options.labels,\n                    slotCount = Math.max(this.tickPositions.length - (this.categories ? 0 : 1), 1),\n                    marginLeft = chart.margin[3];\n\n                return (\n                    horiz &&\n                    (labelOptions.step || 0) < 2 &&\n                    !labelOptions.rotation && // #4415\n                    ((this.staggerLines || 1) * this.len) / slotCount\n                ) || (!horiz && (\n                    (marginLeft && (marginLeft - chart.spacing[3])) ||\n                    chart.chartWidth * 0.33\n                ));\n\n            },\n\n            /**\n             * Render the axis labels and determine whether ellipsis or rotation need\n             * to be applied.\n             *\n             * @private\n             */\n            renderUnsquish: function() {\n                var chart = this.chart,\n                    renderer = chart.renderer,\n                    tickPositions = this.tickPositions,\n                    ticks = this.ticks,\n                    labelOptions = this.options.labels,\n                    horiz = this.horiz,\n                    slotWidth = this.getSlotWidth(),\n                    innerWidth = Math.max(1, Math.round(slotWidth - 2 * (labelOptions.padding || 5))),\n                    attr = {},\n                    labelMetrics = this.labelMetrics(),\n                    textOverflowOption = labelOptions.style && labelOptions.style.textOverflow,\n                    css,\n                    maxLabelLength = 0,\n                    label,\n                    i,\n                    pos;\n\n                // Set rotation option unless it is \"auto\", like in gauges\n                if (!isString(labelOptions.rotation)) {\n                    attr.rotation = labelOptions.rotation || 0; // #4443\n                }\n\n                // Get the longest label length\n                each(tickPositions, function(tick) {\n                    tick = ticks[tick];\n                    if (tick && tick.labelLength > maxLabelLength) {\n                        maxLabelLength = tick.labelLength;\n                    }\n                });\n                this.maxLabelLength = maxLabelLength;\n\n\n                // Handle auto rotation on horizontal axis\n                if (this.autoRotation) {\n\n                    // Apply rotation only if the label is too wide for the slot, and\n                    // the label is wider than its height.\n                    if (maxLabelLength > innerWidth && maxLabelLength > labelMetrics.h) {\n                        attr.rotation = this.labelRotation;\n                    } else {\n                        this.labelRotation = 0;\n                    }\n\n                    // Handle word-wrap or ellipsis on vertical axis\n                } else if (slotWidth) {\n                    // For word-wrap or ellipsis\n                    css = {\n                        width: innerWidth + 'px'\n                    };\n\n                    if (!textOverflowOption) {\n                        css.textOverflow = 'clip';\n\n                        // On vertical axis, only allow word wrap if there is room for more lines.\n                        i = tickPositions.length;\n                        while (!horiz && i--) {\n                            pos = tickPositions[i];\n                            label = ticks[pos].label;\n                            if (label) {\n                                // Reset ellipsis in order to get the correct bounding box (#4070)\n                                if (label.styles && label.styles.textOverflow === 'ellipsis') {\n                                    label.css({\n                                        textOverflow: 'clip'\n                                    });\n\n                                    // Set the correct width in order to read the bounding box height (#4678, #5034)\n                                } else if (ticks[pos].labelLength > slotWidth) {\n                                    label.css({\n                                        width: slotWidth + 'px'\n                                    });\n                                }\n\n                                if (label.getBBox().height > this.len / tickPositions.length - (labelMetrics.h - labelMetrics.f)) {\n                                    label.specCss = {\n                                        textOverflow: 'ellipsis'\n                                    };\n                                }\n                            }\n                        }\n                    }\n                }\n\n\n                // Add ellipsis if the label length is significantly longer than ideal\n                if (attr.rotation) {\n                    css = {\n                        width: (maxLabelLength > chart.chartHeight * 0.5 ? chart.chartHeight * 0.33 : chart.chartHeight) + 'px'\n                    };\n                    if (!textOverflowOption) {\n                        css.textOverflow = 'ellipsis';\n                    }\n                }\n\n                // Set the explicit or automatic label alignment\n                this.labelAlign = labelOptions.align || this.autoLabelAlign(this.labelRotation);\n                if (this.labelAlign) {\n                    attr.align = this.labelAlign;\n                }\n\n                // Apply general and specific CSS\n                each(tickPositions, function(pos) {\n                    var tick = ticks[pos],\n                        label = tick && tick.label;\n                    if (label) {\n                        label.attr(attr); // This needs to go before the CSS in old IE (#4502)\n                        if (css) {\n                            label.css(merge(css, label.specCss));\n                        }\n                        delete label.specCss;\n                        tick.rotation = attr.rotation;\n                    }\n                });\n\n                // Note: Why is this not part of getLabelPosition?\n                this.tickRotCorr = renderer.rotCorr(labelMetrics.b, this.labelRotation || 0, this.side !== 0);\n            },\n\n            /**\n             * Return true if the axis has associated data.\n             *\n             * @return {Boolean}\n             *         True if the axis has associated visible series and those series\n             *         have either valid data points or explicit `min` and `max`\n             *         settings.\n             */\n            hasData: function() {\n                return (\n                    this.hasVisibleSeries ||\n                    (defined(this.min) && defined(this.max) && !!this.tickPositions)\n                );\n            },\n\n            /**\n             * Adds the title defined in axis.options.title.\n             * @param {Boolean} display - whether or not to display the title\n             */\n            addTitle: function(display) {\n                var axis = this,\n                    renderer = axis.chart.renderer,\n                    horiz = axis.horiz,\n                    opposite = axis.opposite,\n                    options = axis.options,\n                    axisTitleOptions = options.title,\n                    textAlign;\n\n                if (!axis.axisTitle) {\n                    textAlign = axisTitleOptions.textAlign;\n                    if (!textAlign) {\n                        textAlign = (horiz ? {\n                            low: 'left',\n                            middle: 'center',\n                            high: 'right'\n                        } : {\n                            low: opposite ? 'right' : 'left',\n                            middle: 'center',\n                            high: opposite ? 'left' : 'right'\n                        })[axisTitleOptions.align];\n                    }\n                    axis.axisTitle = renderer.text(\n                            axisTitleOptions.text,\n                            0,\n                            0,\n                            axisTitleOptions.useHTML\n                        )\n                        .attr({\n                            zIndex: 7,\n                            rotation: axisTitleOptions.rotation || 0,\n                            align: textAlign\n                        })\n                        .addClass('highcharts-axis-title')\n\n                        .css(axisTitleOptions.style)\n\n                        .add(axis.axisGroup);\n                    axis.axisTitle.isNew = true;\n                }\n\n                // Max width defaults to the length of the axis\n\n                if (!axisTitleOptions.style.width && !axis.isRadial) {\n\n                    axis.axisTitle.css({\n                        width: axis.len\n                    });\n\n                }\n\n\n\n                // hide or show the title depending on whether showEmpty is set\n                axis.axisTitle[display ? 'show' : 'hide'](true);\n            },\n\n            /**\n             * Generates a tick for initial positioning.\n             *\n             * @private\n             * @param  {number} pos\n             *         The tick position in axis values.\n             * @param  {number} i\n             *         The index of the tick in {@link Axis.tickPositions}.\n             */\n            generateTick: function(pos) {\n                var ticks = this.ticks;\n\n                if (!ticks[pos]) {\n                    ticks[pos] = new Tick(this, pos);\n                } else {\n                    ticks[pos].addLabel(); // update labels depending on tick interval\n                }\n            },\n\n            /**\n             * Render the tick labels to a preliminary position to get their sizes.\n             *\n             * @private\n             */\n            getOffset: function() {\n                var axis = this,\n                    chart = axis.chart,\n                    renderer = chart.renderer,\n                    options = axis.options,\n                    tickPositions = axis.tickPositions,\n                    ticks = axis.ticks,\n                    horiz = axis.horiz,\n                    side = axis.side,\n                    invertedSide = chart.inverted && !axis.isZAxis ? [1, 0, 3, 2][side] : side,\n                    hasData,\n                    showAxis,\n                    titleOffset = 0,\n                    titleOffsetOption,\n                    titleMargin = 0,\n                    axisTitleOptions = options.title,\n                    labelOptions = options.labels,\n                    labelOffset = 0, // reset\n                    labelOffsetPadded,\n                    axisOffset = chart.axisOffset,\n                    clipOffset = chart.clipOffset,\n                    clip,\n                    directionFactor = [-1, 1, 1, -1][side],\n                    className = options.className,\n                    axisParent = axis.axisParent, // Used in color axis\n                    lineHeightCorrection,\n                    tickSize = this.tickSize('tick');\n\n                // For reuse in Axis.render\n                hasData = axis.hasData();\n                axis.showAxis = showAxis = hasData || pick(options.showEmpty, true);\n\n                // Set/reset staggerLines\n                axis.staggerLines = axis.horiz && labelOptions.staggerLines;\n\n                // Create the axisGroup and gridGroup elements on first iteration\n                if (!axis.axisGroup) {\n                    axis.gridGroup = renderer.g('grid')\n                        .attr({\n                            zIndex: options.gridZIndex || 1\n                        })\n                        .addClass('highcharts-' + this.coll.toLowerCase() + '-grid ' + (className || ''))\n                        .add(axisParent);\n                    axis.axisGroup = renderer.g('axis')\n                        .attr({\n                            zIndex: options.zIndex || 2\n                        })\n                        .addClass('highcharts-' + this.coll.toLowerCase() + ' ' + (className || ''))\n                        .add(axisParent);\n                    axis.labelGroup = renderer.g('axis-labels')\n                        .attr({\n                            zIndex: labelOptions.zIndex || 7\n                        })\n                        .addClass('highcharts-' + axis.coll.toLowerCase() + '-labels ' + (className || ''))\n                        .add(axisParent);\n                }\n\n                if (hasData || axis.isLinked) {\n\n                    // Generate ticks\n                    each(tickPositions, function(pos, i) {\n                        // i is not used here, but may be used in overrides\n                        axis.generateTick(pos, i);\n                    });\n\n                    axis.renderUnsquish();\n\n\n                    // Left side must be align: right and right side must have align: left for labels\n                    if (labelOptions.reserveSpace !== false && (side === 0 || side === 2 || {\n                            1: 'left',\n                            3: 'right'\n                        }[side] === axis.labelAlign || axis.labelAlign === 'center')) {\n                        each(tickPositions, function(pos) {\n\n                            // get the highest offset\n                            labelOffset = Math.max(\n                                ticks[pos].getLabelSize(),\n                                labelOffset\n                            );\n                        });\n                    }\n\n                    if (axis.staggerLines) {\n                        labelOffset *= axis.staggerLines;\n                        axis.labelOffset = labelOffset * (axis.opposite ? -1 : 1);\n                    }\n\n\n                } else { // doesn't have data\n                    objectEach(ticks, function(tick, n) {\n                        tick.destroy();\n                        delete ticks[n];\n                    });\n                }\n\n                if (axisTitleOptions && axisTitleOptions.text && axisTitleOptions.enabled !== false) {\n                    axis.addTitle(showAxis);\n\n                    if (showAxis && axisTitleOptions.reserveSpace !== false) {\n                        axis.titleOffset = titleOffset =\n                            axis.axisTitle.getBBox()[horiz ? 'height' : 'width'];\n                        titleOffsetOption = axisTitleOptions.offset;\n                        titleMargin = defined(titleOffsetOption) ? 0 : pick(axisTitleOptions.margin, horiz ? 5 : 10);\n                    }\n                }\n\n                // Render the axis line\n                axis.renderLine();\n\n                // handle automatic or user set offset\n                axis.offset = directionFactor * pick(options.offset, axisOffset[side]);\n\n                axis.tickRotCorr = axis.tickRotCorr || {\n                    x: 0,\n                    y: 0\n                }; // polar\n                if (side === 0) {\n                    lineHeightCorrection = -axis.labelMetrics().h;\n                } else if (side === 2) {\n                    lineHeightCorrection = axis.tickRotCorr.y;\n                } else {\n                    lineHeightCorrection = 0;\n                }\n\n                // Find the padded label offset\n                labelOffsetPadded = Math.abs(labelOffset) + titleMargin;\n                if (labelOffset) {\n                    labelOffsetPadded -= lineHeightCorrection;\n                    labelOffsetPadded += directionFactor * (horiz ? pick(labelOptions.y, axis.tickRotCorr.y + directionFactor * 8) : labelOptions.x);\n                }\n                axis.axisTitleMargin = pick(titleOffsetOption, labelOffsetPadded);\n\n                axisOffset[side] = Math.max(\n                    axisOffset[side],\n                    axis.axisTitleMargin + titleOffset + directionFactor * axis.offset,\n                    labelOffsetPadded, // #3027\n                    hasData && tickPositions.length && tickSize ?\n                    tickSize[0] + directionFactor * axis.offset :\n                    0 // #4866\n                );\n\n                // Decide the clipping needed to keep the graph inside the plot area and\n                // axis lines\n                clip = Math.floor(axis.axisLine.strokeWidth() / 2) * 2; // #4308, #4371\n                if (options.offset > 0) {\n                    clip -= options.offset * 2;\n                }\n                clipOffset[invertedSide] = Math.max(\n                    clipOffset[invertedSide] || clip,\n                    clip\n                );\n            },\n\n            /**\n             * Internal function to get the path for the axis line. Extended for polar\n             * charts.\n             *\n             * @param  {Number} lineWidth\n             *         The line width in pixels.\n             * @return {Array}\n             *         The SVG path definition in array form.\n             */\n            getLinePath: function(lineWidth) {\n                var chart = this.chart,\n                    opposite = this.opposite,\n                    offset = this.offset,\n                    horiz = this.horiz,\n                    lineLeft = this.left + (opposite ? this.width : 0) + offset,\n                    lineTop = chart.chartHeight - this.bottom -\n                    (opposite ? this.height : 0) + offset;\n\n                if (opposite) {\n                    lineWidth *= -1; // crispify the other way - #1480, #1687\n                }\n\n                return chart.renderer\n                    .crispLine([\n                        'M',\n                        horiz ?\n                        this.left :\n                        lineLeft,\n                        horiz ?\n                        lineTop :\n                        this.top,\n                        'L',\n                        horiz ?\n                        chart.chartWidth - this.right :\n                        lineLeft,\n                        horiz ?\n                        lineTop :\n                        chart.chartHeight - this.bottom\n                    ], lineWidth);\n            },\n\n            /**\n             * Render the axis line. Called internally when rendering and redrawing the\n             * axis.\n             */\n            renderLine: function() {\n                if (!this.axisLine) {\n                    this.axisLine = this.chart.renderer.path()\n                        .addClass('highcharts-axis-line')\n                        .add(this.axisGroup);\n\n\n                    this.axisLine.attr({\n                        stroke: this.options.lineColor,\n                        'stroke-width': this.options.lineWidth,\n                        zIndex: 7\n                    });\n\n                }\n            },\n\n            /**\n             * Position the axis title.\n             *\n             * @private\n             *\n             * @return {Object}\n             *         X and Y positions for the title.\n             */\n            getTitlePosition: function() {\n                // compute anchor points for each of the title align options\n                var horiz = this.horiz,\n                    axisLeft = this.left,\n                    axisTop = this.top,\n                    axisLength = this.len,\n                    axisTitleOptions = this.options.title,\n                    margin = horiz ? axisLeft : axisTop,\n                    opposite = this.opposite,\n                    offset = this.offset,\n                    xOption = axisTitleOptions.x || 0,\n                    yOption = axisTitleOptions.y || 0,\n                    axisTitle = this.axisTitle,\n                    fontMetrics = this.chart.renderer.fontMetrics(\n                        axisTitleOptions.style && axisTitleOptions.style.fontSize,\n                        axisTitle\n                    ),\n                    // The part of a multiline text that is below the baseline of the\n                    // first line. Subtract 1 to preserve pixel-perfectness from the\n                    // old behaviour (v5.0.12), where only one line was allowed.\n                    textHeightOvershoot = Math.max(\n                        axisTitle.getBBox(null, 0).height - fontMetrics.h - 1,\n                        0\n                    ),\n\n                    // the position in the length direction of the axis\n                    alongAxis = {\n                        low: margin + (horiz ? 0 : axisLength),\n                        middle: margin + axisLength / 2,\n                        high: margin + (horiz ? axisLength : 0)\n                    }[axisTitleOptions.align],\n\n                    // the position in the perpendicular direction of the axis\n                    offAxis = (horiz ? axisTop + this.height : axisLeft) +\n                    (horiz ? 1 : -1) * // horizontal axis reverses the margin\n                    (opposite ? -1 : 1) * // so does opposite axes\n                    this.axisTitleMargin + [-textHeightOvershoot, // top\n                        textHeightOvershoot, // right\n                        fontMetrics.f, // bottom\n                        -textHeightOvershoot // left\n                    ][this.side];\n\n\n                return {\n                    x: horiz ?\n                        alongAxis + xOption : offAxis + (opposite ? this.width : 0) + offset + xOption,\n                    y: horiz ?\n                        offAxis + yOption - (opposite ? this.height : 0) + offset : alongAxis + yOption\n                };\n            },\n\n            /**\n             * Render a minor tick into the given position. If a minor tick already\n             * exists in this position, move it.\n             *\n             * @param  {number} pos\n             *         The position in axis values.\n             */\n            renderMinorTick: function(pos) {\n                var slideInTicks = this.chart.hasRendered && isNumber(this.oldMin),\n                    minorTicks = this.minorTicks;\n\n                if (!minorTicks[pos]) {\n                    minorTicks[pos] = new Tick(this, pos, 'minor');\n                }\n\n                // Render new ticks in old position\n                if (slideInTicks && minorTicks[pos].isNew) {\n                    minorTicks[pos].render(null, true);\n                }\n\n                minorTicks[pos].render(null, false, 1);\n            },\n\n            /**\n             * Render a major tick into the given position. If a tick already exists\n             * in this position, move it.\n             *\n             * @param  {number} pos\n             *         The position in axis values.\n             * @param  {number} i\n             *         The tick index.\n             */\n            renderTick: function(pos, i) {\n                var isLinked = this.isLinked,\n                    ticks = this.ticks,\n                    slideInTicks = this.chart.hasRendered && isNumber(this.oldMin);\n\n                // Linked axes need an extra check to find out if\n                if (!isLinked || (pos >= this.min && pos <= this.max)) {\n\n                    if (!ticks[pos]) {\n                        ticks[pos] = new Tick(this, pos);\n                    }\n\n                    // render new ticks in old position\n                    if (slideInTicks && ticks[pos].isNew) {\n                        ticks[pos].render(i, true, 0.1);\n                    }\n\n                    ticks[pos].render(i);\n                }\n            },\n\n            /**\n             * Render the axis.\n             *\n             * @private\n             */\n            render: function() {\n                var axis = this,\n                    chart = axis.chart,\n                    renderer = chart.renderer,\n                    options = axis.options,\n                    isLog = axis.isLog,\n                    lin2log = axis.lin2log,\n                    isLinked = axis.isLinked,\n                    tickPositions = axis.tickPositions,\n                    axisTitle = axis.axisTitle,\n                    ticks = axis.ticks,\n                    minorTicks = axis.minorTicks,\n                    alternateBands = axis.alternateBands,\n                    stackLabelOptions = options.stackLabels,\n                    alternateGridColor = options.alternateGridColor,\n                    tickmarkOffset = axis.tickmarkOffset,\n                    axisLine = axis.axisLine,\n                    showAxis = axis.showAxis,\n                    animation = animObject(renderer.globalAnimation),\n                    from,\n                    to;\n\n                // Reset\n                axis.labelEdge.length = 0;\n                //axis.justifyToPlot = overflow === 'justify';\n                axis.overlap = false;\n\n                // Mark all elements inActive before we go over and mark the active ones\n                each([ticks, minorTicks, alternateBands], function(coll) {\n                    objectEach(coll, function(tick) {\n                        tick.isActive = false;\n                    });\n                });\n\n                // If the series has data draw the ticks. Else only the line and title\n                if (axis.hasData() || isLinked) {\n\n                    // minor ticks\n                    if (axis.minorTickInterval && !axis.categories) {\n                        each(axis.getMinorTickPositions(), function(pos) {\n                            axis.renderMinorTick(pos);\n                        });\n                    }\n\n                    // Major ticks. Pull out the first item and render it last so that\n                    // we can get the position of the neighbour label. #808.\n                    if (tickPositions.length) { // #1300\n                        each(tickPositions, function(pos, i) {\n                            axis.renderTick(pos, i);\n                        });\n                        // In a categorized axis, the tick marks are displayed between labels. So\n                        // we need to add a tick mark and grid line at the left edge of the X axis.\n                        if (tickmarkOffset && (axis.min === 0 || axis.single)) {\n                            if (!ticks[-1]) {\n                                ticks[-1] = new Tick(axis, -1, null, true);\n                            }\n                            ticks[-1].render(-1);\n                        }\n\n                    }\n\n                    // alternate grid color\n                    if (alternateGridColor) {\n                        each(tickPositions, function(pos, i) {\n                            to = tickPositions[i + 1] !== undefined ? tickPositions[i + 1] + tickmarkOffset : axis.max - tickmarkOffset;\n                            if (i % 2 === 0 && pos < axis.max && to <= axis.max + (chart.polar ? -tickmarkOffset : tickmarkOffset)) { // #2248, #4660\n                                if (!alternateBands[pos]) {\n                                    alternateBands[pos] = new H.PlotLineOrBand(axis);\n                                }\n                                from = pos + tickmarkOffset; // #949\n                                alternateBands[pos].options = {\n                                    from: isLog ? lin2log(from) : from,\n                                    to: isLog ? lin2log(to) : to,\n                                    color: alternateGridColor\n                                };\n                                alternateBands[pos].render();\n                                alternateBands[pos].isActive = true;\n                            }\n                        });\n                    }\n\n                    // custom plot lines and bands\n                    if (!axis._addedPlotLB) { // only first time\n                        each((options.plotLines || []).concat(options.plotBands || []), function(plotLineOptions) {\n                            axis.addPlotBandOrLine(plotLineOptions);\n                        });\n                        axis._addedPlotLB = true;\n                    }\n\n                } // end if hasData\n\n                // Remove inactive ticks\n                each([ticks, minorTicks, alternateBands], function(coll) {\n                    var i,\n                        forDestruction = [],\n                        delay = animation.duration,\n                        destroyInactiveItems = function() {\n                            i = forDestruction.length;\n                            while (i--) {\n                                // When resizing rapidly, the same items may be destroyed in different timeouts,\n                                // or the may be reactivated\n                                if (coll[forDestruction[i]] && !coll[forDestruction[i]].isActive) {\n                                    coll[forDestruction[i]].destroy();\n                                    delete coll[forDestruction[i]];\n                                }\n                            }\n\n                        };\n\n                    objectEach(coll, function(tick, pos) {\n                        if (!tick.isActive) {\n                            // Render to zero opacity\n                            tick.render(pos, false, 0);\n                            tick.isActive = false;\n                            forDestruction.push(pos);\n                        }\n                    });\n\n                    // When the objects are finished fading out, destroy them\n                    syncTimeout(\n                        destroyInactiveItems,\n                        coll === alternateBands || !chart.hasRendered || !delay ? 0 : delay\n                    );\n                });\n\n                // Set the axis line path\n                if (axisLine) {\n                    axisLine[axisLine.isPlaced ? 'animate' : 'attr']({\n                        d: this.getLinePath(axisLine.strokeWidth())\n                    });\n                    axisLine.isPlaced = true;\n\n                    // Show or hide the line depending on options.showEmpty\n                    axisLine[showAxis ? 'show' : 'hide'](true);\n                }\n\n                if (axisTitle && showAxis) {\n                    var titleXy = axis.getTitlePosition();\n                    if (isNumber(titleXy.y)) {\n                        axisTitle[axisTitle.isNew ? 'attr' : 'animate'](titleXy);\n                        axisTitle.isNew = false;\n                    } else {\n                        axisTitle.attr('y', -9999);\n                        axisTitle.isNew = true;\n                    }\n                }\n\n                // Stacked totals:\n                if (stackLabelOptions && stackLabelOptions.enabled) {\n                    axis.renderStackTotals();\n                }\n                // End stacked totals\n\n                axis.isDirty = false;\n            },\n\n            /**\n             * Redraw the axis to reflect changes in the data or axis extremes. Called\n             * internally from {@link Chart#redraw}.\n             *\n             * @private\n             */\n            redraw: function() {\n\n                if (this.visible) {\n                    // render the axis\n                    this.render();\n\n                    // move plot lines and bands\n                    each(this.plotLinesAndBands, function(plotLine) {\n                        plotLine.render();\n                    });\n                }\n\n                // mark associated series as dirty and ready for redraw\n                each(this.series, function(series) {\n                    series.isDirty = true;\n                });\n\n            },\n\n            // Properties to survive after destroy, needed for Axis.update (#4317,\n            // #5773, #5881).\n            keepProps: ['extKey', 'hcEvents', 'names', 'series', 'userMax', 'userMin'],\n\n            /**\n             * Destroys an Axis instance. See {@link Axis#remove} for the API endpoint\n             * to fully remove the axis.\n             *\n             * @private\n             * @param  {Boolean} keepEvents\n             *         Whether to preserve events, used internally in Axis.update.\n             */\n            destroy: function(keepEvents) {\n                var axis = this,\n                    stacks = axis.stacks,\n                    plotLinesAndBands = axis.plotLinesAndBands,\n                    plotGroup,\n                    i;\n\n                // Remove the events\n                if (!keepEvents) {\n                    removeEvent(axis);\n                }\n\n                // Destroy each stack total\n                objectEach(stacks, function(stack, stackKey) {\n                    destroyObjectProperties(stack);\n\n                    stacks[stackKey] = null;\n                });\n\n                // Destroy collections\n                each([axis.ticks, axis.minorTicks, axis.alternateBands], function(coll) {\n                    destroyObjectProperties(coll);\n                });\n                if (plotLinesAndBands) {\n                    i = plotLinesAndBands.length;\n                    while (i--) { // #1975\n                        plotLinesAndBands[i].destroy();\n                    }\n                }\n\n                // Destroy local variables\n                each(['stackTotalGroup', 'axisLine', 'axisTitle', 'axisGroup', 'gridGroup', 'labelGroup', 'cross'], function(prop) {\n                    if (axis[prop]) {\n                        axis[prop] = axis[prop].destroy();\n                    }\n                });\n\n                // Destroy each generated group for plotlines and plotbands\n                for (plotGroup in axis.plotLinesAndBandsGroups) {\n                    axis.plotLinesAndBandsGroups[plotGroup] = axis.plotLinesAndBandsGroups[plotGroup].destroy();\n                }\n\n                // Delete all properties and fall back to the prototype.\n                objectEach(axis, function(val, key) {\n                    if (inArray(key, axis.keepProps) === -1) {\n                        delete axis[key];\n                    }\n                });\n            },\n\n            /**\n             * Internal function to draw a crosshair.\n             *\n             * @param  {PointerEvent} [e]\n             *         The event arguments from the modified pointer event, extended\n             *         with `chartX` and `chartY`\n             * @param  {Point} [point]\n             *         The Point object if the crosshair snaps to points.\n             */\n            drawCrosshair: function(e, point) {\n\n                var path,\n                    options = this.crosshair,\n                    snap = pick(options.snap, true),\n                    pos,\n                    categorized,\n                    graphic = this.cross;\n\n                // Use last available event when updating non-snapped crosshairs without\n                // mouse interaction (#5287)\n                if (!e) {\n                    e = this.cross && this.cross.e;\n                }\n\n                if (\n                    // Disabled in options\n                    !this.crosshair ||\n                    // Snap\n                    ((defined(point) || !snap) === false)\n                ) {\n                    this.hideCrosshair();\n                } else {\n\n                    // Get the path\n                    if (!snap) {\n                        pos = e && (this.horiz ? e.chartX - this.pos : this.len - e.chartY + this.pos);\n                    } else if (defined(point)) {\n                        pos = this.isXAxis ? point.plotX : this.len - point.plotY; // #3834\n                    }\n\n                    if (defined(pos)) {\n                        path = this.getPlotLinePath(\n                            // First argument, value, only used on radial\n                            point && (this.isXAxis ? point.x : pick(point.stackY, point.y)),\n                            null,\n                            null,\n                            null,\n                            pos // Translated position\n                        ) || null; // #3189\n                    }\n\n                    if (!defined(path)) {\n                        this.hideCrosshair();\n                        return;\n                    }\n\n                    categorized = this.categories && !this.isRadial;\n\n                    // Draw the cross\n                    if (!graphic) {\n                        this.cross = graphic = this.chart.renderer\n                            .path()\n                            .addClass('highcharts-crosshair highcharts-crosshair-' +\n                                (categorized ? 'category ' : 'thin ') + options.className)\n                            .attr({\n                                zIndex: pick(options.zIndex, 2)\n                            })\n                            .add();\n\n\n                        // Presentational attributes\n                        graphic.attr({\n                            'stroke': options.color || (categorized ? color('#ccd6eb').setOpacity(0.25).get() : '#cccccc'),\n                            'stroke-width': pick(options.width, 1)\n                        });\n                        if (options.dashStyle) {\n                            graphic.attr({\n                                dashstyle: options.dashStyle\n                            });\n                        }\n\n\n                    }\n\n                    graphic.show().attr({\n                        d: path\n                    });\n\n                    if (categorized && !options.width) {\n                        graphic.attr({\n                            'stroke-width': this.transA\n                        });\n                    }\n                    this.cross.e = e;\n                }\n            },\n\n            /**\n             *\tHide the crosshair if visible.\n             */\n            hideCrosshair: function() {\n                if (this.cross) {\n                    this.cross.hide();\n                }\n            }\n        }); // end Axis\n\n        H.Axis = Axis;\n        return Axis;\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var Axis = H.Axis,\n            Date = H.Date,\n            dateFormat = H.dateFormat,\n            defaultOptions = H.defaultOptions,\n            defined = H.defined,\n            each = H.each,\n            extend = H.extend,\n            getMagnitude = H.getMagnitude,\n            getTZOffset = H.getTZOffset,\n            normalizeTickInterval = H.normalizeTickInterval,\n            pick = H.pick,\n            timeUnits = H.timeUnits;\n        /**\n         * Set the tick positions to a time unit that makes sense, for example\n         * on the first of each month or on every Monday. Return an array\n         * with the time positions. Used in datetime axes as well as for grouping\n         * data on a datetime axis.\n         *\n         * @param {Object} normalizedInterval The interval in axis values (ms) and the count\n         * @param {Number} min The minimum in axis values\n         * @param {Number} max The maximum in axis values\n         * @param {Number} startOfWeek\n         */\n        Axis.prototype.getTimeTicks = function(normalizedInterval, min, max, startOfWeek) {\n            var tickPositions = [],\n                i,\n                higherRanks = {},\n                useUTC = defaultOptions.global.useUTC,\n                minYear, // used in months and years as a basis for Date.UTC()\n                // When crossing DST, use the max. Resolves #6278.\n                minDate = new Date(min - Math.max(getTZOffset(min), getTZOffset(max))),\n                makeTime = Date.hcMakeTime,\n                interval = normalizedInterval.unitRange,\n                count = normalizedInterval.count,\n                baseOffset, // #6797\n                variableDayLength;\n\n            if (defined(min)) { // #1300\n                minDate[Date.hcSetMilliseconds](interval >= timeUnits.second ? 0 : // #3935\n                    count * Math.floor(minDate.getMilliseconds() / count)); // #3652, #3654\n\n                if (interval >= timeUnits.second) { // second\n                    minDate[Date.hcSetSeconds](interval >= timeUnits.minute ? 0 : // #3935\n                        count * Math.floor(minDate.getSeconds() / count));\n                }\n\n                if (interval >= timeUnits.minute) { // minute\n                    minDate[Date.hcSetMinutes](interval >= timeUnits.hour ? 0 :\n                        count * Math.floor(minDate[Date.hcGetMinutes]() / count));\n                }\n\n                if (interval >= timeUnits.hour) { // hour\n                    minDate[Date.hcSetHours](interval >= timeUnits.day ? 0 :\n                        count * Math.floor(minDate[Date.hcGetHours]() / count));\n                }\n\n                if (interval >= timeUnits.day) { // day\n                    minDate[Date.hcSetDate](interval >= timeUnits.month ? 1 :\n                        count * Math.floor(minDate[Date.hcGetDate]() / count));\n                }\n\n                if (interval >= timeUnits.month) { // month\n                    minDate[Date.hcSetMonth](interval >= timeUnits.year ? 0 :\n                        count * Math.floor(minDate[Date.hcGetMonth]() / count));\n                    minYear = minDate[Date.hcGetFullYear]();\n                }\n\n                if (interval >= timeUnits.year) { // year\n                    minYear -= minYear % count;\n                    minDate[Date.hcSetFullYear](minYear);\n                }\n\n                // week is a special case that runs outside the hierarchy\n                if (interval === timeUnits.week) {\n                    // get start of current week, independent of count\n                    minDate[Date.hcSetDate](minDate[Date.hcGetDate]() - minDate[Date.hcGetDay]() +\n                        pick(startOfWeek, 1));\n                }\n\n\n                // Get basics for variable time spans\n                minYear = minDate[Date.hcGetFullYear]();\n                var minMonth = minDate[Date.hcGetMonth](),\n                    minDateDate = minDate[Date.hcGetDate](),\n                    minHours = minDate[Date.hcGetHours]();\n\n\n                // Handle local timezone offset\n                if (Date.hcTimezoneOffset || Date.hcGetTimezoneOffset) {\n\n                    // Detect whether we need to take the DST crossover into\n                    // consideration. If we're crossing over DST, the day length may be\n                    // 23h or 25h and we need to compute the exact clock time for each\n                    // tick instead of just adding hours. This comes at a cost, so first\n                    // we found out if it is needed. #4951.\n                    variableDayLength =\n                        (!useUTC || !!Date.hcGetTimezoneOffset) &&\n                        (\n                            // Long range, assume we're crossing over.\n                            max - min > 4 * timeUnits.month ||\n                            // Short range, check if min and max are in different time\n                            // zones.\n                            getTZOffset(min) !== getTZOffset(max)\n                        );\n\n                    // Adjust minDate to the offset date\n                    minDate = minDate.getTime();\n                    baseOffset = getTZOffset(minDate);\n                    minDate = new Date(minDate + baseOffset);\n                }\n\n\n                // Iterate and add tick positions at appropriate values\n                var time = minDate.getTime();\n                i = 1;\n                while (time < max) {\n                    tickPositions.push(time);\n\n                    // if the interval is years, use Date.UTC to increase years\n                    if (interval === timeUnits.year) {\n                        time = makeTime(minYear + i * count, 0);\n\n                        // if the interval is months, use Date.UTC to increase months\n                    } else if (interval === timeUnits.month) {\n                        time = makeTime(minYear, minMonth + i * count);\n\n                        // if we're using global time, the interval is not fixed as it jumps\n                        // one hour at the DST crossover\n                    } else if (\n                        variableDayLength &&\n                        (interval === timeUnits.day || interval === timeUnits.week)\n                    ) {\n                        time = makeTime(minYear, minMonth, minDateDate +\n                            i * count * (interval === timeUnits.day ? 1 : 7));\n\n                    } else if (variableDayLength && interval === timeUnits.hour) {\n                        // corrected by the start date time zone offset (baseOffset)\n                        // to hide duplicated label (#6797)\n                        time = makeTime(minYear, minMonth, minDateDate, minHours +\n                            i * count, 0, 0, baseOffset) - baseOffset;\n\n                        // else, the interval is fixed and we use simple addition\n                    } else {\n                        time += interval * count;\n                    }\n\n                    i++;\n                }\n\n                // push the last time\n                tickPositions.push(time);\n\n\n                // Handle higher ranks. Mark new days if the time is on midnight\n                // (#950, #1649, #1760, #3349). Use a reasonable dropout threshold to\n                // prevent looping over dense data grouping (#6156).\n                if (interval <= timeUnits.hour && tickPositions.length < 10000) {\n                    each(tickPositions, function(time) {\n                        if (\n                            // Speed optimization, no need to run dateFormat unless\n                            // we're on a full or half hour\n                            time % 1800000 === 0 &&\n                            // Check for local or global midnight\n                            dateFormat('%H%M%S%L', time) === '000000000'\n                        ) {\n                            higherRanks[time] = 'day';\n                        }\n                    });\n                }\n            }\n\n\n            // record information on the chosen unit - for dynamic label formatter\n            tickPositions.info = extend(normalizedInterval, {\n                higherRanks: higherRanks,\n                totalRange: interval * count\n            });\n\n            return tickPositions;\n        };\n\n        /**\n         * Get a normalized tick interval for dates. Returns a configuration object with\n         * unit range (interval), count and name. Used to prepare data for getTimeTicks.\n         * Previously this logic was part of getTimeTicks, but as getTimeTicks now runs\n         * of segments in stock charts, the normalizing logic was extracted in order to\n         * prevent it for running over again for each segment having the same interval.\n         * #662, #697.\n         */\n        Axis.prototype.normalizeTimeTickInterval = function(tickInterval, unitsOption) {\n            var units = unitsOption || [\n                    [\n                        'millisecond', // unit name\n                        [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n                    ],\n                    [\n                        'second', [1, 2, 5, 10, 15, 30]\n                    ],\n                    [\n                        'minute', [1, 2, 5, 10, 15, 30]\n                    ],\n                    [\n                        'hour', [1, 2, 3, 4, 6, 8, 12]\n                    ],\n                    [\n                        'day', [1, 2]\n                    ],\n                    [\n                        'week', [1, 2]\n                    ],\n                    [\n                        'month', [1, 2, 3, 4, 6]\n                    ],\n                    [\n                        'year',\n                        null\n                    ]\n                ],\n                unit = units[units.length - 1], // default unit is years\n                interval = timeUnits[unit[0]],\n                multiples = unit[1],\n                count,\n                i;\n\n            // loop through the units to find the one that best fits the tickInterval\n            for (i = 0; i < units.length; i++) {\n                unit = units[i];\n                interval = timeUnits[unit[0]];\n                multiples = unit[1];\n\n\n                if (units[i + 1]) {\n                    // lessThan is in the middle between the highest multiple and the next unit.\n                    var lessThan = (interval * multiples[multiples.length - 1] +\n                        timeUnits[units[i + 1][0]]) / 2;\n\n                    // break and keep the current unit\n                    if (tickInterval <= lessThan) {\n                        break;\n                    }\n                }\n            }\n\n            // prevent 2.5 years intervals, though 25, 250 etc. are allowed\n            if (interval === timeUnits.year && tickInterval < 5 * interval) {\n                multiples = [1, 2, 5];\n            }\n\n            // get the count\n            count = normalizeTickInterval(\n                tickInterval / interval,\n                multiples,\n                unit[0] === 'year' ? Math.max(getMagnitude(tickInterval / interval), 1) : 1 // #1913, #2360\n            );\n\n            return {\n                unitRange: interval,\n                count: count,\n                unitName: unit[0]\n            };\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var Axis = H.Axis,\n            getMagnitude = H.getMagnitude,\n            map = H.map,\n            normalizeTickInterval = H.normalizeTickInterval,\n            pick = H.pick;\n        /**\n         * Methods defined on the Axis prototype\n         */\n\n        /**\n         * Set the tick positions of a logarithmic axis\n         */\n        Axis.prototype.getLogTickPositions = function(interval, min, max, minor) {\n            var axis = this,\n                options = axis.options,\n                axisLength = axis.len,\n                lin2log = axis.lin2log,\n                log2lin = axis.log2lin,\n                // Since we use this method for both major and minor ticks,\n                // use a local variable and return the result\n                positions = [];\n\n            // Reset\n            if (!minor) {\n                axis._minorAutoInterval = null;\n            }\n\n            // First case: All ticks fall on whole logarithms: 1, 10, 100 etc.\n            if (interval >= 0.5) {\n                interval = Math.round(interval);\n                positions = axis.getLinearTickPositions(interval, min, max);\n\n                // Second case: We need intermediary ticks. For example\n                // 1, 2, 4, 6, 8, 10, 20, 40 etc.\n            } else if (interval >= 0.08) {\n                var roundedMin = Math.floor(min),\n                    intermediate,\n                    i,\n                    j,\n                    len,\n                    pos,\n                    lastPos,\n                    break2;\n\n                if (interval > 0.3) {\n                    intermediate = [1, 2, 4];\n                } else if (interval > 0.15) { // 0.2 equals five minor ticks per 1, 10, 100 etc\n                    intermediate = [1, 2, 4, 6, 8];\n                } else { // 0.1 equals ten minor ticks per 1, 10, 100 etc\n                    intermediate = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n                }\n\n                for (i = roundedMin; i < max + 1 && !break2; i++) {\n                    len = intermediate.length;\n                    for (j = 0; j < len && !break2; j++) {\n                        pos = log2lin(lin2log(i) * intermediate[j]);\n                        if (pos > min && (!minor || lastPos <= max) && lastPos !== undefined) { // #1670, lastPos is #3113\n                            positions.push(lastPos);\n                        }\n\n                        if (lastPos > max) {\n                            break2 = true;\n                        }\n                        lastPos = pos;\n                    }\n                }\n\n                // Third case: We are so deep in between whole logarithmic values that\n                // we might as well handle the tick positions like a linear axis. For\n                // example 1.01, 1.02, 1.03, 1.04.\n            } else {\n                var realMin = lin2log(min),\n                    realMax = lin2log(max),\n                    tickIntervalOption = options[minor ? 'minorTickInterval' : 'tickInterval'],\n                    filteredTickIntervalOption = tickIntervalOption === 'auto' ? null : tickIntervalOption,\n                    tickPixelIntervalOption = options.tickPixelInterval / (minor ? 5 : 1),\n                    totalPixelLength = minor ? axisLength / axis.tickPositions.length : axisLength;\n\n                interval = pick(\n                    filteredTickIntervalOption,\n                    axis._minorAutoInterval,\n                    (realMax - realMin) * tickPixelIntervalOption / (totalPixelLength || 1)\n                );\n\n                interval = normalizeTickInterval(\n                    interval,\n                    null,\n                    getMagnitude(interval)\n                );\n\n                positions = map(axis.getLinearTickPositions(\n                    interval,\n                    realMin,\n                    realMax\n                ), log2lin);\n\n                if (!minor) {\n                    axis._minorAutoInterval = interval / 5;\n                }\n            }\n\n            // Set the axis-level tickInterval variable\n            if (!minor) {\n                axis.tickInterval = interval;\n            }\n            return positions;\n        };\n\n        Axis.prototype.log2lin = function(num) {\n            return Math.log(num) / Math.LN10;\n        };\n\n        Axis.prototype.lin2log = function(num) {\n            return Math.pow(10, num);\n        };\n\n    }(Highcharts));\n    (function(H, Axis) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var arrayMax = H.arrayMax,\n            arrayMin = H.arrayMin,\n            defined = H.defined,\n            destroyObjectProperties = H.destroyObjectProperties,\n            each = H.each,\n            erase = H.erase,\n            merge = H.merge,\n            pick = H.pick;\n        /*\n         * The object wrapper for plot lines and plot bands\n         * @param {Object} options\n         */\n        H.PlotLineOrBand = function(axis, options) {\n            this.axis = axis;\n\n            if (options) {\n                this.options = options;\n                this.id = options.id;\n            }\n        };\n\n        H.PlotLineOrBand.prototype = {\n\n            /**\n             * Render the plot line or plot band. If it is already existing,\n             * move it.\n             */\n            render: function() {\n                var plotLine = this,\n                    axis = plotLine.axis,\n                    horiz = axis.horiz,\n                    options = plotLine.options,\n                    optionsLabel = options.label,\n                    label = plotLine.label,\n                    to = options.to,\n                    from = options.from,\n                    value = options.value,\n                    isBand = defined(from) && defined(to),\n                    isLine = defined(value),\n                    svgElem = plotLine.svgElem,\n                    isNew = !svgElem,\n                    path = [],\n                    color = options.color,\n                    zIndex = pick(options.zIndex, 0),\n                    events = options.events,\n                    attribs = {\n                        'class': 'highcharts-plot-' + (isBand ? 'band ' : 'line ') + (options.className || '')\n                    },\n                    groupAttribs = {},\n                    renderer = axis.chart.renderer,\n                    groupName = isBand ? 'bands' : 'lines',\n                    group,\n                    log2lin = axis.log2lin;\n\n                // logarithmic conversion\n                if (axis.isLog) {\n                    from = log2lin(from);\n                    to = log2lin(to);\n                    value = log2lin(value);\n                }\n\n\n                // Set the presentational attributes\n                if (isLine) {\n                    attribs = {\n                        stroke: color,\n                        'stroke-width': options.width\n                    };\n                    if (options.dashStyle) {\n                        attribs.dashstyle = options.dashStyle;\n                    }\n\n                } else if (isBand) { // plot band\n                    if (color) {\n                        attribs.fill = color;\n                    }\n                    if (options.borderWidth) {\n                        attribs.stroke = options.borderColor;\n                        attribs['stroke-width'] = options.borderWidth;\n                    }\n                }\n\n\n                // Grouping and zIndex\n                groupAttribs.zIndex = zIndex;\n                groupName += '-' + zIndex;\n\n                group = axis.plotLinesAndBandsGroups[groupName];\n                if (!group) {\n                    axis.plotLinesAndBandsGroups[groupName] = group = renderer.g('plot-' + groupName)\n                        .attr(groupAttribs).add();\n                }\n\n                // Create the path\n                if (isNew) {\n                    plotLine.svgElem = svgElem =\n                        renderer\n                        .path()\n                        .attr(attribs).add(group);\n                }\n\n\n                // Set the path or return\n                if (isLine) {\n                    path = axis.getPlotLinePath(value, svgElem.strokeWidth());\n                } else if (isBand) { // plot band\n                    path = axis.getPlotBandPath(from, to, options);\n                } else {\n                    return;\n                }\n\n\n                // common for lines and bands\n                if (isNew && path && path.length) {\n                    svgElem.attr({\n                        d: path\n                    });\n\n                    // events\n                    if (events) {\n                        H.objectEach(events, function(event, eventType) {\n                            svgElem.on(eventType, function(e) {\n                                events[eventType].apply(plotLine, [e]);\n                            });\n                        });\n                    }\n                } else if (svgElem) {\n                    if (path) {\n                        svgElem.show();\n                        svgElem.animate({\n                            d: path\n                        });\n                    } else {\n                        svgElem.hide();\n                        if (label) {\n                            plotLine.label = label = label.destroy();\n                        }\n                    }\n                }\n\n                // the plot band/line label\n                if (optionsLabel && defined(optionsLabel.text) && path && path.length &&\n                    axis.width > 0 && axis.height > 0 && !path.flat) {\n                    // apply defaults\n                    optionsLabel = merge({\n                        align: horiz && isBand && 'center',\n                        x: horiz ? !isBand && 4 : 10,\n                        verticalAlign: !horiz && isBand && 'middle',\n                        y: horiz ? isBand ? 16 : 10 : isBand ? 6 : -4,\n                        rotation: horiz && !isBand && 90\n                    }, optionsLabel);\n\n                    this.renderLabel(optionsLabel, path, isBand, zIndex);\n\n                } else if (label) { // move out of sight\n                    label.hide();\n                }\n\n                // chainable\n                return plotLine;\n            },\n\n            /**\n             * Render and align label for plot line or band.\n             */\n            renderLabel: function(optionsLabel, path, isBand, zIndex) {\n                var plotLine = this,\n                    label = plotLine.label,\n                    renderer = plotLine.axis.chart.renderer,\n                    attribs,\n                    xs,\n                    ys,\n                    x,\n                    y;\n\n                // add the SVG element\n                if (!label) {\n                    attribs = {\n                        align: optionsLabel.textAlign || optionsLabel.align,\n                        rotation: optionsLabel.rotation,\n                        'class': 'highcharts-plot-' + (isBand ? 'band' : 'line') + '-label ' + (optionsLabel.className || '')\n                    };\n\n                    attribs.zIndex = zIndex;\n\n                    plotLine.label = label = renderer.text(\n                            optionsLabel.text,\n                            0,\n                            0,\n                            optionsLabel.useHTML\n                        )\n                        .attr(attribs)\n                        .add();\n\n\n                    label.css(optionsLabel.style);\n\n                }\n\n                // get the bounding box and align the label\n                // #3000 changed to better handle choice between plotband or plotline\n                xs = [path[1], path[4], (isBand ? path[6] : path[1])];\n                ys = [path[2], path[5], (isBand ? path[7] : path[2])];\n                x = arrayMin(xs);\n                y = arrayMin(ys);\n\n                label.align(optionsLabel, false, {\n                    x: x,\n                    y: y,\n                    width: arrayMax(xs) - x,\n                    height: arrayMax(ys) - y\n                });\n                label.show();\n            },\n\n            /**\n             * Remove the plot line or band\n             */\n            destroy: function() {\n                // remove it from the lookup\n                erase(this.axis.plotLinesAndBands, this);\n\n                delete this.axis;\n                destroyObjectProperties(this);\n            }\n        };\n\n        /**\n         * Object with members for extending the Axis prototype\n         * @todo Extend directly instead of adding object to Highcharts first\n         */\n\n        H.extend(Axis.prototype, /** @lends Highcharts.Axis.prototype */ {\n\n            /**\n             * Internal function to create the SVG path definition for a plot band.\n             *\n             * @param  {Number} from\n             *         The axis value to start from.\n             * @param  {Number} to\n             *         The axis value to end on.\n             *\n             * @return {Array.<String|Number>}\n             *         The SVG path definition in array form.\n             */\n            getPlotBandPath: function(from, to) {\n                var toPath = this.getPlotLinePath(to, null, null, true),\n                    path = this.getPlotLinePath(from, null, null, true),\n                    // #4964 check if chart is inverted or plotband is on yAxis\n                    horiz = this.horiz,\n                    plus = 1,\n                    outside =\n                    (from < this.min && to < this.min) ||\n                    (from > this.max && to > this.max);\n\n                if (path && toPath) {\n\n                    // Flat paths don't need labels (#3836)\n                    if (outside) {\n                        path.flat = path.toString() === toPath.toString();\n                        plus = 0;\n                    }\n\n                    // Add 1 pixel, when coordinates are the same\n                    path.push(\n                        horiz && toPath[4] === path[4] ? toPath[4] + plus : toPath[4], !horiz && toPath[5] === path[5] ? toPath[5] + plus : toPath[5],\n                        horiz && toPath[1] === path[1] ? toPath[1] + plus : toPath[1], !horiz && toPath[2] === path[2] ? toPath[2] + plus : toPath[2]\n                    );\n                } else { // outside the axis area\n                    path = null;\n                }\n\n                return path;\n            },\n\n            /**\n             * Add a plot band after render time.\n             *\n             * @param  {AxisPlotBandsOptions} options\n             *         A configuration object for the plot band, as defined in {@link\n             *         https://api.highcharts.com/highcharts/xAxis.plotBands|\n             *         xAxis.plotBands}.\n             * @return {Object}\n             *         The added plot band.\n             * @sample highcharts/members/axis-addplotband/\n             *         Toggle the plot band from a button\n             */\n            addPlotBand: function(options) {\n                return this.addPlotBandOrLine(options, 'plotBands');\n            },\n\n            /**\n             * Add a plot line after render time.\n             *\n             * @param  {AxisPlotLinesOptions} options\n             *         A configuration object for the plot line, as defined in {@link\n             *         https://api.highcharts.com/highcharts/xAxis.plotLines|\n             *         xAxis.plotLines}.\n             * @return {Object}\n             *         The added plot line.\n             * @sample highcharts/members/axis-addplotline/\n             *         Toggle the plot line from a button\n             */\n            addPlotLine: function(options) {\n                return this.addPlotBandOrLine(options, 'plotLines');\n            },\n\n            /**\n             * Add a plot band or plot line after render time. Called from addPlotBand\n             * and addPlotLine internally.\n             *\n             * @private\n             * @param  options {AxisPlotLinesOptions|AxisPlotBandsOptions}\n             *         The plotBand or plotLine configuration object.\n             */\n            addPlotBandOrLine: function(options, coll) {\n                var obj = new H.PlotLineOrBand(this, options).render(),\n                    userOptions = this.userOptions;\n\n                if (obj) { // #2189\n                    // Add it to the user options for exporting and Axis.update\n                    if (coll) {\n                        userOptions[coll] = userOptions[coll] || [];\n                        userOptions[coll].push(options);\n                    }\n                    this.plotLinesAndBands.push(obj);\n                }\n\n                return obj;\n            },\n\n            /**\n             * Remove a plot band or plot line from the chart by id. Called internally\n             * from `removePlotBand` and `removePlotLine`.\n             *\n             * @private\n             * @param {String} id\n             */\n            removePlotBandOrLine: function(id) {\n                var plotLinesAndBands = this.plotLinesAndBands,\n                    options = this.options,\n                    userOptions = this.userOptions,\n                    i = plotLinesAndBands.length;\n                while (i--) {\n                    if (plotLinesAndBands[i].id === id) {\n                        plotLinesAndBands[i].destroy();\n                    }\n                }\n                each([\n                    options.plotLines || [],\n                    userOptions.plotLines || [],\n                    options.plotBands || [],\n                    userOptions.plotBands || []\n                ], function(arr) {\n                    i = arr.length;\n                    while (i--) {\n                        if (arr[i].id === id) {\n                            erase(arr, arr[i]);\n                        }\n                    }\n                });\n            },\n\n            /**\n             * Remove a plot band by its id.\n             *\n             * @param  {String} id\n             *         The plot band's `id` as given in the original configuration\n             *         object or in the `addPlotBand` option.\n             * @sample highcharts/members/axis-removeplotband/\n             *         Remove plot band by id\n             * @sample highcharts/members/axis-addplotband/\n             *         Toggle the plot band from a button\n             */\n            removePlotBand: function(id) {\n                this.removePlotBandOrLine(id);\n            },\n\n            /**\n             * Remove a plot line by its id.\n             * @param  {String} id\n             *         The plot line's `id` as given in the original configuration\n             *         object or in the `addPlotLine` option.\n             * @sample highcharts/xaxis/plotlines-id/\n             *         Remove plot line by id\n             * @sample highcharts/members/axis-addplotline/\n             *         Toggle the plot line from a button\n             */\n            removePlotLine: function(id) {\n                this.removePlotBandOrLine(id);\n            }\n        });\n\n    }(Highcharts, Axis));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var dateFormat = H.dateFormat,\n            each = H.each,\n            extend = H.extend,\n            format = H.format,\n            isNumber = H.isNumber,\n            map = H.map,\n            merge = H.merge,\n            pick = H.pick,\n            splat = H.splat,\n            syncTimeout = H.syncTimeout,\n            timeUnits = H.timeUnits;\n        /**\n         * The tooltip object\n         * @param {Object} chart The chart instance\n         * @param {Object} options Tooltip options\n         */\n        H.Tooltip = function() {\n            this.init.apply(this, arguments);\n        };\n\n        H.Tooltip.prototype = {\n\n            init: function(chart, options) {\n\n                // Save the chart and options\n                this.chart = chart;\n                this.options = options;\n\n                // Keep track of the current series\n                //this.currentSeries = undefined;\n\n                // List of crosshairs\n                this.crosshairs = [];\n\n                // Current values of x and y when animating\n                this.now = {\n                    x: 0,\n                    y: 0\n                };\n\n                // The tooltip is initially hidden\n                this.isHidden = true;\n\n\n\n                // Public property for getting the shared state.\n                this.split = options.split && !chart.inverted;\n                this.shared = options.shared || this.split;\n\n            },\n\n            /**\n             * Destroy the single tooltips in a split tooltip.\n             * If the tooltip is active then it is not destroyed, unless forced to.\n             * @param  {boolean} force Force destroy all tooltips.\n             * @return {undefined}\n             */\n            cleanSplit: function(force) {\n                each(this.chart.series, function(series) {\n                    var tt = series && series.tt;\n                    if (tt) {\n                        if (!tt.isActive || force) {\n                            series.tt = tt.destroy();\n                        } else {\n                            tt.isActive = false;\n                        }\n                    }\n                });\n            },\n\n\n\n\n            /**\n             * Create the Tooltip label element if it doesn't exist, then return the\n             * label.\n             */\n            getLabel: function() {\n\n                var renderer = this.chart.renderer,\n                    options = this.options;\n\n                if (!this.label) {\n                    // Create the label\n                    if (this.split) {\n                        this.label = renderer.g('tooltip');\n                    } else {\n                        this.label = renderer.label(\n                                '',\n                                0,\n                                0,\n                                options.shape || 'callout',\n                                null,\n                                null,\n                                options.useHTML,\n                                null,\n                                'tooltip'\n                            )\n                            .attr({\n                                padding: options.padding,\n                                r: options.borderRadius\n                            });\n\n\n                        this.label\n                            .attr({\n                                'fill': options.backgroundColor,\n                                'stroke-width': options.borderWidth\n                            })\n                            // #2301, #2657\n                            .css(options.style)\n                            .shadow(options.shadow);\n\n                    }\n\n\n\n                    this.label\n                        .attr({\n                            zIndex: 8\n                        })\n                        .add();\n                }\n                return this.label;\n            },\n\n            update: function(options) {\n                this.destroy();\n                // Update user options (#6218)\n                merge(true, this.chart.options.tooltip.userOptions, options);\n                this.init(this.chart, merge(true, this.options, options));\n            },\n\n            /**\n             * Destroy the tooltip and its elements.\n             */\n            destroy: function() {\n                // Destroy and clear local variables\n                if (this.label) {\n                    this.label = this.label.destroy();\n                }\n                if (this.split && this.tt) {\n                    this.cleanSplit(this.chart, true);\n                    this.tt = this.tt.destroy();\n                }\n                clearTimeout(this.hideTimer);\n                clearTimeout(this.tooltipTimeout);\n            },\n\n            /**\n             * Provide a soft movement for the tooltip\n             *\n             * @param {Number} x\n             * @param {Number} y\n             * @private\n             */\n            move: function(x, y, anchorX, anchorY) {\n                var tooltip = this,\n                    now = tooltip.now,\n                    animate = tooltip.options.animation !== false && !tooltip.isHidden &&\n                    // When we get close to the target position, abort animation and land on the right place (#3056)\n                    (Math.abs(x - now.x) > 1 || Math.abs(y - now.y) > 1),\n                    skipAnchor = tooltip.followPointer || tooltip.len > 1;\n\n                // Get intermediate values for animation\n                extend(now, {\n                    x: animate ? (2 * now.x + x) / 3 : x,\n                    y: animate ? (now.y + y) / 2 : y,\n                    anchorX: skipAnchor ? undefined : animate ? (2 * now.anchorX + anchorX) / 3 : anchorX,\n                    anchorY: skipAnchor ? undefined : animate ? (now.anchorY + anchorY) / 2 : anchorY\n                });\n\n                // Move to the intermediate value\n                tooltip.getLabel().attr(now);\n\n\n                // Run on next tick of the mouse tracker\n                if (animate) {\n\n                    // Never allow two timeouts\n                    clearTimeout(this.tooltipTimeout);\n\n                    // Set the fixed interval ticking for the smooth tooltip\n                    this.tooltipTimeout = setTimeout(function() {\n                        // The interval function may still be running during destroy,\n                        // so check that the chart is really there before calling.\n                        if (tooltip) {\n                            tooltip.move(x, y, anchorX, anchorY);\n                        }\n                    }, 32);\n\n                }\n            },\n\n            /**\n             * Hide the tooltip\n             */\n            hide: function(delay) {\n                var tooltip = this;\n                clearTimeout(this.hideTimer); // disallow duplicate timers (#1728, #1766)\n                delay = pick(delay, this.options.hideDelay, 500);\n                if (!this.isHidden) {\n                    this.hideTimer = syncTimeout(function() {\n                        tooltip.getLabel()[delay ? 'fadeOut' : 'hide']();\n                        tooltip.isHidden = true;\n                    }, delay);\n                }\n            },\n\n            /**\n             * Extendable method to get the anchor position of the tooltip\n             * from a point or set of points\n             */\n            getAnchor: function(points, mouseEvent) {\n                var ret,\n                    chart = this.chart,\n                    inverted = chart.inverted,\n                    plotTop = chart.plotTop,\n                    plotLeft = chart.plotLeft,\n                    plotX = 0,\n                    plotY = 0,\n                    yAxis,\n                    xAxis;\n\n                points = splat(points);\n\n                // Pie uses a special tooltipPos\n                ret = points[0].tooltipPos;\n\n                // When tooltip follows mouse, relate the position to the mouse\n                if (this.followPointer && mouseEvent) {\n                    if (mouseEvent.chartX === undefined) {\n                        mouseEvent = chart.pointer.normalize(mouseEvent);\n                    }\n                    ret = [\n                        mouseEvent.chartX - chart.plotLeft,\n                        mouseEvent.chartY - plotTop\n                    ];\n                }\n                // When shared, use the average position\n                if (!ret) {\n                    each(points, function(point) {\n                        yAxis = point.series.yAxis;\n                        xAxis = point.series.xAxis;\n                        plotX += point.plotX + (!inverted && xAxis ? xAxis.left - plotLeft : 0);\n                        plotY += (point.plotLow ? (point.plotLow + point.plotHigh) / 2 : point.plotY) +\n                            (!inverted && yAxis ? yAxis.top - plotTop : 0); // #1151\n                    });\n\n                    plotX /= points.length;\n                    plotY /= points.length;\n\n                    ret = [\n                        inverted ? chart.plotWidth - plotY : plotX,\n                        this.shared && !inverted && points.length > 1 && mouseEvent ?\n                        mouseEvent.chartY - plotTop : // place shared tooltip next to the mouse (#424)\n                        inverted ? chart.plotHeight - plotX : plotY\n                    ];\n                }\n\n                return map(ret, Math.round);\n            },\n\n            /**\n             * Place the tooltip in a chart without spilling over\n             * and not covering the point it self.\n             */\n            getPosition: function(boxWidth, boxHeight, point) {\n\n                var chart = this.chart,\n                    distance = this.distance,\n                    ret = {},\n                    h = point.h || 0, // #4117\n                    swapped,\n                    first = ['y', chart.chartHeight, boxHeight,\n                        point.plotY + chart.plotTop, chart.plotTop,\n                        chart.plotTop + chart.plotHeight\n                    ],\n                    second = ['x', chart.chartWidth, boxWidth,\n                        point.plotX + chart.plotLeft, chart.plotLeft,\n                        chart.plotLeft + chart.plotWidth\n                    ],\n                    // The far side is right or bottom\n                    preferFarSide = !this.followPointer && pick(point.ttBelow, !chart.inverted === !!point.negative), // #4984\n                    /**\n                     * Handle the preferred dimension. When the preferred dimension is tooltip\n                     * on top or bottom of the point, it will look for space there.\n                     */\n                    firstDimension = function(dim, outerSize, innerSize, point, min, max) {\n                        var roomLeft = innerSize < point - distance,\n                            roomRight = point + distance + innerSize < outerSize,\n                            alignedLeft = point - distance - innerSize,\n                            alignedRight = point + distance;\n\n                        if (preferFarSide && roomRight) {\n                            ret[dim] = alignedRight;\n                        } else if (!preferFarSide && roomLeft) {\n                            ret[dim] = alignedLeft;\n                        } else if (roomLeft) {\n                            ret[dim] = Math.min(max - innerSize, alignedLeft - h < 0 ? alignedLeft : alignedLeft - h);\n                        } else if (roomRight) {\n                            ret[dim] = Math.max(\n                                min,\n                                alignedRight + h + innerSize > outerSize ?\n                                alignedRight :\n                                alignedRight + h\n                            );\n                        } else {\n                            return false;\n                        }\n                    },\n                    /**\n                     * Handle the secondary dimension. If the preferred dimension is tooltip\n                     * on top or bottom of the point, the second dimension is to align the tooltip\n                     * above the point, trying to align center but allowing left or right\n                     * align within the chart box.\n                     */\n                    secondDimension = function(dim, outerSize, innerSize, point) {\n                        var retVal;\n\n                        // Too close to the edge, return false and swap dimensions\n                        if (point < distance || point > outerSize - distance) {\n                            retVal = false;\n                            // Align left/top\n                        } else if (point < innerSize / 2) {\n                            ret[dim] = 1;\n                            // Align right/bottom\n                        } else if (point > outerSize - innerSize / 2) {\n                            ret[dim] = outerSize - innerSize - 2;\n                            // Align center\n                        } else {\n                            ret[dim] = point - innerSize / 2;\n                        }\n                        return retVal;\n                    },\n                    /**\n                     * Swap the dimensions\n                     */\n                    swap = function(count) {\n                        var temp = first;\n                        first = second;\n                        second = temp;\n                        swapped = count;\n                    },\n                    run = function() {\n                        if (firstDimension.apply(0, first) !== false) {\n                            if (secondDimension.apply(0, second) === false && !swapped) {\n                                swap(true);\n                                run();\n                            }\n                        } else if (!swapped) {\n                            swap(true);\n                            run();\n                        } else {\n                            ret.x = ret.y = 0;\n                        }\n                    };\n\n                // Under these conditions, prefer the tooltip on the side of the point\n                if (chart.inverted || this.len > 1) {\n                    swap();\n                }\n                run();\n\n                return ret;\n\n            },\n\n            /**\n             * In case no user defined formatter is given, this will be used. Note that the context\n             * here is an object holding point, series, x, y etc.\n             *\n             * @returns {String|Array<String>}\n             */\n            defaultFormatter: function(tooltip) {\n                var items = this.points || splat(this),\n                    s;\n\n                // Build the header\n                s = [tooltip.tooltipFooterHeaderFormatter(items[0])];\n\n                // build the values\n                s = s.concat(tooltip.bodyFormatter(items));\n\n                // footer\n                s.push(tooltip.tooltipFooterHeaderFormatter(items[0], true));\n\n                return s;\n            },\n\n            /**\n             * Refresh the tooltip's text and position.\n             * @param {Object|Array} pointOrPoints Rither a point or an array of points\n             */\n            refresh: function(pointOrPoints, mouseEvent) {\n                var tooltip = this,\n                    label,\n                    options = tooltip.options,\n                    x,\n                    y,\n                    point = pointOrPoints,\n                    anchor,\n                    textConfig = {},\n                    text,\n                    pointConfig = [],\n                    formatter = options.formatter || tooltip.defaultFormatter,\n                    shared = tooltip.shared,\n                    currentSeries;\n\n                if (!options.enabled) {\n                    return;\n                }\n\n                clearTimeout(this.hideTimer);\n\n                // get the reference point coordinates (pie charts use tooltipPos)\n                tooltip.followPointer = splat(point)[0].series.tooltipOptions.followPointer;\n                anchor = tooltip.getAnchor(point, mouseEvent);\n                x = anchor[0];\n                y = anchor[1];\n\n                // shared tooltip, array is sent over\n                if (shared && !(point.series && point.series.noSharedTooltip)) {\n                    each(point, function(item) {\n                        item.setState('hover');\n\n                        pointConfig.push(item.getLabelConfig());\n                    });\n\n                    textConfig = {\n                        x: point[0].category,\n                        y: point[0].y\n                    };\n                    textConfig.points = pointConfig;\n                    point = point[0];\n\n                    // single point tooltip\n                } else {\n                    textConfig = point.getLabelConfig();\n                }\n                this.len = pointConfig.length; // #6128\n                text = formatter.call(textConfig, tooltip);\n\n                // register the current series\n                currentSeries = point.series;\n                this.distance = pick(currentSeries.tooltipOptions.distance, 16);\n\n                // update the inner HTML\n                if (text === false) {\n                    this.hide();\n                } else {\n\n                    label = tooltip.getLabel();\n\n                    // show it\n                    if (tooltip.isHidden) {\n                        label.attr({\n                            opacity: 1\n                        }).show();\n                    }\n\n                    // update text\n                    if (tooltip.split) {\n                        this.renderSplit(text, pointOrPoints);\n                    } else {\n\n                        // Prevent the tooltip from flowing over the chart box (#6659)\n\n                        if (!options.style.width) {\n\n                            label.css({\n                                width: this.chart.spacingBox.width\n                            });\n\n                        }\n\n\n                        label.attr({\n                            text: text && text.join ? text.join('') : text\n                        });\n\n                        // Set the stroke color of the box to reflect the point\n                        label.removeClass(/highcharts-color-[\\d]+/g)\n                            .addClass('highcharts-color-' + pick(point.colorIndex, currentSeries.colorIndex));\n\n\n                        label.attr({\n                            stroke: options.borderColor || point.color || currentSeries.color || '#666666'\n                        });\n\n\n                        tooltip.updatePosition({\n                            plotX: x,\n                            plotY: y,\n                            negative: point.negative,\n                            ttBelow: point.ttBelow,\n                            h: anchor[2] || 0\n                        });\n                    }\n\n                    this.isHidden = false;\n                }\n            },\n\n            /**\n             * Render the split tooltip. Loops over each point's text and adds\n             * a label next to the point, then uses the distribute function to\n             * find best non-overlapping positions.\n             */\n            renderSplit: function(labels, points) {\n                var tooltip = this,\n                    boxes = [],\n                    chart = this.chart,\n                    ren = chart.renderer,\n                    rightAligned = true,\n                    options = this.options,\n                    headerHeight = 0,\n                    tooltipLabel = this.getLabel();\n\n                // Create the individual labels for header and points, ignore footer\n                each(labels.slice(0, points.length + 1), function(str, i) {\n                    if (str !== false) {\n                        var point = points[i - 1] ||\n                            // Item 0 is the header. Instead of this, we could also\n                            // use the crosshair label\n                            {\n                                isHeader: true,\n                                plotX: points[0].plotX\n                            },\n                            owner = point.series || tooltip,\n                            tt = owner.tt,\n                            series = point.series || {},\n                            colorClass = 'highcharts-color-' + pick(\n                                point.colorIndex,\n                                series.colorIndex,\n                                'none'\n                            ),\n                            target,\n                            x,\n                            bBox,\n                            boxWidth;\n\n                        // Store the tooltip referance on the series\n                        if (!tt) {\n                            owner.tt = tt = ren.label(null, null, null, 'callout')\n                                .addClass('highcharts-tooltip-box ' + colorClass)\n                                .attr({\n                                    'padding': options.padding,\n                                    'r': options.borderRadius,\n\n                                    'fill': options.backgroundColor,\n                                    'stroke': (\n                                        options.borderColor ||\n                                        point.color ||\n                                        series.color ||\n                                        '#333333'\n                                    ),\n                                    'stroke-width': options.borderWidth\n\n                                })\n                                .add(tooltipLabel);\n                        }\n\n                        tt.isActive = true;\n                        tt.attr({\n                            text: str\n                        });\n\n                        tt.css(options.style)\n                            .shadow(options.shadow);\n\n\n                        // Get X position now, so we can move all to the other side in\n                        // case of overflow\n                        bBox = tt.getBBox();\n                        boxWidth = bBox.width + tt.strokeWidth();\n                        if (point.isHeader) {\n                            headerHeight = bBox.height;\n                            x = Math.max(\n                                0, // No left overflow\n                                Math.min(\n                                    point.plotX + chart.plotLeft - boxWidth / 2,\n                                    // No right overflow (#5794)\n                                    chart.chartWidth - boxWidth\n                                )\n                            );\n                        } else {\n                            x = point.plotX + chart.plotLeft -\n                                pick(options.distance, 16) - boxWidth;\n                        }\n\n\n                        // If overflow left, we don't use this x in the next loop\n                        if (x < 0) {\n                            rightAligned = false;\n                        }\n\n                        // Prepare for distribution\n                        target = (point.series && point.series.yAxis &&\n                            point.series.yAxis.pos) + (point.plotY || 0);\n                        target -= chart.plotTop;\n                        boxes.push({\n                            target: point.isHeader ?\n                                chart.plotHeight + headerHeight : target,\n                            rank: point.isHeader ? 1 : 0,\n                            size: owner.tt.getBBox().height + 1,\n                            point: point,\n                            x: x,\n                            tt: tt\n                        });\n                    }\n                });\n\n                // Clean previous run (for missing points)\n                this.cleanSplit();\n\n                // Distribute and put in place\n                H.distribute(boxes, chart.plotHeight + headerHeight);\n                each(boxes, function(box) {\n                    var point = box.point,\n                        series = point.series;\n\n                    // Put the label in place\n                    box.tt.attr({\n                        visibility: box.pos === undefined ? 'hidden' : 'inherit',\n                        x: (rightAligned || point.isHeader ?\n                            box.x :\n                            point.plotX + chart.plotLeft + pick(options.distance, 16)),\n                        y: box.pos + chart.plotTop,\n                        anchorX: point.isHeader ?\n                            point.plotX + chart.plotLeft : point.plotX + series.xAxis.pos,\n                        anchorY: point.isHeader ?\n                            box.pos + chart.plotTop - 15 : point.plotY + series.yAxis.pos\n                    });\n                });\n            },\n\n            /**\n             * Find the new position and perform the move\n             */\n            updatePosition: function(point) {\n                var chart = this.chart,\n                    label = this.getLabel(),\n                    pos = (this.options.positioner || this.getPosition).call(\n                        this,\n                        label.width,\n                        label.height,\n                        point\n                    );\n\n                // do the move\n                this.move(\n                    Math.round(pos.x),\n                    Math.round(pos.y || 0), // can be undefined (#3977)\n                    point.plotX + chart.plotLeft,\n                    point.plotY + chart.plotTop\n                );\n            },\n\n            /**\n             * Get the optimal date format for a point, based on a range.\n             * @param  {number} range - The time range\n             * @param  {number|Date} date - The date of the point in question\n             * @param  {number} startOfWeek - An integer representing the first day of\n             * the week, where 0 is Sunday\n             * @param  {Object} dateTimeLabelFormats - A map of time units to formats\n             * @return {string} - the optimal date format for a point\n             */\n            getDateFormat: function(range, date, startOfWeek, dateTimeLabelFormats) {\n                var dateStr = dateFormat('%m-%d %H:%M:%S.%L', date),\n                    format,\n                    n,\n                    blank = '01-01 00:00:00.000',\n                    strpos = {\n                        millisecond: 15,\n                        second: 12,\n                        minute: 9,\n                        hour: 6,\n                        day: 3\n                    },\n                    lastN = 'millisecond'; // for sub-millisecond data, #4223\n                for (n in timeUnits) {\n\n                    // If the range is exactly one week and we're looking at a Sunday/Monday, go for the week format\n                    if (range === timeUnits.week && +dateFormat('%w', date) === startOfWeek &&\n                        dateStr.substr(6) === blank.substr(6)) {\n                        n = 'week';\n                        break;\n                    }\n\n                    // The first format that is too great for the range\n                    if (timeUnits[n] > range) {\n                        n = lastN;\n                        break;\n                    }\n\n                    // If the point is placed every day at 23:59, we need to show\n                    // the minutes as well. #2637.\n                    if (strpos[n] && dateStr.substr(strpos[n]) !== blank.substr(strpos[n])) {\n                        break;\n                    }\n\n                    // Weeks are outside the hierarchy, only apply them on Mondays/Sundays like in the first condition\n                    if (n !== 'week') {\n                        lastN = n;\n                    }\n                }\n\n                if (n) {\n                    format = dateTimeLabelFormats[n];\n                }\n\n                return format;\n            },\n\n            /**\n             * Get the best X date format based on the closest point range on the axis.\n             */\n            getXDateFormat: function(point, options, xAxis) {\n                var xDateFormat,\n                    dateTimeLabelFormats = options.dateTimeLabelFormats,\n                    closestPointRange = xAxis && xAxis.closestPointRange;\n\n                if (closestPointRange) {\n                    xDateFormat = this.getDateFormat(\n                        closestPointRange,\n                        point.x,\n                        xAxis.options.startOfWeek,\n                        dateTimeLabelFormats\n                    );\n                } else {\n                    xDateFormat = dateTimeLabelFormats.day;\n                }\n\n                return xDateFormat || dateTimeLabelFormats.year; // #2546, 2581\n            },\n\n            /**\n             * Format the footer/header of the tooltip\n             * #3397: abstraction to enable formatting of footer and header\n             */\n            tooltipFooterHeaderFormatter: function(labelConfig, isFooter) {\n                var footOrHead = isFooter ? 'footer' : 'header',\n                    series = labelConfig.series,\n                    tooltipOptions = series.tooltipOptions,\n                    xDateFormat = tooltipOptions.xDateFormat,\n                    xAxis = series.xAxis,\n                    isDateTime = xAxis && xAxis.options.type === 'datetime' && isNumber(labelConfig.key),\n                    formatString = tooltipOptions[footOrHead + 'Format'];\n\n                // Guess the best date format based on the closest point distance (#568, #3418)\n                if (isDateTime && !xDateFormat) {\n                    xDateFormat = this.getXDateFormat(labelConfig, tooltipOptions, xAxis);\n                }\n\n                // Insert the footer date format if any\n                if (isDateTime && xDateFormat) {\n                    formatString = formatString.replace('{point.key}', '{point.key:' + xDateFormat + '}');\n                }\n\n                return format(formatString, {\n                    point: labelConfig,\n                    series: series\n                });\n            },\n\n            /**\n             * Build the body (lines) of the tooltip by iterating over the items and returning one entry for each item,\n             * abstracting this functionality allows to easily overwrite and extend it.\n             */\n            bodyFormatter: function(items) {\n                return map(items, function(item) {\n                    var tooltipOptions = item.series.tooltipOptions;\n                    return (tooltipOptions.pointFormatter || item.point.tooltipFormatter)\n                        .call(item.point, tooltipOptions.pointFormat);\n                });\n            }\n\n        };\n\n    }(Highcharts));\n    (function(Highcharts) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var H = Highcharts,\n            addEvent = H.addEvent,\n            attr = H.attr,\n            charts = H.charts,\n            color = H.color,\n            css = H.css,\n            defined = H.defined,\n            each = H.each,\n            extend = H.extend,\n            find = H.find,\n            fireEvent = H.fireEvent,\n            isObject = H.isObject,\n            offset = H.offset,\n            pick = H.pick,\n            removeEvent = H.removeEvent,\n            splat = H.splat,\n            Tooltip = H.Tooltip,\n            win = H.win;\n\n        /**\n         * The mouse and touch tracker object. Each {@link Chart} item has one\n         * assosiated Pointer item that can be accessed from the  {@link Chart.pointer}\n         * property.\n         *\n         * @class\n         * @param  {Chart} chart\n         *         The Chart instance.\n         * @param  {Options} options\n         *         The root options object. The pointer uses options from the chart and\n         *         tooltip structures.\n         */\n        Highcharts.Pointer = function(chart, options) {\n            this.init(chart, options);\n        };\n\n        Highcharts.Pointer.prototype = {\n            /**\n             * Initialize the Pointer.\n             *\n             * @private\n             */\n            init: function(chart, options) {\n\n                // Store references\n                this.options = options;\n                this.chart = chart;\n\n                // Do we need to handle click on a touch device?\n                this.runChartClick = options.chart.events && !!options.chart.events.click;\n\n                this.pinchDown = [];\n                this.lastValidTouch = {};\n\n                if (Tooltip) {\n                    chart.tooltip = new Tooltip(chart, options.tooltip);\n                    this.followTouchMove = pick(options.tooltip.followTouchMove, true);\n                }\n\n                this.setDOMEvents();\n            },\n\n            /**\n             * Resolve the zoomType option, this is reset on all touch start and mouse\n             * down events.\n             *\n             * @private\n             */\n            zoomOption: function(e) {\n                var chart = this.chart,\n                    options = chart.options.chart,\n                    zoomType = options.zoomType || '',\n                    inverted = chart.inverted,\n                    zoomX,\n                    zoomY;\n\n                // Look for the pinchType option\n                if (/touch/.test(e.type)) {\n                    zoomType = pick(options.pinchType, zoomType);\n                }\n\n                this.zoomX = zoomX = /x/.test(zoomType);\n                this.zoomY = zoomY = /y/.test(zoomType);\n                this.zoomHor = (zoomX && !inverted) || (zoomY && inverted);\n                this.zoomVert = (zoomY && !inverted) || (zoomX && inverted);\n                this.hasZoom = zoomX || zoomY;\n            },\n\n            /**\n             * @typedef  {Object} PointerEvent\n             *           A native browser mouse or touch event, extended with position\n             *           information relative to the {@link Chart.container}.\n             * @property {Number} chartX\n             *           The X coordinate of the pointer interaction relative to the\n             *           chart.\n             * @property {Number} chartY\n             *           The Y coordinate of the pointer interaction relative to the\n             *           chart.\n             *\n             */\n            /**\n             * Takes a browser event object and extends it with custom Highcharts\n             * properties `chartX` and `chartY` in order to work on the internal\n             * coordinate system.\n             *\n             * @param  {Object} e\n             *         The event object in standard browsers.\n             *\n             * @return {PointerEvent}\n             *         A browser event with extended properties `chartX` and `chartY`.\n             */\n            normalize: function(e, chartPosition) {\n                var chartX,\n                    chartY,\n                    ePos;\n\n                // IE normalizing\n                e = e || win.event;\n                if (!e.target) {\n                    e.target = e.srcElement;\n                }\n\n                // iOS (#2757)\n                ePos = e.touches ? (e.touches.length ? e.touches.item(0) : e.changedTouches[0]) : e;\n\n                // Get mouse position\n                if (!chartPosition) {\n                    this.chartPosition = chartPosition = offset(this.chart.container);\n                }\n\n                // chartX and chartY\n                if (ePos.pageX === undefined) { // IE < 9. #886.\n                    chartX = Math.max(e.x, e.clientX - chartPosition.left); // #2005, #2129: the second case is\n                    // for IE10 quirks mode within framesets\n                    chartY = e.y;\n                } else {\n                    chartX = ePos.pageX - chartPosition.left;\n                    chartY = ePos.pageY - chartPosition.top;\n                }\n\n                return extend(e, {\n                    chartX: Math.round(chartX),\n                    chartY: Math.round(chartY)\n                });\n            },\n\n            /**\n             * Get the click position in terms of axis values.\n             *\n             * @param  {PointerEvent} e\n             *         A pointer event, extended with `chartX` and `chartY`\n             *         properties.\n             */\n            getCoordinates: function(e) {\n                var coordinates = {\n                    xAxis: [],\n                    yAxis: []\n                };\n\n                each(this.chart.axes, function(axis) {\n                    coordinates[axis.isXAxis ? 'xAxis' : 'yAxis'].push({\n                        axis: axis,\n                        value: axis.toValue(e[axis.horiz ? 'chartX' : 'chartY'])\n                    });\n                });\n                return coordinates;\n            },\n            /**\n             * Finds the closest point to a set of coordinates, using the k-d-tree\n             * algorithm.\n             *\n             * @param  {Array.<Series>} series\n             *         All the series to search in.\n             * @param  {boolean} shared\n             *         Whether it is a shared tooltip or not.\n             * @param  {object} coordinates\n             *         Chart coordinates of the pointer.\n             * @param  {number} coordinates.chartX\n             * @param  {number} coordinates.chartY\n             *\n             * @return {Point|undefined} The point closest to given coordinates.\n             */\n            findNearestKDPoint: function(series, shared, coordinates) {\n                var closest,\n                    sort = function(p1, p2) {\n                        var isCloserX = p1.distX - p2.distX,\n                            isCloser = p1.dist - p2.dist,\n                            isAbove =\n                            (p2.series.group && p2.series.group.zIndex) -\n                            (p1.series.group && p1.series.group.zIndex),\n                            result;\n\n                        // We have two points which are not in the same place on xAxis\n                        // and shared tooltip:\n                        if (isCloserX !== 0 && shared) { // #5721\n                            result = isCloserX;\n                            // Points are not exactly in the same place on x/yAxis:\n                        } else if (isCloser !== 0) {\n                            result = isCloser;\n                            // The same xAxis and yAxis position, sort by z-index:\n                        } else if (isAbove !== 0) {\n                            result = isAbove;\n                            // The same zIndex, sort by array index:\n                        } else {\n                            result = p1.series.index > p2.series.index ? -1 : 1;\n                        }\n                        return result;\n                    };\n                each(series, function(s) {\n                    var noSharedTooltip = s.noSharedTooltip && shared,\n                        compareX = (!noSharedTooltip &&\n                            s.options.findNearestPointBy.indexOf('y') < 0\n                        ),\n                        point = s.searchPoint(\n                            coordinates,\n                            compareX\n                        );\n                    if (\n                        // Check that we actually found a point on the series.\n                        isObject(point, true) &&\n                        // Use the new point if it is closer.\n                        (!isObject(closest, true) || (sort(closest, point) > 0))\n                    ) {\n                        closest = point;\n                    }\n                });\n                return closest;\n            },\n            getPointFromEvent: function(e) {\n                var target = e.target,\n                    point;\n\n                while (target && !point) {\n                    point = target.point;\n                    target = target.parentNode;\n                }\n                return point;\n            },\n\n            getChartCoordinatesFromPoint: function(point, inverted) {\n                var series = point.series,\n                    xAxis = series.xAxis,\n                    yAxis = series.yAxis;\n\n                if (xAxis && yAxis) {\n                    return inverted ? {\n                        chartX: xAxis.len + xAxis.pos - point.clientX,\n                        chartY: yAxis.len + yAxis.pos - point.plotY\n                    } : {\n                        chartX: point.clientX + xAxis.pos,\n                        chartY: point.plotY + yAxis.pos\n                    };\n                }\n            },\n\n            /**\n             * Calculates what is the current hovered point/points and series.\n             *\n             * @private\n             *\n             * @param  {undefined|Point} existingHoverPoint\n             *         The point currrently beeing hovered.\n             * @param  {undefined|Series} existingHoverSeries\n             *         The series currently beeing hovered.\n             * @param  {Array.<Series>} series\n             *         All the series in the chart.\n             * @param  {boolean} isDirectTouch\n             *         Is the pointer directly hovering the point.\n             * @param  {boolean} shared\n             *         Whether it is a shared tooltip or not.\n             * @param  {object} coordinates\n             *         Chart coordinates of the pointer.\n             * @param  {number} coordinates.chartX\n             * @param  {number} coordinates.chartY\n             *\n             * @return {object}\n             *         Object containing resulting hover data.\n             */\n            getHoverData: function(\n                existingHoverPoint,\n                existingHoverSeries,\n                series,\n                isDirectTouch,\n                shared,\n                coordinates\n            ) {\n                var hoverPoint,\n                    hoverPoints = [],\n                    hoverSeries = existingHoverSeries,\n                    useExisting = !!(isDirectTouch && existingHoverPoint),\n                    notSticky = hoverSeries && !hoverSeries.stickyTracking,\n                    filter = function(s) {\n                        return (\n                            s.visible &&\n                            !(!shared && s.directTouch) && // #3821\n                            pick(s.options.enableMouseTracking, true)\n                        );\n                    },\n                    // Which series to look in for the hover point\n                    searchSeries = notSticky ?\n                    // Only search on hovered series if it has stickyTracking false\n                    [hoverSeries] :\n                    // Filter what series to look in.\n                    H.grep(series, function(s) {\n                        return filter(s) && s.stickyTracking;\n                    });\n\n                // Use existing hovered point or find the one closest to coordinates.\n                hoverPoint = useExisting ?\n                    existingHoverPoint :\n                    this.findNearestKDPoint(searchSeries, shared, coordinates);\n\n                // Assign hover series\n                hoverSeries = hoverPoint && hoverPoint.series;\n\n                // If we have a hoverPoint, assign hoverPoints.\n                if (hoverPoint) {\n                    // When tooltip is shared, it displays more than one point\n                    if (shared && !hoverSeries.noSharedTooltip) {\n                        searchSeries = H.grep(series, function(s) {\n                            return filter(s) && !s.noSharedTooltip;\n                        });\n\n                        // Get all points with the same x value as the hoverPoint\n                        each(searchSeries, function(s) {\n                            var point = find(s.points, function(p) {\n                                return p.x === hoverPoint.x;\n                            });\n                            if (isObject(point) && !point.isNull) {\n                                hoverPoints.push(point);\n                            }\n                        });\n                    } else {\n                        hoverPoints.push(hoverPoint);\n                    }\n                }\n\n                return {\n                    hoverPoint: hoverPoint,\n                    hoverSeries: hoverSeries,\n                    hoverPoints: hoverPoints\n                };\n            },\n            /**\n             * With line type charts with a single tracker, get the point closest to the\n             * mouse. Run Point.onMouseOver and display tooltip for the point or points.\n             *\n             * @private\n             */\n            runPointActions: function(e, p) {\n                var pointer = this,\n                    chart = pointer.chart,\n                    series = chart.series,\n                    tooltip = chart.tooltip,\n                    shared = tooltip ? tooltip.shared : false,\n                    hoverPoint = p || chart.hoverPoint,\n                    hoverSeries = hoverPoint && hoverPoint.series || chart.hoverSeries,\n                    // onMouseOver or already hovering a series with directTouch\n                    isDirectTouch = !!p || (\n                        (hoverSeries && hoverSeries.directTouch) &&\n                        pointer.isDirectTouch\n                    ),\n                    hoverData = this.getHoverData(\n                        hoverPoint,\n                        hoverSeries,\n                        series,\n                        isDirectTouch,\n                        shared,\n                        e\n                    ),\n                    useSharedTooltip,\n                    followPointer,\n                    anchor,\n                    points;\n                // Update variables from hoverData.\n                hoverPoint = hoverData.hoverPoint;\n                points = hoverData.hoverPoints;\n                hoverSeries = hoverData.hoverSeries;\n                followPointer = hoverSeries && hoverSeries.tooltipOptions.followPointer;\n                useSharedTooltip = shared && hoverSeries && !hoverSeries.noSharedTooltip;\n\n                // Refresh tooltip for kdpoint if new hover point or tooltip was hidden\n                // #3926, #4200\n                if (\n                    hoverPoint &&\n                    // !(hoverSeries && hoverSeries.directTouch) &&\n                    (hoverPoint !== chart.hoverPoint || (tooltip && tooltip.isHidden))\n                ) {\n                    each(chart.hoverPoints || [], function(p) {\n                        if (H.inArray(p, points) === -1) {\n                            p.setState();\n                        }\n                    });\n                    // Do mouseover on all points (#3919, #3985, #4410, #5622)\n                    each(points || [], function(p) {\n                        p.setState('hover');\n                    });\n                    // set normal state to previous series\n                    if (chart.hoverSeries !== hoverSeries) {\n                        hoverSeries.onMouseOver();\n                    }\n\n                    // If tracking is on series in stead of on each point,\n                    // fire mouseOver on hover point. // #4448\n                    if (chart.hoverPoint) {\n                        chart.hoverPoint.firePointEvent('mouseOut');\n                    }\n                    hoverPoint.firePointEvent('mouseOver');\n                    chart.hoverPoints = points;\n                    chart.hoverPoint = hoverPoint;\n                    // Draw tooltip if necessary\n                    if (tooltip) {\n                        tooltip.refresh(useSharedTooltip ? points : hoverPoint, e);\n                    }\n                    // Update positions (regardless of kdpoint or hoverPoint)\n                } else if (followPointer && tooltip && !tooltip.isHidden) {\n                    anchor = tooltip.getAnchor([{}], e);\n                    tooltip.updatePosition({\n                        plotX: anchor[0],\n                        plotY: anchor[1]\n                    });\n                }\n\n                // Start the event listener to pick up the tooltip and crosshairs\n                if (!pointer.unDocMouseMove) {\n                    pointer.unDocMouseMove = addEvent(\n                        chart.container.ownerDocument,\n                        'mousemove',\n                        function(e) {\n                            var chart = charts[H.hoverChartIndex];\n                            if (chart) {\n                                chart.pointer.onDocumentMouseMove(e);\n                            }\n                        }\n                    );\n                }\n\n                // Issues related to crosshair #4927, #5269 #5066, #5658\n                each(chart.axes, function drawAxisCrosshair(axis) {\n                    var snap = pick(axis.crosshair.snap, true),\n                        point = !snap ?\n                        undefined :\n                        H.find(points, function(p) {\n                            return p.series[axis.coll] === axis;\n                        });\n\n                    // Axis has snapping crosshairs, and one of the hover points belongs\n                    // to axis. Always call drawCrosshair when it is not snap.\n                    if (point || !snap) {\n                        axis.drawCrosshair(e, point);\n                        // Axis has snapping crosshairs, but no hover point belongs to axis\n                    } else {\n                        axis.hideCrosshair();\n                    }\n                });\n            },\n\n            /**\n             * Reset the tracking by hiding the tooltip, the hover series state and the\n             * hover point\n             *\n             * @param allowMove {Boolean}\n             *        Instead of destroying the tooltip altogether, allow moving it if\n             *        possible.\n             */\n            reset: function(allowMove, delay) {\n                var pointer = this,\n                    chart = pointer.chart,\n                    hoverSeries = chart.hoverSeries,\n                    hoverPoint = chart.hoverPoint,\n                    hoverPoints = chart.hoverPoints,\n                    tooltip = chart.tooltip,\n                    tooltipPoints = tooltip && tooltip.shared ? hoverPoints : hoverPoint;\n\n                // Check if the points have moved outside the plot area (#1003, #4736, #5101)\n                if (allowMove && tooltipPoints) {\n                    each(splat(tooltipPoints), function(point) {\n                        if (point.series.isCartesian && point.plotX === undefined) {\n                            allowMove = false;\n                        }\n                    });\n                }\n\n                // Just move the tooltip, #349\n                if (allowMove) {\n                    if (tooltip && tooltipPoints) {\n                        tooltip.refresh(tooltipPoints);\n                        if (hoverPoint) { // #2500\n                            hoverPoint.setState(hoverPoint.state, true);\n                            each(chart.axes, function(axis) {\n                                if (axis.crosshair) {\n                                    axis.drawCrosshair(null, hoverPoint);\n                                }\n                            });\n                        }\n                    }\n\n                    // Full reset\n                } else {\n\n                    if (hoverPoint) {\n                        hoverPoint.onMouseOut();\n                    }\n\n                    if (hoverPoints) {\n                        each(hoverPoints, function(point) {\n                            point.setState();\n                        });\n                    }\n\n                    if (hoverSeries) {\n                        hoverSeries.onMouseOut();\n                    }\n\n                    if (tooltip) {\n                        tooltip.hide(delay);\n                    }\n\n                    if (pointer.unDocMouseMove) {\n                        pointer.unDocMouseMove = pointer.unDocMouseMove();\n                    }\n\n                    // Remove crosshairs\n                    each(chart.axes, function(axis) {\n                        axis.hideCrosshair();\n                    });\n\n                    pointer.hoverX = chart.hoverPoints = chart.hoverPoint = null;\n                }\n            },\n\n            /**\n             * Scale series groups to a certain scale and translation.\n             *\n             * @private\n             */\n            scaleGroups: function(attribs, clip) {\n\n                var chart = this.chart,\n                    seriesAttribs;\n\n                // Scale each series\n                each(chart.series, function(series) {\n                    seriesAttribs = attribs || series.getPlotBox(); // #1701\n                    if (series.xAxis && series.xAxis.zoomEnabled && series.group) {\n                        series.group.attr(seriesAttribs);\n                        if (series.markerGroup) {\n                            series.markerGroup.attr(seriesAttribs);\n                            series.markerGroup.clip(clip ? chart.clipRect : null);\n                        }\n                        if (series.dataLabelsGroup) {\n                            series.dataLabelsGroup.attr(seriesAttribs);\n                        }\n                    }\n                });\n\n                // Clip\n                chart.clipRect.attr(clip || chart.clipBox);\n            },\n\n            /**\n             * Start a drag operation.\n             *\n             * @private\n             */\n            dragStart: function(e) {\n                var chart = this.chart;\n\n                // Record the start position\n                chart.mouseIsDown = e.type;\n                chart.cancelClick = false;\n                chart.mouseDownX = this.mouseDownX = e.chartX;\n                chart.mouseDownY = this.mouseDownY = e.chartY;\n            },\n\n            /**\n             * Perform a drag operation in response to a mousemove event while the mouse\n             * is down.\n             *\n             * @private\n             */\n            drag: function(e) {\n\n                var chart = this.chart,\n                    chartOptions = chart.options.chart,\n                    chartX = e.chartX,\n                    chartY = e.chartY,\n                    zoomHor = this.zoomHor,\n                    zoomVert = this.zoomVert,\n                    plotLeft = chart.plotLeft,\n                    plotTop = chart.plotTop,\n                    plotWidth = chart.plotWidth,\n                    plotHeight = chart.plotHeight,\n                    clickedInside,\n                    size,\n                    selectionMarker = this.selectionMarker,\n                    mouseDownX = this.mouseDownX,\n                    mouseDownY = this.mouseDownY,\n                    panKey = chartOptions.panKey && e[chartOptions.panKey + 'Key'];\n\n                // If the device supports both touch and mouse (like IE11), and we are touch-dragging\n                // inside the plot area, don't handle the mouse event. #4339.\n                if (selectionMarker && selectionMarker.touch) {\n                    return;\n                }\n\n                // If the mouse is outside the plot area, adjust to cooordinates\n                // inside to prevent the selection marker from going outside\n                if (chartX < plotLeft) {\n                    chartX = plotLeft;\n                } else if (chartX > plotLeft + plotWidth) {\n                    chartX = plotLeft + plotWidth;\n                }\n\n                if (chartY < plotTop) {\n                    chartY = plotTop;\n                } else if (chartY > plotTop + plotHeight) {\n                    chartY = plotTop + plotHeight;\n                }\n\n                // determine if the mouse has moved more than 10px\n                this.hasDragged = Math.sqrt(\n                    Math.pow(mouseDownX - chartX, 2) +\n                    Math.pow(mouseDownY - chartY, 2)\n                );\n\n                if (this.hasDragged > 10) {\n                    clickedInside = chart.isInsidePlot(mouseDownX - plotLeft, mouseDownY - plotTop);\n\n                    // make a selection\n                    if (chart.hasCartesianSeries && (this.zoomX || this.zoomY) && clickedInside && !panKey) {\n                        if (!selectionMarker) {\n                            this.selectionMarker = selectionMarker = chart.renderer.rect(\n                                    plotLeft,\n                                    plotTop,\n                                    zoomHor ? 1 : plotWidth,\n                                    zoomVert ? 1 : plotHeight,\n                                    0\n                                )\n                                .attr({\n\n                                    fill: chartOptions.selectionMarkerFill || color('#335cad').setOpacity(0.25).get(),\n\n                                    'class': 'highcharts-selection-marker',\n                                    'zIndex': 7\n                                })\n                                .add();\n                        }\n                    }\n\n                    // adjust the width of the selection marker\n                    if (selectionMarker && zoomHor) {\n                        size = chartX - mouseDownX;\n                        selectionMarker.attr({\n                            width: Math.abs(size),\n                            x: (size > 0 ? 0 : size) + mouseDownX\n                        });\n                    }\n                    // adjust the height of the selection marker\n                    if (selectionMarker && zoomVert) {\n                        size = chartY - mouseDownY;\n                        selectionMarker.attr({\n                            height: Math.abs(size),\n                            y: (size > 0 ? 0 : size) + mouseDownY\n                        });\n                    }\n\n                    // panning\n                    if (clickedInside && !selectionMarker && chartOptions.panning) {\n                        chart.pan(e, chartOptions.panning);\n                    }\n                }\n            },\n\n            /**\n             * On mouse up or touch end across the entire document, drop the selection.\n             *\n             * @private\n             */\n            drop: function(e) {\n                var pointer = this,\n                    chart = this.chart,\n                    hasPinched = this.hasPinched;\n\n                if (this.selectionMarker) {\n                    var selectionData = {\n                            originalEvent: e, // #4890\n                            xAxis: [],\n                            yAxis: []\n                        },\n                        selectionBox = this.selectionMarker,\n                        selectionLeft = selectionBox.attr ? selectionBox.attr('x') : selectionBox.x,\n                        selectionTop = selectionBox.attr ? selectionBox.attr('y') : selectionBox.y,\n                        selectionWidth = selectionBox.attr ? selectionBox.attr('width') : selectionBox.width,\n                        selectionHeight = selectionBox.attr ? selectionBox.attr('height') : selectionBox.height,\n                        runZoom;\n\n                    // a selection has been made\n                    if (this.hasDragged || hasPinched) {\n\n                        // record each axis' min and max\n                        each(chart.axes, function(axis) {\n                            if (axis.zoomEnabled && defined(axis.min) && (hasPinched || pointer[{\n                                    xAxis: 'zoomX',\n                                    yAxis: 'zoomY'\n                                }[axis.coll]])) { // #859, #3569\n                                var horiz = axis.horiz,\n                                    minPixelPadding = e.type === 'touchend' ? axis.minPixelPadding : 0, // #1207, #3075\n                                    selectionMin = axis.toValue((horiz ? selectionLeft : selectionTop) + minPixelPadding),\n                                    selectionMax = axis.toValue((horiz ? selectionLeft + selectionWidth : selectionTop + selectionHeight) - minPixelPadding);\n\n                                selectionData[axis.coll].push({\n                                    axis: axis,\n                                    min: Math.min(selectionMin, selectionMax), // for reversed axes\n                                    max: Math.max(selectionMin, selectionMax)\n                                });\n                                runZoom = true;\n                            }\n                        });\n                        if (runZoom) {\n                            fireEvent(chart, 'selection', selectionData, function(args) {\n                                chart.zoom(extend(args, hasPinched ? {\n                                    animation: false\n                                } : null));\n                            });\n                        }\n\n                    }\n                    this.selectionMarker = this.selectionMarker.destroy();\n\n                    // Reset scaling preview\n                    if (hasPinched) {\n                        this.scaleGroups();\n                    }\n                }\n\n                // Reset all\n                if (chart) { // it may be destroyed on mouse up - #877\n                    css(chart.container, {\n                        cursor: chart._cursor\n                    });\n                    chart.cancelClick = this.hasDragged > 10; // #370\n                    chart.mouseIsDown = this.hasDragged = this.hasPinched = false;\n                    this.pinchDown = [];\n                }\n            },\n\n            onContainerMouseDown: function(e) {\n\n                e = this.normalize(e);\n\n                this.zoomOption(e);\n\n                // issue #295, dragging not always working in Firefox\n                // if (e.preventDefault) {\n                //     e.preventDefault();\n                // }\n\n                this.dragStart(e);\n            },\n\n\n\n            onDocumentMouseUp: function(e) {\n                if (charts[H.hoverChartIndex]) {\n                    charts[H.hoverChartIndex].pointer.drop(e);\n                }\n            },\n\n            /**\n             * Special handler for mouse move that will hide the tooltip when the mouse\n             * leaves the plotarea. Issue #149 workaround. The mouseleave event does not\n             * always fire.\n             *\n             * @private\n             */\n            onDocumentMouseMove: function(e) {\n                var chart = this.chart,\n                    chartPosition = this.chartPosition;\n\n                e = this.normalize(e, chartPosition);\n\n                // If we're outside, hide the tooltip\n                if (chartPosition && !this.inClass(e.target, 'highcharts-tracker') &&\n                    !chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) {\n                    this.reset();\n                }\n            },\n\n            /**\n             * When mouse leaves the container, hide the tooltip.\n             *\n             * @private\n             */\n            onContainerMouseLeave: function(e) {\n                var chart = charts[H.hoverChartIndex];\n                if (chart && (e.relatedTarget || e.toElement)) { // #4886, MS Touch end fires mouseleave but with no related target\n                    chart.pointer.reset();\n                    chart.pointer.chartPosition = null; // also reset the chart position, used in #149 fix\n                }\n            },\n\n            // The mousemove, touchmove and touchstart event handler\n            onContainerMouseMove: function(e) {\n\n                var chart = this.chart;\n\n                if (!defined(H.hoverChartIndex) || !charts[H.hoverChartIndex] || !charts[H.hoverChartIndex].mouseIsDown) {\n                    H.hoverChartIndex = chart.index;\n                }\n\n                e = this.normalize(e);\n                // e.returnValue = false; // #2251, #3224\n\n                if (chart.mouseIsDown === 'mousedown') {\n                    this.drag(e);\n                }\n\n                // Show the tooltip and run mouse over events (#977)\n                if ((this.inClass(e.target, 'highcharts-tracker') ||\n                        chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) && !chart.openMenu) {\n                    this.runPointActions(e);\n                }\n            },\n\n            /**\n             * Utility to detect whether an element has, or has a parent with, a specific\n             * class name. Used on detection of tracker objects and on deciding whether\n             * hovering the tooltip should cause the active series to mouse out.\n             *\n             * @param  {SVGDOMElement|HTMLDOMElement} element\n             *         The element to investigate.\n             * @param  {String} className\n             *         The class name to look for.\n             *\n             * @return {Boolean}\n             *         True if either the element or one of its parents has the given\n             *         class name.\n             */\n            inClass: function(element, className) {\n                var elemClassName;\n                while (element) {\n                    elemClassName = attr(element, 'class');\n                    if (elemClassName) {\n                        if (elemClassName.indexOf(className) !== -1) {\n                            return true;\n                        }\n                        if (elemClassName.indexOf('highcharts-container') !== -1) {\n                            return false;\n                        }\n                    }\n                    element = element.parentNode;\n                }\n            },\n\n            onTrackerMouseOut: function(e) {\n                var series = this.chart.hoverSeries,\n                    relatedTarget = e.relatedTarget || e.toElement;\n                this.isDirectTouch = false;\n                if (series && relatedTarget && !series.stickyTracking &&\n                    !this.inClass(relatedTarget, 'highcharts-tooltip') &&\n                    (!this.inClass(relatedTarget, 'highcharts-series-' + series.index) || // #2499, #4465\n                        !this.inClass(relatedTarget, 'highcharts-tracker') // #5553\n                    )\n                ) {\n                    series.onMouseOut();\n                }\n            },\n\n            onContainerClick: function(e) {\n                var chart = this.chart,\n                    hoverPoint = chart.hoverPoint,\n                    plotLeft = chart.plotLeft,\n                    plotTop = chart.plotTop;\n\n                e = this.normalize(e);\n\n                if (!chart.cancelClick) {\n\n                    // On tracker click, fire the series and point events. #783, #1583\n                    if (hoverPoint && this.inClass(e.target, 'highcharts-tracker')) {\n\n                        // the series click event\n                        fireEvent(hoverPoint.series, 'click', extend(e, {\n                            point: hoverPoint\n                        }));\n\n                        // the point click event\n                        if (chart.hoverPoint) { // it may be destroyed (#1844)\n                            hoverPoint.firePointEvent('click', e);\n                        }\n\n                        // When clicking outside a tracker, fire a chart event\n                    } else {\n                        extend(e, this.getCoordinates(e));\n\n                        // fire a click event in the chart\n                        if (chart.isInsidePlot(e.chartX - plotLeft, e.chartY - plotTop)) {\n                            fireEvent(chart, 'click', e);\n                        }\n                    }\n\n\n                }\n            },\n\n            /**\n             * Set the JS DOM events on the container and document. This method should contain\n             * a one-to-one assignment between methods and their handlers. Any advanced logic should\n             * be moved to the handler reflecting the event's name.\n             *\n             * @private\n             */\n            setDOMEvents: function() {\n\n                var pointer = this,\n                    container = pointer.chart.container,\n                    ownerDoc = container.ownerDocument;\n\n                container.onmousedown = function(e) {\n                    pointer.onContainerMouseDown(e);\n                };\n                container.onmousemove = function(e) {\n                    pointer.onContainerMouseMove(e);\n                };\n                container.onclick = function(e) {\n                    pointer.onContainerClick(e);\n                };\n                addEvent(container, 'mouseleave', pointer.onContainerMouseLeave);\n                if (H.chartCount === 1) {\n                    addEvent(\n                        ownerDoc,\n                        'mouseup',\n                        pointer.onDocumentMouseUp\n                    );\n                }\n                if (H.hasTouch) {\n                    container.ontouchstart = function(e) {\n                        pointer.onContainerTouchStart(e);\n                    };\n                    container.ontouchmove = function(e) {\n                        pointer.onContainerTouchMove(e);\n                    };\n                    if (H.chartCount === 1) {\n                        addEvent(\n                            ownerDoc,\n                            'touchend',\n                            pointer.onDocumentTouchEnd\n                        );\n                    }\n                }\n\n            },\n\n            /**\n             * Destroys the Pointer object and disconnects DOM events.\n             */\n            destroy: function() {\n                var pointer = this,\n                    ownerDoc = this.chart.container.ownerDocument;\n\n                if (pointer.unDocMouseMove) {\n                    pointer.unDocMouseMove();\n                }\n\n                removeEvent(\n                    pointer.chart.container,\n                    'mouseleave',\n                    pointer.onContainerMouseLeave\n                );\n                if (!H.chartCount) {\n                    removeEvent(ownerDoc, 'mouseup', pointer.onDocumentMouseUp);\n                    if (H.hasTouch) {\n                        removeEvent(ownerDoc, 'touchend', pointer.onDocumentTouchEnd);\n                    }\n                }\n\n                // memory and CPU leak\n                clearInterval(pointer.tooltipTimeout);\n\n                H.objectEach(pointer, function(val, prop) {\n                    pointer[prop] = null;\n                });\n            }\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var charts = H.charts,\n            each = H.each,\n            extend = H.extend,\n            map = H.map,\n            noop = H.noop,\n            pick = H.pick,\n            Pointer = H.Pointer;\n\n        /* Support for touch devices */\n        extend(Pointer.prototype, /** @lends Pointer.prototype */ {\n\n            /**\n             * Run translation operations\n             */\n            pinchTranslate: function(pinchDown, touches, transform, selectionMarker, clip, lastValidTouch) {\n                if (this.zoomHor) {\n                    this.pinchTranslateDirection(true, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);\n                }\n                if (this.zoomVert) {\n                    this.pinchTranslateDirection(false, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);\n                }\n            },\n\n            /**\n             * Run translation operations for each direction (horizontal and vertical) independently\n             */\n            pinchTranslateDirection: function(horiz, pinchDown, touches, transform,\n                selectionMarker, clip, lastValidTouch, forcedScale) {\n                var chart = this.chart,\n                    xy = horiz ? 'x' : 'y',\n                    XY = horiz ? 'X' : 'Y',\n                    sChartXY = 'chart' + XY,\n                    wh = horiz ? 'width' : 'height',\n                    plotLeftTop = chart['plot' + (horiz ? 'Left' : 'Top')],\n                    selectionWH,\n                    selectionXY,\n                    clipXY,\n                    scale = forcedScale || 1,\n                    inverted = chart.inverted,\n                    bounds = chart.bounds[horiz ? 'h' : 'v'],\n                    singleTouch = pinchDown.length === 1,\n                    touch0Start = pinchDown[0][sChartXY],\n                    touch0Now = touches[0][sChartXY],\n                    touch1Start = !singleTouch && pinchDown[1][sChartXY],\n                    touch1Now = !singleTouch && touches[1][sChartXY],\n                    outOfBounds,\n                    transformScale,\n                    scaleKey,\n                    setScale = function() {\n                        // Don't zoom if fingers are too close on this axis\n                        if (!singleTouch && Math.abs(touch0Start - touch1Start) > 20) {\n                            scale = forcedScale || Math.abs(touch0Now - touch1Now) / Math.abs(touch0Start - touch1Start);\n                        }\n\n                        clipXY = ((plotLeftTop - touch0Now) / scale) + touch0Start;\n                        selectionWH = chart['plot' + (horiz ? 'Width' : 'Height')] / scale;\n                    };\n\n                // Set the scale, first pass\n                setScale();\n\n                selectionXY = clipXY; // the clip position (x or y) is altered if out of bounds, the selection position is not\n\n                // Out of bounds\n                if (selectionXY < bounds.min) {\n                    selectionXY = bounds.min;\n                    outOfBounds = true;\n                } else if (selectionXY + selectionWH > bounds.max) {\n                    selectionXY = bounds.max - selectionWH;\n                    outOfBounds = true;\n                }\n\n                // Is the chart dragged off its bounds, determined by dataMin and dataMax?\n                if (outOfBounds) {\n\n                    // Modify the touchNow position in order to create an elastic drag movement. This indicates\n                    // to the user that the chart is responsive but can't be dragged further.\n                    touch0Now -= 0.8 * (touch0Now - lastValidTouch[xy][0]);\n                    if (!singleTouch) {\n                        touch1Now -= 0.8 * (touch1Now - lastValidTouch[xy][1]);\n                    }\n\n                    // Set the scale, second pass to adapt to the modified touchNow positions\n                    setScale();\n\n                } else {\n                    lastValidTouch[xy] = [touch0Now, touch1Now];\n                }\n\n                // Set geometry for clipping, selection and transformation\n                if (!inverted) {\n                    clip[xy] = clipXY - plotLeftTop;\n                    clip[wh] = selectionWH;\n                }\n                scaleKey = inverted ? (horiz ? 'scaleY' : 'scaleX') : 'scale' + XY;\n                transformScale = inverted ? 1 / scale : scale;\n\n                selectionMarker[wh] = selectionWH;\n                selectionMarker[xy] = selectionXY;\n                transform[scaleKey] = scale;\n                transform['translate' + XY] = (transformScale * plotLeftTop) + (touch0Now - (transformScale * touch0Start));\n            },\n\n            /**\n             * Handle touch events with two touches\n             */\n            pinch: function(e) {\n\n                var self = this,\n                    chart = self.chart,\n                    pinchDown = self.pinchDown,\n                    touches = e.touches,\n                    touchesLength = touches.length,\n                    lastValidTouch = self.lastValidTouch,\n                    hasZoom = self.hasZoom,\n                    selectionMarker = self.selectionMarker,\n                    transform = {},\n                    fireClickEvent = touchesLength === 1 && ((self.inClass(e.target, 'highcharts-tracker') &&\n                        chart.runTrackerClick) || self.runChartClick),\n                    clip = {};\n\n                // Don't initiate panning until the user has pinched. This prevents us from\n                // blocking page scrolling as users scroll down a long page (#4210).\n                if (touchesLength > 1) {\n                    self.initiated = true;\n                }\n\n                // On touch devices, only proceed to trigger click if a handler is defined\n                if (hasZoom && self.initiated && !fireClickEvent) {\n                    e.preventDefault();\n                }\n\n                // Normalize each touch\n                map(touches, function(e) {\n                    return self.normalize(e);\n                });\n\n                // Register the touch start position\n                if (e.type === 'touchstart') {\n                    each(touches, function(e, i) {\n                        pinchDown[i] = {\n                            chartX: e.chartX,\n                            chartY: e.chartY\n                        };\n                    });\n                    lastValidTouch.x = [pinchDown[0].chartX, pinchDown[1] && pinchDown[1].chartX];\n                    lastValidTouch.y = [pinchDown[0].chartY, pinchDown[1] && pinchDown[1].chartY];\n\n                    // Identify the data bounds in pixels\n                    each(chart.axes, function(axis) {\n                        if (axis.zoomEnabled) {\n                            var bounds = chart.bounds[axis.horiz ? 'h' : 'v'],\n                                minPixelPadding = axis.minPixelPadding,\n                                min = axis.toPixels(pick(axis.options.min, axis.dataMin)),\n                                max = axis.toPixels(pick(axis.options.max, axis.dataMax)),\n                                absMin = Math.min(min, max),\n                                absMax = Math.max(min, max);\n\n                            // Store the bounds for use in the touchmove handler\n                            bounds.min = Math.min(axis.pos, absMin - minPixelPadding);\n                            bounds.max = Math.max(axis.pos + axis.len, absMax + minPixelPadding);\n                        }\n                    });\n                    self.res = true; // reset on next move\n\n                    // Optionally move the tooltip on touchmove\n                } else if (self.followTouchMove && touchesLength === 1) {\n                    this.runPointActions(self.normalize(e));\n\n                    // Event type is touchmove, handle panning and pinching\n                } else if (pinchDown.length) { // can be 0 when releasing, if touchend fires first\n\n\n                    // Set the marker\n                    if (!selectionMarker) {\n                        self.selectionMarker = selectionMarker = extend({\n                            destroy: noop,\n                            touch: true\n                        }, chart.plotBox);\n                    }\n\n                    self.pinchTranslate(pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);\n\n                    self.hasPinched = hasZoom;\n\n                    // Scale and translate the groups to provide visual feedback during pinching\n                    self.scaleGroups(transform, clip);\n\n                    if (self.res) {\n                        self.res = false;\n                        this.reset(false, 0);\n                    }\n                }\n            },\n\n            /**\n             * General touch handler shared by touchstart and touchmove.\n             */\n            touch: function(e, start) {\n                var chart = this.chart,\n                    hasMoved,\n                    pinchDown,\n                    isInside;\n\n                if (chart.index !== H.hoverChartIndex) {\n                    this.onContainerMouseLeave({\n                        relatedTarget: true\n                    });\n                }\n                H.hoverChartIndex = chart.index;\n\n                if (e.touches.length === 1) {\n\n                    e = this.normalize(e);\n\n                    isInside = chart.isInsidePlot(\n                        e.chartX - chart.plotLeft,\n                        e.chartY - chart.plotTop\n                    );\n                    if (isInside && !chart.openMenu) {\n\n                        // Run mouse events and display tooltip etc\n                        if (start) {\n                            this.runPointActions(e);\n                        }\n\n                        // Android fires touchmove events after the touchstart even if the\n                        // finger hasn't moved, or moved only a pixel or two. In iOS however,\n                        // the touchmove doesn't fire unless the finger moves more than ~4px.\n                        // So we emulate this behaviour in Android by checking how much it\n                        // moved, and cancelling on small distances. #3450.\n                        if (e.type === 'touchmove') {\n                            pinchDown = this.pinchDown;\n                            hasMoved = pinchDown[0] ? Math.sqrt( // #5266\n                                Math.pow(pinchDown[0].chartX - e.chartX, 2) +\n                                Math.pow(pinchDown[0].chartY - e.chartY, 2)\n                            ) >= 4 : false;\n                        }\n\n                        if (pick(hasMoved, true)) {\n                            this.pinch(e);\n                        }\n\n                    } else if (start) {\n                        // Hide the tooltip on touching outside the plot area (#1203)\n                        this.reset();\n                    }\n\n                } else if (e.touches.length === 2) {\n                    this.pinch(e);\n                }\n            },\n\n            onContainerTouchStart: function(e) {\n                this.zoomOption(e);\n                this.touch(e, true);\n            },\n\n            onContainerTouchMove: function(e) {\n                this.touch(e);\n            },\n\n            onDocumentTouchEnd: function(e) {\n                if (charts[H.hoverChartIndex]) {\n                    charts[H.hoverChartIndex].pointer.drop(e);\n                }\n            }\n\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            charts = H.charts,\n            css = H.css,\n            doc = H.doc,\n            extend = H.extend,\n            hasTouch = H.hasTouch,\n            noop = H.noop,\n            Pointer = H.Pointer,\n            removeEvent = H.removeEvent,\n            win = H.win,\n            wrap = H.wrap;\n\n        if (!hasTouch && (win.PointerEvent || win.MSPointerEvent)) {\n\n            // The touches object keeps track of the points being touched at all times\n            var touches = {},\n                hasPointerEvent = !!win.PointerEvent,\n                getWebkitTouches = function() {\n                    var fake = [];\n                    fake.item = function(i) {\n                        return this[i];\n                    };\n                    H.objectEach(touches, function(touch) {\n                        fake.push({\n                            pageX: touch.pageX,\n                            pageY: touch.pageY,\n                            target: touch.target\n                        });\n                    });\n                    return fake;\n                },\n                translateMSPointer = function(e, method, wktype, func) {\n                    var p;\n                    if ((e.pointerType === 'touch' || e.pointerType === e.MSPOINTER_TYPE_TOUCH) && charts[H.hoverChartIndex]) {\n                        func(e);\n                        p = charts[H.hoverChartIndex].pointer;\n                        p[method]({\n                            type: wktype,\n                            target: e.currentTarget,\n                            preventDefault: noop,\n                            touches: getWebkitTouches()\n                        });\n                    }\n                };\n\n            /**\n             * Extend the Pointer prototype with methods for each event handler and more\n             */\n            extend(Pointer.prototype, /** @lends Pointer.prototype */ {\n                onContainerPointerDown: function(e) {\n                    translateMSPointer(e, 'onContainerTouchStart', 'touchstart', function(e) {\n                        touches[e.pointerId] = {\n                            pageX: e.pageX,\n                            pageY: e.pageY,\n                            target: e.currentTarget\n                        };\n                    });\n                },\n                onContainerPointerMove: function(e) {\n                    translateMSPointer(e, 'onContainerTouchMove', 'touchmove', function(e) {\n                        touches[e.pointerId] = {\n                            pageX: e.pageX,\n                            pageY: e.pageY\n                        };\n                        if (!touches[e.pointerId].target) {\n                            touches[e.pointerId].target = e.currentTarget;\n                        }\n                    });\n                },\n                onDocumentPointerUp: function(e) {\n                    translateMSPointer(e, 'onDocumentTouchEnd', 'touchend', function(e) {\n                        delete touches[e.pointerId];\n                    });\n                },\n\n                /**\n                 * Add or remove the MS Pointer specific events\n                 */\n                batchMSEvents: function(fn) {\n                    fn(this.chart.container, hasPointerEvent ? 'pointerdown' : 'MSPointerDown', this.onContainerPointerDown);\n                    fn(this.chart.container, hasPointerEvent ? 'pointermove' : 'MSPointerMove', this.onContainerPointerMove);\n                    fn(doc, hasPointerEvent ? 'pointerup' : 'MSPointerUp', this.onDocumentPointerUp);\n                }\n            });\n\n            // Disable default IE actions for pinch and such on chart element\n            wrap(Pointer.prototype, 'init', function(proceed, chart, options) {\n                proceed.call(this, chart, options);\n                if (this.hasZoom) { // #4014\n                    css(chart.container, {\n                        '-ms-touch-action': 'none',\n                        'touch-action': 'none'\n                    });\n                }\n            });\n\n            // Add IE specific touch events to chart\n            wrap(Pointer.prototype, 'setDOMEvents', function(proceed) {\n                proceed.apply(this);\n                if (this.hasZoom || this.followTouchMove) {\n                    this.batchMSEvents(addEvent);\n                }\n            });\n            // Destroy MS events also\n            wrap(Pointer.prototype, 'destroy', function(proceed) {\n                this.batchMSEvents(removeEvent);\n                proceed.call(this);\n            });\n        }\n\n    }(Highcharts));\n    (function(Highcharts) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var H = Highcharts,\n\n            addEvent = H.addEvent,\n            css = H.css,\n            discardElement = H.discardElement,\n            defined = H.defined,\n            each = H.each,\n            isFirefox = H.isFirefox,\n            marginNames = H.marginNames,\n            merge = H.merge,\n            pick = H.pick,\n            setAnimation = H.setAnimation,\n            stableSort = H.stableSort,\n            win = H.win,\n            wrap = H.wrap;\n\n        /**\n         * The overview of the chart's series. The legend object is instanciated\n         * internally in the chart constructor, and available from `chart.legend`. Each\n         * chart has only one legend.\n         *\n         * @class\n         */\n        Highcharts.Legend = function(chart, options) {\n            this.init(chart, options);\n        };\n\n        Highcharts.Legend.prototype = {\n\n            /**\n             * Initialize the legend.\n             *\n             * @private\n             */\n            init: function(chart, options) {\n\n                this.chart = chart;\n\n                this.setOptions(options);\n\n                if (options.enabled) {\n\n                    // Render it\n                    this.render();\n\n                    // move checkboxes\n                    addEvent(this.chart, 'endResize', function() {\n                        this.legend.positionCheckboxes();\n                    });\n                }\n            },\n\n            setOptions: function(options) {\n\n                var padding = pick(options.padding, 8);\n\n                this.options = options;\n\n\n                this.itemStyle = options.itemStyle;\n                this.itemHiddenStyle = merge(this.itemStyle, options.itemHiddenStyle);\n\n                this.itemMarginTop = options.itemMarginTop || 0;\n                this.padding = padding;\n                this.initialItemY = padding - 5; // 5 is pixels above the text\n                this.maxItemWidth = 0;\n                this.itemHeight = 0;\n                this.symbolWidth = pick(options.symbolWidth, 16);\n                this.pages = [];\n\n            },\n\n            /**\n             * Update the legend with new options. Equivalent to running `chart.update`\n             * with a legend configuration option.\n             * @param  {LegendOptions} options\n             *         Legend options.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart.\n             *\n             * @sample highcharts/legend/legend-update/\n             *         Legend update\n             */\n            update: function(options, redraw) {\n                var chart = this.chart;\n\n                this.setOptions(merge(true, this.options, options));\n                this.destroy();\n                chart.isDirtyLegend = chart.isDirtyBox = true;\n                if (pick(redraw, true)) {\n                    chart.redraw();\n                }\n            },\n\n            /**\n             * Set the colors for the legend item.\n             *\n             * @private\n             * @param  {Series|Point} item\n             *         A Series or Point instance\n             * @param  {Boolean} visible\n             *         Dimmed or colored\n             */\n            colorizeItem: function(item, visible) {\n                item.legendGroup[visible ? 'removeClass' : 'addClass'](\n                    'highcharts-legend-item-hidden'\n                );\n\n\n                var legend = this,\n                    options = legend.options,\n                    legendItem = item.legendItem,\n                    legendLine = item.legendLine,\n                    legendSymbol = item.legendSymbol,\n                    hiddenColor = legend.itemHiddenStyle.color,\n                    textColor = visible ? options.itemStyle.color : hiddenColor,\n                    symbolColor = visible ? (item.color || hiddenColor) : hiddenColor,\n                    markerOptions = item.options && item.options.marker,\n                    symbolAttr = {\n                        fill: symbolColor\n                    };\n\n                if (legendItem) {\n                    legendItem.css({\n                        fill: textColor,\n                        color: textColor // #1553, oldIE\n                    });\n                }\n                if (legendLine) {\n                    legendLine.attr({\n                        stroke: symbolColor\n                    });\n                }\n\n                if (legendSymbol) {\n\n                    // Apply marker options\n                    if (markerOptions && legendSymbol.isMarker) { // #585\n                        symbolAttr = item.pointAttribs();\n                        if (!visible) {\n                            symbolAttr.stroke = symbolAttr.fill = hiddenColor; // #6769\n                        }\n                    }\n\n                    legendSymbol.attr(symbolAttr);\n                }\n\n            },\n\n            /**\n             * Position the legend item.\n             *\n             * @private\n             * @param {Series|Point} item\n             *        The item to position\n             */\n            positionItem: function(item) {\n                var legend = this,\n                    options = legend.options,\n                    symbolPadding = options.symbolPadding,\n                    ltr = !options.rtl,\n                    legendItemPos = item._legendItemPos,\n                    itemX = legendItemPos[0],\n                    itemY = legendItemPos[1],\n                    checkbox = item.checkbox,\n                    legendGroup = item.legendGroup;\n\n                if (legendGroup && legendGroup.element) {\n                    legendGroup.translate(\n                        ltr ?\n                        itemX :\n                        legend.legendWidth - itemX - 2 * symbolPadding - 4,\n                        itemY\n                    );\n                }\n\n                if (checkbox) {\n                    checkbox.x = itemX;\n                    checkbox.y = itemY;\n                }\n            },\n\n            /**\n             * Destroy a single legend item, used internally on removing series items.\n             *\n             * @param {Series|Point} item\n             *        The item to remove\n             */\n            destroyItem: function(item) {\n                var checkbox = item.checkbox;\n\n                // destroy SVG elements\n                each(\n                    ['legendItem', 'legendLine', 'legendSymbol', 'legendGroup'],\n                    function(key) {\n                        if (item[key]) {\n                            item[key] = item[key].destroy();\n                        }\n                    }\n                );\n\n                if (checkbox) {\n                    discardElement(item.checkbox);\n                }\n            },\n\n            /**\n             * Destroy the legend. Used internally. To reflow objects, `chart.redraw`\n             * must be called after destruction.\n             */\n            destroy: function() {\n                function destroyItems(key) {\n                    if (this[key]) {\n                        this[key] = this[key].destroy();\n                    }\n                }\n\n                // Destroy items\n                each(this.getAllItems(), function(item) {\n                    each(['legendItem', 'legendGroup'], destroyItems, item);\n                });\n\n                // Destroy legend elements\n                each([\n                    'clipRect',\n                    'up',\n                    'down',\n                    'pager',\n                    'nav',\n                    'box',\n                    'title',\n                    'group'\n                ], destroyItems, this);\n                this.display = null; // Reset in .render on update.\n            },\n\n            /**\n             * Position the checkboxes after the width is determined.\n             *\n             * @private\n             */\n            positionCheckboxes: function(scrollOffset) {\n                var alignAttr = this.group && this.group.alignAttr,\n                    translateY,\n                    clipHeight = this.clipHeight || this.legendHeight,\n                    titleHeight = this.titleHeight;\n\n                if (alignAttr) {\n                    translateY = alignAttr.translateY;\n                    each(this.allItems, function(item) {\n                        var checkbox = item.checkbox,\n                            top;\n\n                        if (checkbox) {\n                            top = translateY + titleHeight + checkbox.y +\n                                (scrollOffset || 0) + 3;\n                            css(checkbox, {\n                                left: (alignAttr.translateX + item.checkboxOffset +\n                                    checkbox.x - 20) + 'px',\n                                top: top + 'px',\n                                display: top > translateY - 6 && top < translateY +\n                                    clipHeight - 6 ? '' : 'none'\n                            });\n                        }\n                    });\n                }\n            },\n\n            /**\n             * Render the legend title on top of the legend.\n             *\n             * @private\n             */\n            renderTitle: function() {\n                var options = this.options,\n                    padding = this.padding,\n                    titleOptions = options.title,\n                    titleHeight = 0,\n                    bBox;\n\n                if (titleOptions.text) {\n                    if (!this.title) {\n                        this.title = this.chart.renderer.label(\n                                titleOptions.text,\n                                padding - 3,\n                                padding - 4,\n                                null,\n                                null,\n                                null,\n                                options.useHTML,\n                                null,\n                                'legend-title'\n                            )\n                            .attr({\n                                zIndex: 1\n                            })\n\n                            .css(titleOptions.style)\n\n                            .add(this.group);\n                    }\n                    bBox = this.title.getBBox();\n                    titleHeight = bBox.height;\n                    this.offsetWidth = bBox.width; // #1717\n                    this.contentGroup.attr({\n                        translateY: titleHeight\n                    });\n                }\n                this.titleHeight = titleHeight;\n            },\n\n            /**\n             * Set the legend item text.\n             *\n             * @param  {Series|Point} item\n             *         The item for which to update the text in the legend.\n             */\n            setText: function(item) {\n                var options = this.options;\n                item.legendItem.attr({\n                    text: options.labelFormat ?\n                        H.format(options.labelFormat, item) : options.labelFormatter.call(item)\n                });\n            },\n\n            /**\n             * Render a single specific legend item. Called internally from the `render`\n             * function.\n             *\n             * @private\n             * @param {Series|Point} item\n             *        The item to render.\n             */\n            renderItem: function(item) {\n                var legend = this,\n                    chart = legend.chart,\n                    renderer = chart.renderer,\n                    options = legend.options,\n                    horizontal = options.layout === 'horizontal',\n                    symbolWidth = legend.symbolWidth,\n                    symbolPadding = options.symbolPadding,\n\n                    itemStyle = legend.itemStyle,\n                    itemHiddenStyle = legend.itemHiddenStyle,\n\n                    padding = legend.padding,\n                    itemDistance = horizontal ? pick(options.itemDistance, 20) : 0,\n                    ltr = !options.rtl,\n                    itemHeight,\n                    widthOption = options.width,\n                    itemMarginBottom = options.itemMarginBottom || 0,\n                    itemMarginTop = legend.itemMarginTop,\n                    bBox,\n                    itemWidth,\n                    li = item.legendItem,\n                    isSeries = !item.series,\n                    series = !isSeries && item.series.drawLegendSymbol ?\n                    item.series :\n                    item,\n                    seriesOptions = series.options,\n                    showCheckbox = legend.createCheckboxForItem &&\n                    seriesOptions &&\n                    seriesOptions.showCheckbox,\n                    // full width minus text width\n                    itemExtraWidth = symbolWidth + symbolPadding + itemDistance +\n                    (showCheckbox ? 20 : 0),\n                    useHTML = options.useHTML,\n                    fontSize = 12,\n                    itemClassName = item.options.className;\n\n                if (!li) { // generate it once, later move it\n\n                    // Generate the group box, a group to hold the symbol and text. Text\n                    // is to be appended in Legend class.\n                    item.legendGroup = renderer.g('legend-item')\n                        .addClass(\n                            'highcharts-' + series.type + '-series ' +\n                            'highcharts-color-' + item.colorIndex +\n                            (itemClassName ? ' ' + itemClassName : '') +\n                            (isSeries ? ' highcharts-series-' + item.index : '')\n                        )\n                        .attr({\n                            zIndex: 1\n                        })\n                        .add(legend.scrollGroup);\n\n                    // Generate the list item text and add it to the group\n                    item.legendItem = li = renderer.text(\n                            '',\n                            ltr ? symbolWidth + symbolPadding : -symbolPadding,\n                            legend.baseline || 0,\n                            useHTML\n                        )\n\n                        // merge to prevent modifying original (#1021)\n                        .css(merge(item.visible ? itemStyle : itemHiddenStyle))\n\n                        .attr({\n                            align: ltr ? 'left' : 'right',\n                            zIndex: 2\n                        })\n                        .add(item.legendGroup);\n\n                    // Get the baseline for the first item - the font size is equal for\n                    // all\n                    if (!legend.baseline) {\n\n                        fontSize = itemStyle.fontSize;\n\n                        legend.fontMetrics = renderer.fontMetrics(\n                            fontSize,\n                            li\n                        );\n                        legend.baseline = legend.fontMetrics.f + 3 + itemMarginTop;\n                        li.attr('y', legend.baseline);\n                    }\n\n                    // Draw the legend symbol inside the group box\n                    legend.symbolHeight = options.symbolHeight || legend.fontMetrics.f;\n                    series.drawLegendSymbol(legend, item);\n\n                    if (legend.setItemEvents) {\n                        legend.setItemEvents(item, li, useHTML);\n                    }\n\n                    // add the HTML checkbox on top\n                    if (showCheckbox) {\n                        legend.createCheckboxForItem(item);\n                    }\n                }\n\n                // Colorize the items\n                legend.colorizeItem(item, item.visible);\n\n                // Take care of max width and text overflow (#6659)\n\n                if (!itemStyle.width) {\n\n                    li.css({\n                        width: (\n                            options.itemWidth ||\n                            options.width ||\n                            chart.spacingBox.width\n                        ) - itemExtraWidth\n                    });\n\n                }\n\n\n                // Always update the text\n                legend.setText(item);\n\n                // calculate the positions for the next line\n                bBox = li.getBBox();\n\n                itemWidth = item.checkboxOffset =\n                    options.itemWidth ||\n                    item.legendItemWidth ||\n                    bBox.width + itemExtraWidth;\n                legend.itemHeight = itemHeight = Math.round(\n                    item.legendItemHeight || bBox.height || legend.symbolHeight\n                );\n\n                // If the item exceeds the width, start a new line\n                if (\n                    horizontal &&\n                    legend.itemX - padding + itemWidth > (\n                        widthOption || (\n                            chart.spacingBox.width - 2 * padding - options.x\n                        )\n                    )\n                ) {\n                    legend.itemX = padding;\n                    legend.itemY += itemMarginTop + legend.lastLineHeight +\n                        itemMarginBottom;\n                    legend.lastLineHeight = 0; // reset for next line (#915, #3976)\n                }\n\n                // If the item exceeds the height, start a new column\n                /*if (!horizontal && legend.itemY + options.y +\n                \t\titemHeight > chart.chartHeight - spacingTop - spacingBottom) {\n                \tlegend.itemY = legend.initialItemY;\n                \tlegend.itemX += legend.maxItemWidth;\n                \tlegend.maxItemWidth = 0;\n                }*/\n\n                // Set the edge positions\n                legend.maxItemWidth = Math.max(legend.maxItemWidth, itemWidth);\n                legend.lastItemY = itemMarginTop + legend.itemY + itemMarginBottom;\n                legend.lastLineHeight = Math.max( // #915\n                    itemHeight,\n                    legend.lastLineHeight\n                );\n\n                // cache the position of the newly generated or reordered items\n                item._legendItemPos = [legend.itemX, legend.itemY];\n\n                // advance\n                if (horizontal) {\n                    legend.itemX += itemWidth;\n\n                } else {\n                    legend.itemY += itemMarginTop + itemHeight + itemMarginBottom;\n                    legend.lastLineHeight = itemHeight;\n                }\n\n                // the width of the widest item\n                legend.offsetWidth = widthOption || Math.max(\n                    (\n                        horizontal ? legend.itemX - padding - (item.checkbox ?\n                            // decrease by itemDistance only when no checkbox #4853\n                            0 :\n                            itemDistance\n                        ) : itemWidth\n                    ) + padding,\n                    legend.offsetWidth\n                );\n            },\n\n            /**\n             * Get all items, which is one item per series for most series and one\n             * item per point for pie series and its derivatives.\n             *\n             * @return {Array.<Series|Point>}\n             *         The current items in the legend.\n             */\n            getAllItems: function() {\n                var allItems = [];\n                each(this.chart.series, function(series) {\n                    var seriesOptions = series && series.options;\n\n                    // Handle showInLegend. If the series is linked to another series,\n                    // defaults to false.\n                    if (series && pick(\n                            seriesOptions.showInLegend, !defined(seriesOptions.linkedTo) ? undefined : false, true\n                        )) {\n\n                        // Use points or series for the legend item depending on\n                        // legendType\n                        allItems = allItems.concat(\n                            series.legendItems ||\n                            (\n                                seriesOptions.legendType === 'point' ?\n                                series.data :\n                                series\n                            )\n                        );\n                    }\n                });\n                return allItems;\n            },\n\n            /**\n             * Adjust the chart margins by reserving space for the legend on only one\n             * side of the chart. If the position is set to a corner, top or bottom is\n             * reserved for horizontal legends and left or right for vertical ones.\n             *\n             * @private\n             */\n            adjustMargins: function(margin, spacing) {\n                var chart = this.chart,\n                    options = this.options,\n                    // Use the first letter of each alignment option in order to detect\n                    // the side. (#4189 - use charAt(x) notation instead of [x] for IE7)\n                    alignment = options.align.charAt(0) +\n                    options.verticalAlign.charAt(0) +\n                    options.layout.charAt(0);\n\n                if (!options.floating) {\n\n                    each([\n                        /(lth|ct|rth)/,\n                        /(rtv|rm|rbv)/,\n                        /(rbh|cb|lbh)/,\n                        /(lbv|lm|ltv)/\n                    ], function(alignments, side) {\n                        if (alignments.test(alignment) && !defined(margin[side])) {\n                            // Now we have detected on which side of the chart we should\n                            // reserve space for the legend\n                            chart[marginNames[side]] = Math.max(\n                                chart[marginNames[side]],\n                                (\n                                    chart.legend[\n                                        (side + 1) % 2 ? 'legendHeight' : 'legendWidth'\n                                    ] + [1, -1, -1, 1][side] * options[\n                                        (side % 2) ? 'x' : 'y'\n                                    ] +\n                                    pick(options.margin, 12) +\n                                    spacing[side]\n                                )\n                            );\n                        }\n                    });\n                }\n            },\n\n            /**\n             * Render the legend. This method can be called both before and after\n             * `chart.render`. If called after, it will only rearrange items instead\n             * of creating new ones. Called internally on initial render and after\n             * redraws.\n             */\n            render: function() {\n                var legend = this,\n                    chart = legend.chart,\n                    renderer = chart.renderer,\n                    legendGroup = legend.group,\n                    allItems,\n                    display,\n                    legendWidth,\n                    legendHeight,\n                    box = legend.box,\n                    options = legend.options,\n                    padding = legend.padding;\n\n                legend.itemX = padding;\n                legend.itemY = legend.initialItemY;\n                legend.offsetWidth = 0;\n                legend.lastItemY = 0;\n\n                if (!legendGroup) {\n                    legend.group = legendGroup = renderer.g('legend')\n                        .attr({\n                            zIndex: 7\n                        })\n                        .add();\n                    legend.contentGroup = renderer.g()\n                        .attr({\n                            zIndex: 1\n                        }) // above background\n                        .add(legendGroup);\n                    legend.scrollGroup = renderer.g()\n                        .add(legend.contentGroup);\n                }\n\n                legend.renderTitle();\n\n                // add each series or point\n                allItems = legend.getAllItems();\n\n                // sort by legendIndex\n                stableSort(allItems, function(a, b) {\n                    return ((a.options && a.options.legendIndex) || 0) -\n                        ((b.options && b.options.legendIndex) || 0);\n                });\n\n                // reversed legend\n                if (options.reversed) {\n                    allItems.reverse();\n                }\n\n                legend.allItems = allItems;\n                legend.display = display = !!allItems.length;\n\n                // render the items\n                legend.lastLineHeight = 0;\n                each(allItems, function(item) {\n                    legend.renderItem(item);\n                });\n\n                // Get the box\n                legendWidth = (options.width || legend.offsetWidth) + padding;\n                legendHeight = legend.lastItemY + legend.lastLineHeight +\n                    legend.titleHeight;\n                legendHeight = legend.handleOverflow(legendHeight);\n                legendHeight += padding;\n\n                // Draw the border and/or background\n                if (!box) {\n                    legend.box = box = renderer.rect()\n                        .addClass('highcharts-legend-box')\n                        .attr({\n                            r: options.borderRadius\n                        })\n                        .add(legendGroup);\n                    box.isNew = true;\n                }\n\n\n                // Presentational\n                box\n                    .attr({\n                        stroke: options.borderColor,\n                        'stroke-width': options.borderWidth || 0,\n                        fill: options.backgroundColor || 'none'\n                    })\n                    .shadow(options.shadow);\n\n\n                if (legendWidth > 0 && legendHeight > 0) {\n                    box[box.isNew ? 'attr' : 'animate'](\n                        box.crisp({\n                            x: 0,\n                            y: 0,\n                            width: legendWidth,\n                            height: legendHeight\n                        }, box.strokeWidth())\n                    );\n                    box.isNew = false;\n                }\n\n                // hide the border if no items\n                box[display ? 'show' : 'hide']();\n\n\n\n                legend.legendWidth = legendWidth;\n                legend.legendHeight = legendHeight;\n\n                // Now that the legend width and height are established, put the items\n                // in the final position\n                each(allItems, function(item) {\n                    legend.positionItem(item);\n                });\n\n                // 1.x compatibility: positioning based on style\n                /*var props = ['left', 'right', 'top', 'bottom'],\n                \tprop,\n                \ti = 4;\n                while (i--) {\n                \tprop = props[i];\n                \tif (options.style[prop] && options.style[prop] !== 'auto') {\n                \t\toptions[i < 2 ? 'align' : 'verticalAlign'] = prop;\n                \t\toptions[i < 2 ? 'x' : 'y'] =\n                \t\t\tpInt(options.style[prop]) * (i % 2 ? -1 : 1);\n                \t}\n                }*/\n\n                if (display) {\n                    legendGroup.align(merge(options, {\n                        width: legendWidth,\n                        height: legendHeight\n                    }), true, 'spacingBox');\n                }\n\n                if (!chart.isResizing) {\n                    this.positionCheckboxes();\n                }\n            },\n\n            /**\n             * Set up the overflow handling by adding navigation with up and down arrows\n             * below the legend.\n             *\n             * @private\n             */\n            handleOverflow: function(legendHeight) {\n                var legend = this,\n                    chart = this.chart,\n                    renderer = chart.renderer,\n                    options = this.options,\n                    optionsY = options.y,\n                    alignTop = options.verticalAlign === 'top',\n                    padding = this.padding,\n                    spaceHeight = chart.spacingBox.height +\n                    (alignTop ? -optionsY : optionsY) - padding,\n                    maxHeight = options.maxHeight,\n                    clipHeight,\n                    clipRect = this.clipRect,\n                    navOptions = options.navigation,\n                    animation = pick(navOptions.animation, true),\n                    arrowSize = navOptions.arrowSize || 12,\n                    nav = this.nav,\n                    pages = this.pages,\n                    lastY,\n                    allItems = this.allItems,\n                    clipToHeight = function(height) {\n                        if (typeof height === 'number') {\n                            clipRect.attr({\n                                height: height\n                            });\n                        } else if (clipRect) { // Reset (#5912)\n                            legend.clipRect = clipRect.destroy();\n                            legend.contentGroup.clip();\n                        }\n\n                        // useHTML\n                        if (legend.contentGroup.div) {\n                            legend.contentGroup.div.style.clip = height ?\n                                'rect(' + padding + 'px,9999px,' +\n                                (padding + height) + 'px,0)' :\n                                'auto';\n                        }\n                    };\n\n\n                // Adjust the height\n                if (\n                    options.layout === 'horizontal' &&\n                    options.verticalAlign !== 'middle' &&\n                    !options.floating\n                ) {\n                    spaceHeight /= 2;\n                }\n                if (maxHeight) {\n                    spaceHeight = Math.min(spaceHeight, maxHeight);\n                }\n\n                // Reset the legend height and adjust the clipping rectangle\n                pages.length = 0;\n                if (legendHeight > spaceHeight && navOptions.enabled !== false) {\n\n                    this.clipHeight = clipHeight =\n                        Math.max(spaceHeight - 20 - this.titleHeight - padding, 0);\n                    this.currentPage = pick(this.currentPage, 1);\n                    this.fullHeight = legendHeight;\n\n                    // Fill pages with Y positions so that the top of each a legend item\n                    // defines the scroll top for each page (#2098)\n                    each(allItems, function(item, i) {\n                        var y = item._legendItemPos[1],\n                            h = Math.round(item.legendItem.getBBox().height),\n                            len = pages.length;\n\n                        if (!len || (y - pages[len - 1] > clipHeight &&\n                                (lastY || y) !== pages[len - 1])) {\n                            pages.push(lastY || y);\n                            len++;\n                        }\n\n                        if (i === allItems.length - 1 &&\n                            y + h - pages[len - 1] > clipHeight) {\n                            pages.push(y);\n                        }\n                        if (y !== lastY) {\n                            lastY = y;\n                        }\n                    });\n\n                    // Only apply clipping if needed. Clipping causes blurred legend in\n                    // PDF export (#1787)\n                    if (!clipRect) {\n                        clipRect = legend.clipRect =\n                            renderer.clipRect(0, padding, 9999, 0);\n                        legend.contentGroup.clip(clipRect);\n                    }\n\n                    clipToHeight(clipHeight);\n\n                    // Add navigation elements\n                    if (!nav) {\n                        this.nav = nav = renderer.g()\n                            .attr({\n                                zIndex: 1\n                            })\n                            .add(this.group);\n\n                        this.up = renderer\n                            .symbol(\n                                'triangle',\n                                0,\n                                0,\n                                arrowSize,\n                                arrowSize\n                            )\n                            .on('click', function() {\n                                legend.scroll(-1, animation);\n                            })\n                            .add(nav);\n\n                        this.pager = renderer.text('', 15, 10)\n                            .addClass('highcharts-legend-navigation')\n\n                            .css(navOptions.style)\n\n                            .add(nav);\n\n                        this.down = renderer\n                            .symbol(\n                                'triangle-down',\n                                0,\n                                0,\n                                arrowSize,\n                                arrowSize\n                            )\n                            .on('click', function() {\n                                legend.scroll(1, animation);\n                            })\n                            .add(nav);\n                    }\n\n                    // Set initial position\n                    legend.scroll(0);\n\n                    legendHeight = spaceHeight;\n\n                    // Reset\n                } else if (nav) {\n                    clipToHeight();\n                    this.nav = nav.destroy(); // #6322\n                    this.scrollGroup.attr({\n                        translateY: 1\n                    });\n                    this.clipHeight = 0; // #1379\n                }\n\n                return legendHeight;\n            },\n\n            /**\n             * Scroll the legend by a number of pages.\n             * @param  {Number} scrollBy\n             *         The number of pages to scroll.\n             * @param  {AnimationOptions} animation\n             *         Whether and how to apply animation.\n             */\n            scroll: function(scrollBy, animation) {\n                var pages = this.pages,\n                    pageCount = pages.length,\n                    currentPage = this.currentPage + scrollBy,\n                    clipHeight = this.clipHeight,\n                    navOptions = this.options.navigation,\n                    pager = this.pager,\n                    padding = this.padding,\n                    scrollOffset;\n\n                // When resizing while looking at the last page\n                if (currentPage > pageCount) {\n                    currentPage = pageCount;\n                }\n\n                if (currentPage > 0) {\n\n                    if (animation !== undefined) {\n                        setAnimation(animation, this.chart);\n                    }\n\n                    this.nav.attr({\n                        translateX: padding,\n                        translateY: clipHeight + this.padding + 7 + this.titleHeight,\n                        visibility: 'visible'\n                    });\n                    this.up.attr({\n                        'class': currentPage === 1 ?\n                            'highcharts-legend-nav-inactive' : 'highcharts-legend-nav-active'\n                    });\n                    pager.attr({\n                        text: currentPage + '/' + pageCount\n                    });\n                    this.down.attr({\n                        'x': 18 + this.pager.getBBox().width, // adjust to text width\n                        'class': currentPage === pageCount ?\n                            'highcharts-legend-nav-inactive' : 'highcharts-legend-nav-active'\n                    });\n\n\n                    this.up\n                        .attr({\n                            fill: currentPage === 1 ?\n                                navOptions.inactiveColor : navOptions.activeColor\n                        })\n                        .css({\n                            cursor: currentPage === 1 ? 'default' : 'pointer'\n                        });\n                    this.down\n                        .attr({\n                            fill: currentPage === pageCount ?\n                                navOptions.inactiveColor : navOptions.activeColor\n                        })\n                        .css({\n                            cursor: currentPage === pageCount ? 'default' : 'pointer'\n                        });\n\n\n                    scrollOffset = -pages[currentPage - 1] + this.initialItemY;\n\n                    this.scrollGroup.animate({\n                        translateY: scrollOffset\n                    });\n\n                    this.currentPage = currentPage;\n                    this.positionCheckboxes(scrollOffset);\n                }\n\n            }\n\n        };\n\n        /*\n         * LegendSymbolMixin\n         */\n\n        H.LegendSymbolMixin = {\n\n            /**\n             * Get the series' symbol in the legend\n             *\n             * @param {Object} legend The legend object\n             * @param {Object} item The series (this) or point\n             */\n            drawRectangle: function(legend, item) {\n                var options = legend.options,\n                    symbolHeight = legend.symbolHeight,\n                    square = options.squareSymbol,\n                    symbolWidth = square ? symbolHeight : legend.symbolWidth;\n\n                item.legendSymbol = this.chart.renderer.rect(\n                        square ? (legend.symbolWidth - symbolHeight) / 2 : 0,\n                        legend.baseline - symbolHeight + 1, // #3988\n                        symbolWidth,\n                        symbolHeight,\n                        pick(legend.options.symbolRadius, symbolHeight / 2)\n                    )\n                    .addClass('highcharts-point')\n                    .attr({\n                        zIndex: 3\n                    }).add(item.legendGroup);\n\n            },\n\n            /**\n             * Get the series' symbol in the legend. This method should be overridable\n             * to create custom symbols through\n             * Highcharts.seriesTypes[type].prototype.drawLegendSymbols.\n             *\n             * @param {Object} legend The legend object\n             */\n            drawLineMarker: function(legend) {\n\n                var options = this.options,\n                    markerOptions = options.marker,\n                    radius,\n                    legendSymbol,\n                    symbolWidth = legend.symbolWidth,\n                    symbolHeight = legend.symbolHeight,\n                    generalRadius = symbolHeight / 2,\n                    renderer = this.chart.renderer,\n                    legendItemGroup = this.legendGroup,\n                    verticalCenter = legend.baseline -\n                    Math.round(legend.fontMetrics.b * 0.3),\n                    attr = {};\n\n                // Draw the line\n\n                attr = {\n                    'stroke-width': options.lineWidth || 0\n                };\n                if (options.dashStyle) {\n                    attr.dashstyle = options.dashStyle;\n                }\n\n\n                this.legendLine = renderer.path([\n                        'M',\n                        0,\n                        verticalCenter,\n                        'L',\n                        symbolWidth,\n                        verticalCenter\n                    ])\n                    .addClass('highcharts-graph')\n                    .attr(attr)\n                    .add(legendItemGroup);\n\n                // Draw the marker\n                if (markerOptions && markerOptions.enabled !== false) {\n\n                    // Do not allow the marker to be larger than the symbolHeight\n                    radius = Math.min(\n                        pick(markerOptions.radius, generalRadius),\n                        generalRadius\n                    );\n\n                    // Restrict symbol markers size\n                    if (this.symbol.indexOf('url') === 0) {\n                        markerOptions = merge(markerOptions, {\n                            width: symbolHeight,\n                            height: symbolHeight\n                        });\n                        radius = 0;\n                    }\n\n                    this.legendSymbol = legendSymbol = renderer.symbol(\n                            this.symbol,\n                            (symbolWidth / 2) - radius,\n                            verticalCenter - radius,\n                            2 * radius,\n                            2 * radius,\n                            markerOptions\n                        )\n                        .addClass('highcharts-point')\n                        .add(legendItemGroup);\n                    legendSymbol.isMarker = true;\n                }\n            }\n        };\n\n        // Workaround for #2030, horizontal legend items not displaying in IE11 Preview,\n        // and for #2580, a similar drawing flaw in Firefox 26.\n        // Explore if there's a general cause for this. The problem may be related\n        // to nested group elements, as the legend item texts are within 4 group\n        // elements.\n        if (/Trident\\/7\\.0/.test(win.navigator.userAgent) || isFirefox) {\n            wrap(Highcharts.Legend.prototype, 'positionItem', function(proceed, item) {\n                var legend = this,\n                    // If chart destroyed in sync, this is undefined (#2030)\n                    runPositionItem = function() {\n                        if (item._legendItemPos) {\n                            proceed.call(legend, item);\n                        }\n                    };\n\n                // Do it now, for export and to get checkbox placement\n                runPositionItem();\n\n                // Do it after to work around the core issue\n                setTimeout(runPositionItem);\n            });\n        }\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            animate = H.animate,\n            animObject = H.animObject,\n            attr = H.attr,\n            doc = H.doc,\n            Axis = H.Axis, // @todo add as requirement\n            createElement = H.createElement,\n            defaultOptions = H.defaultOptions,\n            discardElement = H.discardElement,\n            charts = H.charts,\n            css = H.css,\n            defined = H.defined,\n            each = H.each,\n            extend = H.extend,\n            find = H.find,\n            fireEvent = H.fireEvent,\n            getStyle = H.getStyle,\n            grep = H.grep,\n            isNumber = H.isNumber,\n            isObject = H.isObject,\n            isString = H.isString,\n            Legend = H.Legend, // @todo add as requirement\n            marginNames = H.marginNames,\n            merge = H.merge,\n            objectEach = H.objectEach,\n            Pointer = H.Pointer, // @todo add as requirement\n            pick = H.pick,\n            pInt = H.pInt,\n            removeEvent = H.removeEvent,\n            seriesTypes = H.seriesTypes,\n            splat = H.splat,\n            svg = H.svg,\n            syncTimeout = H.syncTimeout,\n            win = H.win,\n            Renderer = H.Renderer;\n        /**\n         * The Chart class. The recommended constructor is {@link Highcharts#chart}.\n         * @class Highcharts.Chart\n         * @param  {String|HTMLDOMElement} renderTo\n         *         The DOM element to render to, or its id.\n         * @param  {Options} options\n         *         The chart options structure.\n         * @param  {Function} [callback]\n         *         Function to run when the chart has loaded and and all external images\n         *         are loaded. Defining a {@link\n         *         https://api.highcharts.com/highcharts/chart.events.load|chart.event.load}\n         *         handler is equivalent.\n         *\n         * @example\n         * var chart = Highcharts.chart('container', {\n         * \t   title: {\n         * \t   \t   text: 'My chart'\n         * \t   },\n         * \t   series: [{\n         * \t       data: [1, 3, 2, 4]\n         * \t   }]\n         * })\n         */\n        var Chart = H.Chart = function() {\n            this.getArgs.apply(this, arguments);\n        };\n\n        /**\n         * Factory function for basic charts.\n         *\n         * @function #chart\n         * @memberOf Highcharts\n         * @param  {String|HTMLDOMElement} renderTo - The DOM element to render to, or\n         * its id.\n         * @param  {Options} options - The chart options structure.\n         * @param  {Function} [callback] - Function to run when the chart has loaded and\n         * and all external images are loaded. Defining a {@link\n         * https://api.highcharts.com/highcharts/chart.events.load|chart.event.load}\n         * handler is equivalent.\n         * @return {Highcharts.Chart} - Returns the Chart object.\n         *\n         * @example\n         * // Render a chart in to div#container\n         * var chart = Highcharts.chart('container', {\n         *     title: {\n         *         text: 'My chart'\n         *     },\n         *     series: [{\n         *         data: [1, 3, 2, 4]\n         *     }]\n         * });\n         */\n        H.chart = function(a, b, c) {\n            return new Chart(a, b, c);\n        };\n\n        extend(Chart.prototype, /** @lends Highcharts.Chart.prototype */ {\n\n            // Hook for adding callbacks in modules\n            callbacks: [],\n\n            /**\n             * Handle the arguments passed to the constructor.\n             *\n             * @private\n             * @returns {Array} Arguments without renderTo\n             */\n            getArgs: function() {\n                var args = [].slice.call(arguments);\n\n                // Remove the optional first argument, renderTo, and\n                // set it on this.\n                if (isString(args[0]) || args[0].nodeName) {\n                    this.renderTo = args.shift();\n                }\n                this.init(args[0], args[1]);\n            },\n\n            /**\n             * Overridable function that initializes the chart. The constructor's\n             * arguments are passed on directly.\n             */\n            init: function(userOptions, callback) {\n\n                // Handle regular options\n                var options,\n                    type,\n                    seriesOptions = userOptions.series, // skip merging data points to increase performance\n                    userPlotOptions = userOptions.plotOptions || {};\n\n                userOptions.series = null;\n                options = merge(defaultOptions, userOptions); // do the merge\n\n                // Override (by copy of user options) or clear tooltip options\n                // in chart.options.plotOptions (#6218)\n                for (type in options.plotOptions) {\n                    options.plotOptions[type].tooltip = (\n                        userPlotOptions[type] &&\n                        merge(userPlotOptions[type].tooltip) // override by copy\n                    ) || undefined; // or clear\n                }\n                // User options have higher priority than default options (#6218).\n                // In case of exporting: path is changed\n                options.tooltip.userOptions = (userOptions.chart &&\n                        userOptions.chart.forExport && userOptions.tooltip.userOptions) ||\n                    userOptions.tooltip;\n\n                options.series = userOptions.series = seriesOptions; // set back the series data\n                this.userOptions = userOptions;\n\n                var optionsChart = options.chart;\n\n                var chartEvents = optionsChart.events;\n\n                this.margin = [];\n                this.spacing = [];\n\n                //this.runChartClick = chartEvents && !!chartEvents.click;\n                this.bounds = {\n                    h: {},\n                    v: {}\n                }; // Pixel data bounds for touch zoom\n\n                this.callback = callback;\n                this.isResizing = 0;\n\n                /**\n                 * The options structure for the chart. It contains members for the sub\n                 * elements like series, legend, tooltip etc.\n                 *\n                 * @memberof Highcharts.Chart\n                 * @name options\n                 * @type {Options}\n                 */\n                this.options = options;\n                /**\n                 * All the axes in the chart.\n                 *\n                 * @memberof Highcharts.Chart\n                 * @name axes\n                 * @see  Highcharts.Chart.xAxis\n                 * @see  Highcharts.Chart.yAxis\n                 * @type {Array.<Highcharts.Axis>}\n                 */\n                this.axes = [];\n\n                /**\n                 * All the current series in the chart.\n                 *\n                 * @memberof Highcharts.Chart\n                 * @name series\n                 * @type {Array.<Highcharts.Series>}\n                 */\n                this.series = [];\n\n                /**\n                 * The chart title. The title has an `update` method that allows\n                 * modifying the options directly or indirectly via `chart.update`.\n                 *\n                 * @memberof Highcharts.Chart\n                 * @name title\n                 * @type Object\n                 *\n                 * @sample highcharts/members/title-update/\n                 *         Updating titles\n                 */\n\n                /**\n                 * The chart subtitle. The subtitle has an `update` method that allows\n                 * modifying the options directly or indirectly via `chart.update`.\n                 *\n                 * @memberof Highcharts.Chart\n                 * @name subtitle\n                 * @type Object\n                 */\n\n\n\n                this.hasCartesianSeries = optionsChart.showAxes;\n                //this.axisOffset = undefined;\n                //this.inverted = undefined;\n                //this.loadingShown = undefined;\n                //this.container = undefined;\n                //this.chartWidth = undefined;\n                //this.chartHeight = undefined;\n                //this.marginRight = undefined;\n                //this.marginBottom = undefined;\n                //this.containerWidth = undefined;\n                //this.containerHeight = undefined;\n                //this.oldChartWidth = undefined;\n                //this.oldChartHeight = undefined;\n\n                //this.renderTo = undefined;\n\n                //this.spacingBox = undefined\n\n                //this.legend = undefined;\n\n                // Elements\n                //this.chartBackground = undefined;\n                //this.plotBackground = undefined;\n                //this.plotBGImage = undefined;\n                //this.plotBorder = undefined;\n                //this.loadingDiv = undefined;\n                //this.loadingSpan = undefined;\n\n                var chart = this;\n\n                // Add the chart to the global lookup\n                chart.index = charts.length;\n\n                charts.push(chart);\n                H.chartCount++;\n\n                // Chart event handlers\n                if (chartEvents) {\n                    objectEach(chartEvents, function(event, eventType) {\n                        addEvent(chart, eventType, event);\n                    });\n                }\n\n                /**\n                 * A collection of the X axes in the chart.\n                 * @type {Array.<Highcharts.Axis>}\n                 * @name xAxis\n                 * @memberOf Highcharts.Chart\n                 */\n                chart.xAxis = [];\n                /**\n                 * A collection of the Y axes in the chart.\n                 * @type {Array.<Highcharts.Axis>}\n                 * @name yAxis\n                 * @memberOf Highcharts.Chart\n                 */\n                chart.yAxis = [];\n\n                chart.pointCount = chart.colorCounter = chart.symbolCounter = 0;\n\n                chart.firstRender();\n            },\n\n            /**\n             * Internal function to unitialize an individual series.\n             *\n             * @private\n             */\n            initSeries: function(options) {\n                var chart = this,\n                    optionsChart = chart.options.chart,\n                    type = options.type || optionsChart.type || optionsChart.defaultSeriesType,\n                    series,\n                    Constr = seriesTypes[type];\n\n                // No such series type\n                if (!Constr) {\n                    H.error(17, true);\n                }\n\n                series = new Constr();\n                series.init(this, options);\n                return series;\n            },\n\n            /**\n             * Order all series above a given index. When series are added and ordered\n             * by configuration, only the last series is handled (#248, #1123, #2456,\n             * #6112). This function is called on series initialization and destroy.\n             *\n             * @private\n             *\n             * @param  {number} fromIndex\n             *         If this is given, only the series above this index are handled.\n             */\n            orderSeries: function(fromIndex) {\n                var series = this.series,\n                    i = fromIndex || 0;\n                for (; i < series.length; i++) {\n                    if (series[i]) {\n                        series[i].index = i;\n                        series[i].name = series[i].name ||\n                            'Series ' + (series[i].index + 1);\n                    }\n                }\n            },\n\n            /**\n             * Check whether a given point is within the plot area.\n             *\n             * @param  {Number} plotX\n             *         Pixel x relative to the plot area.\n             * @param  {Number} plotY\n             *         Pixel y relative to the plot area.\n             * @param  {Boolean} inverted\n             *         Whether the chart is inverted.\n             *\n             * @return {Boolean}\n             *         Returns true if the given point is inside the plot area.\n             */\n            isInsidePlot: function(plotX, plotY, inverted) {\n                var x = inverted ? plotY : plotX,\n                    y = inverted ? plotX : plotY;\n\n                return x >= 0 &&\n                    x <= this.plotWidth &&\n                    y >= 0 &&\n                    y <= this.plotHeight;\n            },\n\n            /**\n             * Redraw the chart after changes have been done to the data, axis extremes\n             * chart size or chart elements. All methods for updating axes, series or\n             * points have a parameter for redrawing the chart. This is `true` by\n             * default. But in many cases you want to do more than one operation on the\n             * chart before redrawing, for example add a number of points. In those\n             * cases it is a waste of resources to redraw the chart for each new point\n             * added. So you add the points and call `chart.redraw()` after.\n             *\n             * @param  {AnimationOptions} animation\n             *         If or how to apply animation to the redraw.\n             */\n            redraw: function(animation) {\n                var chart = this,\n                    axes = chart.axes,\n                    series = chart.series,\n                    pointer = chart.pointer,\n                    legend = chart.legend,\n                    redrawLegend = chart.isDirtyLegend,\n                    hasStackedSeries,\n                    hasDirtyStacks,\n                    hasCartesianSeries = chart.hasCartesianSeries,\n                    isDirtyBox = chart.isDirtyBox,\n                    i,\n                    serie,\n                    renderer = chart.renderer,\n                    isHiddenChart = renderer.isHidden(),\n                    afterRedraw = [];\n\n                // Handle responsive rules, not only on resize (#6130)\n                if (chart.setResponsive) {\n                    chart.setResponsive(false);\n                }\n\n                H.setAnimation(animation, chart);\n\n                if (isHiddenChart) {\n                    chart.temporaryDisplay();\n                }\n\n                // Adjust title layout (reflow multiline text)\n                chart.layOutTitles();\n\n                // link stacked series\n                i = series.length;\n                while (i--) {\n                    serie = series[i];\n\n                    if (serie.options.stacking) {\n                        hasStackedSeries = true;\n\n                        if (serie.isDirty) {\n                            hasDirtyStacks = true;\n                            break;\n                        }\n                    }\n                }\n                if (hasDirtyStacks) { // mark others as dirty\n                    i = series.length;\n                    while (i--) {\n                        serie = series[i];\n                        if (serie.options.stacking) {\n                            serie.isDirty = true;\n                        }\n                    }\n                }\n\n                // Handle updated data in the series\n                each(series, function(serie) {\n                    if (serie.isDirty) {\n                        if (serie.options.legendType === 'point') {\n                            if (serie.updateTotals) {\n                                serie.updateTotals();\n                            }\n                            redrawLegend = true;\n                        }\n                    }\n                    if (serie.isDirtyData) {\n                        fireEvent(serie, 'updatedData');\n                    }\n                });\n\n                // handle added or removed series\n                if (redrawLegend && legend.options.enabled) { // series or pie points are added or removed\n                    // draw legend graphics\n                    legend.render();\n\n                    chart.isDirtyLegend = false;\n                }\n\n                // reset stacks\n                if (hasStackedSeries) {\n                    chart.getStacks();\n                }\n\n\n                if (hasCartesianSeries) {\n                    // set axes scales\n                    each(axes, function(axis) {\n                        axis.updateNames();\n                        axis.setScale();\n                    });\n                }\n\n                chart.getMargins(); // #3098\n\n                if (hasCartesianSeries) {\n                    // If one axis is dirty, all axes must be redrawn (#792, #2169)\n                    each(axes, function(axis) {\n                        if (axis.isDirty) {\n                            isDirtyBox = true;\n                        }\n                    });\n\n                    // redraw axes\n                    each(axes, function(axis) {\n\n                        // Fire 'afterSetExtremes' only if extremes are set\n                        var key = axis.min + ',' + axis.max;\n                        if (axis.extKey !== key) { // #821, #4452\n                            axis.extKey = key;\n                            afterRedraw.push(function() { // prevent a recursive call to chart.redraw() (#1119)\n                                fireEvent(axis, 'afterSetExtremes', extend(axis.eventArgs, axis.getExtremes())); // #747, #751\n                                delete axis.eventArgs;\n                            });\n                        }\n                        if (isDirtyBox || hasStackedSeries) {\n                            axis.redraw();\n                        }\n                    });\n                }\n\n                // the plot areas size has changed\n                if (isDirtyBox) {\n                    chart.drawChartBox();\n                }\n\n                // Fire an event before redrawing series, used by the boost module to\n                // clear previous series renderings.\n                fireEvent(chart, 'predraw');\n\n                // redraw affected series\n                each(series, function(serie) {\n                    if ((isDirtyBox || serie.isDirty) && serie.visible) {\n                        serie.redraw();\n                    }\n                    // Set it here, otherwise we will have unlimited 'updatedData' calls\n                    // for a hidden series after setData(). Fixes #6012\n                    serie.isDirtyData = false;\n                });\n\n                // move tooltip or reset\n                if (pointer) {\n                    pointer.reset(true);\n                }\n\n                // redraw if canvas\n                renderer.draw();\n\n                // Fire the events\n                fireEvent(chart, 'redraw');\n                fireEvent(chart, 'render');\n\n                if (isHiddenChart) {\n                    chart.temporaryDisplay(true);\n                }\n\n                // Fire callbacks that are put on hold until after the redraw\n                each(afterRedraw, function(callback) {\n                    callback.call();\n                });\n            },\n\n            /**\n             * Get an axis, series or point object by `id` as given in the configuration\n             * options. Returns `undefined` if no item is found.\n             * @param id {String} The id as given in the configuration options.\n             * @return {Highcharts.Axis|Highcharts.Series|Highcharts.Point|undefined}\n             *         The retrieved item.\n             * @sample highcharts/plotoptions/series-id/\n             *         Get series by id\n             */\n            get: function(id) {\n\n                var ret,\n                    series = this.series,\n                    i;\n\n                function itemById(item) {\n                    return item.id === id || (item.options && item.options.id === id);\n                }\n\n                ret =\n                    // Search axes\n                    find(this.axes, itemById) ||\n\n                    // Search series\n                    find(this.series, itemById);\n\n                // Search points\n                for (i = 0; !ret && i < series.length; i++) {\n                    ret = find(series[i].points || [], itemById);\n                }\n\n                return ret;\n            },\n\n            /**\n             * Create the Axis instances based on the config options.\n             *\n             * @private\n             */\n            getAxes: function() {\n                var chart = this,\n                    options = this.options,\n                    xAxisOptions = options.xAxis = splat(options.xAxis || {}),\n                    yAxisOptions = options.yAxis = splat(options.yAxis || {}),\n                    optionsArray;\n\n                // make sure the options are arrays and add some members\n                each(xAxisOptions, function(axis, i) {\n                    axis.index = i;\n                    axis.isX = true;\n                });\n\n                each(yAxisOptions, function(axis, i) {\n                    axis.index = i;\n                });\n\n                // concatenate all axis options into one array\n                optionsArray = xAxisOptions.concat(yAxisOptions);\n\n                each(optionsArray, function(axisOptions) {\n                    new Axis(chart, axisOptions); // eslint-disable-line no-new\n                });\n            },\n\n\n            /**\n             * Returns an array of all currently selected points in the chart. Points\n             * can be selected by clicking or programmatically by the {@link\n             * Highcharts.Point#select} function.\n             *\n             * @return {Array.<Highcharts.Point>}\n             *         The currently selected points.\n             *\n             * @sample highcharts/plotoptions/series-allowpointselect-line/\n             *         Get selected points\n             */\n            getSelectedPoints: function() {\n                var points = [];\n                each(this.series, function(serie) {\n                    // series.data - for points outside of viewed range (#6445)\n                    points = points.concat(grep(serie.data || [], function(point) {\n                        return point.selected;\n                    }));\n                });\n                return points;\n            },\n\n            /**\n             * Returns an array of all currently selected series in the chart. Series\n             * can be selected either programmatically by the {@link\n             * Highcharts.Series#select} function or by checking the checkbox next to\n             * the legend item if {@link\n             * https://api.highcharts.com/highcharts/plotOptions.series.showCheckbox|\n             * series.showCheckBox} is true.\n             *\n             * @return {Array.<Highcharts.Series>}\n             *         The currently selected series.\n             *\n             * @sample highcharts/members/chart-getselectedseries/\n             *         Get selected series\n             */\n            getSelectedSeries: function() {\n                return grep(this.series, function(serie) {\n                    return serie.selected;\n                });\n            },\n\n            /**\n             * Set a new title or subtitle for the chart.\n             *\n             * @param  titleOptions {TitleOptions}\n             *         New title options. The title text itself is set by the\n             *         `titleOptions.text` property.\n             * @param  subtitleOptions {SubtitleOptions}\n             *         New subtitle options. The subtitle text itself is set by the\n             *         `subtitleOptions.text` property.\n             * @param  redraw {Boolean}\n             *         Whether to redraw the chart or wait for a later call to\n             *         `chart.redraw()`.\n             *\n             * @sample highcharts/members/chart-settitle/ Set title text and styles\n             *\n             */\n            setTitle: function(titleOptions, subtitleOptions, redraw) {\n                var chart = this,\n                    options = chart.options,\n                    chartTitleOptions,\n                    chartSubtitleOptions;\n\n                chartTitleOptions = options.title = merge(\n\n                    // Default styles\n                    {\n                        style: {\n                            color: '#333333',\n                            fontSize: options.isStock ? '16px' : '18px' // #2944\n                        }\n                    },\n\n                    options.title,\n                    titleOptions\n                );\n                chartSubtitleOptions = options.subtitle = merge(\n\n                    // Default styles\n                    {\n                        style: {\n                            color: '#666666'\n                        }\n                    },\n\n                    options.subtitle,\n                    subtitleOptions\n                );\n\n                // add title and subtitle\n                each([\n                    ['title', titleOptions, chartTitleOptions],\n                    ['subtitle', subtitleOptions, chartSubtitleOptions]\n                ], function(arr, i) {\n                    var name = arr[0],\n                        title = chart[name],\n                        titleOptions = arr[1],\n                        chartTitleOptions = arr[2];\n\n                    if (title && titleOptions) {\n                        chart[name] = title = title.destroy(); // remove old\n                    }\n\n                    if (chartTitleOptions && chartTitleOptions.text && !title) {\n                        chart[name] = chart.renderer.text(\n                                chartTitleOptions.text,\n                                0,\n                                0,\n                                chartTitleOptions.useHTML\n                            )\n                            .attr({\n                                align: chartTitleOptions.align,\n                                'class': 'highcharts-' + name,\n                                zIndex: chartTitleOptions.zIndex || 4\n                            })\n                            .add();\n\n                        // Update methods, shortcut to Chart.setTitle\n                        chart[name].update = function(o) {\n                            chart.setTitle(!i && o, i && o);\n                        };\n\n\n                        // Presentational\n                        chart[name].css(chartTitleOptions.style);\n\n\n                    }\n                });\n                chart.layOutTitles(redraw);\n            },\n\n            /**\n             * Internal function to lay out the chart titles and cache the full offset\n             * height for use in `getMargins`. The result is stored in\n             * `this.titleOffset`.\n             *\n             * @private\n             */\n            layOutTitles: function(redraw) {\n                var titleOffset = 0,\n                    requiresDirtyBox,\n                    renderer = this.renderer,\n                    spacingBox = this.spacingBox;\n\n                // Lay out the title and the subtitle respectively\n                each(['title', 'subtitle'], function(key) {\n                    var title = this[key],\n                        titleOptions = this.options[key],\n                        offset = key === 'title' ? -3 :\n                        // Floating subtitle (#6574)\n                        titleOptions.verticalAlign ? 0 : titleOffset + 2,\n                        titleSize;\n\n                    if (title) {\n\n                        titleSize = titleOptions.style.fontSize;\n\n                        titleSize = renderer.fontMetrics(titleSize, title).b;\n\n                        title\n                            .css({\n                                width: (titleOptions.width ||\n                                    spacingBox.width + titleOptions.widthAdjust) + 'px'\n                            })\n                            .align(extend({\n                                y: offset + titleSize\n                            }, titleOptions), false, 'spacingBox');\n\n                        if (!titleOptions.floating && !titleOptions.verticalAlign) {\n                            titleOffset = Math.ceil(\n                                titleOffset +\n                                // Skip the cache for HTML (#3481)\n                                title.getBBox(titleOptions.useHTML).height\n                            );\n                        }\n                    }\n                }, this);\n\n                requiresDirtyBox = this.titleOffset !== titleOffset;\n                this.titleOffset = titleOffset; // used in getMargins\n\n                if (!this.isDirtyBox && requiresDirtyBox) {\n                    this.isDirtyBox = requiresDirtyBox;\n                    // Redraw if necessary (#2719, #2744)\n                    if (this.hasRendered && pick(redraw, true) && this.isDirtyBox) {\n                        this.redraw();\n                    }\n                }\n            },\n\n            /**\n             * Internal function to get the chart width and height according to options\n             * and container size. Sets {@link Chart.chartWidth} and {@link\n             * Chart.chartHeight}.\n             */\n            getChartSize: function() {\n                var chart = this,\n                    optionsChart = chart.options.chart,\n                    widthOption = optionsChart.width,\n                    heightOption = optionsChart.height,\n                    renderTo = chart.renderTo;\n\n                // Get inner width and height\n                if (!defined(widthOption)) {\n                    chart.containerWidth = getStyle(renderTo, 'width');\n                }\n                if (!defined(heightOption)) {\n                    chart.containerHeight = getStyle(renderTo, 'height');\n                }\n\n                /**\n                 * The current pixel width of the chart.\n                 *\n                 * @name chartWidth\n                 * @memberOf Chart\n                 * @type {Number}\n                 */\n                chart.chartWidth = Math.max( // #1393\n                    0,\n                    widthOption || chart.containerWidth || 600 // #1460\n                );\n                /**\n                 * The current pixel height of the chart.\n                 *\n                 * @name chartHeight\n                 * @memberOf Chart\n                 * @type {Number}\n                 */\n                chart.chartHeight = Math.max(\n                    0,\n                    H.relativeLength(\n                        heightOption,\n                        chart.chartWidth\n                    ) || chart.containerHeight || 400\n                );\n            },\n\n            /**\n             * If the renderTo element has no offsetWidth, most likely one or more of\n             * its parents are hidden. Loop up the DOM tree to temporarily display the\n             * parents, then save the original display properties, and when the true\n             * size is retrieved, reset them. Used on first render and on redraws.\n             *\n             * @private\n             *\n             * @param  {Boolean} revert\n             *         Revert to the saved original styles.\n             */\n            temporaryDisplay: function(revert) {\n                var node = this.renderTo,\n                    tempStyle;\n                if (!revert) {\n                    while (node && node.style) {\n\n                        // When rendering to a detached node, it needs to be temporarily\n                        // attached in order to read styling and bounding boxes (#5783).\n                        if (!doc.body.contains(node)) {\n                            node.hcOrigDetached = true;\n                            doc.body.appendChild(node);\n                        }\n                        if (\n                            getStyle(node, 'display', false) === 'none' ||\n                            node.hcOricDetached\n                        ) {\n                            node.hcOrigStyle = {\n                                display: node.style.display,\n                                height: node.style.height,\n                                overflow: node.style.overflow\n                            };\n                            tempStyle = {\n                                display: 'block',\n                                overflow: 'hidden'\n                            };\n                            if (node !== this.renderTo) {\n                                tempStyle.height = 0;\n                            }\n\n                            H.css(node, tempStyle);\n\n                            // If it still doesn't have an offset width after setting\n                            // display to block, it probably has an !important priority\n                            // #2631, 6803\n                            if (!node.offsetWidth) {\n                                node.style.setProperty('display', 'block', 'important');\n                            }\n                        }\n                        node = node.parentNode;\n\n                        if (node === doc.body) {\n                            break;\n                        }\n                    }\n                } else {\n                    while (node && node.style) {\n                        if (node.hcOrigStyle) {\n                            H.css(node, node.hcOrigStyle);\n                            delete node.hcOrigStyle;\n                        }\n                        if (node.hcOrigDetached) {\n                            doc.body.removeChild(node);\n                            node.hcOrigDetached = false;\n                        }\n                        node = node.parentNode;\n                    }\n                }\n            },\n\n            /**\n             * Set the {@link Chart.container|chart container's} class name, in\n             * addition to `highcharts-container`.\n             */\n            setClassName: function(className) {\n                this.container.className = 'highcharts-container ' + (className || '');\n            },\n\n            /**\n             * Get the containing element, determine the size and create the inner\n             * container div to hold the chart.\n             *\n             * @private\n             */\n            getContainer: function() {\n                var chart = this,\n                    container,\n                    options = chart.options,\n                    optionsChart = options.chart,\n                    chartWidth,\n                    chartHeight,\n                    renderTo = chart.renderTo,\n                    indexAttrName = 'data-highcharts-chart',\n                    oldChartIndex,\n                    Ren,\n                    containerId = H.uniqueKey(),\n                    containerStyle,\n                    key;\n\n                if (!renderTo) {\n                    chart.renderTo = renderTo = optionsChart.renderTo;\n                }\n\n                if (isString(renderTo)) {\n                    chart.renderTo = renderTo = doc.getElementById(renderTo);\n                }\n\n                // Display an error if the renderTo is wrong\n                if (!renderTo) {\n                    H.error(13, true);\n                }\n\n                // If the container already holds a chart, destroy it. The check for\n                // hasRendered is there because web pages that are saved to disk from\n                // the browser, will preserve the data-highcharts-chart attribute and\n                // the SVG contents, but not an interactive chart. So in this case,\n                // charts[oldChartIndex] will point to the wrong chart if any (#2609).\n                oldChartIndex = pInt(attr(renderTo, indexAttrName));\n                if (\n                    isNumber(oldChartIndex) &&\n                    charts[oldChartIndex] &&\n                    charts[oldChartIndex].hasRendered\n                ) {\n                    charts[oldChartIndex].destroy();\n                }\n\n                // Make a reference to the chart from the div\n                attr(renderTo, indexAttrName, chart.index);\n\n                // remove previous chart\n                renderTo.innerHTML = '';\n\n                // If the container doesn't have an offsetWidth, it has or is a child of\n                // a node that has display:none. We need to temporarily move it out to a\n                // visible state to determine the size, else the legend and tooltips\n                // won't render properly. The skipClone option is used in sparklines as\n                // a micro optimization, saving about 1-2 ms each chart.\n                if (!optionsChart.skipClone && !renderTo.offsetWidth) {\n                    chart.temporaryDisplay();\n                }\n\n                // get the width and height\n                chart.getChartSize();\n                chartWidth = chart.chartWidth;\n                chartHeight = chart.chartHeight;\n\n                // Create the inner container\n\n                containerStyle = extend({\n                    position: 'relative',\n                    overflow: 'hidden', // needed for context menu (avoid scrollbars)\n                    // and content overflow in IE\n                    width: chartWidth + 'px',\n                    height: chartHeight + 'px',\n                    textAlign: 'left',\n                    lineHeight: 'normal', // #427\n                    zIndex: 0, // #1072\n                    '-webkit-tap-highlight-color': 'rgba(0,0,0,0)'\n                }, optionsChart.style);\n\n\n                /**\n                 * The containing HTML element of the chart. The container is\n                 * dynamically inserted into the element given as the `renderTo`\n                 * parameterin the {@link Highcharts#chart} constructor.\n                 *\n                 * @memberOf Highcharts.Chart\n                 * @type {HTMLDOMElement}\n                 */\n                container = createElement(\n                    'div', {\n                        id: containerId\n                    },\n                    containerStyle,\n                    renderTo\n                );\n                chart.container = container;\n\n                // cache the cursor (#1650)\n                chart._cursor = container.style.cursor;\n\n                // Initialize the renderer\n                Ren = H[optionsChart.renderer] || Renderer;\n                /**\n                 * The renderer instance of the chart. Each chart instance has only one\n                 * associated renderer.\n                 * @type {SVGRenderer}\n                 * @name renderer\n                 * @memberOf Chart\n                 */\n                chart.renderer = new Ren(\n                    container,\n                    chartWidth,\n                    chartHeight,\n                    null,\n                    optionsChart.forExport,\n                    options.exporting && options.exporting.allowHTML\n                );\n\n\n                chart.setClassName(optionsChart.className);\n\n                chart.renderer.setStyle(optionsChart.style);\n\n\n                // Add a reference to the charts index\n                chart.renderer.chartIndex = chart.index;\n            },\n\n            /**\n             * Calculate margins by rendering axis labels in a preliminary position.\n             * Title, subtitle and legend have already been rendered at this stage, but\n             * will be moved into their final positions.\n             *\n             * @private\n             */\n            getMargins: function(skipAxes) {\n                var chart = this,\n                    spacing = chart.spacing,\n                    margin = chart.margin,\n                    titleOffset = chart.titleOffset;\n\n                chart.resetMargins();\n\n                // Adjust for title and subtitle\n                if (titleOffset && !defined(margin[0])) {\n                    chart.plotTop = Math.max(\n                        chart.plotTop,\n                        titleOffset + chart.options.title.margin + spacing[0]\n                    );\n                }\n\n                // Adjust for legend\n                if (chart.legend.display) {\n                    chart.legend.adjustMargins(margin, spacing);\n                }\n\n                // adjust for scroller\n                if (chart.extraMargin) {\n                    chart[chart.extraMargin.type] =\n                        (chart[chart.extraMargin.type] || 0) + chart.extraMargin.value;\n                }\n                if (chart.extraTopMargin) {\n                    chart.plotTop += chart.extraTopMargin;\n                }\n                if (!skipAxes) {\n                    this.getAxisMargins();\n                }\n            },\n\n            getAxisMargins: function() {\n\n                var chart = this,\n                    // [top, right, bottom, left]\n                    axisOffset = chart.axisOffset = [0, 0, 0, 0],\n                    margin = chart.margin;\n\n                // pre-render axes to get labels offset width\n                if (chart.hasCartesianSeries) {\n                    each(chart.axes, function(axis) {\n                        if (axis.visible) {\n                            axis.getOffset();\n                        }\n                    });\n                }\n\n                // Add the axis offsets\n                each(marginNames, function(m, side) {\n                    if (!defined(margin[side])) {\n                        chart[m] += axisOffset[side];\n                    }\n                });\n\n                chart.setChartSize();\n\n            },\n\n            /**\n             * Reflows the chart to its container. By default, the chart reflows\n             * automatically to its container following a `window.resize` event, as per\n             * the {@link https://api.highcharts/highcharts/chart.reflow|chart.reflow}\n             * option. However, there are no reliable events for div resize, so if the\n             * container is resized without a window resize event, this must be called\n             * explicitly.\n             *\n             * @param  {Object} e\n             *         Event arguments. Used primarily when the function is called\n             *         internally as a response to window resize.\n             *\n             * @sample highcharts/members/chart-reflow/\n             *         Resize div and reflow\n             * @sample highcharts/chart/events-container/\n             *         Pop up and reflow\n             */\n            reflow: function(e) {\n                var chart = this,\n                    optionsChart = chart.options.chart,\n                    renderTo = chart.renderTo,\n                    hasUserSize = (\n                        defined(optionsChart.width) &&\n                        defined(optionsChart.height)\n                    ),\n                    width = optionsChart.width || getStyle(renderTo, 'width'),\n                    height = optionsChart.height || getStyle(renderTo, 'height'),\n                    target = e ? e.target : win;\n\n                // Width and height checks for display:none. Target is doc in IE8 and\n                // Opera, win in Firefox, Chrome and IE9.\n                if (!hasUserSize &&\n                    !chart.isPrinting &&\n                    width &&\n                    height &&\n                    (target === win || target === doc)\n                ) {\n                    if (\n                        width !== chart.containerWidth ||\n                        height !== chart.containerHeight\n                    ) {\n                        clearTimeout(chart.reflowTimeout);\n                        // When called from window.resize, e is set, else it's called\n                        // directly (#2224)\n                        chart.reflowTimeout = syncTimeout(function() {\n                            // Set size, it may have been destroyed in the meantime\n                            // (#1257)\n                            if (chart.container) {\n                                chart.setSize(undefined, undefined, false);\n                            }\n                        }, e ? 100 : 0);\n                    }\n                    chart.containerWidth = width;\n                    chart.containerHeight = height;\n                }\n            },\n\n            /**\n             * Add the event handlers necessary for auto resizing, depending on the\n             * `chart.events.reflow` option.\n             *\n             * @private\n             */\n            initReflow: function() {\n                var chart = this,\n                    unbind;\n\n                unbind = addEvent(win, 'resize', function(e) {\n                    chart.reflow(e);\n                });\n                addEvent(chart, 'destroy', unbind);\n\n                // The following will add listeners to re-fit the chart before and after\n                // printing (#2284). However it only works in WebKit. Should have worked\n                // in Firefox, but not supported in IE.\n                /*\n                if (win.matchMedia) {\n                \twin.matchMedia('print').addListener(function reflow() {\n                \t\tchart.reflow();\n                \t});\n                }\n                */\n            },\n\n            /**\n             * Resize the chart to a given width and height. In order to set the width\n             * only, the height argument may be skipped. To set the height only, pass\n             * `undefined for the width.\n             * @param  {Number|undefined|null} [width]\n             *         The new pixel width of the chart. Since v4.2.6, the argument can\n             *         be `undefined` in order to preserve the current value (when\n             *         setting height only), or `null` to adapt to the width of the\n             *         containing element.\n             * @param  {Number|undefined|null} [height]\n             *         The new pixel height of the chart. Since v4.2.6, the argument can\n             *         be `undefined` in order to preserve the current value, or `null`\n             *         in order to adapt to the height of the containing element.\n             * @param  {AnimationOptions} [animation=true]\n             *         Whether and how to apply animation.\n             *\n             * @sample highcharts/members/chart-setsize-button/\n             *         Test resizing from buttons\n             * @sample highcharts/members/chart-setsize-jquery-resizable/\n             *         Add a jQuery UI resizable\n             * @sample stock/members/chart-setsize/\n             *         Highstock with UI resizable\n             */\n            setSize: function(width, height, animation) {\n                var chart = this,\n                    renderer = chart.renderer,\n                    globalAnimation;\n\n                // Handle the isResizing counter\n                chart.isResizing += 1;\n\n                // set the animation for the current process\n                H.setAnimation(animation, chart);\n\n                chart.oldChartHeight = chart.chartHeight;\n                chart.oldChartWidth = chart.chartWidth;\n                if (width !== undefined) {\n                    chart.options.chart.width = width;\n                }\n                if (height !== undefined) {\n                    chart.options.chart.height = height;\n                }\n                chart.getChartSize();\n\n                // Resize the container with the global animation applied if enabled\n                // (#2503)\n\n                globalAnimation = renderer.globalAnimation;\n                (globalAnimation ? animate : css)(chart.container, {\n                    width: chart.chartWidth + 'px',\n                    height: chart.chartHeight + 'px'\n                }, globalAnimation);\n\n\n                chart.setChartSize(true);\n                renderer.setSize(chart.chartWidth, chart.chartHeight, animation);\n\n                // handle axes\n                each(chart.axes, function(axis) {\n                    axis.isDirty = true;\n                    axis.setScale();\n                });\n\n                chart.isDirtyLegend = true; // force legend redraw\n                chart.isDirtyBox = true; // force redraw of plot and chart border\n\n                chart.layOutTitles(); // #2857\n                chart.getMargins();\n\n                chart.redraw(animation);\n\n\n                chart.oldChartHeight = null;\n                fireEvent(chart, 'resize');\n\n                // Fire endResize and set isResizing back. If animation is disabled,\n                // fire without delay\n                syncTimeout(function() {\n                    if (chart) {\n                        fireEvent(chart, 'endResize', null, function() {\n                            chart.isResizing -= 1;\n                        });\n                    }\n                }, animObject(globalAnimation).duration);\n            },\n\n            /**\n             * Set the public chart properties. This is done before and after the\n             * pre-render to determine margin sizes.\n             *\n             * @private\n             */\n            setChartSize: function(skipAxes) {\n                var chart = this,\n                    inverted = chart.inverted,\n                    renderer = chart.renderer,\n                    chartWidth = chart.chartWidth,\n                    chartHeight = chart.chartHeight,\n                    optionsChart = chart.options.chart,\n                    spacing = chart.spacing,\n                    clipOffset = chart.clipOffset,\n                    clipX,\n                    clipY,\n                    plotLeft,\n                    plotTop,\n                    plotWidth,\n                    plotHeight,\n                    plotBorderWidth;\n\n                function clipOffsetSide(side) {\n                    var offset = clipOffset[side] || 0;\n                    return Math.max(plotBorderWidth || offset, offset) / 2;\n                }\n\n                /**\n                 * The current left position of the plot area in pixels.\n                 *\n                 * @name plotLeft\n                 * @memberOf Chart\n                 * @type {Number}\n                 */\n                chart.plotLeft = plotLeft = Math.round(chart.plotLeft);\n\n                /**\n                 * The current top position of the plot area in pixels.\n                 *\n                 * @name plotTop\n                 * @memberOf Chart\n                 * @type {Number}\n                 */\n                chart.plotTop = plotTop = Math.round(chart.plotTop);\n\n                /**\n                 * The current width of the plot area in pixels.\n                 *\n                 * @name plotWidth\n                 * @memberOf Chart\n                 * @type {Number}\n                 */\n                chart.plotWidth = plotWidth = Math.max(\n                    0,\n                    Math.round(chartWidth - plotLeft - chart.marginRight)\n                );\n\n                /**\n                 * The current height of the plot area in pixels.\n                 *\n                 * @name plotHeight\n                 * @memberOf Chart\n                 * @type {Number}\n                 */\n                chart.plotHeight = plotHeight = Math.max(\n                    0,\n                    Math.round(chartHeight - plotTop - chart.marginBottom)\n                );\n\n                chart.plotSizeX = inverted ? plotHeight : plotWidth;\n                chart.plotSizeY = inverted ? plotWidth : plotHeight;\n\n                chart.plotBorderWidth = optionsChart.plotBorderWidth || 0;\n\n                // Set boxes used for alignment\n                chart.spacingBox = renderer.spacingBox = {\n                    x: spacing[3],\n                    y: spacing[0],\n                    width: chartWidth - spacing[3] - spacing[1],\n                    height: chartHeight - spacing[0] - spacing[2]\n                };\n                chart.plotBox = renderer.plotBox = {\n                    x: plotLeft,\n                    y: plotTop,\n                    width: plotWidth,\n                    height: plotHeight\n                };\n\n                plotBorderWidth = 2 * Math.floor(chart.plotBorderWidth / 2);\n                clipX = Math.ceil(clipOffsetSide(3));\n                clipY = Math.ceil(clipOffsetSide(0));\n                chart.clipBox = {\n                    x: clipX,\n                    y: clipY,\n                    width: Math.floor(\n                        chart.plotSizeX -\n                        clipOffsetSide(1) -\n                        clipX\n                    ),\n                    height: Math.max(\n                        0,\n                        Math.floor(\n                            chart.plotSizeY -\n                            clipOffsetSide(2) -\n                            clipY\n                        )\n                    )\n                };\n\n                if (!skipAxes) {\n                    each(chart.axes, function(axis) {\n                        axis.setAxisSize();\n                        axis.setAxisTranslation();\n                    });\n                }\n            },\n\n            /**\n             * Initial margins before auto size margins are applied.\n             *\n             * @private\n             */\n            resetMargins: function() {\n                var chart = this,\n                    chartOptions = chart.options.chart;\n\n                // Create margin and spacing array\n                each(['margin', 'spacing'], function splashArrays(target) {\n                    var value = chartOptions[target],\n                        values = isObject(value) ? value : [value, value, value, value];\n\n                    each(['Top', 'Right', 'Bottom', 'Left'], function(sideName, side) {\n                        chart[target][side] = pick(\n                            chartOptions[target + sideName],\n                            values[side]\n                        );\n                    });\n                });\n\n                // Set margin names like chart.plotTop, chart.plotLeft,\n                // chart.marginRight, chart.marginBottom.\n                each(marginNames, function(m, side) {\n                    chart[m] = pick(chart.margin[side], chart.spacing[side]);\n                });\n                chart.axisOffset = [0, 0, 0, 0]; // top, right, bottom, left\n                chart.clipOffset = [];\n            },\n\n            /**\n             * Internal function to draw or redraw the borders and backgrounds for chart\n             * and plot area.\n             *\n             * @private\n             */\n            drawChartBox: function() {\n                var chart = this,\n                    optionsChart = chart.options.chart,\n                    renderer = chart.renderer,\n                    chartWidth = chart.chartWidth,\n                    chartHeight = chart.chartHeight,\n                    chartBackground = chart.chartBackground,\n                    plotBackground = chart.plotBackground,\n                    plotBorder = chart.plotBorder,\n                    chartBorderWidth,\n\n                    plotBGImage = chart.plotBGImage,\n                    chartBackgroundColor = optionsChart.backgroundColor,\n                    plotBackgroundColor = optionsChart.plotBackgroundColor,\n                    plotBackgroundImage = optionsChart.plotBackgroundImage,\n\n                    mgn,\n                    bgAttr,\n                    plotLeft = chart.plotLeft,\n                    plotTop = chart.plotTop,\n                    plotWidth = chart.plotWidth,\n                    plotHeight = chart.plotHeight,\n                    plotBox = chart.plotBox,\n                    clipRect = chart.clipRect,\n                    clipBox = chart.clipBox,\n                    verb = 'animate';\n\n                // Chart area\n                if (!chartBackground) {\n                    chart.chartBackground = chartBackground = renderer.rect()\n                        .addClass('highcharts-background')\n                        .add();\n                    verb = 'attr';\n                }\n\n\n                // Presentational\n                chartBorderWidth = optionsChart.borderWidth || 0;\n                mgn = chartBorderWidth + (optionsChart.shadow ? 8 : 0);\n\n                bgAttr = {\n                    fill: chartBackgroundColor || 'none'\n                };\n\n                if (chartBorderWidth || chartBackground['stroke-width']) { // #980\n                    bgAttr.stroke = optionsChart.borderColor;\n                    bgAttr['stroke-width'] = chartBorderWidth;\n                }\n                chartBackground\n                    .attr(bgAttr)\n                    .shadow(optionsChart.shadow);\n\n                chartBackground[verb]({\n                    x: mgn / 2,\n                    y: mgn / 2,\n                    width: chartWidth - mgn - chartBorderWidth % 2,\n                    height: chartHeight - mgn - chartBorderWidth % 2,\n                    r: optionsChart.borderRadius\n                });\n\n                // Plot background\n                verb = 'animate';\n                if (!plotBackground) {\n                    verb = 'attr';\n                    chart.plotBackground = plotBackground = renderer.rect()\n                        .addClass('highcharts-plot-background')\n                        .add();\n                }\n                plotBackground[verb](plotBox);\n\n\n                // Presentational attributes for the background\n                plotBackground\n                    .attr({\n                        fill: plotBackgroundColor || 'none'\n                    })\n                    .shadow(optionsChart.plotShadow);\n\n                // Create the background image\n                if (plotBackgroundImage) {\n                    if (!plotBGImage) {\n                        chart.plotBGImage = renderer.image(\n                            plotBackgroundImage,\n                            plotLeft,\n                            plotTop,\n                            plotWidth,\n                            plotHeight\n                        ).add();\n                    } else {\n                        plotBGImage.animate(plotBox);\n                    }\n                }\n\n\n                // Plot clip\n                if (!clipRect) {\n                    chart.clipRect = renderer.clipRect(clipBox);\n                } else {\n                    clipRect.animate({\n                        width: clipBox.width,\n                        height: clipBox.height\n                    });\n                }\n\n                // Plot area border\n                verb = 'animate';\n                if (!plotBorder) {\n                    verb = 'attr';\n                    chart.plotBorder = plotBorder = renderer.rect()\n                        .addClass('highcharts-plot-border')\n                        .attr({\n                            zIndex: 1 // Above the grid\n                        })\n                        .add();\n                }\n\n\n                // Presentational\n                plotBorder.attr({\n                    stroke: optionsChart.plotBorderColor,\n                    'stroke-width': optionsChart.plotBorderWidth || 0,\n                    fill: 'none'\n                });\n\n\n                plotBorder[verb](plotBorder.crisp({\n                    x: plotLeft,\n                    y: plotTop,\n                    width: plotWidth,\n                    height: plotHeight\n                }, -plotBorder.strokeWidth())); //#3282 plotBorder should be negative;\n\n                // reset\n                chart.isDirtyBox = false;\n            },\n\n            /**\n             * Detect whether a certain chart property is needed based on inspecting its\n             * options and series. This mainly applies to the chart.inverted property,\n             * and in extensions to the chart.angular and chart.polar properties.\n             *\n             * @private\n             */\n            propFromSeries: function() {\n                var chart = this,\n                    optionsChart = chart.options.chart,\n                    klass,\n                    seriesOptions = chart.options.series,\n                    i,\n                    value;\n\n\n                each(['inverted', 'angular', 'polar'], function(key) {\n\n                    // The default series type's class\n                    klass = seriesTypes[optionsChart.type ||\n                        optionsChart.defaultSeriesType];\n\n                    // Get the value from available chart-wide properties\n                    value =\n                        optionsChart[key] || // It is set in the options\n                        (klass && klass.prototype[key]); // The default series class\n                    // requires it\n\n                    // 4. Check if any the chart's series require it\n                    i = seriesOptions && seriesOptions.length;\n                    while (!value && i--) {\n                        klass = seriesTypes[seriesOptions[i].type];\n                        if (klass && klass.prototype[key]) {\n                            value = true;\n                        }\n                    }\n\n                    // Set the chart property\n                    chart[key] = value;\n                });\n\n            },\n\n            /**\n             * Internal function to link two or more series together, based on the\n             * `linkedTo` option. This is done from `Chart.render`, and after\n             * `Chart.addSeries` and `Series.remove`.\n             *\n             * @private\n             */\n            linkSeries: function() {\n                var chart = this,\n                    chartSeries = chart.series;\n\n                // Reset links\n                each(chartSeries, function(series) {\n                    series.linkedSeries.length = 0;\n                });\n\n                // Apply new links\n                each(chartSeries, function(series) {\n                    var linkedTo = series.options.linkedTo;\n                    if (isString(linkedTo)) {\n                        if (linkedTo === ':previous') {\n                            linkedTo = chart.series[series.index - 1];\n                        } else {\n                            linkedTo = chart.get(linkedTo);\n                        }\n                        // #3341 avoid mutual linking\n                        if (linkedTo && linkedTo.linkedParent !== series) {\n                            linkedTo.linkedSeries.push(series);\n                            series.linkedParent = linkedTo;\n                            series.visible = pick(\n                                series.options.visible,\n                                linkedTo.options.visible,\n                                series.visible\n                            ); // #3879\n                        }\n                    }\n                });\n            },\n\n            /**\n             * Render series for the chart.\n             *\n             * @private\n             */\n            renderSeries: function() {\n                each(this.series, function(serie) {\n                    serie.translate();\n                    serie.render();\n                });\n            },\n\n            /**\n             * Render labels for the chart.\n             *\n             * @private\n             */\n            renderLabels: function() {\n                var chart = this,\n                    labels = chart.options.labels;\n                if (labels.items) {\n                    each(labels.items, function(label) {\n                        var style = extend(labels.style, label.style),\n                            x = pInt(style.left) + chart.plotLeft,\n                            y = pInt(style.top) + chart.plotTop + 12;\n\n                        // delete to prevent rewriting in IE\n                        delete style.left;\n                        delete style.top;\n\n                        chart.renderer.text(\n                                label.html,\n                                x,\n                                y\n                            )\n                            .attr({\n                                zIndex: 2\n                            })\n                            .css(style)\n                            .add();\n\n                    });\n                }\n            },\n\n            /**\n             * Render all graphics for the chart. Runs internally on initialization.\n             *\n             * @private\n             */\n            render: function() {\n                var chart = this,\n                    axes = chart.axes,\n                    renderer = chart.renderer,\n                    options = chart.options,\n                    tempWidth,\n                    tempHeight,\n                    redoHorizontal,\n                    redoVertical;\n\n                // Title\n                chart.setTitle();\n\n\n                // Legend\n                chart.legend = new Legend(chart, options.legend);\n\n                // Get stacks\n                if (chart.getStacks) {\n                    chart.getStacks();\n                }\n\n                // Get chart margins\n                chart.getMargins(true);\n                chart.setChartSize();\n\n                // Record preliminary dimensions for later comparison\n                tempWidth = chart.plotWidth;\n                tempHeight = chart.plotHeight = chart.plotHeight - 21; // 21 is the most common correction for X axis labels\n\n                // Get margins by pre-rendering axes\n                each(axes, function(axis) {\n                    axis.setScale();\n                });\n                chart.getAxisMargins();\n\n                // If the plot area size has changed significantly, calculate tick positions again\n                redoHorizontal = tempWidth / chart.plotWidth > 1.1;\n                redoVertical = tempHeight / chart.plotHeight > 1.05; // Height is more sensitive\n\n                if (redoHorizontal || redoVertical) {\n\n                    each(axes, function(axis) {\n                        if ((axis.horiz && redoHorizontal) || (!axis.horiz && redoVertical)) {\n                            axis.setTickInterval(true); // update to reflect the new margins\n                        }\n                    });\n                    chart.getMargins(); // second pass to check for new labels\n                }\n\n                // Draw the borders and backgrounds\n                chart.drawChartBox();\n\n\n                // Axes\n                if (chart.hasCartesianSeries) {\n                    each(axes, function(axis) {\n                        if (axis.visible) {\n                            axis.render();\n                        }\n                    });\n                }\n\n                // The series\n                if (!chart.seriesGroup) {\n                    chart.seriesGroup = renderer.g('series-group')\n                        .attr({\n                            zIndex: 3\n                        })\n                        .add();\n                }\n                chart.renderSeries();\n\n                // Labels\n                chart.renderLabels();\n\n                // Credits\n                chart.addCredits();\n\n                // Handle responsiveness\n                if (chart.setResponsive) {\n                    chart.setResponsive();\n                }\n\n                // Set flag\n                chart.hasRendered = true;\n\n            },\n\n            /**\n             * Set a new credits label for the chart.\n             *\n             * @param  {CreditOptions} options\n             *         A configuration object for the new credits.\n             * @sample highcharts/credits/credits-update/ Add and update credits\n             */\n            addCredits: function(credits) {\n                var chart = this;\n\n                credits = merge(true, this.options.credits, credits);\n                if (credits.enabled && !this.credits) {\n\n                    /**\n                     * The chart's credits label. The label has an `update` method that\n                     * allows setting new options as per the {@link\n                     * https://api.highcharts.com/highcharts/credits|\n                     * credits options set}.\n                     *\n                     * @memberof Highcharts.Chart\n                     * @name credits\n                     * @type {Highcharts.SVGElement}\n                     */\n                    this.credits = this.renderer.text(\n                            credits.text + (this.mapCredits || ''),\n                            0,\n                            0\n                        )\n                        .addClass('highcharts-credits')\n                        .on('click', function() {\n                            if (credits.href) {\n                                win.location.href = credits.href;\n                            }\n                        })\n                        .attr({\n                            align: credits.position.align,\n                            zIndex: 8\n                        })\n\n                        .css(credits.style)\n\n                        .add()\n                        .align(credits.position);\n\n                    // Dynamically update\n                    this.credits.update = function(options) {\n                        chart.credits = chart.credits.destroy();\n                        chart.addCredits(options);\n                    };\n                }\n            },\n\n            /**\n             * Remove the chart and purge memory. This method is called internally\n             * before adding a second chart into the same container, as well as on\n             * window unload to prevent leaks.\n             *\n             * @sample highcharts/members/chart-destroy/\n             *         Destroy the chart from a button\n             * @sample stock/members/chart-destroy/\n             *         Destroy with Highstock\n             */\n            destroy: function() {\n                var chart = this,\n                    axes = chart.axes,\n                    series = chart.series,\n                    container = chart.container,\n                    i,\n                    parentNode = container && container.parentNode;\n\n                // fire the chart.destoy event\n                fireEvent(chart, 'destroy');\n\n                // Delete the chart from charts lookup array\n                if (chart.renderer.forExport) {\n                    H.erase(charts, chart); // #6569\n                } else {\n                    charts[chart.index] = undefined;\n                }\n                H.chartCount--;\n                chart.renderTo.removeAttribute('data-highcharts-chart');\n\n                // remove events\n                removeEvent(chart);\n\n                // ==== Destroy collections:\n                // Destroy axes\n                i = axes.length;\n                while (i--) {\n                    axes[i] = axes[i].destroy();\n                }\n\n                // Destroy scroller & scroller series before destroying base series\n                if (this.scroller && this.scroller.destroy) {\n                    this.scroller.destroy();\n                }\n\n                // Destroy each series\n                i = series.length;\n                while (i--) {\n                    series[i] = series[i].destroy();\n                }\n\n                // ==== Destroy chart properties:\n                each([\n                    'title', 'subtitle', 'chartBackground', 'plotBackground',\n                    'plotBGImage', 'plotBorder', 'seriesGroup', 'clipRect', 'credits',\n                    'pointer', 'rangeSelector', 'legend', 'resetZoomButton', 'tooltip',\n                    'renderer'\n                ], function(name) {\n                    var prop = chart[name];\n\n                    if (prop && prop.destroy) {\n                        chart[name] = prop.destroy();\n                    }\n                });\n\n                // remove container and all SVG\n                if (container) { // can break in IE when destroyed before finished loading\n                    container.innerHTML = '';\n                    removeEvent(container);\n                    if (parentNode) {\n                        discardElement(container);\n                    }\n\n                }\n\n                // clean it all up\n                objectEach(chart, function(val, key) {\n                    delete chart[key];\n                });\n\n            },\n\n\n            /**\n             * VML namespaces can't be added until after complete. Listening\n             * for Perini's doScroll hack is not enough.\n             *\n             * @private\n             */\n            isReadyToRender: function() {\n                var chart = this;\n\n                // Note: win == win.top is required\n                if ((!svg && (win == win.top && doc.readyState !== 'complete'))) { // eslint-disable-line eqeqeq\n                    doc.attachEvent('onreadystatechange', function() {\n                        doc.detachEvent('onreadystatechange', chart.firstRender);\n                        if (doc.readyState === 'complete') {\n                            chart.firstRender();\n                        }\n                    });\n                    return false;\n                }\n                return true;\n            },\n\n            /**\n             * Prepare for first rendering after all data are loaded.\n             *\n             * @private\n             */\n            firstRender: function() {\n                var chart = this,\n                    options = chart.options;\n\n                // Check whether the chart is ready to render\n                if (!chart.isReadyToRender()) {\n                    return;\n                }\n\n                // Create the container\n                chart.getContainer();\n\n                // Run an early event after the container and renderer are established\n                fireEvent(chart, 'init');\n\n\n                chart.resetMargins();\n                chart.setChartSize();\n\n                // Set the common chart properties (mainly invert) from the given series\n                chart.propFromSeries();\n\n                // get axes\n                chart.getAxes();\n\n                // Initialize the series\n                each(options.series || [], function(serieOptions) {\n                    chart.initSeries(serieOptions);\n                });\n\n                chart.linkSeries();\n\n                // Run an event after axes and series are initialized, but before render. At this stage,\n                // the series data is indexed and cached in the xData and yData arrays, so we can access\n                // those before rendering. Used in Highstock.\n                fireEvent(chart, 'beforeRender');\n\n                // depends on inverted and on margins being set\n                if (Pointer) {\n\n                    /**\n                     * The Pointer that keeps track of mouse and touch interaction.\n                     *\n                     * @memberof Chart\n                     * @name pointer\n                     * @type Pointer\n                     */\n                    chart.pointer = new Pointer(chart, options);\n                }\n\n                chart.render();\n\n                // Fire the load event if there are no external images\n                if (!chart.renderer.imgCount && chart.onload) {\n                    chart.onload();\n                }\n\n                // If the chart was rendered outside the top container, put it back in (#3679)\n                chart.temporaryDisplay(true);\n\n            },\n\n            /**\n             * Internal function that runs on chart load, async if any images are loaded\n             * in the chart. Runs the callbacks and triggers the `load` and `render`\n             * events.\n             *\n             * @private\n             */\n            onload: function() {\n\n                // Run callbacks\n                each([this.callback].concat(this.callbacks), function(fn) {\n                    if (fn && this.index !== undefined) { // Chart destroyed in its own callback (#3600)\n                        fn.apply(this, [this]);\n                    }\n                }, this);\n\n                fireEvent(this, 'load');\n                fireEvent(this, 'render');\n\n\n                // Set up auto resize, check for not destroyed (#6068)\n                if (defined(this.index) && this.options.chart.reflow !== false) {\n                    this.initReflow();\n                }\n\n                // Don't run again\n                this.onload = null;\n            }\n\n        }); // end Chart\n\n    }(Highcharts));\n    (function(Highcharts) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var Point,\n            H = Highcharts,\n\n            each = H.each,\n            extend = H.extend,\n            erase = H.erase,\n            fireEvent = H.fireEvent,\n            format = H.format,\n            isArray = H.isArray,\n            isNumber = H.isNumber,\n            pick = H.pick,\n            removeEvent = H.removeEvent;\n\n        /**\n         * The Point object. The point objects are generated from the `series.data`\n         * configuration objects or raw numbers. They can be accessed from the\n         * `Series.points` array. Other ways to instaniate points are through {@link\n         * Highcharts.Series#addPoint} or {@link Highcharts.Series#setData}.\n         *\n         * @class\n         */\n\n        Highcharts.Point = Point = function() {};\n        Highcharts.Point.prototype = {\n\n            /**\n             * Initialize the point. Called internally based on the `series.data`\n             * option.\n             * @param  {Series} series\n             *         The series object containing this point.\n             * @param  {Number|Array|Object} options\n             *         The data in either number, array or object format.\n             * @param  {Number} x Optionally, the X value of the point.\n             * @return {Point} The Point instance.\n             */\n            init: function(series, options, x) {\n\n                var point = this,\n                    colors,\n                    colorCount = series.chart.options.chart.colorCount,\n                    colorIndex;\n\n                /**\n                 * The series object associated with the point.\n                 *\n                 * @name series\n                 * @memberof Highcharts.Point\n                 * @type Highcharts.Series\n                 */\n                point.series = series;\n\n\n                /**\n                 * The point's current color.\n                 * @name color\n                 * @memberof Highcharts.Point\n                 * @type {Color}\n                 */\n                point.color = series.color; // #3445\n\n                point.applyOptions(options, x);\n\n                if (series.options.colorByPoint) {\n\n                    colors = series.options.colors || series.chart.options.colors;\n                    point.color = point.color || colors[series.colorCounter];\n                    colorCount = colors.length;\n\n                    colorIndex = series.colorCounter;\n                    series.colorCounter++;\n                    // loop back to zero\n                    if (series.colorCounter === colorCount) {\n                        series.colorCounter = 0;\n                    }\n                } else {\n                    colorIndex = series.colorIndex;\n                }\n                point.colorIndex = pick(point.colorIndex, colorIndex);\n\n                series.chart.pointCount++;\n                return point;\n            },\n            /**\n             * Apply the options containing the x and y data and possible some extra\n             * properties. Called on point init or from point.update.\n             *\n             * @private\n             * @param {Object} options The point options as defined in series.data.\n             * @param {Number} x Optionally, the X value.\n             * @returns {Object} The Point instance.\n             */\n            applyOptions: function(options, x) {\n                var point = this,\n                    series = point.series,\n                    pointValKey = series.options.pointValKey || series.pointValKey;\n\n                options = Point.prototype.optionsToObject.call(this, options);\n\n                // copy options directly to point\n                extend(point, options);\n                point.options = point.options ? extend(point.options, options) : options;\n\n                // Since options are copied into the Point instance, some accidental options must be shielded (#5681)\n                if (options.group) {\n                    delete point.group;\n                }\n\n                // For higher dimension series types. For instance, for ranges, point.y is mapped to point.low.\n                if (pointValKey) {\n                    point.y = point[pointValKey];\n                }\n                point.isNull = pick(\n                    point.isValid && !point.isValid(),\n                    point.x === null || !isNumber(point.y, true)\n                ); // #3571, check for NaN\n\n                // The point is initially selected by options (#5777)\n                if (point.selected) {\n                    point.state = 'select';\n                }\n\n                // If no x is set by now, get auto incremented value. All points must have an\n                // x value, however the y value can be null to create a gap in the series\n                if ('name' in point && x === undefined && series.xAxis && series.xAxis.hasNames) {\n                    point.x = series.xAxis.nameToX(point);\n                }\n                if (point.x === undefined && series) {\n                    if (x === undefined) {\n                        point.x = series.autoIncrement(point);\n                    } else {\n                        point.x = x;\n                    }\n                }\n\n                return point;\n            },\n\n            /**\n             * Transform number or array configs into objects. Used internally to unify\n             * the different configuration formats for points. For example, a simple\n             * number `10` in a line series will be transformed to `{ y: 10 }`, and an\n             * array config like `[1, 10]` in a scatter series will be transformed to\n             * `{ x: 1, y: 10 }`.\n             *\n             * @param  {Number|Array|Object} options\n             *         The input options\n             * @return {Object} Transformed options.\n             */\n            optionsToObject: function(options) {\n                var ret = {},\n                    series = this.series,\n                    keys = series.options.keys,\n                    pointArrayMap = keys || series.pointArrayMap || ['y'],\n                    valueCount = pointArrayMap.length,\n                    firstItemType,\n                    i = 0,\n                    j = 0;\n\n                if (isNumber(options) || options === null) {\n                    ret[pointArrayMap[0]] = options;\n\n                } else if (isArray(options)) {\n                    // with leading x value\n                    if (!keys && options.length > valueCount) {\n                        firstItemType = typeof options[0];\n                        if (firstItemType === 'string') {\n                            ret.name = options[0];\n                        } else if (firstItemType === 'number') {\n                            ret.x = options[0];\n                        }\n                        i++;\n                    }\n                    while (j < valueCount) {\n                        if (!keys || options[i] !== undefined) { // Skip undefined positions for keys\n                            ret[pointArrayMap[j]] = options[i];\n                        }\n                        i++;\n                        j++;\n                    }\n                } else if (typeof options === 'object') {\n                    ret = options;\n\n                    // This is the fastest way to detect if there are individual point dataLabels that need\n                    // to be considered in drawDataLabels. These can only occur in object configs.\n                    if (options.dataLabels) {\n                        series._hasPointLabels = true;\n                    }\n\n                    // Same approach as above for markers\n                    if (options.marker) {\n                        series._hasPointMarkers = true;\n                    }\n                }\n                return ret;\n            },\n\n            /**\n             * Get the CSS class names for individual points. Used internally where the\n             * returned value is set on every point.\n             *\n             * @returns {String} The class names.\n             */\n            getClassName: function() {\n                return 'highcharts-point' +\n                    (this.selected ? ' highcharts-point-select' : '') +\n                    (this.negative ? ' highcharts-negative' : '') +\n                    (this.isNull ? ' highcharts-null-point' : '') +\n                    (this.colorIndex !== undefined ? ' highcharts-color-' +\n                        this.colorIndex : '') +\n                    (this.options.className ? ' ' + this.options.className : '') +\n                    (this.zone && this.zone.className ? ' ' +\n                        this.zone.className.replace('highcharts-negative', '') : '');\n            },\n\n            /**\n             * In a series with `zones`, return the zone that the point belongs to.\n             *\n             * @return {Object}\n             *         The zone item.\n             */\n            getZone: function() {\n                var series = this.series,\n                    zones = series.zones,\n                    zoneAxis = series.zoneAxis || 'y',\n                    i = 0,\n                    zone;\n\n                zone = zones[i];\n                while (this[zoneAxis] >= zone.value) {\n                    zone = zones[++i];\n                }\n\n                if (zone && zone.color && !this.options.color) {\n                    this.color = zone.color;\n                }\n\n                return zone;\n            },\n\n            /**\n             * Destroy a point to clear memory. Its reference still stays in\n             * `series.data`.\n             *\n             * @private\n             */\n            destroy: function() {\n                var point = this,\n                    series = point.series,\n                    chart = series.chart,\n                    hoverPoints = chart.hoverPoints,\n                    prop;\n\n                chart.pointCount--;\n\n                if (hoverPoints) {\n                    point.setState();\n                    erase(hoverPoints, point);\n                    if (!hoverPoints.length) {\n                        chart.hoverPoints = null;\n                    }\n\n                }\n                if (point === chart.hoverPoint) {\n                    point.onMouseOut();\n                }\n\n                // remove all events\n                if (point.graphic || point.dataLabel) { // removeEvent and destroyElements are performance expensive\n                    removeEvent(point);\n                    point.destroyElements();\n                }\n\n                if (point.legendItem) { // pies have legend items\n                    chart.legend.destroyItem(point);\n                }\n\n                for (prop in point) {\n                    point[prop] = null;\n                }\n\n\n            },\n\n            /**\n             * Destroy SVG elements associated with the point.\n             *\n             * @private\n             */\n            destroyElements: function() {\n                var point = this,\n                    props = ['graphic', 'dataLabel', 'dataLabelUpper', 'connector', 'shadowGroup'],\n                    prop,\n                    i = 6;\n                while (i--) {\n                    prop = props[i];\n                    if (point[prop]) {\n                        point[prop] = point[prop].destroy();\n                    }\n                }\n            },\n\n            /**\n             * Return the configuration hash needed for the data label and tooltip\n             * formatters.\n             *\n             * @returns {Object}\n             *          Abstract object used in formatters and formats.\n             */\n            getLabelConfig: function() {\n                return {\n                    x: this.category,\n                    y: this.y,\n                    color: this.color,\n                    colorIndex: this.colorIndex,\n                    key: this.name || this.category,\n                    series: this.series,\n                    point: this,\n                    percentage: this.percentage,\n                    total: this.total || this.stackTotal\n                };\n            },\n\n            /**\n             * Extendable method for formatting each point's tooltip line.\n             *\n             * @param  {String} pointFormat\n             *         The point format.\n             * @return {String}\n             *         A string to be concatenated in to the common tooltip text.\n             */\n            tooltipFormatter: function(pointFormat) {\n\n                // Insert options for valueDecimals, valuePrefix, and valueSuffix\n                var series = this.series,\n                    seriesTooltipOptions = series.tooltipOptions,\n                    valueDecimals = pick(seriesTooltipOptions.valueDecimals, ''),\n                    valuePrefix = seriesTooltipOptions.valuePrefix || '',\n                    valueSuffix = seriesTooltipOptions.valueSuffix || '';\n\n                // Loop over the point array map and replace unformatted values with sprintf formatting markup\n                each(series.pointArrayMap || ['y'], function(key) {\n                    key = '{point.' + key; // without the closing bracket\n                    if (valuePrefix || valueSuffix) {\n                        pointFormat = pointFormat.replace(key + '}', valuePrefix + key + '}' + valueSuffix);\n                    }\n                    pointFormat = pointFormat.replace(key + '}', key + ':,.' + valueDecimals + 'f}');\n                });\n\n                return format(pointFormat, {\n                    point: this,\n                    series: this.series\n                });\n            },\n\n            /**\n             * Fire an event on the Point object.\n             *\n             * @private\n             * @param {String} eventType\n             * @param {Object} eventArgs Additional event arguments\n             * @param {Function} defaultFunction Default event handler\n             */\n            firePointEvent: function(eventType, eventArgs, defaultFunction) {\n                var point = this,\n                    series = this.series,\n                    seriesOptions = series.options;\n\n                // load event handlers on demand to save time on mouseover/out\n                if (seriesOptions.point.events[eventType] || (point.options && point.options.events && point.options.events[eventType])) {\n                    this.importEvents();\n                }\n\n                // add default handler if in selection mode\n                if (eventType === 'click' && seriesOptions.allowPointSelect) {\n                    defaultFunction = function(event) {\n                        // Control key is for Windows, meta (= Cmd key) for Mac, Shift for Opera\n                        if (point.select) { // Could be destroyed by prior event handlers (#2911)\n                            point.select(null, event.ctrlKey || event.metaKey || event.shiftKey);\n                        }\n                    };\n                }\n\n                fireEvent(this, eventType, eventArgs, defaultFunction);\n            },\n\n            /**\n             * For certain series types, like pie charts, where individual points can\n             * be shown or hidden.\n             *\n             * @name visible\n             * @memberOf Highcharts.Point\n             * @type {Boolean}\n             */\n            visible: true\n        };\n\n        /**\n         * For categorized axes this property holds the category name for the\n         * point. For other axes it holds the X value.\n         *\n         * @name category\n         * @memberOf Highcharts.Point\n         * @type {String|Number}\n         */\n\n        /**\n         * The percentage for points in a stacked series or pies.\n         *\n         * @name percentage\n         * @memberOf Highcharts.Point\n         * @type {Number}\n         */\n\n        /**\n         * The total of values in either a stack for stacked series, or a pie in a pie\n         * series.\n         *\n         * @name total\n         * @memberOf Highcharts.Point\n         * @type {Number}\n         */\n\n        /**\n         * The x value of the point.\n         *\n         * @name x\n         * @memberOf Highcharts.Point\n         * @type {Number}\n         */\n\n        /**\n         * The y value of the point.\n         *\n         * @name y\n         * @memberOf Highcharts.Point\n         * @type {Number}\n         */\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            animObject = H.animObject,\n            arrayMax = H.arrayMax,\n            arrayMin = H.arrayMin,\n            correctFloat = H.correctFloat,\n            Date = H.Date,\n            defaultOptions = H.defaultOptions,\n            defaultPlotOptions = H.defaultPlotOptions,\n            defined = H.defined,\n            each = H.each,\n            erase = H.erase,\n            extend = H.extend,\n            fireEvent = H.fireEvent,\n            grep = H.grep,\n            isArray = H.isArray,\n            isNumber = H.isNumber,\n            isString = H.isString,\n            LegendSymbolMixin = H.LegendSymbolMixin, // @todo add as a requirement\n            merge = H.merge,\n            objectEach = H.objectEach,\n            pick = H.pick,\n            Point = H.Point, // @todo  add as a requirement\n            removeEvent = H.removeEvent,\n            splat = H.splat,\n            SVGElement = H.SVGElement,\n            syncTimeout = H.syncTimeout,\n            win = H.win;\n\n        /**\n         * This is the base series prototype that all other series types inherit from.\n         * A new series is initialized either through the {@link https://api.highcharts.com/highcharts/series|\n         * series} option structure, or after the chart is initialized, through {@link\n         * Highcharts.Chart#addSeries}.\n         *\n         * The object can be accessed in a number of ways. All series and point event\n         * handlers give a reference to the `series` object. The chart object has a\n         * {@link Highcharts.Chart.series|series} property that is a collection of all\n         * the chart's series. The point objects and axis objects also have the same\n         * reference.\n         *\n         * Another way to reference the series programmatically is by `id`. Add an id\n         * in the series configuration options, and get the series object by {@link\n         * Highcharts.Chart#get}.\n         *\n         * Configuration options for the series are given in three levels. Options for\n         * all series in a chart are given in the {@link https://api.highcharts.com/highcharts/plotOptions.series|\n         * plotOptions.series} object. Then options for all series of a specific type\n         * are given in the plotOptions of that type, for example `plotOptions.line`.\n         * Next, options for one single series are given in the series array, or as\n         * arguements to `chart.addSeries`.\n         *\n         * The data in the series is stored in various arrays.\n         *\n         * - First, `series.options.data` contains all the original config options for\n         * each point whether added by options or methods like `series.addPoint`.\n         * - Next, `series.data` contains those values converted to points, but in case\n         * the series data length exceeds the `cropThreshold`, or if the data is grouped,\n         * `series.data` doesn't contain all the points. It only contains the points that\n         * have been created on demand.\n         * - Then there's `series.points` that contains all currently visible point\n         * objects. In case of cropping, the cropped-away points are not part of this\n         * array. The `series.points` array starts at `series.cropStart` compared to\n         * `series.data` and `series.options.data`. If however the series data is grouped,\n         * these can't be correlated one to one.\n         * - `series.xData` and `series.processedXData` contain clean x values, equivalent\n         * to `series.data` and `series.points`.\n         * - `series.yData` and `series.processedYData` contain clean y values, equivalent\n         * to `series.data` and `series.points`.\n         *\n         * @class Highcharts.Series\n         * @param  {Highcharts.Chart} chart\n         *         The chart instance.\n         * @param  {Options.plotOptions.series} options\n         *         The series options.\n         *\n         */\n\n        /**\n         * General options for all series types.\n         * @optionparent plotOptions.series\n         */\n        H.Series = H.seriesType('line', null, { // base series options\n\n            //cursor: 'default',\n            //dashStyle: null,\n            //linecap: 'round',\n\n\n\n            /**\n             * Pixel with of the graph line.\n             *\n             * @type {Number}\n             * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the line stroke-width can be set with the\n             * `.highcharts-graph` class name.\n             * @sample {highcharts} highcharts/plotoptions/series-linewidth-general/ On all series\n             * @sample {highcharts} highcharts/plotoptions/series-linewidth-specific/ On one single series\n             * @default 2\n             * @product highcharts highstock\n             */\n            lineWidth: 2,\n            //shadow: false,\n\n\n            /**\n             * For some series, there is a limit that shuts down initial animation\n             * by default when the total number of points in the chart is too high.\n             * For example, for a column chart and its derivatives, animation doesn't\n             * run if there is more than 250 points totally. To disable this cap, set\n             * `animationLimit` to `Infinity`.\n             *\n             * @type {Number}\n             * @apioption plotOptions.series.animationLimit\n             */\n\n            /**\n             * Allow this series' points to be selected by clicking on the graphic\n             * (columns, point markers, pie slices, map areas etc).\n             *\n             * @see [Chart#getSelectedPoints](../class-reference/Highcharts.Chart#getSelectedPoints).\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-allowpointselect-line/\n             *         Line\n             * @sample {highcharts} highcharts/plotoptions/series-allowpointselect-column/\n             *         Column\n             * @sample {highcharts} highcharts/plotoptions/series-allowpointselect-pie/\n             *         Pie\n             * @sample {highmaps} maps/plotoptions/series-allowpointselect/\n             *         Map area\n             * @sample {highmaps} maps/plotoptions/mapbubble-allowpointselect/\n             *         Map bubble\n             * @default false\n             * @since 1.2.0\n             * @product highcharts highstock highmaps\n             */\n            allowPointSelect: false,\n\n\n\n            /**\n             * If true, a checkbox is displayed next to the legend item to allow\n             * selecting the series. The state of the checkbox is determined by\n             * the `selected` option.\n             *\n             * @productdesc {highmaps}\n             * Note that if a `colorAxis` is defined, the color axis is represented in\n             * the legend, not the series.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-showcheckbox-true/\n             *         Show select box\n             * @default false\n             * @since 1.2.0\n             */\n            showCheckbox: false,\n\n\n\n            /**\n             * Enable or disable the initial animation when a series is displayed.\n             * The animation can also be set as a configuration object. Please\n             * note that this option only applies to the initial animation of the\n             * series itself. For other animations, see [chart.animation](#chart.\n             * animation) and the animation parameter under the API methods. The\n             * following properties are supported:\n             *\n             * <dl>\n             *\n             * <dt>duration</dt>\n             *\n             * <dd>The duration of the animation in milliseconds.</dd>\n             *\n             * <dt>easing</dt>\n             *\n             * <dd>A string reference to an easing function set on the `Math` object.\n             * See [the easing demo](http://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-\n             * animation-easing/).</dd>\n             *\n             * </dl>\n             *\n             * Due to poor performance, animation is disabled in old IE browsers\n             * for several chart types.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-animation-disabled/\n             *         Animation disabled\n             * @sample {highcharts} highcharts/plotoptions/series-animation-slower/\n             *         Slower animation\n             * @sample {highcharts} highcharts/plotoptions/series-animation-easing/\n             *         Custom easing function\n             * @sample {highstock} stock/plotoptions/animation-slower/\n             *         Slower animation\n             * @sample {highstock} stock/plotoptions/animation-easing/\n             *         Custom easing function\n             * @sample {highmaps} maps/plotoptions/series-animation-true/\n             *         Animation enabled on map series\n             * @sample {highmaps} maps/plotoptions/mapbubble-animation-false/\n             *         Disabled on mapbubble series\n             * @default {highcharts} true\n             * @default {highstock} true\n             * @default {highmaps} false\n             */\n            animation: {\n\n\n                /**\n                 */\n                duration: 1000\n            },\n\n            /**\n             * A class name to apply to the series' graphical elements.\n             *\n             * @type {String}\n             * @since 5.0.0\n             * @apioption plotOptions.series.className\n             */\n\n            /**\n             * The main color of the series. In line type series it applies to the\n             * line and the point markers unless otherwise specified. In bar type\n             * series it applies to the bars unless a color is specified per point.\n             * The default value is pulled from the `options.colors` array.\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the color can be defined by the [colorIndex](#plotOptions.\n             * series.colorIndex) option. Also, the series color can be set with\n             * the `.highcharts-series`, `.highcharts-color-{n}`, `.highcharts-{type}-\n             * series` or `.highcharts-series-{n}` class, or individual classes\n             * given by the `className` option.\n             *\n             * @productdesc {highmaps}\n             * In maps, the series color is rarely used, as most choropleth maps use the\n             * color to denote the value of each point. The series color can however be\n             * used in a map with multiple series holding categorized data.\n             *\n             * @type {Color}\n             * @sample {highcharts} highcharts/plotoptions/series-color-general/\n             *         General plot option\n             * @sample {highcharts} highcharts/plotoptions/series-color-specific/\n             *         One specific series\n             * @sample {highcharts} highcharts/plotoptions/series-color-area/\n             *         Area color\n             * @sample {highmaps} maps/demo/category-map/\n             *         Category map by multiple series\n             * @apioption plotOptions.series.color\n             */\n\n            /**\n             * [Styled mode](http://www.highcharts.com/docs/chart-design-and-style/style-\n             * by-css) only. A specific color index to use for the series, so its\n             * graphic representations are given the class name `highcharts-color-\n             * {n}`.\n             *\n             * @type {Number}\n             * @since 5.0.0\n             * @apioption plotOptions.series.colorIndex\n             */\n\n\n            /**\n             * Whether to connect a graph line across null points, or render a gap\n             * between the two points on either side of the null.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-connectnulls-false/\n             *         False by default\n             * @sample {highcharts} highcharts/plotoptions/series-connectnulls-true/\n             *         True\n             * @product highcharts highstock\n             * @apioption plotOptions.series.connectNulls\n             */\n\n\n            /**\n             * You can set the cursor to \"pointer\" if you have click events attached\n             * to the series, to signal to the user that the points and lines can\n             * be clicked.\n             *\n             * @validvalue [null, \"default\", \"none\", \"help\", \"pointer\", \"crosshair\"]\n             * @type {String}\n             * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the series cursor can be set with the same classes\n             * as listed under [series.color](#plotOptions.series.color).\n             * @sample {highcharts} highcharts/plotoptions/series-cursor-line/\n             *         On line graph\n             * @sample {highcharts} highcharts/plotoptions/series-cursor-column/\n             *         On columns\n             * @sample {highcharts} highcharts/plotoptions/series-cursor-scatter/\n             *         On scatter markers\n             * @sample {highstock} stock/plotoptions/cursor/\n             *         Pointer on a line graph\n             * @sample {highmaps} maps/plotoptions/series-allowpointselect/\n             *         Map area\n             * @sample {highmaps} maps/plotoptions/mapbubble-allowpointselect/\n             *         Map bubble\n             * @apioption plotOptions.series.cursor\n             */\n\n\n            /**\n             * A name for the dash style to use for the graph, or for some series types\n             * the outline of each shape. The value for the `dashStyle` include:\n             *\n             * *   Solid\n             * *   ShortDash\n             * *   ShortDot\n             * *   ShortDashDot\n             * *   ShortDashDotDot\n             * *   Dot\n             * *   Dash\n             * *   LongDash\n             * *   DashDot\n             * *   LongDashDot\n             * *   LongDashDotDot\n             *\n             * @validvalue [\"Solid\", \"ShortDash\", \"ShortDot\", \"ShortDashDot\",\n             *             \"ShortDashDotDot\", \"Dot\", \"Dash\" ,\"LongDash\", \"DashDot\",\n             *             \"LongDashDot\", \"LongDashDotDot\"]\n             * @type {String}\n             * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the [stroke dash-array](http://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/series-\n             * dashstyle/) can be set with the same classes as listed under [series.\n             * color](#plotOptions.series.color).\n             * @sample {highcharts} highcharts/plotoptions/series-dashstyle-all/\n             *         Possible values demonstrated\n             * @sample {highcharts} highcharts/plotoptions/series-dashstyle/\n             *         Chart suitable for printing in black and white\n             * @sample {highstock} highcharts/plotoptions/series-dashstyle-all/\n             *         Possible values demonstrated\n             * @sample {highmaps} highcharts/plotoptions/series-dashstyle-all/\n             *         Possible values demonstrated\n             * @sample {highmaps} maps/plotoptions/series-dashstyle/\n             *         Dotted borders on a map\n             * @default Solid\n             * @since 2.1\n             * @apioption plotOptions.series.dashStyle\n             */\n\n            /**\n             * Requires the Accessibility module.\n             *\n             * A description of the series to add to the screen reader information\n             * about the series.\n             *\n             * @type {String}\n             * @default undefined\n             * @since 5.0.0\n             * @apioption plotOptions.series.description\n             */\n\n\n\n\n\n            /**\n             * Enable or disable the mouse tracking for a specific series. This\n             * includes point tooltips and click events on graphs and points. For\n             * large datasets it improves performance.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-enablemousetracking-false/ No mouse tracking\n             * @sample {highmaps} maps/plotoptions/series-enablemousetracking-false/ No mouse tracking\n             * @default true\n             * @apioption plotOptions.series.enableMouseTracking\n             */\n\n            /**\n             * By default, series are exposed to screen readers as regions. By enabling\n             * this option, the series element itself will be exposed in the same\n             * way as the data points. This is useful if the series is not used\n             * as a grouping entity in the chart, but you still want to attach a\n             * description to the series.\n             *\n             * Requires the Accessibility module.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/accessibility/art-grants/ Accessible data visualization\n             * @sample {highstock} highcharts/accessibility/art-grants/ Accessible data visualization\n             * @sample {highmaps} highcharts/accessibility/art-grants/ Accessible data visualization\n             * @default undefined\n             * @since 5.0.12\n             * @apioption plotOptions.series.exposeElementToA11y\n             */\n\n            /**\n             * Whether to use the Y extremes of the total chart width or only the\n             * zoomed area when zooming in on parts of the X axis. By default, the\n             * Y axis adjusts to the min and max of the visible data. Cartesian\n             * series only.\n             *\n             * @type {Boolean}\n             * @default false\n             * @since 4.1.6\n             * @product highcharts highstock\n             * @apioption plotOptions.series.getExtremesFromAll\n             */\n\n            /**\n             * An array specifying which option maps to which key in the data point\n             * array. This makes it convenient to work with unstructured data arrays\n             * from different sources.\n             *\n             * @type {Array<String>}\n             * @see [series.data](#series<line>.data)\n             * @sample {highcharts} highcharts/series/data-keys/ An extended data array with keys\n             * @sample {highstock} highcharts/series/data-keys/ An extended data array with keys\n             * @since 4.1.6\n             * @product highcharts highstock\n             * @apioption plotOptions.series.keys\n             */\n\n            /**\n             * The line cap used for line ends and line joins on the graph.\n             *\n             * @validvalue [\"round\", \"square\"]\n             * @type {String}\n             * @default round\n             * @product highcharts highstock\n             * @apioption plotOptions.series.linecap\n             */\n\n            /**\n             * The [id](#series.id) of another series to link to. Additionally,\n             * the value can be \":previous\" to link to the previous series. When\n             * two series are linked, only the first one appears in the legend.\n             * Toggling the visibility of this also toggles the linked series.\n             *\n             * @type {String}\n             * @sample {highcharts} highcharts/demo/arearange-line/ Linked series\n             * @sample {highstock} highcharts/demo/arearange-line/ Linked series\n             * @since 3.0\n             * @product highcharts highstock\n             * @apioption plotOptions.series.linkedTo\n             */\n\n            /**\n             * The color for the parts of the graph or points that are below the\n             * [threshold](#plotOptions.series.threshold).\n             *\n             * @type {Color}\n             * @see In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), a negative color is applied by setting this\n             * option to `true` combined with the `.highcharts-negative` class name\n             * ([view live demo](http://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/series-\n             * negative-color/)).\n             * @sample {highcharts} highcharts/plotoptions/series-negative-color/ Spline, area and column\n             * @sample {highcharts} highcharts/plotoptions/arearange-negativecolor/ Arearange\n             * @sample {highstock} highcharts/plotoptions/series-negative-color/ Spline, area and column\n             * @sample {highstock} highcharts/plotoptions/arearange-negativecolor/ Arearange\n             * @sample {highmaps} highcharts/plotoptions/series-negative-color/ Spline, area and column\n             * @sample {highmaps} highcharts/plotoptions/arearange-negativecolor/ Arearange\n             * @default null\n             * @since 3.0\n             * @apioption plotOptions.series.negativeColor\n             */\n\n            /**\n             * Same as [accessibility.pointDescriptionFormatter](#accessibility.\n             * pointDescriptionFormatter), but for an individual series. Overrides\n             * the chart wide configuration.\n             *\n             * @type {Function}\n             * @since 5.0.12\n             * @apioption plotOptions.series.pointDescriptionFormatter\n             */\n\n            /**\n             * If no x values are given for the points in a series, `pointInterval`\n             * defines the interval of the x values. For example, if a series contains\n             * one value every decade starting from year 0, set `pointInterval` to\n             * 10. In true `datetime` axes, the `pointInterval` is set in milliseconds.\n             *\n             * It can be also be combined with `pointIntervalUnit` to draw irregular\n             * time intervals.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/series-pointstart-datetime/\n             *         Datetime X axis\n             * @sample {highstock} stock/plotoptions/pointinterval-pointstart/\n             *         Using pointStart and pointInterval\n             * @default 1\n             * @product highcharts highstock\n             * @apioption plotOptions.series.pointInterval\n             */\n\n            /**\n             * On datetime series, this allows for setting the [pointInterval](#plotOptions.\n             * series.pointInterval) to irregular time units, `day`, `month` and\n             * `year`. A day is usually the same as 24 hours, but pointIntervalUnit\n             * also takes the DST crossover into consideration when dealing with\n             * local time. Combine this option with `pointInterval` to draw weeks,\n             *  quarters, 6 months, 10 years etc.\n             *\n             * @validvalue [null, \"day\", \"month\", \"year\"]\n             * @type {String}\n             * @sample {highcharts} highcharts/plotoptions/series-pointintervalunit/ One point a month\n             * @sample {highstock} highcharts/plotoptions/series-pointintervalunit/ One point a month\n             * @since 4.1.0\n             * @product highcharts highstock\n             * @apioption plotOptions.series.pointIntervalUnit\n             */\n\n            /**\n             * Possible values: `null`, `\"on\"`, `\"between\"`.\n             *\n             * In a column chart, when pointPlacement is `\"on\"`, the point will\n             * not create any padding of the X axis. In a polar column chart this\n             * means that the first column points directly north. If the pointPlacement\n             * is `\"between\"`, the columns will be laid out between ticks. This\n             * is useful for example for visualising an amount between two points\n             * in time or in a certain sector of a polar chart.\n             *\n             * Since Highcharts 3.0.2, the point placement can also be numeric,\n             * where 0 is on the axis value, -0.5 is between this value and the\n             * previous, and 0.5 is between this value and the next. Unlike the\n             * textual options, numeric point placement options won't affect axis\n             * padding.\n             *\n             * Note that pointPlacement needs a [pointRange](#plotOptions.series.\n             * pointRange) to work. For column series this is computed, but for\n             * line-type series it needs to be set.\n             *\n             * Defaults to `null` in cartesian charts, `\"between\"` in polar charts.\n             *\n             * @validvalue [null, \"on\", \"between\"]\n             * @type {String|Number}\n             * @see [xAxis.tickmarkPlacement](#xAxis.tickmarkPlacement)\n             * @sample {highcharts} highcharts/plotoptions/series-pointplacement-between/ Between in a column chart\n             * @sample {highcharts} highcharts/plotoptions/series-pointplacement-numeric/ Numeric placement for custom layout\n             * @sample {highstock} highcharts/plotoptions/series-pointplacement-between/ Between in a column chart\n             * @sample {highstock} highcharts/plotoptions/series-pointplacement-numeric/ Numeric placement for custom layout\n             * @default null\n             * @since 2.3.0\n             * @product highcharts highstock\n             * @apioption plotOptions.series.pointPlacement\n             */\n\n            /**\n             * If no x values are given for the points in a series, pointStart defines\n             * on what value to start. For example, if a series contains one yearly\n             * value starting from 1945, set pointStart to 1945.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/series-pointstart-linear/ Linear\n             * @sample {highcharts} highcharts/plotoptions/series-pointstart-datetime/ Datetime\n             * @sample {highstock} stock/plotoptions/pointinterval-pointstart/ Using pointStart and pointInterval\n             * @default 0\n             * @product highcharts highstock\n             * @apioption plotOptions.series.pointStart\n             */\n\n            /**\n             * Whether to select the series initially. If `showCheckbox` is true,\n             * the checkbox next to the series name in the legend will be checked for a\n             * selected series.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-selected/\n             *         One out of two series selected\n             * @default false\n             * @since 1.2.0\n             * @apioption plotOptions.series.selected\n             */\n\n            /**\n             * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow\n             * can be an object configuration containing `color`, `offsetX`, `offsetY`,\n             *  `opacity` and `width`.\n             *\n             * @type {Boolean|Object}\n             * @sample {highcharts} highcharts/plotoptions/series-shadow/ Shadow enabled\n             * @default false\n             * @apioption plotOptions.series.shadow\n             */\n\n            /**\n             * Whether to display this particular series or series type in the legend.\n             * The default value is `true` for standalone series, `false` for linked\n             * series.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-showinlegend/ One series in the legend, one hidden\n             * @default true\n             * @apioption plotOptions.series.showInLegend\n             */\n\n            /**\n             * If set to `True`, the accessibility module will skip past the points\n             * in this series for keyboard navigation.\n             *\n             * @type {Boolean}\n             * @since 5.0.12\n             * @apioption plotOptions.series.skipKeyboardNavigation\n             */\n\n            /**\n             * Whether to stack the values of each series on top of each other.\n             * Possible values are null to disable, \"normal\" to stack by value or\n             * \"percent\". When stacking is enabled, data must be sorted in ascending\n             * X order.\n             *\n             * @validvalue [null, \"normal\", \"percent\"]\n             * @type {String}\n             * @see [yAxis.reversedStacks](#yAxis.reversedStacks)\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-line/ Line\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-column/ Column\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-bar/ Bar\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-area/ Area\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-percent-line/ Line\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-percent-column/ Column\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-percent-bar/ Bar\n             * @sample {highcharts} highcharts/plotoptions/series-stacking-percent-area/ Area\n             * @sample {highstock} stock/plotoptions/stacking/ Area\n             * @default null\n             * @product highcharts highstock\n             * @apioption plotOptions.series.stacking\n             */\n\n            /**\n             * Whether to apply steps to the line. Possible values are `left`, `center`\n             * and `right`.\n             *\n             * @validvalue [null, \"left\", \"center\", \"right\"]\n             * @type {String}\n             * @sample {highcharts} highcharts/plotoptions/line-step/ Different step line options\n             * @sample {highcharts} highcharts/plotoptions/area-step/ Stepped, stacked area\n             * @sample {highstock} stock/plotoptions/line-step/ Step line\n             * @default {highcharts} null\n             * @default {highstock} false\n             * @since 1.2.5\n             * @product highcharts highstock\n             * @apioption plotOptions.series.step\n             */\n\n            /**\n             * The threshold, also called zero level or base level. For line type\n             * series this is only used in conjunction with [negativeColor](#plotOptions.\n             * series.negativeColor).\n             *\n             * @type {Number}\n             * @see [softThreshold](#plotOptions.series.softThreshold).\n             * @default 0\n             * @since 3.0\n             * @product highcharts highstock\n             * @apioption plotOptions.series.threshold\n             */\n\n            /**\n             * Set the initial visibility of the series.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-visible/ Two series, one hidden and one visible\n             * @sample {highstock} stock/plotoptions/series-visibility/ Hidden series\n             * @default true\n             * @apioption plotOptions.series.visible\n             */\n\n            /**\n             * Defines the Axis on which the zones are applied.\n             *\n             * @type {String}\n             * @see [zones](#plotOption.series.zones)\n             * @sample {highcharts} highcharts/series/color-zones-zoneaxis-x/ Zones on the X-Axis\n             * @sample {highstock} highcharts/series/color-zones-zoneaxis-x/ Zones on the X-Axis\n             * @default y\n             * @since 4.1.0\n             * @product highcharts highstock\n             * @apioption plotOptions.series.zoneAxis\n             */\n\n            /**\n             * @product highcharts highstock highmaps\n             */\n            events: {},\n\n\n\n            /**\n             * Options for the point markers of line-like series. Properties like\n             * `fillColor`, `lineColor` and `lineWidth` define the visual appearance\n             * of the markers. Other series types, like column series, don't have\n             * markers, but have visual options on the series level instead.\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the markers can be styled with the `.highcharts-\n             * point`, `.highcharts-point-hover` and `.highcharts-point-select`\n             * class names.\n             *\n             * @product highcharts highstock\n             */\n            marker: {\n\n\n\n                /**\n                 * The width of the point marker's outline.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-fillcolor/ 2px blue marker\n                 * @default 0\n                 * @product highcharts highstock\n                 */\n                lineWidth: 0,\n\n\n                /**\n                 * The color of the point marker's outline. When `null`, the series'\n                 * or point's color is used.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-fillcolor/ Inherit from series color (null)\n                 * @default #ffffff\n                 * @product highcharts highstock\n                 */\n                lineColor: '#ffffff',\n                //fillColor: null,\n\n                //enabled: true,\n                //symbol: null,\n\n\n                /**\n                 * The radius of the point marker.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-radius/ Bigger markers\n                 * @default 4\n                 * @product highcharts highstock\n                 */\n                radius: 4,\n\n\n                /**\n                 * @product highcharts highstock\n                 */\n                states: { // states for a single point\n\n\n\n                    /**\n                     * @product highcharts highstock\n                     */\n                    hover: {\n\n\n\n                        /**\n                         */\n                        animation: {\n\n\n                            /**\n                             */\n                            duration: 50\n                        },\n\n\n\n                        /**\n                         * Enable or disable the point marker.\n                         *\n                         * @type {Boolean}\n                         * @sample {highcharts} highcharts/plotoptions/series-marker-states-hover-enabled/ Disabled hover state\n                         * @default true\n                         * @product highcharts highstock\n                         */\n                        enabled: true,\n\n\n\n                        /**\n                         * The number of pixels to increase the radius of the hovered point.\n                         *\n                         * @type {Number}\n                         * @sample {highcharts} highcharts/plotoptions/series-states-hover-linewidthplus/ 5 pixels greater radius on hover\n                         * @sample {highstock} highcharts/plotoptions/series-states-hover-linewidthplus/ 5 pixels greater radius on hover\n                         * @default 2\n                         * @since 4.0.3\n                         * @product highcharts highstock\n                         */\n                        radiusPlus: 2,\n\n\n\n\n                        /**\n                         * The additional line width for a hovered point.\n                         *\n                         * @type {Number}\n                         * @sample {highcharts} highcharts/plotoptions/series-states-hover-linewidthplus/ 2 pixels wider on hover\n                         * @sample {highstock} highcharts/plotoptions/series-states-hover-linewidthplus/ 2 pixels wider on hover\n                         * @default 1\n                         * @since 4.0.3\n                         * @product highcharts highstock\n                         */\n                        lineWidthPlus: 1\n\n                    },\n\n\n\n\n                    /**\n                     * The appearance of the point marker when selected. In order to\n                     * allow a point to be selected, set the `series.allowPointSelect`\n                     * option to true.\n                     *\n                     * @product highcharts highstock\n                     */\n                    select: {\n\n\n\n                        /**\n                         * The fill color of the point marker.\n                         *\n                         * @type {Color}\n                         * @sample {highcharts} highcharts/plotoptions/series-marker-states-select-fillcolor/ Solid red discs for selected points\n                         * @default null\n                         * @product highcharts highstock\n                         */\n                        fillColor: '#cccccc',\n\n\n\n                        /**\n                         * The color of the point marker's outline. When `null`, the series'\n                         * or point's color is used.\n                         *\n                         * @type {Color}\n                         * @sample {highcharts} highcharts/plotoptions/series-marker-states-select-linecolor/ Red line color for selected points\n                         * @default #000000\n                         * @product highcharts highstock\n                         */\n                        lineColor: '#000000',\n\n\n\n                        /**\n                         * The width of the point marker's outline.\n                         *\n                         * @type {Number}\n                         * @sample {highcharts} highcharts/plotoptions/series-marker-states-select-linewidth/ 3px line width for selected points\n                         * @default 0\n                         * @product highcharts highstock\n                         */\n                        lineWidth: 2\n                    }\n\n                }\n            },\n\n\n\n            /**\n             * Properties for each single point\n             *\n             * @product highcharts highstock highmaps\n             */\n            point: {\n\n\n                /**\n                 * Events for each single point\n                 *\n                 * @product highcharts highstock highmaps\n                 */\n                events: {}\n            },\n\n\n\n            /**\n             * Options for the series data labels, appearing next to each data\n             * point.\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the data labels can be styled wtih the `.highcharts-\n             * data-label-box` and `.highcharts-data-label` class names ([see example](http://jsfiddle.\n             * net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/series-\n             * datalabels)).\n             */\n            dataLabels: {\n\n\n                /**\n                 * The alignment of the data label compared to the point. If `right`,\n                 * the right side of the label should be touching the point. For\n                 * points with an extent, like columns, the alignments also dictates\n                 * how to align it inside the box, as given with the [inside](#plotOptions.\n                 * column.dataLabels.inside) option. Can be one of \"left\", \"center\"\n                 * or \"right\".\n                 *\n                 * @validvalue [\"left\", \"center\", \"right\"]\n                 * @type {String}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-align-left/ Left aligned\n                 * @default center\n                 */\n                align: 'center',\n\n\n                /**\n                 * Whether to allow data labels to overlap. To make the labels less\n                 * sensitive for overlapping, the [dataLabels.padding](#plotOptions.\n                 * series.dataLabels.padding) can be set to 0.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-allowoverlap-false/ Don't allow overlap\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-allowoverlap-false/ Don't allow overlap\n                 * @sample {highmaps} highcharts/plotoptions/series-datalabels-allowoverlap-false/ Don't allow overlap\n                 * @default false\n                 * @since 4.1.0\n                 * @apioption plotOptions.series.dataLabels.allowOverlap\n                 */\n\n\n                /**\n                 * The border radius in pixels for the data label.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highmaps} maps/plotoptions/series-datalabels-box/ Data labels box options\n                 * @default 0\n                 * @since 2.2.1\n                 * @apioption plotOptions.series.dataLabels.borderRadius\n                 */\n\n\n                /**\n                 * The border width in pixels for the data label.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @default 0\n                 * @since 2.2.1\n                 * @apioption plotOptions.series.dataLabels.borderWidth\n                 */\n\n                /**\n                 * A class name for the data label. Particularly in [styled mode](http://www.\n                 * highcharts.com/docs/chart-design-and-style/style-by-css), this can\n                 * be used to give each series' or point's data label unique styling.\n                 * In addition to this option, a default color class name is added\n                 * so that we can give the labels a [contrast text shadow](http://jsfiddle.\n                 * net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/data-\n                 * label-contrast/).\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/css/series-datalabels/ Styling by CSS\n                 * @sample {highstock} highcharts/css/series-datalabels/ Styling by CSS\n                 * @sample {highmaps} highcharts/css/series-datalabels/ Styling by CSS\n                 * @since 5.0.0\n                 * @apioption plotOptions.series.dataLabels.className\n                 */\n\n                /**\n                 * The text color for the data labels. Defaults to `null`. For certain series\n                 * types, like column or map, the data labels can be drawn inside the points.\n                 * In this case the data label will be drawn with maximum contrast by default.\n                 * Additionally, it will be given a `text-outline` style with the opposite\n                 * color, to further increase the contrast. This can be overridden by setting\n                 * the `text-outline` style to `none` in the `dataLabels.style` option.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-color/\n                 *         Red data labels\n                 * @sample {highmaps} maps/demo/color-axis/\n                 *         White data labels\n                 * @apioption plotOptions.series.dataLabels.color\n                 */\n\n                /**\n                 * Whether to hide data labels that are outside the plot area. By default,\n                 * the data label is moved inside the plot area according to the [overflow](#plotOptions.\n                 * series.dataLabels.overflow) option.\n                 *\n                 * @type {Boolean}\n                 * @default true\n                 * @since 2.3.3\n                 * @apioption plotOptions.series.dataLabels.crop\n                 */\n\n                /**\n                 * Whether to defer displaying the data labels until the initial series\n                 * animation has finished.\n                 *\n                 * @type {Boolean}\n                 * @default true\n                 * @since 4.0\n                 * @product highcharts highstock\n                 * @apioption plotOptions.series.dataLabels.defer\n                 */\n\n                /**\n                 * Enable or disable the data labels.\n                 *\n                 * @type {Boolean}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-enabled/ Data labels enabled\n                 * @sample {highmaps} maps/demo/color-axis/ Data labels enabled\n                 * @default false\n                 * @apioption plotOptions.series.dataLabels.enabled\n                 */\n\n                /**\n                 * A [format string](http://www.highcharts.com/docs/chart-concepts/labels-\n                 * and-string-formatting) for the data label. Available variables are\n                 * the same as for `formatter`.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-format/ Add a unit\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-format/ Add a unit\n                 * @sample {highmaps} maps/plotoptions/series-datalabels-format/ Formatted value in the data label\n                 * @default {highcharts} {y}\n                 * @default {highstock} {y}\n                 * @default {highmaps} {point.value}\n                 * @since 3.0\n                 * @apioption plotOptions.series.dataLabels.format\n                 */\n\n                /**\n                 * Callback JavaScript function to format the data label. Note that\n                 * if a `format` is defined, the format takes precedence and the formatter\n                 * is ignored. Available data are:\n                 *\n                 * <table>\n                 *\n                 * <tbody>\n                 *\n                 * <tr>\n                 *\n                 * <td>`this.percentage`</td>\n                 *\n                 * <td>Stacked series and pies only. The point's percentage of the\n                 * total.</td>\n                 *\n                 * </tr>\n                 *\n                 * <tr>\n                 *\n                 * <td>`this.point`</td>\n                 *\n                 * <td>The point object. The point name, if defined, is available\n                 * through `this.point.name`.</td>\n                 *\n                 * </tr>\n                 *\n                 * <tr>\n                 *\n                 * <td>`this.series`:</td>\n                 *\n                 * <td>The series object. The series name is available through `this.\n                 * series.name`.</td>\n                 *\n                 * </tr>\n                 *\n                 * <tr>\n                 *\n                 * <td>`this.total`</td>\n                 *\n                 * <td>Stacked series only. The total value at this point's x value.\n                 * </td>\n                 *\n                 * </tr>\n                 *\n                 * <tr>\n                 *\n                 * <td>`this.x`:</td>\n                 *\n                 * <td>The x value.</td>\n                 *\n                 * </tr>\n                 *\n                 * <tr>\n                 *\n                 * <td>`this.y`:</td>\n                 *\n                 * <td>The y value.</td>\n                 *\n                 * </tr>\n                 *\n                 * </tbody>\n                 *\n                 * </table>\n                 *\n                 * @type {Function}\n                 * @sample {highmaps} maps/plotoptions/series-datalabels-format/ Formatted value\n                 * @product highcharts highstock highmaps\n                 */\n                formatter: function() {\n                    return this.y === null ? '' : H.numberFormat(this.y, -1);\n                },\n\n\n\n                /**\n                 * Styles for the label. The default `color` setting is `\"contrast\"`,\n                 * which is a pseudo color that Highcharts picks up and applies the\n                 * maximum contrast to the underlying point item, for example the\n                 * bar in a bar chart. The `textOutline` is a pseudo property that\n                 * applies an outline of the given width with the given color, which\n                 * by default is the maximum contrast to the text. So a bright text\n                 * color will result in a black text outline for maximum readability\n                 * on a mixed background. In some cases, especially with grayscale\n                 * text, the text outline doesn't work well, in which cases it can\n                 * be disabled by setting it to `\"none\"`.\n                 *\n                 * @type {CSSObject}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-style/\n                 *         Bold labels\n                 * @sample {highmaps} maps/demo/color-axis/ Bold labels\n                 * @default {\"color\": \"contrast\", \"fontSize\": \"11px\", \"fontWeight\": \"bold\", \"textOutline\": \"1px contrast\" }\n                 * @since 4.1.0\n                 */\n                style: {\n                    fontSize: '11px',\n                    fontWeight: 'bold',\n                    color: 'contrast',\n                    textOutline: '1px contrast'\n                },\n\n                /**\n                 * The background color or gradient for the data label. Defaults to\n                 * `undefined`.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highmaps} maps/plotoptions/series-datalabels-box/ Data labels box options\n                 * @since 2.2.1\n                 * @apioption plotOptions.series.dataLabels.backgroundColor\n                 */\n\n                /**\n                 * The border color for the data label. Defaults to `undefined`.\n                 *\n                 * @type {Color}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @default undefined\n                 * @since 2.2.1\n                 * @apioption plotOptions.series.dataLabels.borderColor\n                 */\n\n                /**\n                 * The shadow of the box. Works best with `borderWidth` or `backgroundColor`.\n                 * Since 2.3 the shadow can be an object configuration containing `color`,\n                 *  `offsetX`, `offsetY`, `opacity` and `width`.\n                 *\n                 * @type {Boolean|Object}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @default false\n                 * @since 2.2.1\n                 * @apioption plotOptions.series.dataLabels.shadow\n                 */\n\n\n                /**\n                 * For points with an extent, like columns or map areas, whether to align the data\n                 * label inside the box or to the actual value point. Defaults to `false`\n                 * in most cases, `true` in stacked columns.\n                 *\n                 * @type {Boolean}\n                 * @since 3.0\n                 * @apioption plotOptions.series.dataLabels.inside\n                 */\n\n                /**\n                 * How to handle data labels that flow outside the plot area. The default\n                 * is `justify`, which aligns them inside the plot area. For columns\n                 * and bars, this means it will be moved inside the bar. To display\n                 * data labels outside the plot area, set `crop` to `false` and `overflow`\n                 * to `\"none\"`.\n                 *\n                 * @validvalue [\"justify\", \"none\"]\n                 * @type {String}\n                 * @default justify\n                 * @since 3.0.6\n                 * @apioption plotOptions.series.dataLabels.overflow\n                 */\n\n                /**\n                 * Text rotation in degrees. Note that due to a more complex structure,\n                 * backgrounds, borders and padding will be lost on a rotated data\n                 * label.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-rotation/ Vertical labels\n                 * @default 0\n                 * @apioption plotOptions.series.dataLabels.rotation\n                 */\n\n                /**\n                 * The vertical alignment of a data label. Can be one of `top`, `middle`\n                 * or `bottom`. The default value depends on the data, for instance\n                 * in a column chart, the label is above positive values and below\n                 * negative values.\n                 *\n                 * @validvalue [\"top\", \"middle\", \"bottom\"]\n                 * @type {String}\n                 * @since 2.3.3\n                 * @product highcharts highstock highmaps\n                 */\n                verticalAlign: 'bottom', // above singular point\n\n\n                /**\n                 * The x position offset of the label relative to the point.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-rotation/ Vertical and positioned\n                 * @default 0\n                 * @product highcharts highstock highmaps\n                 */\n                x: 0,\n\n\n                /**\n                 * The y position offset of the label relative to the point.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-rotation/ Vertical and positioned\n                 * @default -6\n                 * @product highcharts highstock highmaps\n                 */\n                y: 0,\n\n\n                /**\n                 * When either the `borderWidth` or the `backgroundColor` is set,\n                 * this is the padding within the box.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-box/ Data labels box options\n                 * @sample {highmaps} maps/plotoptions/series-datalabels-box/ Data labels box options\n                 * @default {highcharts} 5\n                 * @default {highstock} 5\n                 * @default {highmaps} 0\n                 * @since 2.2.1\n                 * @product highcharts highstock highmaps\n                 */\n                padding: 5\n\n                /**\n                 * The name of a symbol to use for the border around the label. Symbols\n                 * are predefined functions on the Renderer object.\n                 *\n                 * @type {String}\n                 * @sample {highcharts} highcharts/plotoptions/series-datalabels-shape/ A callout for annotations\n                 * @sample {highstock} highcharts/plotoptions/series-datalabels-shape/ A callout for annotations\n                 * @sample {highmaps} highcharts/plotoptions/series-datalabels-shape/ A callout for annotations (Highcharts demo)\n                 * @default square\n                 * @since 4.1.2\n                 * @apioption plotOptions.series.dataLabels.shape\n                 */\n\n                /**\n                 * The Z index of the data labels. The default Z index puts it above\n                 * the series. Use a Z index of 2 to display it behind the series.\n                 *\n                 * @type {Number}\n                 * @default 6\n                 * @since 2.3.5\n                 * @apioption plotOptions.series.dataLabels.zIndex\n                 */\n            },\n            // draw points outside the plot area when the number of points is less than\n            // this\n\n\n\n            /**\n             * When the series contains less points than the crop threshold, all\n             * points are drawn, even if the points fall outside the visible plot\n             * area at the current zoom. The advantage of drawing all points (including\n             * markers and columns), is that animation is performed on updates.\n             * On the other hand, when the series contains more points than the\n             * crop threshold, the series data is cropped to only contain points\n             * that fall within the plot area. The advantage of cropping away invisible\n             * points is to increase performance on large series.\n             *\n             * @type {Number}\n             * @default 300\n             * @since 2.2\n             * @product highcharts highstock\n             */\n            cropThreshold: 300,\n\n\n\n            /**\n             * The width of each point on the x axis. For example in a column chart\n             * with one value each day, the pointRange would be 1 day (= 24 * 3600\n             * * 1000 milliseconds). This is normally computed automatically, but\n             * this option can be used to override the automatic value.\n             *\n             * @type {Number}\n             * @default 0\n             * @product highstock\n             */\n            pointRange: 0,\n            //pointStart: 0,\n            //pointInterval: 1,\n            //showInLegend: null, // auto = false for linked series\n\n\n\n            /**\n             * When this is true, the series will not cause the Y axis to cross\n             * the zero plane (or [threshold](#plotOptions.series.threshold) option)\n             * unless the data actually crosses the plane.\n             *\n             * For example, if `softThreshold` is `false`, a series of 0, 1, 2,\n             * 3 will make the Y axis show negative values according to the `minPadding`\n             * option. If `softThreshold` is `true`, the Y axis starts at 0.\n             *\n             * @type {Boolean}\n             * @default true\n             * @since 4.1.9\n             * @product highcharts highstock\n             */\n            softThreshold: true,\n\n\n\n            /**\n             * A wrapper object for all the series options in specific states.\n             *\n             * @type {plotOptions.series.states}\n             * @product highcharts highstock highmaps\n             */\n            states: { // states for the entire series\n\n\n                /**\n                 * Options for the hovered series\n                 *\n                 * @product highcharts highstock highmaps\n                 */\n                hover: {\n                    //enabled: false,\n\n\n\n                    /**\n                     * Animation setting for hovering the graph in line-type series.\n                     *\n                     * @type {Boolean|Object}\n                     * @default { \"duration\": 50 }\n                     * @since 5.0.8\n                     * @product highcharts\n                     */\n                    animation: {\n\n\n\n                        /**\n                         */\n                        duration: 50\n                    },\n\n\n\n                    /**\n                     * The additional line width for the graph of a hovered series.\n                     *\n                     * @type {Number}\n                     * @sample {highcharts} highcharts/plotoptions/series-states-hover-linewidthplus/ 5 pixels wider\n                     * @sample {highstock} highcharts/plotoptions/series-states-hover-linewidthplus/ 5 pixels wider\n                     * @default 1\n                     * @since 4.0.3\n                     * @product highcharts highstock\n                     */\n                    lineWidthPlus: 1,\n\n\n\n                    /**\n                     * In Highcharts 1.0, the appearance of all markers belonging to\n                     * the hovered series. For settings on the hover state of the individual\n                     * point, see [marker.states.hover](#plotOptions.series.marker.states.\n                     * hover).\n                     *\n                     * @extends plotOptions.series.marker\n                     * @deprecated\n                     * @product highcharts highstock\n                     */\n                    marker: {\n                        // lineWidth: base + 1,\n                        // radius: base + 1\n                    },\n\n\n\n                    /**\n                     * Options for the halo appearing around the hovered point in line-\n                     * type series as well as outside the hovered slice in pie charts.\n                     * By default the halo is filled by the current point or series\n                     * color with an opacity of 0.25\\. The halo can be disabled by setting\n                     * the `halo` option to `false`.\n                     *\n                     * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the halo is styled with the `.highcharts-\n                     * halo` class, with colors inherited from `.highcharts-color-{n}`.\n                     *\n                     * @type {Object}\n                     * @sample {highcharts} highcharts/plotoptions/halo/ Halo options\n                     * @sample {highstock} highcharts/plotoptions/halo/ Halo options\n                     * @since 4.0\n                     * @product highcharts highstock\n                     */\n                    halo: {\n\n\n\n                        /**\n                         * The pixel size of the halo. For point markers this is the radius\n                         * of the halo. For pie slices it is the width of the halo outside\n                         * the slice. For bubbles it defaults to 5 and is the width of the\n                         * halo outside the bubble.\n                         *\n                         * @type {Number}\n                         * @default 10\n                         * @since 4.0\n                         * @product highcharts highstock\n                         */\n                        size: 10,\n\n\n\n\n                        /**\n                         * Opacity for the halo unless a specific fill is overridden using\n                         * the `attributes` setting. Note that Highcharts is only able to\n                         * apply opacity to colors of hex or rgb(a) formats.\n                         *\n                         * @type {Number}\n                         * @default 0.25\n                         * @since 4.0\n                         * @product highcharts highstock\n                         */\n                        opacity: 0.25\n\n                    }\n                },\n\n\n                /**\n                 * Specific options for point in selected states, after being selected\n                 * by [allowPointSelect](#plotOptions.series.allowPointSelect) or\n                 * programmatically.\n                 *\n                 * @type {Object}\n                 * @extends plotOptions.series.states.hover\n                 * @excluding brightness\n                 * @sample {highmaps} maps/plotoptions/series-allowpointselect/ Allow point select demo\n                 * @product highmaps\n                 */\n                select: {\n\n\n\n                    /**\n                     */\n                    marker: {}\n                }\n            },\n\n\n\n            /**\n             * Sticky tracking of mouse events. When true, the `mouseOut` event\n             * on a series isn't triggered until the mouse moves over another series,\n             * or out of the plot area. When false, the `mouseOut` event on a\n             * series is triggered when the mouse leaves the area around the series'\n             * graph or markers. This also implies the tooltip when not shared. When\n             * `stickyTracking` is false and `tooltip.shared` is false, the tooltip will\n             * be hidden when moving the mouse between series. Defaults to true for line\n             * and area type series, but to false for columns, pies etc.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-stickytracking-true/\n             *         True by default\n             * @sample {highcharts} highcharts/plotoptions/series-stickytracking-false/\n             *         False\n             * @default {highcharts} true\n             * @default {highstock} true\n             * @default {highmaps} false\n             * @since 2.0\n             * @product highcharts highstock highmaps\n             */\n            stickyTracking: true,\n            //tooltip: {\n            //pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span>' +\n            // '{series.name}: <b>{point.y}</b>'\n            //valueDecimals: null,\n            //xDateFormat: '%A, %b %e, %Y',\n            //valuePrefix: '',\n            //ySuffix: ''\n            //}\n\n\n\n            /**\n             * When a series contains a data array that is longer than this, only\n             * one dimensional arrays of numbers, or two dimensional arrays with\n             * x and y values are allowed. Also, only the first point is tested,\n             * and the rest are assumed to be the same format. This saves expensive\n             * data checking and indexing in long series. Set it to `0` disable.\n             *\n             * @type {Number}\n             * @default 1000\n             * @since 2.2\n             * @product highcharts highstock\n             */\n            turboThreshold: 1000,\n            // zIndex: null\n\n\n\n            /**\n             * Determines whether the series should look for the nearest point\n             * in both dimensions or just the x-dimension when hovering the series.\n             * Defaults to `'xy'` for scatter series and `'x'` for most other\n             * series. If the data has duplicate x-values, it is recommended to\n             * set this to `'xy'` to allow hovering over all points.\n             *\n             * Applies only to series types using nearest neighbor search (not\n             * direct hover) for tooltip.\n             *\n             * @validvalue ['x', 'xy']\n             * @type {String}\n             * @sample {highcharts} highcharts/series/findnearestpointby/ Different hover behaviors\n             * @sample {highstock} highcharts/series/findnearestpointby/ Different hover behaviors\n             * @sample {highmaps} highcharts/series/findnearestpointby/ Different hover behaviors\n             * @since 5.0.10\n             * @product highcharts highstock highmaps\n             */\n            findNearestPointBy: 'x'\n\n        }, /** @lends Highcharts.Series.prototype */ {\n            isCartesian: true,\n            pointClass: Point,\n            sorted: true, // requires the data to be sorted\n            requireSorting: true,\n            directTouch: false,\n            axisTypes: ['xAxis', 'yAxis'],\n            colorCounter: 0,\n            // each point's x and y values are stored in this.xData and this.yData\n            parallelArrays: ['x', 'y'],\n            coll: 'series',\n            init: function(chart, options) {\n                var series = this,\n                    events,\n                    chartSeries = chart.series,\n                    lastSeries;\n\n                /**\n                 * Read only. The chart that the series belongs to.\n                 *\n                 * @name chart\n                 * @memberOf Series\n                 * @type {Chart}\n                 */\n                series.chart = chart;\n\n                /**\n                 * Read only. The series' type, like \"line\", \"area\", \"column\" etc. The\n                 * type in the series options anc can be altered using {@link\n                 * Series#update}.\n                 *\n                 * @name type\n                 * @memberOf Series\n                 * @type String\n                 */\n\n                /**\n                 * Read only. The series' current options. To update, use {@link\n                 * Series#update}.\n                 *\n                 * @name options\n                 * @memberOf Series\n                 * @type SeriesOptions\n                 */\n                series.options = options = series.setOptions(options);\n                series.linkedSeries = [];\n\n                // bind the axes\n                series.bindAxes();\n\n                // set some variables\n                extend(series, {\n                    /**\n                     * The series name as given in the options. Defaults to\n                     * \"Series {n}\".\n                     *\n                     * @name name\n                     * @memberOf Series\n                     * @type {String}\n                     */\n                    name: options.name,\n                    state: '',\n                    /**\n                     * Read only. The series' visibility state as set by {@link\n                     * Series#show}, {@link Series#hide}, or in the initial\n                     * configuration.\n                     *\n                     * @name visible\n                     * @memberOf Series\n                     * @type {Boolean}\n                     */\n                    visible: options.visible !== false, // true by default\n                    /**\n                     * Read only. The series' selected state as set by {@link\n                     * Highcharts.Series#select}.\n                     *\n                     * @name selected\n                     * @memberOf Series\n                     * @type {Boolean}\n                     */\n                    selected: options.selected === true // false by default\n                });\n\n                // register event listeners\n                events = options.events;\n\n                objectEach(events, function(event, eventType) {\n                    addEvent(series, eventType, event);\n                });\n                if (\n                    (events && events.click) ||\n                    (\n                        options.point &&\n                        options.point.events &&\n                        options.point.events.click\n                    ) ||\n                    options.allowPointSelect\n                ) {\n                    chart.runTrackerClick = true;\n                }\n\n                series.getColor();\n                series.getSymbol();\n\n                // Set the data\n                each(series.parallelArrays, function(key) {\n                    series[key + 'Data'] = [];\n                });\n                series.setData(options.data, false);\n\n                // Mark cartesian\n                if (series.isCartesian) {\n                    chart.hasCartesianSeries = true;\n                }\n\n                // Get the index and register the series in the chart. The index is one\n                // more than the current latest series index (#5960).\n                if (chartSeries.length) {\n                    lastSeries = chartSeries[chartSeries.length - 1];\n                }\n                series._i = pick(lastSeries && lastSeries._i, -1) + 1;\n\n                // Insert the series and re-order all series above the insertion point.\n                chart.orderSeries(this.insert(chartSeries));\n            },\n\n            /**\n             * Insert the series in a collection with other series, either the chart\n             * series or yAxis series, in the correct order according to the index\n             * option. Used internally when adding series.\n             *\n             * @private\n             * @param   {Array.<Series>} collection\n             *          A collection of series, like `chart.series` or `xAxis.series`.\n             * @returns {Number} The index of the series in the collection.\n             */\n            insert: function(collection) {\n                var indexOption = this.options.index,\n                    i;\n\n                // Insert by index option\n                if (isNumber(indexOption)) {\n                    i = collection.length;\n                    while (i--) {\n                        // Loop down until the interted element has higher index\n                        if (indexOption >=\n                            pick(collection[i].options.index, collection[i]._i)) {\n                            collection.splice(i + 1, 0, this);\n                            break;\n                        }\n                    }\n                    if (i === -1) {\n                        collection.unshift(this);\n                    }\n                    i = i + 1;\n\n                    // Or just push it to the end\n                } else {\n                    collection.push(this);\n                }\n                return pick(i, collection.length - 1);\n            },\n\n            /**\n             * Set the xAxis and yAxis properties of cartesian series, and register the\n             * series in the `axis.series` array.\n             *\n             * @private\n             */\n            bindAxes: function() {\n                var series = this,\n                    seriesOptions = series.options,\n                    chart = series.chart,\n                    axisOptions;\n\n                // repeat for xAxis and yAxis\n                each(series.axisTypes || [], function(AXIS) {\n\n                    // loop through the chart's axis objects\n                    each(chart[AXIS], function(axis) {\n                        axisOptions = axis.options;\n\n                        // apply if the series xAxis or yAxis option mathches the number\n                        // of the axis, or if undefined, use the first axis\n                        if (\n                            seriesOptions[AXIS] === axisOptions.index ||\n                            (\n                                seriesOptions[AXIS] !== undefined &&\n                                seriesOptions[AXIS] === axisOptions.id\n                            ) ||\n                            (\n                                seriesOptions[AXIS] === undefined &&\n                                axisOptions.index === 0\n                            )\n                        ) {\n\n                            // register this series in the axis.series lookup\n                            series.insert(axis.series);\n\n                            // set this series.xAxis or series.yAxis reference\n                            /**\n                             * Read only. The unique xAxis object associated with the\n                             * series.\n                             *\n                             * @name xAxis\n                             * @memberOf Series\n                             * @type Axis\n                             */\n                            /**\n                             * Read only. The unique yAxis object associated with the\n                             * series.\n                             *\n                             * @name yAxis\n                             * @memberOf Series\n                             * @type Axis\n                             */\n                            series[AXIS] = axis;\n\n                            // mark dirty for redraw\n                            axis.isDirty = true;\n                        }\n                    });\n\n                    // The series needs an X and an Y axis\n                    if (!series[AXIS] && series.optionalAxis !== AXIS) {\n                        H.error(18, true);\n                    }\n\n                });\n            },\n\n            /**\n             * For simple series types like line and column, the data values are held in\n             * arrays like xData and yData for quick lookup to find extremes and more.\n             * For multidimensional series like bubble and map, this can be extended\n             * with arrays like zData and valueData by adding to the\n             * `series.parallelArrays` array.\n             *\n             * @private\n             */\n            updateParallelArrays: function(point, i) {\n                var series = point.series,\n                    args = arguments,\n                    fn = isNumber(i) ?\n                    // Insert the value in the given position\n                    function(key) {\n                        var val = key === 'y' && series.toYData ?\n                            series.toYData(point) :\n                            point[key];\n                        series[key + 'Data'][i] = val;\n                    } :\n                    // Apply the method specified in i with the following arguments\n                    // as arguments\n                    function(key) {\n                        Array.prototype[i].apply(\n                            series[key + 'Data'],\n                            Array.prototype.slice.call(args, 2)\n                        );\n                    };\n\n                each(series.parallelArrays, fn);\n            },\n\n            /**\n             * Return an auto incremented x value based on the pointStart and\n             * pointInterval options. This is only used if an x value is not given for\n             * the point that calls autoIncrement.\n             *\n             * @private\n             */\n            autoIncrement: function() {\n\n                var options = this.options,\n                    xIncrement = this.xIncrement,\n                    date,\n                    pointInterval,\n                    pointIntervalUnit = options.pointIntervalUnit;\n\n                xIncrement = pick(xIncrement, options.pointStart, 0);\n\n                this.pointInterval = pointInterval = pick(\n                    this.pointInterval,\n                    options.pointInterval,\n                    1\n                );\n\n                // Added code for pointInterval strings\n                if (pointIntervalUnit) {\n                    date = new Date(xIncrement);\n\n                    if (pointIntervalUnit === 'day') {\n                        date = +date[Date.hcSetDate](\n                            date[Date.hcGetDate]() + pointInterval\n                        );\n                    } else if (pointIntervalUnit === 'month') {\n                        date = +date[Date.hcSetMonth](\n                            date[Date.hcGetMonth]() + pointInterval\n                        );\n                    } else if (pointIntervalUnit === 'year') {\n                        date = +date[Date.hcSetFullYear](\n                            date[Date.hcGetFullYear]() + pointInterval\n                        );\n                    }\n                    pointInterval = date - xIncrement;\n\n                }\n\n                this.xIncrement = xIncrement + pointInterval;\n                return xIncrement;\n            },\n\n            /**\n             * Set the series options by merging from the options tree. Called\n             * internally on initiating and updating series. This function will not\n             * redraw the series. For API usage, use {@link Series#update}.\n             *\n             * @param  {Options.plotOptions.series} itemOptions\n             *         The series options.\n             */\n            setOptions: function(itemOptions) {\n                var chart = this.chart,\n                    chartOptions = chart.options,\n                    plotOptions = chartOptions.plotOptions,\n                    userOptions = chart.userOptions || {},\n                    userPlotOptions = userOptions.plotOptions || {},\n                    typeOptions = plotOptions[this.type],\n                    options,\n                    zones;\n\n                this.userOptions = itemOptions;\n\n                // General series options take precedence over type options because\n                // otherwise, default type options like column.animation would be\n                // overwritten by the general option. But issues have been raised here\n                // (#3881), and the solution may be to distinguish between default\n                // option and userOptions like in the tooltip below.\n                options = merge(\n                    typeOptions,\n                    plotOptions.series,\n                    itemOptions\n                );\n\n                // The tooltip options are merged between global and series specific\n                // options. Importance order asscendingly:\n                // globals: (1)tooltip, (2)plotOptions.series, (3)plotOptions[this.type]\n                // init userOptions with possible later updates: 4-6 like 1-3 and\n                // (7)this series options\n                this.tooltipOptions = merge(\n                    defaultOptions.tooltip, // 1\n                    defaultOptions.plotOptions.series &&\n                    defaultOptions.plotOptions.series.tooltip, // 2\n                    defaultOptions.plotOptions[this.type].tooltip, // 3\n                    chartOptions.tooltip.userOptions, // 4\n                    plotOptions.series && plotOptions.series.tooltip, // 5\n                    plotOptions[this.type].tooltip, // 6\n                    itemOptions.tooltip // 7\n                );\n\n                // When shared tooltip, stickyTracking is true by default,\n                // unless user says otherwise.\n                this.stickyTracking = pick(\n                    itemOptions.stickyTracking,\n                    userPlotOptions[this.type] &&\n                    userPlotOptions[this.type].stickyTracking,\n                    userPlotOptions.series && userPlotOptions.series.stickyTracking,\n                    (\n                        this.tooltipOptions.shared && !this.noSharedTooltip ?\n                        true :\n                        options.stickyTracking\n                    )\n                );\n\n                // Delete marker object if not allowed (#1125)\n                if (typeOptions.marker === null) {\n                    delete options.marker;\n                }\n\n                // Handle color zones\n                this.zoneAxis = options.zoneAxis;\n                zones = this.zones = (options.zones || []).slice();\n                if (\n                    (options.negativeColor || options.negativeFillColor) &&\n                    !options.zones\n                ) {\n                    zones.push({\n                        value: options[this.zoneAxis + 'Threshold'] ||\n                            options.threshold ||\n                            0,\n                        className: 'highcharts-negative',\n\n                        color: options.negativeColor,\n                        fillColor: options.negativeFillColor\n\n                    });\n                }\n                if (zones.length) { // Push one extra zone for the rest\n                    if (defined(zones[zones.length - 1].value)) {\n                        zones.push({\n\n                            color: this.color,\n                            fillColor: this.fillColor\n\n                        });\n                    }\n                }\n                return options;\n            },\n\n            getCyclic: function(prop, value, defaults) {\n                var i,\n                    chart = this.chart,\n                    userOptions = this.userOptions,\n                    indexName = prop + 'Index',\n                    counterName = prop + 'Counter',\n                    len = defaults ? defaults.length : pick(\n                        chart.options.chart[prop + 'Count'],\n                        chart[prop + 'Count']\n                    ),\n                    setting;\n\n                if (!value) {\n                    // Pick up either the colorIndex option, or the _colorIndex after\n                    // Series.update()\n                    setting = pick(\n                        userOptions[indexName],\n                        userOptions['_' + indexName]\n                    );\n                    if (defined(setting)) { // after Series.update()\n                        i = setting;\n                    } else {\n                        // #6138\n                        if (!chart.series.length) {\n                            chart[counterName] = 0;\n                        }\n                        userOptions['_' + indexName] = i = chart[counterName] % len;\n                        chart[counterName] += 1;\n                    }\n                    if (defaults) {\n                        value = defaults[i];\n                    }\n                }\n                // Set the colorIndex\n                if (i !== undefined) {\n                    this[indexName] = i;\n                }\n                this[prop] = value;\n            },\n\n            /**\n             * Get the series' color based on either the options or pulled from global\n             * options.\n             *\n             * @return  {Color} The series color.\n             */\n\n            getColor: function() {\n                if (this.options.colorByPoint) {\n                    // #4359, selected slice got series.color even when colorByPoint was\n                    // set.\n                    this.options.color = null;\n                } else {\n                    this.getCyclic(\n                        'color',\n                        this.options.color || defaultPlotOptions[this.type].color,\n                        this.chart.options.colors\n                    );\n                }\n            },\n\n            /**\n             * Get the series' symbol based on either the options or pulled from global\n             * options.\n             */\n            getSymbol: function() {\n                var seriesMarkerOption = this.options.marker;\n\n                this.getCyclic(\n                    'symbol',\n                    seriesMarkerOption.symbol,\n                    this.chart.options.symbols\n                );\n            },\n\n            drawLegendSymbol: LegendSymbolMixin.drawLineMarker,\n\n            /**\n             * Apply a new set of data to the series and optionally redraw it. The new\n             * data array is passed by reference (except in case of `updatePoints`), and\n             * may later be mutated when updating the chart data.\n             *\n             * Note the difference in behaviour when setting the same amount of points,\n             * or a different amount of points, as handled by the `updatePoints`\n             * parameter.\n             *\n             * @param  {SeriesDataOptions} data\n             *         Takes an array of data in the same format as described under\n             *         `series<type>data` for the given series type.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after the series is altered. If doing\n             *         more operations on the chart, it is a good idea to set redraw to\n             *         false and call {@link Chart#redraw} after.\n             * @param  {AnimationOptions} [animation]\n             *         When the updated data is the same length as the existing data,\n             *         points will be updated by default, and animation visualizes how\n             *         the points are changed. Set false to disable animation, or a\n             *         configuration object to set duration or easing.\n             * @param  {Boolean} [updatePoints=true]\n             *         When the updated data is the same length as the existing data,\n             *         points will be updated instead of replaced. This allows updating\n             *         with animation and performs better. In this case, the original\n             *         array is not passed by reference. Set false to prevent.\n             *\n             * @sample highcharts/members/series-setdata/\n             *         Set new data from a button\n             * @sample highcharts/members/series-setdata-pie/\n             *         Set data in a pie\n             * @sample stock/members/series-setdata/\n             *         Set new data in Highstock\n             * @sample maps/members/series-setdata/\n             *         Set new data in Highmaps\n             */\n            setData: function(data, redraw, animation, updatePoints) {\n                var series = this,\n                    oldData = series.points,\n                    oldDataLength = (oldData && oldData.length) || 0,\n                    dataLength,\n                    options = series.options,\n                    chart = series.chart,\n                    firstPoint = null,\n                    xAxis = series.xAxis,\n                    i,\n                    turboThreshold = options.turboThreshold,\n                    pt,\n                    xData = this.xData,\n                    yData = this.yData,\n                    pointArrayMap = series.pointArrayMap,\n                    valueCount = pointArrayMap && pointArrayMap.length;\n\n                data = data || [];\n                dataLength = data.length;\n                redraw = pick(redraw, true);\n\n                // If the point count is the same as is was, just run Point.update which\n                // is cheaper, allows animation, and keeps references to points.\n                if (\n                    updatePoints !== false &&\n                    dataLength &&\n                    oldDataLength === dataLength &&\n                    !series.cropped &&\n                    !series.hasGroupedData &&\n                    series.visible\n                ) {\n                    each(data, function(point, i) {\n                        // .update doesn't exist on a linked, hidden series (#3709)\n                        if (oldData[i].update && point !== options.data[i]) {\n                            oldData[i].update(point, false, null, false);\n                        }\n                    });\n\n                } else {\n\n                    // Reset properties\n                    series.xIncrement = null;\n\n                    series.colorCounter = 0; // for series with colorByPoint (#1547)\n\n                    // Update parallel arrays\n                    each(this.parallelArrays, function(key) {\n                        series[key + 'Data'].length = 0;\n                    });\n\n                    // In turbo mode, only one- or twodimensional arrays of numbers are\n                    // allowed. The first value is tested, and we assume that all the\n                    // rest are defined the same way. Although the 'for' loops are\n                    // similar, they are repeated inside each if-else conditional for\n                    // max performance.\n                    if (turboThreshold && dataLength > turboThreshold) {\n\n                        // find the first non-null point\n                        i = 0;\n                        while (firstPoint === null && i < dataLength) {\n                            firstPoint = data[i];\n                            i++;\n                        }\n\n\n                        if (isNumber(firstPoint)) { // assume all points are numbers\n                            for (i = 0; i < dataLength; i++) {\n                                xData[i] = this.autoIncrement();\n                                yData[i] = data[i];\n                            }\n\n                            // Assume all points are arrays when first point is\n                        } else if (isArray(firstPoint)) {\n                            if (valueCount) { // [x, low, high] or [x, o, h, l, c]\n                                for (i = 0; i < dataLength; i++) {\n                                    pt = data[i];\n                                    xData[i] = pt[0];\n                                    yData[i] = pt.slice(1, valueCount + 1);\n                                }\n                            } else { // [x, y]\n                                for (i = 0; i < dataLength; i++) {\n                                    pt = data[i];\n                                    xData[i] = pt[0];\n                                    yData[i] = pt[1];\n                                }\n                            }\n                        } else {\n                            // Highcharts expects configs to be numbers or arrays in\n                            // turbo mode\n                            H.error(12);\n                        }\n                    } else {\n                        for (i = 0; i < dataLength; i++) {\n                            if (data[i] !== undefined) { // stray commas in oldIE\n                                pt = {\n                                    series: series\n                                };\n                                series.pointClass.prototype.applyOptions.apply(\n                                    pt, [data[i]]\n                                );\n                                series.updateParallelArrays(pt, i);\n                            }\n                        }\n                    }\n\n                    // Forgetting to cast strings to numbers is a common caveat when\n                    // handling CSV or JSON\n                    if (isString(yData[0])) {\n                        H.error(14, true);\n                    }\n\n                    series.data = [];\n                    series.options.data = series.userOptions.data = data;\n\n                    // destroy old points\n                    i = oldDataLength;\n                    while (i--) {\n                        if (oldData[i] && oldData[i].destroy) {\n                            oldData[i].destroy();\n                        }\n                    }\n\n                    // reset minRange (#878)\n                    if (xAxis) {\n                        xAxis.minRange = xAxis.userMinRange;\n                    }\n\n                    // redraw\n                    series.isDirty = chart.isDirtyBox = true;\n                    series.isDirtyData = !!oldData;\n                    animation = false;\n                }\n\n                // Typically for pie series, points need to be processed and generated\n                // prior to rendering the legend\n                if (options.legendType === 'point') {\n                    this.processData();\n                    this.generatePoints();\n                }\n\n                if (redraw) {\n                    chart.redraw(animation);\n                }\n            },\n\n            /**\n             * Internal function to process the data by cropping away unused data points\n             * if the series is longer than the crop threshold. This saves computing\n             * time for large series. In Highstock, this function is extended to\n             * provide data grouping.\n             *\n             * @private\n             * @param  {Boolean} force\n             *         Force data grouping.\n             */\n            processData: function(force) {\n                var series = this,\n                    processedXData = series.xData, // copied during slice operation\n                    processedYData = series.yData,\n                    dataLength = processedXData.length,\n                    croppedData,\n                    cropStart = 0,\n                    cropped,\n                    distance,\n                    closestPointRange,\n                    xAxis = series.xAxis,\n                    i, // loop variable\n                    options = series.options,\n                    cropThreshold = options.cropThreshold,\n                    getExtremesFromAll =\n                    series.getExtremesFromAll ||\n                    options.getExtremesFromAll, // #4599\n                    isCartesian = series.isCartesian,\n                    xExtremes,\n                    val2lin = xAxis && xAxis.val2lin,\n                    isLog = xAxis && xAxis.isLog,\n                    min,\n                    max;\n\n                // If the series data or axes haven't changed, don't go through this.\n                // Return false to pass the message on to override methods like in data\n                // grouping.\n                if (\n                    isCartesian &&\n                    !series.isDirty &&\n                    !xAxis.isDirty &&\n                    !series.yAxis.isDirty &&\n                    !force\n                ) {\n                    return false;\n                }\n\n                if (xAxis) {\n                    xExtremes = xAxis.getExtremes(); // corrected for log axis (#3053)\n                    min = xExtremes.min;\n                    max = xExtremes.max;\n                }\n\n                // optionally filter out points outside the plot area\n                if (\n                    isCartesian &&\n                    series.sorted &&\n                    !getExtremesFromAll &&\n                    (!cropThreshold || dataLength > cropThreshold || series.forceCrop)\n                ) {\n\n                    // it's outside current extremes\n                    if (\n                        processedXData[dataLength - 1] < min ||\n                        processedXData[0] > max\n                    ) {\n                        processedXData = [];\n                        processedYData = [];\n\n                        // only crop if it's actually spilling out\n                    } else if (\n                        processedXData[0] < min ||\n                        processedXData[dataLength - 1] > max\n                    ) {\n                        croppedData = this.cropData(\n                            series.xData,\n                            series.yData,\n                            min,\n                            max\n                        );\n                        processedXData = croppedData.xData;\n                        processedYData = croppedData.yData;\n                        cropStart = croppedData.start;\n                        cropped = true;\n                    }\n                }\n\n\n                // Find the closest distance between processed points\n                i = processedXData.length || 1;\n                while (--i) {\n                    distance = isLog ?\n                        val2lin(processedXData[i]) - val2lin(processedXData[i - 1]) :\n                        processedXData[i] - processedXData[i - 1];\n\n                    if (\n                        distance > 0 &&\n                        (\n                            closestPointRange === undefined ||\n                            distance < closestPointRange\n                        )\n                    ) {\n                        closestPointRange = distance;\n\n                        // Unsorted data is not supported by the line tooltip, as well as\n                        // data grouping and navigation in Stock charts (#725) and width\n                        // calculation of columns (#1900)\n                    } else if (distance < 0 && series.requireSorting) {\n                        H.error(15);\n                    }\n                }\n\n                // Record the properties\n                series.cropped = cropped; // undefined or true\n                series.cropStart = cropStart;\n                series.processedXData = processedXData;\n                series.processedYData = processedYData;\n\n                series.closestPointRange = closestPointRange;\n\n            },\n\n            /**\n             * Iterate over xData and crop values between min and max. Returns object\n             * containing crop start/end cropped xData with corresponding part of yData,\n             * dataMin and dataMax within the cropped range.\n             *\n             * @private\n             */\n            cropData: function(xData, yData, min, max) {\n                var dataLength = xData.length,\n                    cropStart = 0,\n                    cropEnd = dataLength,\n                    // line-type series need one point outside\n                    cropShoulder = pick(this.cropShoulder, 1),\n                    i,\n                    j;\n\n                // iterate up to find slice start\n                for (i = 0; i < dataLength; i++) {\n                    if (xData[i] >= min) {\n                        cropStart = Math.max(0, i - cropShoulder);\n                        break;\n                    }\n                }\n\n                // proceed to find slice end\n                for (j = i; j < dataLength; j++) {\n                    if (xData[j] > max) {\n                        cropEnd = j + cropShoulder;\n                        break;\n                    }\n                }\n\n                return {\n                    xData: xData.slice(cropStart, cropEnd),\n                    yData: yData.slice(cropStart, cropEnd),\n                    start: cropStart,\n                    end: cropEnd\n                };\n            },\n\n\n            /**\n             * Generate the data point after the data has been processed by cropping\n             * away unused points and optionally grouped in Highcharts Stock.\n             *\n             * @private\n             */\n            generatePoints: function() {\n                var series = this,\n                    options = series.options,\n                    dataOptions = options.data,\n                    data = series.data,\n                    dataLength,\n                    processedXData = series.processedXData,\n                    processedYData = series.processedYData,\n                    PointClass = series.pointClass,\n                    processedDataLength = processedXData.length,\n                    cropStart = series.cropStart || 0,\n                    cursor,\n                    hasGroupedData = series.hasGroupedData,\n                    keys = options.keys,\n                    point,\n                    points = [],\n                    i;\n\n                if (!data && !hasGroupedData) {\n                    var arr = [];\n                    arr.length = dataOptions.length;\n                    data = series.data = arr;\n                }\n\n                if (keys && hasGroupedData) {\n                    // grouped data has already applied keys (#6590)\n                    series.options.keys = false;\n                }\n\n                for (i = 0; i < processedDataLength; i++) {\n                    cursor = cropStart + i;\n                    if (!hasGroupedData) {\n                        point = data[cursor];\n                        if (!point && dataOptions[cursor] !== undefined) { // #970\n                            data[cursor] = point = (new PointClass()).init(\n                                series,\n                                dataOptions[cursor],\n                                processedXData[i]\n                            );\n                        }\n                    } else {\n                        // splat the y data in case of ohlc data array\n                        point = (new PointClass()).init(\n                            series, [processedXData[i]].concat(splat(processedYData[i]))\n                        );\n\n                        /**\n                         * Highstock only. If a point object is created by data\n                         * grouping, it doesn't reflect actual points in the raw data.\n                         * In this case, the `dataGroup` property holds information\n                         * that points back to the raw data.\n                         *\n                         * - `dataGroup.start` is the index of the first raw data point\n                         * in the group.\n                         * - `dataGroup.length` is the amount of points in the group.\n                         *\n                         * @name dataGroup\n                         * @memberOf Point\n                         * @type {Object}\n                         *\n                         */\n                        point.dataGroup = series.groupMap[i];\n                    }\n                    if (point) { // #6279\n                        point.index = cursor; // For faster access in Point.update\n                        points[i] = point;\n                    }\n                }\n\n                // restore keys options (#6590)\n                series.options.keys = keys;\n\n                // Hide cropped-away points - this only runs when the number of points\n                // is above cropThreshold, or when swithching view from non-grouped\n                // data to grouped data (#637)\n                if (\n                    data &&\n                    (\n                        processedDataLength !== (dataLength = data.length) ||\n                        hasGroupedData\n                    )\n                ) {\n                    for (i = 0; i < dataLength; i++) {\n                        // when has grouped data, clear all points\n                        if (i === cropStart && !hasGroupedData) {\n                            i += processedDataLength;\n                        }\n                        if (data[i]) {\n                            data[i].destroyElements();\n                            data[i].plotX = undefined; // #1003\n                        }\n                    }\n                }\n\n                /**\n                 * Read only. An array containing the series' data point objects. To\n                 * modify the data, use {@link Highcharts.Series#setData} or {@link\n                 * Highcharts.Point#update}.\n                 *\n                 * @name data\n                 * @memberOf Highcharts.Series\n                 * @type {Array.<Highcharts.Point>}\n                 */\n                series.data = data;\n\n                /**\n                 * An array containing all currently visible point objects. In case of\n                 * cropping, the cropped-away points are not part of this array. The\n                 * `series.points` array starts at `series.cropStart` compared to\n                 * `series.data` and `series.options.data`. If however the series data\n                 * is grouped, these can't be correlated one to one. To\n                 * modify the data, use {@link Highcharts.Series#setData} or {@link\n                 * Highcharts.Point#update}.\n                 * @name point\n                 * @memberof Series\n                 * @type {Array.<Point>}\n                 */\n                series.points = points;\n            },\n\n            /**\n             * Calculate Y extremes for the visible data. The result is set as\n             * `dataMin` and `dataMax` on the Series item.\n             *\n             * @param  {Array.<Number>} [yData]\n             *         The data to inspect. Defaults to the current data within the\n             *         visible range.\n             *\n             */\n            getExtremes: function(yData) {\n                var xAxis = this.xAxis,\n                    yAxis = this.yAxis,\n                    xData = this.processedXData,\n                    yDataLength,\n                    activeYData = [],\n                    activeCounter = 0,\n                    // #2117, need to compensate for log X axis\n                    xExtremes = xAxis.getExtremes(),\n                    xMin = xExtremes.min,\n                    xMax = xExtremes.max,\n                    validValue,\n                    withinRange,\n                    x,\n                    y,\n                    i,\n                    j;\n\n                yData = yData || this.stackedYData || this.processedYData || [];\n                yDataLength = yData.length;\n\n                for (i = 0; i < yDataLength; i++) {\n\n                    x = xData[i];\n                    y = yData[i];\n\n                    // For points within the visible range, including the first point\n                    // outside the visible range, consider y extremes\n                    validValue =\n                        (isNumber(y, true) || isArray(y)) &&\n                        (!yAxis.positiveValuesOnly || (y.length || y > 0));\n                    withinRange =\n                        this.getExtremesFromAll ||\n                        this.options.getExtremesFromAll ||\n                        this.cropped ||\n                        ((xData[i] || x) >= xMin && (xData[i] || x) <= xMax);\n\n                    if (validValue && withinRange) {\n\n                        j = y.length;\n                        if (j) { // array, like ohlc or range data\n                            while (j--) {\n                                if (y[j] !== null) {\n                                    activeYData[activeCounter++] = y[j];\n                                }\n                            }\n                        } else {\n                            activeYData[activeCounter++] = y;\n                        }\n                    }\n                }\n\n                this.dataMin = arrayMin(activeYData);\n                this.dataMax = arrayMax(activeYData);\n            },\n\n            /**\n             * Translate data points from raw data values to chart specific positioning\n             * data needed later in the `drawPoints` and `drawGraph` functions. This\n             * function can be overridden in plugins and custom series type\n             * implementations.\n             */\n            translate: function() {\n                if (!this.processedXData) { // hidden series\n                    this.processData();\n                }\n                this.generatePoints();\n                var series = this,\n                    options = series.options,\n                    stacking = options.stacking,\n                    xAxis = series.xAxis,\n                    categories = xAxis.categories,\n                    yAxis = series.yAxis,\n                    points = series.points,\n                    dataLength = points.length,\n                    hasModifyValue = !!series.modifyValue,\n                    i,\n                    pointPlacement = options.pointPlacement,\n                    dynamicallyPlaced =\n                    pointPlacement === 'between' ||\n                    isNumber(pointPlacement),\n                    threshold = options.threshold,\n                    stackThreshold = options.startFromThreshold ? threshold : 0,\n                    plotX,\n                    plotY,\n                    lastPlotX,\n                    stackIndicator,\n                    closestPointRangePx = Number.MAX_VALUE;\n\n                // Point placement is relative to each series pointRange (#5889)\n                if (pointPlacement === 'between') {\n                    pointPlacement = 0.5;\n                }\n                if (isNumber(pointPlacement)) {\n                    pointPlacement *= pick(options.pointRange || xAxis.pointRange);\n                }\n\n                // Translate each point\n                for (i = 0; i < dataLength; i++) {\n                    var point = points[i],\n                        xValue = point.x,\n                        yValue = point.y,\n                        yBottom = point.low,\n                        stack = stacking && yAxis.stacks[(\n                            series.negStacks &&\n                            yValue < (stackThreshold ? 0 : threshold) ? '-' : ''\n                        ) + series.stackKey],\n                        pointStack,\n                        stackValues;\n\n                    // Discard disallowed y values for log axes (#3434)\n                    if (yAxis.positiveValuesOnly && yValue !== null && yValue <= 0) {\n                        point.isNull = true;\n                    }\n\n                    // Get the plotX translation\n                    point.plotX = plotX = correctFloat( // #5236\n                        Math.min(Math.max(-1e5, xAxis.translate(\n                            xValue,\n                            0,\n                            0,\n                            0,\n                            1,\n                            pointPlacement,\n                            this.type === 'flags'\n                        )), 1e5) // #3923\n                    );\n\n                    // Calculate the bottom y value for stacked series\n                    if (\n                        stacking &&\n                        series.visible &&\n                        !point.isNull &&\n                        stack &&\n                        stack[xValue]\n                    ) {\n                        stackIndicator = series.getStackIndicator(\n                            stackIndicator,\n                            xValue,\n                            series.index\n                        );\n                        pointStack = stack[xValue];\n                        stackValues = pointStack.points[stackIndicator.key];\n                        yBottom = stackValues[0];\n                        yValue = stackValues[1];\n\n                        if (\n                            yBottom === stackThreshold &&\n                            stackIndicator.key === stack[xValue].base\n                        ) {\n                            yBottom = pick(threshold, yAxis.min);\n                        }\n                        if (yAxis.positiveValuesOnly && yBottom <= 0) { // #1200, #1232\n                            yBottom = null;\n                        }\n\n                        point.total = point.stackTotal = pointStack.total;\n                        point.percentage =\n                            pointStack.total &&\n                            (point.y / pointStack.total * 100);\n                        point.stackY = yValue;\n\n                        // Place the stack label\n                        pointStack.setOffset(\n                            series.pointXOffset || 0,\n                            series.barW || 0\n                        );\n\n                    }\n\n                    // Set translated yBottom or remove it\n                    point.yBottom = defined(yBottom) ?\n                        yAxis.translate(yBottom, 0, 1, 0, 1) :\n                        null;\n\n                    // general hook, used for Highstock compare mode\n                    if (hasModifyValue) {\n                        yValue = series.modifyValue(yValue, point);\n                    }\n\n                    // Set the the plotY value, reset it for redraws\n                    point.plotY = plotY =\n                        (typeof yValue === 'number' && yValue !== Infinity) ?\n                        Math.min(Math.max(-1e5,\n                            yAxis.translate(yValue, 0, 1, 0, 1)), 1e5) : // #3201\n                        undefined;\n\n                    point.isInside =\n                        plotY !== undefined &&\n                        plotY >= 0 &&\n                        plotY <= yAxis.len && // #3519\n                        plotX >= 0 &&\n                        plotX <= xAxis.len;\n\n\n                    // Set client related positions for mouse tracking\n                    point.clientX = dynamicallyPlaced ?\n                        correctFloat(\n                            xAxis.translate(xValue, 0, 0, 0, 1, pointPlacement)\n                        ) :\n                        plotX; // #1514, #5383, #5518\n\n                    point.negative = point.y < (threshold || 0);\n\n                    // some API data\n                    point.category = categories && categories[point.x] !== undefined ?\n                        categories[point.x] : point.x;\n\n                    // Determine auto enabling of markers (#3635, #5099)\n                    if (!point.isNull) {\n                        if (lastPlotX !== undefined) {\n                            closestPointRangePx = Math.min(\n                                closestPointRangePx,\n                                Math.abs(plotX - lastPlotX)\n                            );\n                        }\n                        lastPlotX = plotX;\n                    }\n\n                    // Find point zone\n                    point.zone = this.zones.length && point.getZone();\n                }\n                series.closestPointRangePx = closestPointRangePx;\n            },\n\n            /**\n             * Return the series points with null points filtered out.\n             *\n             * @param  {Array.<Point>} [points]\n             *         The points to inspect, defaults to {@link Series.points}.\n             * @param  {Boolean} [insideOnly=false]\n             *         Whether to inspect only the points that are inside the visible\n             *         view.\n             *\n             * @return {Array.<Point>}\n             *         The valid points.\n             */\n            getValidPoints: function(points, insideOnly) {\n                var chart = this.chart;\n                // #3916, #5029, #5085\n                return grep(points || this.points || [], function isValidPoint(point) {\n                    if (insideOnly && !chart.isInsidePlot(\n                            point.plotX,\n                            point.plotY,\n                            chart.inverted\n                        )) {\n                        return false;\n                    }\n                    return !point.isNull;\n                });\n            },\n\n            /**\n             * Set the clipping for the series. For animated series it is called twice,\n             * first to initiate animating the clip then the second time without the\n             * animation to set the final clip.\n             *\n             * @private\n             */\n            setClip: function(animation) {\n                var chart = this.chart,\n                    options = this.options,\n                    renderer = chart.renderer,\n                    inverted = chart.inverted,\n                    seriesClipBox = this.clipBox,\n                    clipBox = seriesClipBox || chart.clipBox,\n                    sharedClipKey =\n                    this.sharedClipKey || [\n                        '_sharedClip',\n                        animation && animation.duration,\n                        animation && animation.easing,\n                        clipBox.height,\n                        options.xAxis,\n                        options.yAxis\n                    ].join(','), // #4526\n                    clipRect = chart[sharedClipKey],\n                    markerClipRect = chart[sharedClipKey + 'm'];\n\n                // If a clipping rectangle with the same properties is currently present\n                // in the chart, use that.\n                if (!clipRect) {\n\n                    // When animation is set, prepare the initial positions\n                    if (animation) {\n                        clipBox.width = 0;\n\n                        chart[sharedClipKey + 'm'] = markerClipRect = renderer.clipRect(-99, // include the width of the first marker\n                            inverted ? -chart.plotLeft : -chart.plotTop,\n                            99,\n                            inverted ? chart.chartWidth : chart.chartHeight\n                        );\n                    }\n                    chart[sharedClipKey] = clipRect = renderer.clipRect(clipBox);\n                    // Create hashmap for series indexes\n                    clipRect.count = {\n                        length: 0\n                    };\n\n                }\n                if (animation) {\n                    if (!clipRect.count[this.index]) {\n                        clipRect.count[this.index] = true;\n                        clipRect.count.length += 1;\n                    }\n                }\n\n                if (options.clip !== false) {\n                    this.group.clip(animation || seriesClipBox ? clipRect : chart.clipRect);\n                    this.markerGroup.clip(markerClipRect);\n                    this.sharedClipKey = sharedClipKey;\n                }\n\n                // Remove the shared clipping rectangle when all series are shown\n                if (!animation) {\n                    if (clipRect.count[this.index]) {\n                        delete clipRect.count[this.index];\n                        clipRect.count.length -= 1;\n                    }\n\n                    if (clipRect.count.length === 0 && sharedClipKey && chart[sharedClipKey]) {\n                        if (!seriesClipBox) {\n                            chart[sharedClipKey] = chart[sharedClipKey].destroy();\n                        }\n                        if (chart[sharedClipKey + 'm']) {\n                            chart[sharedClipKey + 'm'] = chart[sharedClipKey + 'm'].destroy();\n                        }\n                    }\n                }\n            },\n\n            /**\n             * Animate in the series. Called internally twice. First with the `init`\n             * parameter set to true, which sets up the initial state of the animation.\n             * Then when ready, it is called with the `init` parameter undefined, in\n             * order to perform the actual animation. After the second run, the function\n             * is removed.\n             *\n             * @param  {Boolean} init\n             *         Initialize the animation.\n             */\n            animate: function(init) {\n                var series = this,\n                    chart = series.chart,\n                    clipRect,\n                    animation = animObject(series.options.animation),\n                    sharedClipKey;\n\n                // Initialize the animation. Set up the clipping rectangle.\n                if (init) {\n\n                    series.setClip(animation);\n\n                    // Run the animation\n                } else {\n                    sharedClipKey = this.sharedClipKey;\n                    clipRect = chart[sharedClipKey];\n                    if (clipRect) {\n                        clipRect.animate({\n                            width: chart.plotSizeX\n                        }, animation);\n                    }\n                    if (chart[sharedClipKey + 'm']) {\n                        chart[sharedClipKey + 'm'].animate({\n                            width: chart.plotSizeX + 99\n                        }, animation);\n                    }\n\n                    // Delete this function to allow it only once\n                    series.animate = null;\n\n                }\n            },\n\n            /**\n             * This runs after animation to land on the final plot clipping.\n             *\n             * @private\n             */\n            afterAnimate: function() {\n                this.setClip();\n                fireEvent(this, 'afterAnimate');\n                this.finishedAnimating = true;\n            },\n\n            /**\n             * Draw the markers for line-like series types, and columns or other\n             * graphical representation for {@link Point} objects for other series\n             * types. The resulting element is typically stored as {@link\n             * Point.graphic}, and is created on the first call and updated and moved on\n             * subsequent calls.\n             */\n            drawPoints: function() {\n                var series = this,\n                    points = series.points,\n                    chart = series.chart,\n                    plotY,\n                    i,\n                    point,\n                    symbol,\n                    graphic,\n                    options = series.options,\n                    seriesMarkerOptions = options.marker,\n                    pointMarkerOptions,\n                    hasPointMarker,\n                    enabled,\n                    isInside,\n                    markerGroup = series[series.specialGroup] || series.markerGroup,\n                    xAxis = series.xAxis,\n                    markerAttribs,\n                    globallyEnabled = pick(\n                        seriesMarkerOptions.enabled,\n                        xAxis.isRadial ? true : null,\n                        // Use larger or equal as radius is null in bubbles (#6321)\n                        series.closestPointRangePx >= 2 * seriesMarkerOptions.radius\n                    );\n\n                if (seriesMarkerOptions.enabled !== false || series._hasPointMarkers) {\n\n                    for (i = 0; i < points.length; i++) {\n                        point = points[i];\n                        plotY = point.plotY;\n                        graphic = point.graphic;\n                        pointMarkerOptions = point.marker || {};\n                        hasPointMarker = !!point.marker;\n                        enabled = (globallyEnabled && pointMarkerOptions.enabled === undefined) || pointMarkerOptions.enabled;\n                        isInside = point.isInside;\n\n                        // only draw the point if y is defined\n                        if (enabled && isNumber(plotY) && point.y !== null) {\n\n                            // Shortcuts\n                            symbol = pick(pointMarkerOptions.symbol, series.symbol);\n                            point.hasImage = symbol.indexOf('url') === 0;\n\n                            markerAttribs = series.markerAttribs(\n                                point,\n                                point.selected && 'select'\n                            );\n\n                            if (graphic) { // update\n                                graphic[isInside ? 'show' : 'hide'](true) // Since the marker group isn't clipped, each individual marker must be toggled\n                                    .animate(markerAttribs);\n                            } else if (isInside && (markerAttribs.width > 0 || point.hasImage)) {\n\n                                /**\n                                 * The graphic representation of the point. Typically\n                                 * this is a simple shape, like a `rect` for column\n                                 * charts or `path` for line markers, but for some\n                                 * complex series types like boxplot or 3D charts, the\n                                 * graphic may be a `g` element containing other shapes.\n                                 * The graphic is generated the first time {@link\n                                 * Series#drawPoints} runs, and updated and moved on\n                                 * subsequent runs.\n                                 *\n                                 * @memberof Point\n                                 * @name graphic\n                                 * @type {SVGElement}\n                                 */\n                                point.graphic = graphic = chart.renderer.symbol(\n                                        symbol,\n                                        markerAttribs.x,\n                                        markerAttribs.y,\n                                        markerAttribs.width,\n                                        markerAttribs.height,\n                                        hasPointMarker ? pointMarkerOptions : seriesMarkerOptions\n                                    )\n                                    .add(markerGroup);\n                            }\n\n\n                            // Presentational attributes\n                            if (graphic) {\n                                graphic.attr(series.pointAttribs(point, point.selected && 'select'));\n                            }\n\n\n                            if (graphic) {\n                                graphic.addClass(point.getClassName(), true);\n                            }\n\n                        } else if (graphic) {\n                            point.graphic = graphic.destroy(); // #1269\n                        }\n                    }\n                }\n\n            },\n\n            /**\n             * Get non-presentational attributes for a point. Used internally for both\n             * styled mode and classic. Can be overridden for different series types.\n             *\n             * @see    Series#pointAttribs\n             *\n             * @param  {Point} point\n             *         The Point to inspect.\n             * @param  {String} [state]\n             *         The state, can be either `hover`, `select` or undefined.\n             *\n             * @return {SVGAttributes}\n             *         A hash containing those attributes that are not settable from\n             *         CSS.\n             */\n            markerAttribs: function(point, state) {\n                var seriesMarkerOptions = this.options.marker,\n                    seriesStateOptions,\n                    pointMarkerOptions = point.marker || {},\n                    pointStateOptions,\n                    radius = pick(\n                        pointMarkerOptions.radius,\n                        seriesMarkerOptions.radius\n                    ),\n                    attribs;\n\n                // Handle hover and select states\n                if (state) {\n                    seriesStateOptions = seriesMarkerOptions.states[state];\n                    pointStateOptions = pointMarkerOptions.states &&\n                        pointMarkerOptions.states[state];\n\n                    radius = pick(\n                        pointStateOptions && pointStateOptions.radius,\n                        seriesStateOptions && seriesStateOptions.radius,\n                        radius + (seriesStateOptions && seriesStateOptions.radiusPlus || 0)\n                    );\n                }\n\n                if (point.hasImage) {\n                    radius = 0; // and subsequently width and height is not set\n                }\n\n                attribs = {\n                    x: Math.floor(point.plotX) - radius, // Math.floor for #1843\n                    y: point.plotY - radius\n                };\n\n                if (radius) {\n                    attribs.width = attribs.height = 2 * radius;\n                }\n\n                return attribs;\n\n            },\n\n\n            /**\n             * Internal function to get presentational attributes for each point. Unlike\n             * {@link Series#markerAttribs}, this function should return those\n             * attributes that can also be set in CSS. In styled mode, `pointAttribs`\n             * won't be called.\n             *\n             * @param  {Point} point\n             *         The point instance to inspect.\n             * @param  {String} [state]\n             *         The point state, can be either `hover`, `select` or undefined for\n             *         normal state.\n             *\n             * @return {SVGAttributes}\n             *         The presentational attributes to be set on the point.\n             */\n            pointAttribs: function(point, state) {\n                var seriesMarkerOptions = this.options.marker,\n                    seriesStateOptions,\n                    pointOptions = point && point.options,\n                    pointMarkerOptions = (pointOptions && pointOptions.marker) || {},\n                    pointStateOptions,\n                    color = this.color,\n                    pointColorOption = pointOptions && pointOptions.color,\n                    pointColor = point && point.color,\n                    strokeWidth = pick(\n                        pointMarkerOptions.lineWidth,\n                        seriesMarkerOptions.lineWidth\n                    ),\n                    zoneColor = point && point.zone && point.zone.color,\n                    fill,\n                    stroke;\n\n                color = pointColorOption || zoneColor || pointColor || color;\n                fill = pointMarkerOptions.fillColor || seriesMarkerOptions.fillColor || color;\n                stroke = pointMarkerOptions.lineColor || seriesMarkerOptions.lineColor || color;\n\n                // Handle hover and select states\n                if (state) {\n                    seriesStateOptions = seriesMarkerOptions.states[state];\n                    pointStateOptions = (pointMarkerOptions.states && pointMarkerOptions.states[state]) || {};\n                    strokeWidth = pick(\n                        pointStateOptions.lineWidth,\n                        seriesStateOptions.lineWidth,\n                        strokeWidth + pick(\n                            pointStateOptions.lineWidthPlus,\n                            seriesStateOptions.lineWidthPlus,\n                            0\n                        )\n                    );\n                    fill = pointStateOptions.fillColor || seriesStateOptions.fillColor || fill;\n                    stroke = pointStateOptions.lineColor || seriesStateOptions.lineColor || stroke;\n                }\n\n                return {\n                    'stroke': stroke,\n                    'stroke-width': strokeWidth,\n                    'fill': fill\n                };\n            },\n\n            /**\n             * Clear DOM objects and free up memory.\n             *\n             * @private\n             */\n            destroy: function() {\n                var series = this,\n                    chart = series.chart,\n                    issue134 = /AppleWebKit\\/533/.test(win.navigator.userAgent),\n                    destroy,\n                    i,\n                    data = series.data || [],\n                    point,\n                    axis;\n\n                // add event hook\n                fireEvent(series, 'destroy');\n\n                // remove all events\n                removeEvent(series);\n\n                // erase from axes\n                each(series.axisTypes || [], function(AXIS) {\n                    axis = series[AXIS];\n                    if (axis && axis.series) {\n                        erase(axis.series, series);\n                        axis.isDirty = axis.forceRedraw = true;\n                    }\n                });\n\n                // remove legend items\n                if (series.legendItem) {\n                    series.chart.legend.destroyItem(series);\n                }\n\n                // destroy all points with their elements\n                i = data.length;\n                while (i--) {\n                    point = data[i];\n                    if (point && point.destroy) {\n                        point.destroy();\n                    }\n                }\n                series.points = null;\n\n                // Clear the animation timeout if we are destroying the series during initial animation\n                clearTimeout(series.animationTimeout);\n\n                // Destroy all SVGElements associated to the series\n                objectEach(series, function(val, prop) {\n                    if (val instanceof SVGElement && !val.survive) { // Survive provides a hook for not destroying\n\n                        // issue 134 workaround\n                        destroy = issue134 && prop === 'group' ?\n                            'hide' :\n                            'destroy';\n\n                        val[destroy]();\n                    }\n                });\n\n                // remove from hoverSeries\n                if (chart.hoverSeries === series) {\n                    chart.hoverSeries = null;\n                }\n                erase(chart.series, series);\n                chart.orderSeries();\n\n                // clear all members\n                objectEach(series, function(val, prop) {\n                    delete series[prop];\n                });\n            },\n\n            /**\n             * Get the graph path.\n             *\n             * @private\n             */\n            getGraphPath: function(points, nullsAsZeroes, connectCliffs) {\n                var series = this,\n                    options = series.options,\n                    step = options.step,\n                    reversed,\n                    graphPath = [],\n                    xMap = [],\n                    gap;\n\n                points = points || series.points;\n\n                // Bottom of a stack is reversed\n                reversed = points.reversed;\n                if (reversed) {\n                    points.reverse();\n                }\n                // Reverse the steps (#5004)\n                step = {\n                    right: 1,\n                    center: 2\n                }[step] || (step && 3);\n                if (step && reversed) {\n                    step = 4 - step;\n                }\n\n                // Remove invalid points, especially in spline (#5015)\n                if (options.connectNulls && !nullsAsZeroes && !connectCliffs) {\n                    points = this.getValidPoints(points);\n                }\n\n                // Build the line\n                each(points, function(point, i) {\n\n                    var plotX = point.plotX,\n                        plotY = point.plotY,\n                        lastPoint = points[i - 1],\n                        pathToPoint; // the path to this point from the previous\n\n                    if ((point.leftCliff || (lastPoint && lastPoint.rightCliff)) && !connectCliffs) {\n                        gap = true; // ... and continue\n                    }\n\n                    // Line series, nullsAsZeroes is not handled\n                    if (point.isNull && !defined(nullsAsZeroes) && i > 0) {\n                        gap = !options.connectNulls;\n\n                        // Area series, nullsAsZeroes is set\n                    } else if (point.isNull && !nullsAsZeroes) {\n                        gap = true;\n\n                    } else {\n\n                        if (i === 0 || gap) {\n                            pathToPoint = ['M', point.plotX, point.plotY];\n\n                        } else if (series.getPointSpline) { // generate the spline as defined in the SplineSeries object\n\n                            pathToPoint = series.getPointSpline(points, point, i);\n\n                        } else if (step) {\n\n                            if (step === 1) { // right\n                                pathToPoint = [\n                                    'L',\n                                    lastPoint.plotX,\n                                    plotY\n                                ];\n\n                            } else if (step === 2) { // center\n                                pathToPoint = [\n                                    'L',\n                                    (lastPoint.plotX + plotX) / 2,\n                                    lastPoint.plotY,\n                                    'L',\n                                    (lastPoint.plotX + plotX) / 2,\n                                    plotY\n                                ];\n\n                            } else {\n                                pathToPoint = [\n                                    'L',\n                                    plotX,\n                                    lastPoint.plotY\n                                ];\n                            }\n                            pathToPoint.push('L', plotX, plotY);\n\n                        } else {\n                            // normal line to next point\n                            pathToPoint = [\n                                'L',\n                                plotX,\n                                plotY\n                            ];\n                        }\n\n                        // Prepare for animation. When step is enabled, there are two path nodes for each x value.\n                        xMap.push(point.x);\n                        if (step) {\n                            xMap.push(point.x);\n                        }\n\n                        graphPath.push.apply(graphPath, pathToPoint);\n                        gap = false;\n                    }\n                });\n\n                graphPath.xMap = xMap;\n                series.graphPath = graphPath;\n\n                return graphPath;\n\n            },\n\n            /**\n             * Draw the graph. Called internally when rendering line-like series types.\n             * The first time it generates the `series.graph` item and optionally other\n             * series-wide items like `series.area` for area charts. On subsequent calls\n             * these items are updated with new positions and attributes.\n             */\n            drawGraph: function() {\n                var series = this,\n                    options = this.options,\n                    graphPath = (this.gappedPath || this.getGraphPath).call(this),\n                    props = [\n                        [\n                            'graph',\n                            'highcharts-graph',\n\n                            options.lineColor || this.color,\n                            options.dashStyle\n\n                        ]\n                    ];\n\n                // Add the zone properties if any\n                each(this.zones, function(zone, i) {\n                    props.push([\n                        'zone-graph-' + i,\n                        'highcharts-graph highcharts-zone-graph-' + i + ' ' + (zone.className || ''),\n\n                        zone.color || series.color,\n                        zone.dashStyle || options.dashStyle\n\n                    ]);\n                });\n\n                // Draw the graph\n                each(props, function(prop, i) {\n                    var graphKey = prop[0],\n                        graph = series[graphKey],\n                        attribs;\n\n                    if (graph) {\n                        graph.endX = graphPath.xMap;\n                        graph.animate({\n                            d: graphPath\n                        });\n\n                    } else if (graphPath.length) { // #1487\n\n                        series[graphKey] = series.chart.renderer.path(graphPath)\n                            .addClass(prop[1])\n                            .attr({\n                                zIndex: 1\n                            }) // #1069\n                            .add(series.group);\n\n\n                        attribs = {\n                            'stroke': prop[2],\n                            'stroke-width': options.lineWidth,\n                            'fill': (series.fillGraph && series.color) || 'none' // Polygon series use filled graph\n                        };\n\n                        if (prop[3]) {\n                            attribs.dashstyle = prop[3];\n                        } else if (options.linecap !== 'square') {\n                            attribs['stroke-linecap'] = attribs['stroke-linejoin'] = 'round';\n                        }\n\n                        graph = series[graphKey]\n                            .attr(attribs)\n                            .shadow((i < 2) && options.shadow); // add shadow to normal series (0) or to first zone (1) #3932\n\n                    }\n\n                    // Helpers for animation\n                    if (graph) {\n                        graph.startX = graphPath.xMap;\n                        //graph.shiftUnit = options.step ? 2 : 1;\n                        graph.isArea = graphPath.isArea; // For arearange animation\n                    }\n                });\n            },\n\n            /**\n             * Clip the graphs into zones for colors and styling.\n             *\n             * @private\n             */\n            applyZones: function() {\n                var series = this,\n                    chart = this.chart,\n                    renderer = chart.renderer,\n                    zones = this.zones,\n                    translatedFrom,\n                    translatedTo,\n                    clips = this.clips || [],\n                    clipAttr,\n                    graph = this.graph,\n                    area = this.area,\n                    chartSizeMax = Math.max(chart.chartWidth, chart.chartHeight),\n                    axis = this[(this.zoneAxis || 'y') + 'Axis'],\n                    extremes,\n                    reversed,\n                    inverted = chart.inverted,\n                    horiz,\n                    pxRange,\n                    pxPosMin,\n                    pxPosMax,\n                    ignoreZones = false;\n\n                if (zones.length && (graph || area) && axis && axis.min !== undefined) {\n                    reversed = axis.reversed;\n                    horiz = axis.horiz;\n                    // The use of the Color Threshold assumes there are no gaps\n                    // so it is safe to hide the original graph and area\n                    if (graph) {\n                        graph.hide();\n                    }\n                    if (area) {\n                        area.hide();\n                    }\n\n                    // Create the clips\n                    extremes = axis.getExtremes();\n                    each(zones, function(threshold, i) {\n\n                        translatedFrom = reversed ?\n                            (horiz ? chart.plotWidth : 0) :\n                            (horiz ? 0 : axis.toPixels(extremes.min));\n                        translatedFrom = Math.min(Math.max(pick(translatedTo, translatedFrom), 0), chartSizeMax);\n                        translatedTo = Math.min(Math.max(Math.round(axis.toPixels(pick(threshold.value, extremes.max), true)), 0), chartSizeMax);\n\n                        if (ignoreZones) {\n                            translatedFrom = translatedTo = axis.toPixels(extremes.max);\n                        }\n\n                        pxRange = Math.abs(translatedFrom - translatedTo);\n                        pxPosMin = Math.min(translatedFrom, translatedTo);\n                        pxPosMax = Math.max(translatedFrom, translatedTo);\n                        if (axis.isXAxis) {\n                            clipAttr = {\n                                x: inverted ? pxPosMax : pxPosMin,\n                                y: 0,\n                                width: pxRange,\n                                height: chartSizeMax\n                            };\n                            if (!horiz) {\n                                clipAttr.x = chart.plotHeight - clipAttr.x;\n                            }\n                        } else {\n                            clipAttr = {\n                                x: 0,\n                                y: inverted ? pxPosMax : pxPosMin,\n                                width: chartSizeMax,\n                                height: pxRange\n                            };\n                            if (horiz) {\n                                clipAttr.y = chart.plotWidth - clipAttr.y;\n                            }\n                        }\n\n\n                        /// VML SUPPPORT\n                        if (inverted && renderer.isVML) {\n                            if (axis.isXAxis) {\n                                clipAttr = {\n                                    x: 0,\n                                    y: reversed ? pxPosMin : pxPosMax,\n                                    height: clipAttr.width,\n                                    width: chart.chartWidth\n                                };\n                            } else {\n                                clipAttr = {\n                                    x: clipAttr.y - chart.plotLeft - chart.spacingBox.x,\n                                    y: 0,\n                                    width: clipAttr.height,\n                                    height: chart.chartHeight\n                                };\n                            }\n                        }\n                        /// END OF VML SUPPORT\n\n\n                        if (clips[i]) {\n                            clips[i].animate(clipAttr);\n                        } else {\n                            clips[i] = renderer.clipRect(clipAttr);\n\n                            if (graph) {\n                                series['zone-graph-' + i].clip(clips[i]);\n                            }\n\n                            if (area) {\n                                series['zone-area-' + i].clip(clips[i]);\n                            }\n                        }\n                        // if this zone extends out of the axis, ignore the others\n                        ignoreZones = threshold.value > extremes.max;\n                    });\n                    this.clips = clips;\n                }\n            },\n\n            /**\n             * Initialize and perform group inversion on series.group and\n             * series.markerGroup.\n             *\n             * @private\n             */\n            invertGroups: function(inverted) {\n                var series = this,\n                    chart = series.chart,\n                    remover;\n\n                function setInvert() {\n                    each(['group', 'markerGroup'], function(groupName) {\n                        if (series[groupName]) {\n\n                            // VML/HTML needs explicit attributes for flipping\n                            if (chart.renderer.isVML) {\n                                series[groupName].attr({\n                                    width: series.yAxis.len,\n                                    height: series.xAxis.len\n                                });\n                            }\n\n                            series[groupName].width = series.yAxis.len;\n                            series[groupName].height = series.xAxis.len;\n                            series[groupName].invert(inverted);\n                        }\n                    });\n                }\n\n                // Pie, go away (#1736)\n                if (!series.xAxis) {\n                    return;\n                }\n\n                // A fixed size is needed for inversion to work\n                remover = addEvent(chart, 'resize', setInvert);\n                addEvent(series, 'destroy', remover);\n\n                // Do it now\n                setInvert(inverted); // do it now\n\n                // On subsequent render and redraw, just do setInvert without setting up events again\n                series.invertGroups = setInvert;\n            },\n\n            /**\n             * General abstraction for creating plot groups like series.group,\n             * series.dataLabelsGroup and series.markerGroup. On subsequent calls, the\n             * group will only be adjusted to the updated plot size.\n             *\n             * @private\n             */\n            plotGroup: function(prop, name, visibility, zIndex, parent) {\n                var group = this[prop],\n                    isNew = !group;\n\n                // Generate it on first call\n                if (isNew) {\n                    this[prop] = group = this.chart.renderer.g()\n                        .attr({\n                            zIndex: zIndex || 0.1 // IE8 and pointer logic use this\n                        })\n                        .add(parent);\n\n                }\n\n                // Add the class names, and replace existing ones as response to\n                // Series.update (#6660)\n                group.addClass(\n                    (\n                        'highcharts-' + name +\n                        ' highcharts-series-' + this.index +\n                        ' highcharts-' + this.type + '-series ' +\n                        'highcharts-color-' + this.colorIndex + ' ' +\n                        (this.options.className || '')\n                    ),\n                    true\n                );\n\n                // Place it on first and subsequent (redraw) calls\n                group.attr({\n                    visibility: visibility\n                })[isNew ? 'attr' : 'animate'](\n                    this.getPlotBox()\n                );\n                return group;\n            },\n\n            /**\n             * Get the translation and scale for the plot area of this series.\n             */\n            getPlotBox: function() {\n                var chart = this.chart,\n                    xAxis = this.xAxis,\n                    yAxis = this.yAxis;\n\n                // Swap axes for inverted (#2339)\n                if (chart.inverted) {\n                    xAxis = yAxis;\n                    yAxis = this.xAxis;\n                }\n                return {\n                    translateX: xAxis ? xAxis.left : chart.plotLeft,\n                    translateY: yAxis ? yAxis.top : chart.plotTop,\n                    scaleX: 1, // #1623\n                    scaleY: 1\n                };\n            },\n\n            /**\n             * Render the graph and markers. Called internally when first rendering and\n             * later when redrawing the chart. This function can be extended in plugins,\n             * but normally shouldn't be called directly.\n             */\n            render: function() {\n                var series = this,\n                    chart = series.chart,\n                    group,\n                    options = series.options,\n                    // Animation doesn't work in IE8 quirks when the group div is\n                    // hidden, and looks bad in other oldIE\n                    animDuration = (!!series.animate &&\n                        chart.renderer.isSVG &&\n                        animObject(options.animation).duration\n                    ),\n                    visibility = series.visible ? 'inherit' : 'hidden', // #2597\n                    zIndex = options.zIndex,\n                    hasRendered = series.hasRendered,\n                    chartSeriesGroup = chart.seriesGroup,\n                    inverted = chart.inverted;\n\n                // the group\n                group = series.plotGroup(\n                    'group',\n                    'series',\n                    visibility,\n                    zIndex,\n                    chartSeriesGroup\n                );\n\n                series.markerGroup = series.plotGroup(\n                    'markerGroup',\n                    'markers',\n                    visibility,\n                    zIndex,\n                    chartSeriesGroup\n                );\n\n                // initiate the animation\n                if (animDuration) {\n                    series.animate(true);\n                }\n\n                // SVGRenderer needs to know this before drawing elements (#1089, #1795)\n                group.inverted = series.isCartesian ? inverted : false;\n\n                // draw the graph if any\n                if (series.drawGraph) {\n                    series.drawGraph();\n                    series.applyZones();\n                }\n\n                /*\t\teach(series.points, function (point) {\n                \t\t\tif (point.redraw) {\n                \t\t\t\tpoint.redraw();\n                \t\t\t}\n                \t\t});*/\n\n                // draw the data labels (inn pies they go before the points)\n                if (series.drawDataLabels) {\n                    series.drawDataLabels();\n                }\n\n                // draw the points\n                if (series.visible) {\n                    series.drawPoints();\n                }\n\n\n                // draw the mouse tracking area\n                if (\n                    series.drawTracker &&\n                    series.options.enableMouseTracking !== false\n                ) {\n                    series.drawTracker();\n                }\n\n                // Handle inverted series and tracker groups\n                series.invertGroups(inverted);\n\n                // Initial clipping, must be defined after inverting groups for VML.\n                // Applies to columns etc. (#3839).\n                if (options.clip !== false && !series.sharedClipKey && !hasRendered) {\n                    group.clip(chart.clipRect);\n                }\n\n                // Run the animation\n                if (animDuration) {\n                    series.animate();\n                }\n\n                // Call the afterAnimate function on animation complete (but don't\n                // overwrite the animation.complete option which should be available to\n                // the user).\n                if (!hasRendered) {\n                    series.animationTimeout = syncTimeout(function() {\n                        series.afterAnimate();\n                    }, animDuration);\n                }\n\n                series.isDirty = false; // means data is in accordance with what you see\n                // (See #322) series.isDirty = series.isDirtyData = false; // means\n                // data is in accordance with what you see\n                series.hasRendered = true;\n            },\n\n            /**\n             * Redraw the series. This function is called internally from `chart.redraw`\n             * and normally shouldn't be called directly.\n             *\n             * @private\n             */\n            redraw: function() {\n                var series = this,\n                    chart = series.chart,\n                    // cache it here as it is set to false in render, but used after\n                    wasDirty = series.isDirty || series.isDirtyData,\n                    group = series.group,\n                    xAxis = series.xAxis,\n                    yAxis = series.yAxis;\n\n                // reposition on resize\n                if (group) {\n                    if (chart.inverted) {\n                        group.attr({\n                            width: chart.plotWidth,\n                            height: chart.plotHeight\n                        });\n                    }\n\n                    group.animate({\n                        translateX: pick(xAxis && xAxis.left, chart.plotLeft),\n                        translateY: pick(yAxis && yAxis.top, chart.plotTop)\n                    });\n                }\n\n                series.translate();\n                series.render();\n                if (wasDirty) { // #3868, #3945\n                    delete this.kdTree;\n                }\n            },\n\n            kdAxisArray: ['clientX', 'plotY'],\n\n            searchPoint: function(e, compareX) {\n                var series = this,\n                    xAxis = series.xAxis,\n                    yAxis = series.yAxis,\n                    inverted = series.chart.inverted;\n\n                return this.searchKDTree({\n                    clientX: inverted ?\n                        xAxis.len - e.chartY + xAxis.pos : e.chartX - xAxis.pos,\n                    plotY: inverted ?\n                        yAxis.len - e.chartX + yAxis.pos : e.chartY - yAxis.pos\n                }, compareX);\n            },\n\n            /**\n             * Build the k-d-tree that is used by mouse and touch interaction to get the\n             * closest point. Line-like series typically have a one-dimensional tree\n             * where points are searched along the X axis, while scatter-like series\n             * typically search in two dimensions, X and Y.\n             *\n             * @private\n             */\n            buildKDTree: function() {\n\n                // Prevent multiple k-d-trees from being built simultaneously (#6235)\n                this.buildingKdTree = true;\n\n                var series = this,\n                    dimensions = series.options.findNearestPointBy.indexOf('y') > -1 ?\n                    2 : 1;\n\n                // Internal function\n                function _kdtree(points, depth, dimensions) {\n                    var axis,\n                        median,\n                        length = points && points.length;\n\n                    if (length) {\n\n                        // alternate between the axis\n                        axis = series.kdAxisArray[depth % dimensions];\n\n                        // sort point array\n                        points.sort(function(a, b) {\n                            return a[axis] - b[axis];\n                        });\n\n                        median = Math.floor(length / 2);\n\n                        // build and return nod\n                        return {\n                            point: points[median],\n                            left: _kdtree(\n                                points.slice(0, median), depth + 1, dimensions\n                            ),\n                            right: _kdtree(\n                                points.slice(median + 1), depth + 1, dimensions\n                            )\n                        };\n\n                    }\n                }\n\n                // Start the recursive build process with a clone of the points array\n                // and null points filtered out (#3873)\n                function startRecursive() {\n                    series.kdTree = _kdtree(\n                        series.getValidPoints(\n                            null,\n                            // For line-type series restrict to plot area, but\n                            // column-type series not (#3916, #4511)\n                            !series.directTouch\n                        ),\n                        dimensions,\n                        dimensions\n                    );\n                    series.buildingKdTree = false;\n                }\n                delete series.kdTree;\n\n                // For testing tooltips, don't build async\n                syncTimeout(startRecursive, series.options.kdNow ? 0 : 1);\n            },\n\n            searchKDTree: function(point, compareX) {\n                var series = this,\n                    kdX = this.kdAxisArray[0],\n                    kdY = this.kdAxisArray[1],\n                    kdComparer = compareX ? 'distX' : 'dist',\n                    kdDimensions = series.options.findNearestPointBy.indexOf('y') > -1 ?\n                    2 : 1;\n\n                // Set the one and two dimensional distance on the point object\n                function setDistance(p1, p2) {\n                    var x = (defined(p1[kdX]) && defined(p2[kdX])) ?\n                        Math.pow(p1[kdX] - p2[kdX], 2) :\n                        null,\n                        y = (defined(p1[kdY]) && defined(p2[kdY])) ?\n                        Math.pow(p1[kdY] - p2[kdY], 2) :\n                        null,\n                        r = (x || 0) + (y || 0);\n\n                    p2.dist = defined(r) ? Math.sqrt(r) : Number.MAX_VALUE;\n                    p2.distX = defined(x) ? Math.sqrt(x) : Number.MAX_VALUE;\n                }\n\n                function _search(search, tree, depth, dimensions) {\n                    var point = tree.point,\n                        axis = series.kdAxisArray[depth % dimensions],\n                        tdist,\n                        sideA,\n                        sideB,\n                        ret = point,\n                        nPoint1,\n                        nPoint2;\n\n                    setDistance(search, point);\n\n                    // Pick side based on distance to splitting point\n                    tdist = search[axis] - point[axis];\n                    sideA = tdist < 0 ? 'left' : 'right';\n                    sideB = tdist < 0 ? 'right' : 'left';\n\n                    // End of tree\n                    if (tree[sideA]) {\n                        nPoint1 = _search(search, tree[sideA], depth + 1, dimensions);\n\n                        ret = (nPoint1[kdComparer] < ret[kdComparer] ? nPoint1 : point);\n                    }\n                    if (tree[sideB]) {\n                        // compare distance to current best to splitting point to decide\n                        // wether to check side B or not\n                        if (Math.sqrt(tdist * tdist) < ret[kdComparer]) {\n                            nPoint2 = _search(\n                                search,\n                                tree[sideB],\n                                depth + 1,\n                                dimensions\n                            );\n                            ret = nPoint2[kdComparer] < ret[kdComparer] ?\n                                nPoint2 :\n                                ret;\n                        }\n                    }\n\n                    return ret;\n                }\n\n                if (!this.kdTree && !this.buildingKdTree) {\n                    this.buildKDTree();\n                }\n\n                if (this.kdTree) {\n                    return _search(point, this.kdTree, kdDimensions, kdDimensions);\n                }\n            }\n\n        }); // end Series prototype\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var Axis = H.Axis,\n            Chart = H.Chart,\n            correctFloat = H.correctFloat,\n            defined = H.defined,\n            destroyObjectProperties = H.destroyObjectProperties,\n            each = H.each,\n            format = H.format,\n            objectEach = H.objectEach,\n            pick = H.pick,\n            Series = H.Series;\n\n        /**\n         * The class for stacks. Each stack, on a specific X value and either negative\n         * or positive, has its own stack item.\n         *\n         * @class\n         */\n        H.StackItem = function(axis, options, isNegative, x, stackOption) {\n\n            var inverted = axis.chart.inverted;\n\n            this.axis = axis;\n\n            // Tells if the stack is negative\n            this.isNegative = isNegative;\n\n            // Save the options to be able to style the label\n            this.options = options;\n\n            // Save the x value to be able to position the label later\n            this.x = x;\n\n            // Initialize total value\n            this.total = null;\n\n            // This will keep each points' extremes stored by series.index and point\n            // index\n            this.points = {};\n\n            // Save the stack option on the series configuration object, and whether to\n            // treat it as percent\n            this.stack = stackOption;\n            this.leftCliff = 0;\n            this.rightCliff = 0;\n\n            // The align options and text align varies on whether the stack is negative\n            // and if the chart is inverted or not.\n            // First test the user supplied value, then use the dynamic.\n            this.alignOptions = {\n                align: options.align ||\n                    (inverted ? (isNegative ? 'left' : 'right') : 'center'),\n                verticalAlign: options.verticalAlign ||\n                    (inverted ? 'middle' : (isNegative ? 'bottom' : 'top')),\n                y: pick(options.y, inverted ? 4 : (isNegative ? 14 : -6)),\n                x: pick(options.x, inverted ? (isNegative ? -6 : 6) : 0)\n            };\n\n            this.textAlign = options.textAlign ||\n                (inverted ? (isNegative ? 'right' : 'left') : 'center');\n        };\n\n        H.StackItem.prototype = {\n            destroy: function() {\n                destroyObjectProperties(this, this.axis);\n            },\n\n            /**\n             * Renders the stack total label and adds it to the stack label group.\n             */\n            render: function(group) {\n                var options = this.options,\n                    formatOption = options.format,\n                    str = formatOption ?\n                    format(formatOption, this) :\n                    options.formatter.call(this); // format the text in the label\n\n                // Change the text to reflect the new total and set visibility to hidden\n                // in case the serie is hidden\n                if (this.label) {\n                    this.label.attr({\n                        text: str,\n                        visibility: 'hidden'\n                    });\n                    // Create new label\n                } else {\n                    this.label =\n                        this.axis.chart.renderer.text(str, null, null, options.useHTML)\n                        .css(options.style)\n                        .attr({\n                            align: this.textAlign,\n                            rotation: options.rotation,\n                            visibility: 'hidden' // hidden until setOffset is called\n                        })\n                        .add(group); // add to the labels-group\n                }\n            },\n\n            /**\n             * Sets the offset that the stack has from the x value and repositions the\n             * label.\n             */\n            setOffset: function(xOffset, xWidth) {\n                var stackItem = this,\n                    axis = stackItem.axis,\n                    chart = axis.chart,\n                    // stack value translated mapped to chart coordinates\n                    y = axis.translate(\n                        axis.usePercentage ? 100 : stackItem.total,\n                        0,\n                        0,\n                        0,\n                        1\n                    ),\n                    yZero = axis.translate(0), // stack origin\n                    h = Math.abs(y - yZero), // stack height\n                    x = chart.xAxis[0].translate(stackItem.x) + xOffset, // stack x position\n                    stackBox = stackItem.getStackBox(chart, stackItem, x, y, xWidth, h),\n                    label = stackItem.label,\n                    alignAttr;\n\n                if (label) {\n                    // Align the label to the box\n                    label.align(stackItem.alignOptions, null, stackBox);\n\n                    // Set visibility (#678)\n                    alignAttr = label.alignAttr;\n                    label[\n                        stackItem.options.crop === false || chart.isInsidePlot(\n                            alignAttr.x,\n                            alignAttr.y\n                        ) ? 'show' : 'hide'](true);\n                }\n            },\n            getStackBox: function(chart, stackItem, x, y, xWidth, h) {\n                var reversed = stackItem.axis.reversed,\n                    inverted = chart.inverted,\n                    plotHeight = chart.plotHeight,\n                    neg = (stackItem.isNegative && !reversed) ||\n                    (!stackItem.isNegative && reversed); // #4056\n\n                return { // this is the box for the complete stack\n                    x: inverted ? (neg ? y : y - h) : x,\n                    y: inverted ?\n                        plotHeight - x - xWidth :\n                        (neg ?\n                            (plotHeight - y - h) :\n                            plotHeight - y\n                        ),\n                    width: inverted ? h : xWidth,\n                    height: inverted ? xWidth : h\n                };\n            }\n        };\n\n        /**\n         * Generate stacks for each series and calculate stacks total values\n         */\n        Chart.prototype.getStacks = function() {\n            var chart = this;\n\n            // reset stacks for each yAxis\n            each(chart.yAxis, function(axis) {\n                if (axis.stacks && axis.hasVisibleSeries) {\n                    axis.oldStacks = axis.stacks;\n                }\n            });\n\n            each(chart.series, function(series) {\n                if (series.options.stacking && (series.visible === true ||\n                        chart.options.chart.ignoreHiddenSeries === false)) {\n                    series.stackKey = series.type + pick(series.options.stack, '');\n                }\n            });\n        };\n\n\n        // Stacking methods defined on the Axis prototype\n\n        /**\n         * Build the stacks from top down\n         */\n        Axis.prototype.buildStacks = function() {\n            var axisSeries = this.series,\n                reversedStacks = pick(this.options.reversedStacks, true),\n                len = axisSeries.length,\n                i;\n            if (!this.isXAxis) {\n                this.usePercentage = false;\n                i = len;\n                while (i--) {\n                    axisSeries[reversedStacks ? i : len - i - 1].setStackedPoints();\n                }\n\n                // Loop up again to compute percent stack\n                if (this.usePercentage) {\n                    for (i = 0; i < len; i++) {\n                        axisSeries[i].setPercentStacks();\n                    }\n                }\n            }\n        };\n\n        Axis.prototype.renderStackTotals = function() {\n            var axis = this,\n                chart = axis.chart,\n                renderer = chart.renderer,\n                stacks = axis.stacks,\n                stackTotalGroup = axis.stackTotalGroup;\n\n            // Create a separate group for the stack total labels\n            if (!stackTotalGroup) {\n                axis.stackTotalGroup = stackTotalGroup =\n                    renderer.g('stack-labels')\n                    .attr({\n                        visibility: 'visible',\n                        zIndex: 6\n                    })\n                    .add();\n            }\n\n            // plotLeft/Top will change when y axis gets wider so we need to translate\n            // the stackTotalGroup at every render call. See bug #506 and #516\n            stackTotalGroup.translate(chart.plotLeft, chart.plotTop);\n\n            // Render each stack total\n            objectEach(stacks, function(type) {\n                objectEach(type, function(stack) {\n                    stack.render(stackTotalGroup);\n                });\n            });\n        };\n\n        /**\n         * Set all the stacks to initial states and destroy unused ones.\n         */\n        Axis.prototype.resetStacks = function() {\n            var axis = this,\n                stacks = axis.stacks;\n            if (!axis.isXAxis) {\n                objectEach(stacks, function(type) {\n                    objectEach(type, function(stack, key) {\n                        // Clean up memory after point deletion (#1044, #4320)\n                        if (stack.touched < axis.stacksTouched) {\n                            stack.destroy();\n                            delete type[key];\n\n                            // Reset stacks\n                        } else {\n                            stack.total = null;\n                            stack.cum = null;\n                        }\n                    });\n                });\n            }\n        };\n\n        Axis.prototype.cleanStacks = function() {\n            var stacks;\n\n            if (!this.isXAxis) {\n                if (this.oldStacks) {\n                    stacks = this.stacks = this.oldStacks;\n                }\n\n                // reset stacks\n                objectEach(stacks, function(type) {\n                    objectEach(type, function(stack) {\n                        stack.cum = stack.total;\n                    });\n                });\n            }\n        };\n\n\n        // Stacking methods defnied for Series prototype\n\n        /**\n         * Adds series' points value to corresponding stack\n         */\n        Series.prototype.setStackedPoints = function() {\n            if (!this.options.stacking || (this.visible !== true &&\n                    this.chart.options.chart.ignoreHiddenSeries !== false)) {\n                return;\n            }\n\n            var series = this,\n                xData = series.processedXData,\n                yData = series.processedYData,\n                stackedYData = [],\n                yDataLength = yData.length,\n                seriesOptions = series.options,\n                threshold = seriesOptions.threshold,\n                stackThreshold = seriesOptions.startFromThreshold ? threshold : 0,\n                stackOption = seriesOptions.stack,\n                stacking = seriesOptions.stacking,\n                stackKey = series.stackKey,\n                negKey = '-' + stackKey,\n                negStacks = series.negStacks,\n                yAxis = series.yAxis,\n                stacks = yAxis.stacks,\n                oldStacks = yAxis.oldStacks,\n                stackIndicator,\n                isNegative,\n                stack,\n                other,\n                key,\n                pointKey,\n                i,\n                x,\n                y;\n\n\n            yAxis.stacksTouched += 1;\n\n            // loop over the non-null y values and read them into a local array\n            for (i = 0; i < yDataLength; i++) {\n                x = xData[i];\n                y = yData[i];\n                stackIndicator = series.getStackIndicator(\n                    stackIndicator,\n                    x,\n                    series.index\n                );\n                pointKey = stackIndicator.key;\n                // Read stacked values into a stack based on the x value,\n                // the sign of y and the stack key. Stacking is also handled for null\n                // values (#739)\n                isNegative = negStacks && y < (stackThreshold ? 0 : threshold);\n                key = isNegative ? negKey : stackKey;\n\n                // Create empty object for this stack if it doesn't exist yet\n                if (!stacks[key]) {\n                    stacks[key] = {};\n                }\n\n                // Initialize StackItem for this x\n                if (!stacks[key][x]) {\n                    if (oldStacks[key] && oldStacks[key][x]) {\n                        stacks[key][x] = oldStacks[key][x];\n                        stacks[key][x].total = null;\n                    } else {\n                        stacks[key][x] = new H.StackItem(\n                            yAxis,\n                            yAxis.options.stackLabels,\n                            isNegative,\n                            x,\n                            stackOption\n                        );\n                    }\n                }\n\n                // If the StackItem doesn't exist, create it first\n                stack = stacks[key][x];\n                if (y !== null) {\n                    stack.points[pointKey] = stack.points[series.index] = [pick(stack.cum, stackThreshold)];\n\n                    // Record the base of the stack\n                    if (!defined(stack.cum)) {\n                        stack.base = pointKey;\n                    }\n                    stack.touched = yAxis.stacksTouched;\n\n\n                    // In area charts, if there are multiple points on the same X value,\n                    // let the area fill the full span of those points\n                    if (stackIndicator.index > 0 && series.singleStacks === false) {\n                        stack.points[pointKey][0] =\n                            stack.points[series.index + ',' + x + ',0'][0];\n                    }\n                }\n\n                // Add value to the stack total\n                if (stacking === 'percent') {\n\n                    // Percent stacked column, totals are the same for the positive and\n                    // negative stacks\n                    other = isNegative ? stackKey : negKey;\n                    if (negStacks && stacks[other] && stacks[other][x]) {\n                        other = stacks[other][x];\n                        stack.total = other.total =\n                            Math.max(other.total, stack.total) + Math.abs(y) || 0;\n\n                        // Percent stacked areas\n                    } else {\n                        stack.total = correctFloat(stack.total + (Math.abs(y) || 0));\n                    }\n                } else {\n                    stack.total = correctFloat(stack.total + (y || 0));\n                }\n\n                stack.cum = pick(stack.cum, stackThreshold) + (y || 0);\n\n                if (y !== null) {\n                    stack.points[pointKey].push(stack.cum);\n                    stackedYData[i] = stack.cum;\n                }\n\n            }\n\n            if (stacking === 'percent') {\n                yAxis.usePercentage = true;\n            }\n\n            this.stackedYData = stackedYData; // To be used in getExtremes\n\n            // Reset old stacks\n            yAxis.oldStacks = {};\n        };\n\n        /**\n         * Iterate over all stacks and compute the absolute values to percent\n         */\n        Series.prototype.setPercentStacks = function() {\n            var series = this,\n                stackKey = series.stackKey,\n                stacks = series.yAxis.stacks,\n                processedXData = series.processedXData,\n                stackIndicator;\n\n            each([stackKey, '-' + stackKey], function(key) {\n                var i = processedXData.length,\n                    x,\n                    stack,\n                    pointExtremes,\n                    totalFactor;\n\n                while (i--) {\n                    x = processedXData[i];\n                    stackIndicator = series.getStackIndicator(\n                        stackIndicator,\n                        x,\n                        series.index,\n                        key\n                    );\n                    stack = stacks[key] && stacks[key][x];\n                    pointExtremes = stack && stack.points[stackIndicator.key];\n                    if (pointExtremes) {\n                        totalFactor = stack.total ? 100 / stack.total : 0;\n                        // Y bottom value\n                        pointExtremes[0] = correctFloat(pointExtremes[0] * totalFactor);\n                        // Y value\n                        pointExtremes[1] = correctFloat(pointExtremes[1] * totalFactor);\n                        series.stackedYData[i] = pointExtremes[1];\n                    }\n                }\n            });\n        };\n\n        /**\n         * Get stack indicator, according to it's x-value, to determine points with the\n         * same x-value\n         */\n        Series.prototype.getStackIndicator = function(stackIndicator, x, index, key) {\n            // Update stack indicator, when:\n            // first point in a stack || x changed || stack type (negative vs positive)\n            // changed:\n            if (!defined(stackIndicator) || stackIndicator.x !== x ||\n                (key && stackIndicator.key !== key)) {\n                stackIndicator = {\n                    x: x,\n                    index: 0,\n                    key: key\n                };\n            } else {\n                stackIndicator.index++;\n            }\n\n            stackIndicator.key = [index, x, stackIndicator.index].join(',');\n\n            return stackIndicator;\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            animate = H.animate,\n            Axis = H.Axis,\n            Chart = H.Chart,\n            createElement = H.createElement,\n            css = H.css,\n            defined = H.defined,\n            each = H.each,\n            erase = H.erase,\n            extend = H.extend,\n            fireEvent = H.fireEvent,\n            inArray = H.inArray,\n            isNumber = H.isNumber,\n            isObject = H.isObject,\n            isArray = H.isArray,\n            merge = H.merge,\n            objectEach = H.objectEach,\n            pick = H.pick,\n            Point = H.Point,\n            Series = H.Series,\n            seriesTypes = H.seriesTypes,\n            setAnimation = H.setAnimation,\n            splat = H.splat;\n\n        // Extend the Chart prototype for dynamic methods\n        extend(Chart.prototype, /** @lends Highcharts.Chart.prototype */ {\n\n            /**\n             * Add a series to the chart after render time. Note that this method should\n             * never be used when adding data synchronously at chart render time, as it\n             * adds expense to the calculations and rendering. When adding data at the\n             * same time as the chart is initialized, add the series as a configuration\n             * option instead. With multiple axes, the `offset` is dynamically adjusted.\n             *\n             * @param  {SeriesOptions} options\n             *         The config options for the series.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after adding.\n             * @param  {AnimationOptions} animation\n             *         Whether to apply animation, and optionally animation\n             *         configuration.\n             *\n             * @return {Highcharts.Series}\n             *         The newly created series object.\n             *\n             * @sample highcharts/members/chart-addseries/\n             *         Add a series from a button\n             * @sample stock/members/chart-addseries/\n             *         Add a series in Highstock\n             */\n            addSeries: function(options, redraw, animation) {\n                var series,\n                    chart = this;\n\n                if (options) {\n                    redraw = pick(redraw, true); // defaults to true\n\n                    fireEvent(chart, 'addSeries', {\n                        options: options\n                    }, function() {\n                        series = chart.initSeries(options);\n\n                        chart.isDirtyLegend = true; // the series array is out of sync with the display\n                        chart.linkSeries();\n                        if (redraw) {\n                            chart.redraw(animation);\n                        }\n                    });\n                }\n\n                return series;\n            },\n\n            /**\n             * Add an axis to the chart after render time. Note that this method should\n             * never be used when adding data synchronously at chart render time, as it\n             * adds expense to the calculations and rendering. When adding data at the\n             * same time as the chart is initialized, add the axis as a configuration\n             * option instead.\n             * @param  {AxisOptions} options\n             *         The axis options.\n             * @param  {Boolean} [isX=false]\n             *         Whether it is an X axis or a value axis.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after adding.\n             * @param  {AnimationOptions} [animation=true]\n             *         Whether and how to apply animation in the redraw.\n             *\n             * @sample highcharts/members/chart-addaxis/ Add and remove axes\n             *\n             * @return {Axis}\n             *         The newly generated Axis object.\n             */\n            addAxis: function(options, isX, redraw, animation) {\n                var key = isX ? 'xAxis' : 'yAxis',\n                    chartOptions = this.options,\n                    userOptions = merge(options, {\n                        index: this[key].length,\n                        isX: isX\n                    }),\n                    axis;\n\n                axis = new Axis(this, userOptions);\n\n                // Push the new axis options to the chart options\n                chartOptions[key] = splat(chartOptions[key] || {});\n                chartOptions[key].push(userOptions);\n\n                if (pick(redraw, true)) {\n                    this.redraw(animation);\n                }\n\n                return axis;\n            },\n\n            /**\n             * Dim the chart and show a loading text or symbol. Options for the loading\n             * screen are defined in {@link\n             * https://api.highcharts.com/highcharts/loading|the loading options}.\n             *\n             * @param  {String} str\n             *         An optional text to show in the loading label instead of the\n             *         default one. The default text is set in {@link\n             *         http://api.highcharts.com/highcharts/lang.loading|lang.loading}.\n             *\n             * @sample highcharts/members/chart-hideloading/\n             *         Show and hide loading from a button\n             * @sample highcharts/members/chart-showloading/\n             *         Apply different text labels\n             * @sample stock/members/chart-show-hide-loading/\n             *         Toggle loading in Highstock\n             */\n            showLoading: function(str) {\n                var chart = this,\n                    options = chart.options,\n                    loadingDiv = chart.loadingDiv,\n                    loadingOptions = options.loading,\n                    setLoadingSize = function() {\n                        if (loadingDiv) {\n                            css(loadingDiv, {\n                                left: chart.plotLeft + 'px',\n                                top: chart.plotTop + 'px',\n                                width: chart.plotWidth + 'px',\n                                height: chart.plotHeight + 'px'\n                            });\n                        }\n                    };\n\n                // create the layer at the first call\n                if (!loadingDiv) {\n                    chart.loadingDiv = loadingDiv = createElement('div', {\n                        className: 'highcharts-loading highcharts-loading-hidden'\n                    }, null, chart.container);\n\n                    chart.loadingSpan = createElement(\n                        'span', {\n                            className: 'highcharts-loading-inner'\n                        },\n                        null,\n                        loadingDiv\n                    );\n                    addEvent(chart, 'redraw', setLoadingSize); // #1080\n                }\n\n                loadingDiv.className = 'highcharts-loading';\n\n                // Update text\n                chart.loadingSpan.innerHTML = str || options.lang.loading;\n\n\n                // Update visuals\n                css(loadingDiv, extend(loadingOptions.style, {\n                    zIndex: 10\n                }));\n                css(chart.loadingSpan, loadingOptions.labelStyle);\n\n                // Show it\n                if (!chart.loadingShown) {\n                    css(loadingDiv, {\n                        opacity: 0,\n                        display: ''\n                    });\n                    animate(loadingDiv, {\n                        opacity: loadingOptions.style.opacity || 0.5\n                    }, {\n                        duration: loadingOptions.showDuration || 0\n                    });\n                }\n\n\n                chart.loadingShown = true;\n                setLoadingSize();\n            },\n\n            /**\n             * Hide the loading layer.\n             *\n             * @see    Highcharts.Chart#showLoading\n             * @sample highcharts/members/chart-hideloading/\n             *         Show and hide loading from a button\n             * @sample stock/members/chart-show-hide-loading/\n             *         Toggle loading in Highstock\n             */\n            hideLoading: function() {\n                var options = this.options,\n                    loadingDiv = this.loadingDiv;\n\n                if (loadingDiv) {\n                    loadingDiv.className = 'highcharts-loading highcharts-loading-hidden';\n\n                    animate(loadingDiv, {\n                        opacity: 0\n                    }, {\n                        duration: options.loading.hideDuration || 100,\n                        complete: function() {\n                            css(loadingDiv, {\n                                display: 'none'\n                            });\n                        }\n                    });\n\n                }\n                this.loadingShown = false;\n            },\n\n            /**\n             * These properties cause isDirtyBox to be set to true when updating. Can be extended from plugins.\n             */\n            propsRequireDirtyBox: ['backgroundColor', 'borderColor', 'borderWidth', 'margin', 'marginTop', 'marginRight',\n                'marginBottom', 'marginLeft', 'spacing', 'spacingTop', 'spacingRight', 'spacingBottom', 'spacingLeft',\n                'borderRadius', 'plotBackgroundColor', 'plotBackgroundImage', 'plotBorderColor', 'plotBorderWidth',\n                'plotShadow', 'shadow'\n            ],\n\n            /**\n             * These properties cause all series to be updated when updating. Can be\n             * extended from plugins.\n             */\n            propsRequireUpdateSeries: ['chart.inverted', 'chart.polar',\n                'chart.ignoreHiddenSeries', 'chart.type', 'colors', 'plotOptions',\n                'tooltip'\n            ],\n\n            /**\n             * A generic function to update any element of the chart. Elements can be\n             * enabled and disabled, moved, re-styled, re-formatted etc.\n             *\n             * A special case is configuration objects that take arrays, for example\n             * {@link https://api.highcharts.com/highcharts/xAxis|xAxis},\n             * {@link https://api.highcharts.com/highcharts/yAxis|yAxis} or\n             * {@link https://api.highcharts.com/highcharts/series|series}. For these\n             * collections, an `id` option is used to map the new option set to an\n             * existing object. If an existing object of the same id is not found, the\n             * corresponding item is updated. So for example, running `chart.update`\n             * with a series item without an id, will cause the existing chart's series\n             * with the same index in the series array to be updated. When the\n             * `oneToOne` parameter is true, `chart.update` will also take care of\n             * adding and removing items from the collection. Read more under the\n             * parameter description below.\n             *\n             * See also the {@link https://api.highcharts.com/highcharts/responsive|\n             * responsive option set}. Switching between `responsive.rules` basically\n             * runs `chart.update` under the hood.\n             *\n             * @param  {Options} options\n             *         A configuration object for the new chart options.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart.\n             * @param  {Boolean} [oneToOne=false]\n             *         When `true`, the `series`, `xAxis` and `yAxis` collections will\n             *         be updated one to one, and items will be either added or removed\n             *         to match the new updated options. For example, if the chart has\n             *         two series and we call `chart.update` with a configuration\n             *         containing three series, one will be added. If we call\n             *         `chart.update` with one series, one will be removed. Setting an\n             *         empty `series` array will remove all series, but leaving out the\n             *         `series` property will leave all series untouched. If the series\n             *         have id's, the new series options will be matched by id, and the\n             *         remaining ones removed.\n             *\n             * @sample highcharts/members/chart-update/\n             *         Update chart geometry\n             */\n            update: function(options, redraw, oneToOne) {\n                var chart = this,\n                    adders = {\n                        credits: 'addCredits',\n                        title: 'setTitle',\n                        subtitle: 'setSubtitle'\n                    },\n                    optionsChart = options.chart,\n                    updateAllAxes,\n                    updateAllSeries,\n                    newWidth,\n                    newHeight,\n                    itemsForRemoval = [];\n\n                // If the top-level chart option is present, some special updates are required\n                if (optionsChart) {\n                    merge(true, chart.options.chart, optionsChart);\n\n                    // Setter function\n                    if ('className' in optionsChart) {\n                        chart.setClassName(optionsChart.className);\n                    }\n\n                    if ('inverted' in optionsChart || 'polar' in optionsChart) {\n                        // Parse options.chart.inverted and options.chart.polar together\n                        // with the available series.\n                        chart.propFromSeries();\n                        updateAllAxes = true;\n                    }\n\n                    if ('alignTicks' in optionsChart) { // #6452\n                        updateAllAxes = true;\n                    }\n\n                    objectEach(optionsChart, function(val, key) {\n                        if (inArray('chart.' + key, chart.propsRequireUpdateSeries) !== -1) {\n                            updateAllSeries = true;\n                        }\n                        // Only dirty box\n                        if (inArray(key, chart.propsRequireDirtyBox) !== -1) {\n                            chart.isDirtyBox = true;\n                        }\n                    });\n\n\n                    if ('style' in optionsChart) {\n                        chart.renderer.setStyle(optionsChart.style);\n                    }\n\n                }\n\n                // Moved up, because tooltip needs updated plotOptions (#6218)\n\n                if (options.colors) {\n                    this.options.colors = options.colors;\n                }\n\n\n                if (options.plotOptions) {\n                    merge(true, this.options.plotOptions, options.plotOptions);\n                }\n\n                // Some option stuctures correspond one-to-one to chart objects that\n                // have update methods, for example\n                // options.credits => chart.credits\n                // options.legend => chart.legend\n                // options.title => chart.title\n                // options.tooltip => chart.tooltip\n                // options.subtitle => chart.subtitle\n                // options.mapNavigation => chart.mapNavigation\n                // options.navigator => chart.navigator\n                // options.scrollbar => chart.scrollbar\n                objectEach(options, function(val, key) {\n                    if (chart[key] && typeof chart[key].update === 'function') {\n                        chart[key].update(val, false);\n\n                        // If a one-to-one object does not exist, look for an adder function\n                    } else if (typeof chart[adders[key]] === 'function') {\n                        chart[adders[key]](val);\n                    }\n\n                    if (\n                        key !== 'chart' &&\n                        inArray(key, chart.propsRequireUpdateSeries) !== -1\n                    ) {\n                        updateAllSeries = true;\n                    }\n                });\n\n                // Setters for collections. For axes and series, each item is referred\n                // by an id. If the id is not found, it defaults to the corresponding\n                // item in the collection, so setting one series without an id, will\n                // update the first series in the chart. Setting two series without\n                // an id will update the first and the second respectively (#6019)\n                // chart.update and responsive.\n                each([\n                    'xAxis',\n                    'yAxis',\n                    'zAxis',\n                    'series',\n                    'colorAxis',\n                    'pane'\n                ], function(coll) {\n                    if (options[coll]) {\n                        each(splat(options[coll]), function(newOptions, i) {\n                            var item = (\n                                defined(newOptions.id) &&\n                                chart.get(newOptions.id)\n                            ) || chart[coll][i];\n                            if (item && item.coll === coll) {\n                                item.update(newOptions, false);\n\n                                if (oneToOne) {\n                                    item.touched = true;\n                                }\n                            }\n\n                            // If oneToOne and no matching item is found, add one\n                            if (!item && oneToOne) {\n                                if (coll === 'series') {\n                                    chart.addSeries(newOptions, false)\n                                        .touched = true;\n                                } else if (coll === 'xAxis' || coll === 'yAxis') {\n                                    chart.addAxis(newOptions, coll === 'xAxis', false)\n                                        .touched = true;\n                                }\n                            }\n\n                        });\n\n                        // Add items for removal\n                        if (oneToOne) {\n                            each(chart[coll], function(item) {\n                                if (!item.touched) {\n                                    itemsForRemoval.push(item);\n                                } else {\n                                    delete item.touched;\n                                }\n                            });\n                        }\n\n\n                    }\n                });\n\n                each(itemsForRemoval, function(item) {\n                    item.remove(false);\n                });\n\n                if (updateAllAxes) {\n                    each(chart.axes, function(axis) {\n                        axis.update({}, false);\n                    });\n                }\n\n                // Certain options require the whole series structure to be thrown away\n                // and rebuilt\n                if (updateAllSeries) {\n                    each(chart.series, function(series) {\n                        series.update({}, false);\n                    });\n                }\n\n                // For loading, just update the options, do not redraw\n                if (options.loading) {\n                    merge(true, chart.options.loading, options.loading);\n                }\n\n                // Update size. Redraw is forced.\n                newWidth = optionsChart && optionsChart.width;\n                newHeight = optionsChart && optionsChart.height;\n                if ((isNumber(newWidth) && newWidth !== chart.chartWidth) ||\n                    (isNumber(newHeight) && newHeight !== chart.chartHeight)) {\n                    chart.setSize(newWidth, newHeight);\n                } else if (pick(redraw, true)) {\n                    chart.redraw();\n                }\n            },\n\n            /**\n             * Shortcut to set the subtitle options. This can also be done from {@link\n             * Chart#update} or {@link Chart#setTitle}.\n             *\n             * @param  {SubtitleOptions} options\n             *         New subtitle options. The subtitle text itself is set by the\n             *         `options.text` property.\n             */\n            setSubtitle: function(options) {\n                this.setTitle(undefined, options);\n            }\n\n\n        });\n\n        // extend the Point prototype for dynamic methods\n        extend(Point.prototype, /** @lends Highcharts.Point.prototype */ {\n            /**\n             * Update point with new options (typically x/y data) and optionally redraw\n             * the series.\n             *\n             * @param  {Object} options\n             *         The point options. Point options are handled as described under\n             *         the `series<type>.data` item for each series type. For example\n             *         for a line series, if options is a single number, the point will\n             *         be given that number as the main y value. If it is an array, it\n             *         will be interpreted as x and y values respectively. If it is an\n             *         object, advanced options are applied.\n             * @param  {Boolean} [redraw=true]\n             *          Whether to redraw the chart after the point is updated. If doing\n             *          more operations on the chart, it is best practice to set\n             *          `redraw` to false and call `chart.redraw()` after.\n             * @param  {AnimationOptions} [animation=true]\n             *         Whether to apply animation, and optionally animation\n             *         configuration.\n             *\n             * @sample highcharts/members/point-update-column/\n             *         Update column value\n             * @sample highcharts/members/point-update-pie/\n             *         Update pie slice\n             * @sample maps/members/point-update/\n             *         Update map area value in Highmaps\n             */\n            update: function(options, redraw, animation, runEvent) {\n                var point = this,\n                    series = point.series,\n                    graphic = point.graphic,\n                    i,\n                    chart = series.chart,\n                    seriesOptions = series.options;\n\n                redraw = pick(redraw, true);\n\n                function update() {\n\n                    point.applyOptions(options);\n\n                    // Update visuals\n                    if (point.y === null && graphic) { // #4146\n                        point.graphic = graphic.destroy();\n                    }\n                    if (isObject(options, true)) {\n                        // Destroy so we can get new elements\n                        if (graphic && graphic.element) {\n                            // \"null\" is also a valid symbol\n                            if (options && options.marker && options.marker.symbol !== undefined) {\n                                point.graphic = graphic.destroy();\n                            }\n                        }\n                        if (options && options.dataLabels && point.dataLabel) { // #2468\n                            point.dataLabel = point.dataLabel.destroy();\n                        }\n                    }\n\n                    // record changes in the parallel arrays\n                    i = point.index;\n                    series.updateParallelArrays(point, i);\n\n                    // Record the options to options.data. If the old or the new config\n                    // is an object, use point options, otherwise use raw options\n                    // (#4701, #4916).\n                    seriesOptions.data[i] = (\n                            isObject(seriesOptions.data[i], true) ||\n                            isObject(options, true)\n                        ) ?\n                        point.options :\n                        options;\n\n                    // redraw\n                    series.isDirty = series.isDirtyData = true;\n                    if (!series.fixedBox && series.hasCartesianSeries) { // #1906, #2320\n                        chart.isDirtyBox = true;\n                    }\n\n                    if (seriesOptions.legendType === 'point') { // #1831, #1885\n                        chart.isDirtyLegend = true;\n                    }\n                    if (redraw) {\n                        chart.redraw(animation);\n                    }\n                }\n\n                // Fire the event with a default handler of doing the update\n                if (runEvent === false) { // When called from setData\n                    update();\n                } else {\n                    point.firePointEvent('update', {\n                        options: options\n                    }, update);\n                }\n            },\n\n            /**\n             * Remove a point and optionally redraw the series and if necessary the axes\n             * @param  {Boolean} redraw\n             *         Whether to redraw the chart or wait for an explicit call. When\n             *         doing more operations on the chart, for example running\n             *         `point.remove()` in a loop, it is best practice to set `redraw`\n             *         to false and call `chart.redraw()` after.\n             * @param  {AnimationOptions} [animation=false]\n             *         Whether to apply animation, and optionally animation\n             *         configuration.\n             *\n             * @sample highcharts/plotoptions/series-point-events-remove/\n             *         Remove point and confirm\n             * @sample highcharts/members/point-remove/\n             *         Remove pie slice\n             * @sample maps/members/point-remove/\n             *         Remove selected points in Highmaps\n             */\n            remove: function(redraw, animation) {\n                this.series.removePoint(inArray(this, this.series.data), redraw, animation);\n            }\n        });\n\n        // Extend the series prototype for dynamic methods\n        extend(Series.prototype, /** @lends Series.prototype */ {\n            /**\n             * Add a point to the series after render time. The point can be added at\n             * the end, or by giving it an X value, to the start or in the middle of the\n             * series.\n             *\n             * @param  {Number|Array|Object} options\n             *         The point options. If options is a single number, a point with\n             *         that y value is appended to the series.If it is an array, it will\n             *         be interpreted as x and y values respectively. If it is an\n             *         object, advanced options as outlined under `series.data` are\n             *         applied.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after the point is added. When adding\n             *         more than one point, it is highly recommended that the redraw\n             *         option be set to false, and instead {@link Chart#redraw}\n             *         is explicitly called after the adding of points is finished.\n             *         Otherwise, the chart will redraw after adding each point.\n             * @param  {Boolean} [shift=false]\n             *         If true, a point is shifted off the start of the series as one is\n             *         appended to the end.\n             * @param  {AnimationOptions} [animation]\n             *         Whether to apply animation, and optionally animation\n             *         configuration.\n             *\n             * @sample highcharts/members/series-addpoint-append/\n             *         Append point\n             * @sample highcharts/members/series-addpoint-append-and-shift/\n             *         Append and shift\n             * @sample highcharts/members/series-addpoint-x-and-y/\n             *         Both X and Y values given\n             * @sample highcharts/members/series-addpoint-pie/\n             *         Append pie slice\n             * @sample stock/members/series-addpoint/\n             *         Append 100 points in Highstock\n             * @sample stock/members/series-addpoint-shift/\n             *         Append and shift in Highstock\n             * @sample maps/members/series-addpoint/\n             *         Add a point in Highmaps\n             */\n            addPoint: function(options, redraw, shift, animation) {\n                var series = this,\n                    seriesOptions = series.options,\n                    data = series.data,\n                    chart = series.chart,\n                    xAxis = series.xAxis,\n                    names = xAxis && xAxis.hasNames && xAxis.names,\n                    dataOptions = seriesOptions.data,\n                    point,\n                    isInTheMiddle,\n                    xData = series.xData,\n                    i,\n                    x;\n\n                // Optional redraw, defaults to true\n                redraw = pick(redraw, true);\n\n                // Get options and push the point to xData, yData and series.options. In series.generatePoints\n                // the Point instance will be created on demand and pushed to the series.data array.\n                point = {\n                    series: series\n                };\n                series.pointClass.prototype.applyOptions.apply(point, [options]);\n                x = point.x;\n\n                // Get the insertion point\n                i = xData.length;\n                if (series.requireSorting && x < xData[i - 1]) {\n                    isInTheMiddle = true;\n                    while (i && xData[i - 1] > x) {\n                        i--;\n                    }\n                }\n\n                series.updateParallelArrays(point, 'splice', i, 0, 0); // insert undefined item\n                series.updateParallelArrays(point, i); // update it\n\n                if (names && point.name) {\n                    names[x] = point.name;\n                }\n                dataOptions.splice(i, 0, options);\n\n                if (isInTheMiddle) {\n                    series.data.splice(i, 0, null);\n                    series.processData();\n                }\n\n                // Generate points to be added to the legend (#1329)\n                if (seriesOptions.legendType === 'point') {\n                    series.generatePoints();\n                }\n\n                // Shift the first point off the parallel arrays\n                if (shift) {\n                    if (data[0] && data[0].remove) {\n                        data[0].remove(false);\n                    } else {\n                        data.shift();\n                        series.updateParallelArrays(point, 'shift');\n\n                        dataOptions.shift();\n                    }\n                }\n\n                // redraw\n                series.isDirty = true;\n                series.isDirtyData = true;\n\n                if (redraw) {\n                    chart.redraw(animation); // Animation is set anyway on redraw, #5665\n                }\n            },\n\n            /**\n             * Remove a point from the series. Unlike the {@link Highcharts.Point#remove}\n             * method, this can also be done on a point that is not instanciated because\n             * it is outside the view or subject to Highstock data grouping.\n             *\n             * @param  {Number} i\n             *         The index of the point in the {@link Highcharts.Series.data|data}\n             *         array.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after the point is added. When\n             *         removing more than one point, it is highly recommended that the\n             *         `redraw` option be set to `false`, and instead {@link\n             *         Highcharts.Chart#redraw} is explicitly called after the adding of\n             *         points is finished.\n             * @param  {AnimationOptions} [animation]\n             *         Whether and optionally how the series should be animated.\n             *\n             * @sample highcharts/members/series-removepoint/\n             *         Remove cropped point\n             */\n            removePoint: function(i, redraw, animation) {\n\n                var series = this,\n                    data = series.data,\n                    point = data[i],\n                    points = series.points,\n                    chart = series.chart,\n                    remove = function() {\n\n                        if (points && points.length === data.length) { // #4935\n                            points.splice(i, 1);\n                        }\n                        data.splice(i, 1);\n                        series.options.data.splice(i, 1);\n                        series.updateParallelArrays(point || {\n                            series: series\n                        }, 'splice', i, 1);\n\n                        if (point) {\n                            point.destroy();\n                        }\n\n                        // redraw\n                        series.isDirty = true;\n                        series.isDirtyData = true;\n                        if (redraw) {\n                            chart.redraw();\n                        }\n                    };\n\n                setAnimation(animation, chart);\n                redraw = pick(redraw, true);\n\n                // Fire the event with a default handler of removing the point\n                if (point) {\n                    point.firePointEvent('remove', null, remove);\n                } else {\n                    remove();\n                }\n            },\n\n            /**\n             * Remove a series and optionally redraw the chart.\n             *\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart or wait for an explicit call to\n             *         {@link Highcharts.Chart#redraw}.\n             * @param  {AnimationOptions} [animation]\n             *         Whether to apply animation, and optionally animation\n             *         configuration\n             * @param  {Boolean} [withEvent=true]\n             *         Used internally, whether to fire the series `remove` event.\n             *\n             * @sample highcharts/members/series-remove/\n             *         Remove first series from a button\n             */\n            remove: function(redraw, animation, withEvent) {\n                var series = this,\n                    chart = series.chart;\n\n                function remove() {\n\n                    // Destroy elements\n                    series.destroy();\n\n                    // Redraw\n                    chart.isDirtyLegend = chart.isDirtyBox = true;\n                    chart.linkSeries();\n\n                    if (pick(redraw, true)) {\n                        chart.redraw(animation);\n                    }\n                }\n\n                // Fire the event with a default handler of removing the point\n                if (withEvent !== false) {\n                    fireEvent(series, 'remove', null, remove);\n                } else {\n                    remove();\n                }\n            },\n\n            /**\n             * Update the series with a new set of options. For a clean and precise\n             * handling of new options, all methods and elements from the series are\n             * removed, and it is initiated from scratch. Therefore, this method is more\n             * performance expensive than some other utility methods like {@link\n             * Series#setData} or {@link Series#setVisible}.\n             *\n             * @param  {SeriesOptions} options\n             *         New options that will be merged with the series' existing\n             *         options.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after the series is altered. If doing\n             *         more operations on the chart, it is a good idea to set redraw to\n             *         false and call {@link Chart#redraw} after.\n             *\n             * @sample highcharts/members/series-update/\n             *         Updating series options\n             * @sample maps/members/series-update/\n             *         Update series options in Highmaps\n             */\n            update: function(newOptions, redraw) {\n                var series = this,\n                    chart = series.chart,\n                    // must use user options when changing type because series.options\n                    // is merged in with type specific plotOptions\n                    oldOptions = series.userOptions,\n                    oldType = series.oldType || series.type,\n                    newType = newOptions.type || oldOptions.type || chart.options.chart.type,\n                    proto = seriesTypes[oldType].prototype,\n                    n,\n                    preserve = [\n                        'group',\n                        'markerGroup',\n                        'dataLabelsGroup',\n                        'navigatorSeries',\n                        'baseSeries'\n                    ],\n\n                    // Animation must be enabled when calling update before the initial\n                    // animation has first run. This happens when calling update\n                    // directly after chart initialization, or when applying responsive\n                    // rules (#6912).\n                    animation = series.finishedAnimating && {\n                        animation: false\n                    };\n\n                // Running Series.update to update the data only is an intuitive usage,\n                // so we want to make sure that when used like this, we run the\n                // cheaper setData function and allow animation instead of completely\n                // recreating the series instance.\n                if (Object.keys && Object.keys(newOptions).toString() === 'data') {\n                    return this.setData(newOptions.data, redraw);\n                }\n\n                // If we're changing type or zIndex, create new groups (#3380, #3404)\n                if ((newType && newType !== oldType) || newOptions.zIndex !== undefined) {\n                    preserve.length = 0;\n                }\n\n                // Make sure groups are not destroyed (#3094)\n                each(preserve, function(prop) {\n                    preserve[prop] = series[prop];\n                    delete series[prop];\n                });\n\n                // Do the merge, with some forced options\n                newOptions = merge(oldOptions, animation, {\n                    index: series.index,\n                    pointStart: series.xData[0] // when updating after addPoint\n                }, {\n                    data: series.options.data\n                }, newOptions);\n\n                // Destroy the series and delete all properties. Reinsert all methods\n                // and properties from the new type prototype (#2270, #3719)\n                series.remove(false, null, false);\n                for (n in proto) {\n                    series[n] = undefined;\n                }\n                extend(series, seriesTypes[newType || oldType].prototype);\n\n                // Re-register groups (#3094) and other preserved properties\n                each(preserve, function(prop) {\n                    series[prop] = preserve[prop];\n                });\n\n                series.init(chart, newOptions);\n                series.oldType = oldType;\n                chart.linkSeries(); // Links are lost in series.remove (#3028)\n                if (pick(redraw, true)) {\n                    chart.redraw(false);\n                }\n            }\n        });\n\n        // Extend the Axis.prototype for dynamic methods\n        extend(Axis.prototype, /** @lends Highcharts.Axis.prototype */ {\n\n            /**\n             * Update an axis object with a new set of options. The options are merged\n             * with the existing options, so only new or altered options need to be\n             * specified.\n             *\n             * @param  {Object} options\n             *         The new options that will be merged in with existing options on\n             *         the axis.\n             * @sample highcharts/members/axis-update/ Axis update demo\n             */\n            update: function(options, redraw) {\n                var chart = this.chart;\n\n                options = chart.options[this.coll][this.options.index] =\n                    merge(this.userOptions, options);\n\n                this.destroy(true);\n\n                this.init(chart, extend(options, {\n                    events: undefined\n                }));\n\n                chart.isDirtyBox = true;\n                if (pick(redraw, true)) {\n                    chart.redraw();\n                }\n            },\n\n            /**\n             * Remove the axis from the chart.\n             *\n             * @param {Boolean} [redraw=true] Whether to redraw the chart following the\n             * remove.\n             *\n             * @sample highcharts/members/chart-addaxis/ Add and remove axes\n             */\n            remove: function(redraw) {\n                var chart = this.chart,\n                    key = this.coll, // xAxis or yAxis\n                    axisSeries = this.series,\n                    i = axisSeries.length;\n\n                // Remove associated series (#2687)\n                while (i--) {\n                    if (axisSeries[i]) {\n                        axisSeries[i].remove(false);\n                    }\n                }\n\n                // Remove the axis\n                erase(chart.axes, this);\n                erase(chart[key], this);\n\n                if (isArray(chart.options[key])) {\n                    chart.options[key].splice(this.options.index, 1);\n                } else { // color axis, #6488\n                    delete chart.options[key];\n                }\n\n                each(chart[key], function(axis, i) { // Re-index, #1706\n                    axis.options.index = i;\n                });\n                this.destroy();\n                chart.isDirtyBox = true;\n\n                if (pick(redraw, true)) {\n                    chart.redraw();\n                }\n            },\n\n            /**\n             * Update the axis title by options after render time.\n             *\n             * @param  {TitleOptions} titleOptions\n             *         The additional title options.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after setting the title.\n             * @sample highcharts/members/axis-settitle/ Set a new Y axis title\n             */\n            setTitle: function(titleOptions, redraw) {\n                this.update({\n                    title: titleOptions\n                }, redraw);\n            },\n\n            /**\n             * Set new axis categories and optionally redraw.\n             * @param {Array.<String>} categories - The new categories.\n             * @param {Boolean} [redraw=true] - Whether to redraw the chart.\n             * @sample highcharts/members/axis-setcategories/ Set categories by click on\n             * a button\n             */\n            setCategories: function(categories, redraw) {\n                this.update({\n                    categories: categories\n                }, redraw);\n            }\n\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var color = H.color,\n            each = H.each,\n            LegendSymbolMixin = H.LegendSymbolMixin,\n            map = H.map,\n            pick = H.pick,\n            Series = H.Series,\n            seriesType = H.seriesType;\n\n        /**\n         * Area series type.\n         * @constructor seriesTypes.area\n         * @extends {Series}\n         */\n        /**\n         * @extends {plotOptions.line}\n         * @optionparent plotOptions.area\n         */\n        seriesType('area', 'line', {\n\n            /**\n             * When this is true, the series will not cause the Y axis to cross\n             * the zero plane (or [threshold](#plotOptions.series.threshold) option)\n             * unless the data actually crosses the plane.\n             *\n             * For example, if `softThreshold` is `false`, a series of 0, 1, 2,\n             * 3 will make the Y axis show negative values according to the `minPadding`\n             * option. If `softThreshold` is `true`, the Y axis starts at 0.\n             *\n             * @type {Boolean}\n             * @default false\n             * @since 4.1.9\n             * @product highcharts highstock\n             */\n            softThreshold: false,\n\n            /**\n             * The Y axis value to serve as the base for the area, for distinguishing\n             * between values above and below a threshold. If `null`, the area\n             * behaves like a line series with fill between the graph and the Y\n             * axis minimum.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/area-threshold/ A threshold of 100\n             * @default 0\n             * @since 2.0\n             * @product highcharts highstock\n             */\n            threshold: 0\n            // trackByArea: false,\n            // lineColor: null, // overrides color, but lets fillColor be unaltered\n            // fillOpacity: 0.75,\n            // fillColor: null\n        }, /** @lends seriesTypes.area.prototype */ {\n            singleStacks: false,\n            /**\n             * Return an array of stacked points, where null and missing points are replaced by\n             * dummy points in order for gaps to be drawn correctly in stacks.\n             */\n            getStackPoints: function(points) {\n                var series = this,\n                    segment = [],\n                    keys = [],\n                    xAxis = this.xAxis,\n                    yAxis = this.yAxis,\n                    stack = yAxis.stacks[this.stackKey],\n                    pointMap = {},\n                    seriesIndex = series.index,\n                    yAxisSeries = yAxis.series,\n                    seriesLength = yAxisSeries.length,\n                    visibleSeries,\n                    upOrDown = pick(yAxis.options.reversedStacks, true) ? 1 : -1,\n                    i;\n\n\n                points = points || this.points;\n\n                if (this.options.stacking) {\n                    // Create a map where we can quickly look up the points by their X value.\n                    for (i = 0; i < points.length; i++) {\n                        pointMap[points[i].x] = points[i];\n                    }\n\n                    // Sort the keys (#1651)\n                    H.objectEach(stack, function(stackX, x) {\n                        if (stackX.total !== null) { // nulled after switching between grouping and not (#1651, #2336)\n                            keys.push(x);\n                        }\n                    });\n                    keys.sort(function(a, b) {\n                        return a - b;\n                    });\n\n                    visibleSeries = map(yAxisSeries, function() {\n                        return this.visible;\n                    });\n\n                    each(keys, function(x, idx) {\n                        var y = 0,\n                            stackPoint,\n                            stackedValues;\n\n                        if (pointMap[x] && !pointMap[x].isNull) {\n                            segment.push(pointMap[x]);\n\n                            // Find left and right cliff. -1 goes left, 1 goes right.\n                            each([-1, 1], function(direction) {\n                                var nullName = direction === 1 ? 'rightNull' : 'leftNull',\n                                    cliffName = direction === 1 ? 'rightCliff' : 'leftCliff',\n                                    cliff = 0,\n                                    otherStack = stack[keys[idx + direction]];\n\n                                // If there is a stack next to this one, to the left or to the right...\n                                if (otherStack) {\n                                    i = seriesIndex;\n                                    while (i >= 0 && i < seriesLength) { // Can go either up or down, depending on reversedStacks\n                                        stackPoint = otherStack.points[i];\n                                        if (!stackPoint) {\n                                            // If the next point in this series is missing, mark the point\n                                            // with point.leftNull or point.rightNull = true.\n                                            if (i === seriesIndex) {\n                                                pointMap[x][nullName] = true;\n\n                                                // If there are missing points in the next stack in any of the\n                                                // series below this one, we need to substract the missing values\n                                                // and add a hiatus to the left or right.\n                                            } else if (visibleSeries[i]) {\n                                                stackedValues = stack[x].points[i];\n                                                if (stackedValues) {\n                                                    cliff -= stackedValues[1] - stackedValues[0];\n                                                }\n                                            }\n                                        }\n                                        // When reversedStacks is true, loop up, else loop down\n                                        i += upOrDown;\n                                    }\n                                }\n                                pointMap[x][cliffName] = cliff;\n                            });\n\n\n                            // There is no point for this X value in this series, so we\n                            // insert a dummy point in order for the areas to be drawn\n                            // correctly.\n                        } else {\n\n                            // Loop down the stack to find the series below this one that has\n                            // a value (#1991)\n                            i = seriesIndex;\n                            while (i >= 0 && i < seriesLength) {\n                                stackPoint = stack[x].points[i];\n                                if (stackPoint) {\n                                    y = stackPoint[1];\n                                    break;\n                                }\n                                // When reversedStacks is true, loop up, else loop down\n                                i += upOrDown;\n                            }\n                            y = yAxis.translate(y, 0, 1, 0, 1); // #6272\n                            segment.push({\n                                isNull: true,\n                                plotX: xAxis.translate(x, 0, 0, 0, 1), // #6272\n                                x: x,\n                                plotY: y,\n                                yBottom: y\n                            });\n                        }\n                    });\n\n                }\n\n                return segment;\n            },\n\n            getGraphPath: function(points) {\n                var getGraphPath = Series.prototype.getGraphPath,\n                    graphPath,\n                    options = this.options,\n                    stacking = options.stacking,\n                    yAxis = this.yAxis,\n                    topPath,\n                    //topPoints = [],\n                    bottomPath,\n                    bottomPoints = [],\n                    graphPoints = [],\n                    seriesIndex = this.index,\n                    i,\n                    areaPath,\n                    plotX,\n                    stacks = yAxis.stacks[this.stackKey],\n                    threshold = options.threshold,\n                    translatedThreshold = yAxis.getThreshold(options.threshold),\n                    isNull,\n                    yBottom,\n                    connectNulls = options.connectNulls || stacking === 'percent',\n                    /**\n                     * To display null points in underlying stacked series, this series graph must be\n                     * broken, and the area also fall down to fill the gap left by the null point. #2069\n                     */\n                    addDummyPoints = function(i, otherI, side) {\n                        var point = points[i],\n                            stackedValues = stacking && stacks[point.x].points[seriesIndex],\n                            nullVal = point[side + 'Null'] || 0,\n                            cliffVal = point[side + 'Cliff'] || 0,\n                            top,\n                            bottom,\n                            isNull = true;\n\n                        if (cliffVal || nullVal) {\n\n                            top = (nullVal ? stackedValues[0] : stackedValues[1]) + cliffVal;\n                            bottom = stackedValues[0] + cliffVal;\n                            isNull = !!nullVal;\n\n                        } else if (!stacking && points[otherI] && points[otherI].isNull) {\n                            top = bottom = threshold;\n                        }\n\n                        // Add to the top and bottom line of the area\n                        if (top !== undefined) {\n                            graphPoints.push({\n                                plotX: plotX,\n                                plotY: top === null ? translatedThreshold : yAxis.getThreshold(top),\n                                isNull: isNull,\n                                isCliff: true\n                            });\n                            bottomPoints.push({\n                                plotX: plotX,\n                                plotY: bottom === null ? translatedThreshold : yAxis.getThreshold(bottom),\n                                doCurve: false // #1041, gaps in areaspline areas\n                            });\n                        }\n                    };\n\n                // Find what points to use\n                points = points || this.points;\n\n                // Fill in missing points\n                if (stacking) {\n                    points = this.getStackPoints(points);\n                }\n\n                for (i = 0; i < points.length; i++) {\n                    isNull = points[i].isNull;\n                    plotX = pick(points[i].rectPlotX, points[i].plotX);\n                    yBottom = pick(points[i].yBottom, translatedThreshold);\n\n                    if (!isNull || connectNulls) {\n\n                        if (!connectNulls) {\n                            addDummyPoints(i, i - 1, 'left');\n                        }\n\n                        if (!(isNull && !stacking && connectNulls)) { // Skip null point when stacking is false and connectNulls true\n                            graphPoints.push(points[i]);\n                            bottomPoints.push({\n                                x: i,\n                                plotX: plotX,\n                                plotY: yBottom\n                            });\n                        }\n\n                        if (!connectNulls) {\n                            addDummyPoints(i, i + 1, 'right');\n                        }\n                    }\n                }\n\n                topPath = getGraphPath.call(this, graphPoints, true, true);\n\n                bottomPoints.reversed = true;\n                bottomPath = getGraphPath.call(this, bottomPoints, true, true);\n                if (bottomPath.length) {\n                    bottomPath[0] = 'L';\n                }\n\n                areaPath = topPath.concat(bottomPath);\n                graphPath = getGraphPath.call(this, graphPoints, false, connectNulls); // TODO: don't set leftCliff and rightCliff when connectNulls?\n\n                areaPath.xMap = topPath.xMap;\n                this.areaPath = areaPath;\n\n                return graphPath;\n            },\n\n            /**\n             * Draw the graph and the underlying area. This method calls the Series base\n             * function and adds the area. The areaPath is calculated in the getSegmentPath\n             * method called from Series.prototype.drawGraph.\n             */\n            drawGraph: function() {\n\n                // Define or reset areaPath\n                this.areaPath = [];\n\n                // Call the base method\n                Series.prototype.drawGraph.apply(this);\n\n                // Define local variables\n                var series = this,\n                    areaPath = this.areaPath,\n                    options = this.options,\n                    zones = this.zones,\n                    props = [\n                        [\n                            'area',\n                            'highcharts-area',\n\n                            this.color,\n                            options.fillColor\n\n                        ]\n                    ]; // area name, main color, fill color\n\n                each(zones, function(zone, i) {\n                    props.push([\n                        'zone-area-' + i,\n                        'highcharts-area highcharts-zone-area-' + i + ' ' + zone.className,\n\n                        zone.color || series.color,\n                        zone.fillColor || options.fillColor\n\n                    ]);\n                });\n\n                each(props, function(prop) {\n                    var areaKey = prop[0],\n                        area = series[areaKey];\n\n                    // Create or update the area\n                    if (area) { // update\n                        area.endX = areaPath.xMap;\n                        area.animate({\n                            d: areaPath\n                        });\n\n                    } else { // create\n                        area = series[areaKey] = series.chart.renderer.path(areaPath)\n                            .addClass(prop[1])\n                            .attr({\n\n                                fill: pick(\n                                    prop[3],\n                                    color(prop[2]).setOpacity(pick(options.fillOpacity, 0.75)).get()\n                                ),\n\n                                zIndex: 0 // #1069\n                            }).add(series.group);\n                        area.isArea = true;\n                    }\n                    area.startX = areaPath.xMap;\n                    area.shiftUnit = options.step ? 2 : 1;\n                });\n            },\n\n            drawLegendSymbol: LegendSymbolMixin.drawRectangle\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var pick = H.pick,\n            seriesType = H.seriesType;\n\n        /**\n         * Spline series type.\n         * @constructor seriesTypes.spline\n         * @extends {Series}\n         */\n        seriesType('spline', 'line', {}, /** @lends seriesTypes.spline.prototype */ {\n            /**\n             * Get the spline segment from a given point's previous neighbour to the given point\n             */\n            getPointSpline: function(points, point, i) {\n                var smoothing = 1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc\n                    denom = smoothing + 1,\n                    plotX = point.plotX,\n                    plotY = point.plotY,\n                    lastPoint = points[i - 1],\n                    nextPoint = points[i + 1],\n                    leftContX,\n                    leftContY,\n                    rightContX,\n                    rightContY,\n                    ret;\n\n                function doCurve(otherPoint) {\n                    return otherPoint &&\n                        !otherPoint.isNull &&\n                        otherPoint.doCurve !== false &&\n                        !point.isCliff; // #6387, area splines next to null\n                }\n\n                // Find control points\n                if (doCurve(lastPoint) && doCurve(nextPoint)) {\n                    var lastX = lastPoint.plotX,\n                        lastY = lastPoint.plotY,\n                        nextX = nextPoint.plotX,\n                        nextY = nextPoint.plotY,\n                        correction = 0;\n\n                    leftContX = (smoothing * plotX + lastX) / denom;\n                    leftContY = (smoothing * plotY + lastY) / denom;\n                    rightContX = (smoothing * plotX + nextX) / denom;\n                    rightContY = (smoothing * plotY + nextY) / denom;\n\n                    // Have the two control points make a straight line through main point\n                    if (rightContX !== leftContX) { // #5016, division by zero\n                        correction = ((rightContY - leftContY) * (rightContX - plotX)) /\n                            (rightContX - leftContX) + plotY - rightContY;\n                    }\n\n                    leftContY += correction;\n                    rightContY += correction;\n\n                    // to prevent false extremes, check that control points are between\n                    // neighbouring points' y values\n                    if (leftContY > lastY && leftContY > plotY) {\n                        leftContY = Math.max(lastY, plotY);\n                        rightContY = 2 * plotY - leftContY; // mirror of left control point\n                    } else if (leftContY < lastY && leftContY < plotY) {\n                        leftContY = Math.min(lastY, plotY);\n                        rightContY = 2 * plotY - leftContY;\n                    }\n                    if (rightContY > nextY && rightContY > plotY) {\n                        rightContY = Math.max(nextY, plotY);\n                        leftContY = 2 * plotY - rightContY;\n                    } else if (rightContY < nextY && rightContY < plotY) {\n                        rightContY = Math.min(nextY, plotY);\n                        leftContY = 2 * plotY - rightContY;\n                    }\n\n                    // record for drawing in next point\n                    point.rightContX = rightContX;\n                    point.rightContY = rightContY;\n\n\n                }\n\n                // Visualize control points for debugging\n                /*\n                if (leftContX) {\n                \tthis.chart.renderer.circle(leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop, 2)\n                \t\t.attr({\n                \t\t\tstroke: 'red',\n                \t\t\t'stroke-width': 2,\n                \t\t\tfill: 'none',\n                \t\t\tzIndex: 9\n                \t\t})\n                \t\t.add();\n                \tthis.chart.renderer.path(['M', leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop,\n                \t\t'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])\n                \t\t.attr({\n                \t\t\tstroke: 'red',\n                \t\t\t'stroke-width': 2,\n                \t\t\tzIndex: 9\n                \t\t})\n                \t\t.add();\n                }\n                if (rightContX) {\n                \tthis.chart.renderer.circle(rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop, 2)\n                \t\t.attr({\n                \t\t\tstroke: 'green',\n                \t\t\t'stroke-width': 2,\n                \t\t\tfill: 'none',\n                \t\t\tzIndex: 9\n                \t\t})\n                \t\t.add();\n                \tthis.chart.renderer.path(['M', rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop,\n                \t\t'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])\n                \t\t.attr({\n                \t\t\tstroke: 'green',\n                \t\t\t'stroke-width': 2,\n                \t\t\tzIndex: 9\n                \t\t})\n                \t\t.add();\n                }\n                // */\n                ret = [\n                    'C',\n                    pick(lastPoint.rightContX, lastPoint.plotX),\n                    pick(lastPoint.rightContY, lastPoint.plotY),\n                    pick(leftContX, plotX),\n                    pick(leftContY, plotY),\n                    plotX,\n                    plotY\n                ];\n                lastPoint.rightContX = lastPoint.rightContY = null; // reset for updating series later\n                return ret;\n            }\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var areaProto = H.seriesTypes.area.prototype,\n            defaultPlotOptions = H.defaultPlotOptions,\n            LegendSymbolMixin = H.LegendSymbolMixin,\n            seriesType = H.seriesType;\n        /**\n         * AreaSplineSeries object\n         */\n        seriesType('areaspline', 'spline', defaultPlotOptions.area, {\n            getStackPoints: areaProto.getStackPoints,\n            getGraphPath: areaProto.getGraphPath,\n            drawGraph: areaProto.drawGraph,\n            drawLegendSymbol: LegendSymbolMixin.drawRectangle\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var animObject = H.animObject,\n            color = H.color,\n            each = H.each,\n            extend = H.extend,\n            isNumber = H.isNumber,\n            LegendSymbolMixin = H.LegendSymbolMixin,\n            merge = H.merge,\n            noop = H.noop,\n            pick = H.pick,\n            Series = H.Series,\n            seriesType = H.seriesType,\n            svg = H.svg;\n        /**\n         * The column series type.\n         *\n         * @constructor seriesTypes.column\n         * @augments Series\n         */\n\n        /**\n         * @extends {plotOptions.line}\n         * @optionparent plotOptions.column\n         * @excluding connectNulls,dashStyle,linecap,lineWidth,marker,connectEnds,step\n         */\n        seriesType('column', 'line', {\n\n            /**\n             * The corner radius of the border surrounding each column or bar.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/column-borderradius/ Rounded columns\n             * @default 0\n             * @product highcharts highstock\n             */\n            borderRadius: 0,\n            //colorByPoint: undefined,\n\n            /**\n             * When true, each column edge is rounded to its nearest pixel in order\n             * to render sharp on screen. In some cases, when there are a lot of\n             * densely packed columns, this leads to visible difference in column\n             * widths or distance between columns. In these cases, setting `crisp`\n             * to `false` may look better, even though each column is rendered\n             * blurry.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/column-crisp-false/ Crisp is false\n             * @default true\n             * @since 5.0.10\n             * @product highcharts highstock\n             */\n            crisp: true,\n\n            /**\n             * Padding between each value groups, in x axis units.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/column-grouppadding-default/ 0.2 by default\n             * @sample {highcharts} highcharts/plotoptions/column-grouppadding-none/ No group padding - all     columns are evenly spaced\n             * @default 0.2\n             * @product highcharts highstock\n             */\n            groupPadding: 0.2,\n            //grouping: true,\n\n            /**\n             */\n            marker: null, // point options are specified in the base options\n\n            /**\n             * Padding between each column or bar, in x axis units.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/column-pointpadding-default/ 0.1 by default\n             * @sample {highcharts} highcharts/plotoptions/column-pointpadding-025/ 0.25\n             * @sample {highcharts} highcharts/plotoptions/column-pointpadding-none/ 0 for tightly packed columns\n             * @default 0.1\n             * @product highcharts highstock\n             */\n            pointPadding: 0.1,\n            //pointWidth: null,\n\n            /**\n             * The minimal height for a column or width for a bar. By default,\n             * 0 values are not shown. To visualize a 0 (or close to zero) point,\n             * set the minimal point length to a pixel value like 3\\. In stacked\n             * column charts, minPointLength might not be respected for tightly\n             * packed values.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/column-minpointlength/ Zero base value\n             * @sample {highcharts} highcharts/plotoptions/column-minpointlength-pos-and-neg/ Positive and negative close to zero values\n             * @default 0\n             * @product highcharts highstock\n             */\n            minPointLength: 0,\n\n            /**\n             * When the series contains less points than the crop threshold, all\n             * points are drawn, event if the points fall outside the visible plot\n             * area at the current zoom. The advantage of drawing all points (including\n             * markers and columns), is that animation is performed on updates.\n             * On the other hand, when the series contains more points than the\n             * crop threshold, the series data is cropped to only contain points\n             * that fall within the plot area. The advantage of cropping away invisible\n             * points is to increase performance on large series. .\n             *\n             * @type {Number}\n             * @default 50\n             * @product highcharts highstock\n             */\n            cropThreshold: 50,\n\n            /**\n             * The X axis range that each point is valid for. This determines the\n             * width of the column. On a categorized axis, the range will be 1\n             * by default (one category unit). On linear and datetime axes, the\n             * range will be computed as the distance between the two closest data\n             * points.\n             *\n             * The default `null` means it is computed automatically, but this option\n             * can be used to override the automatic value.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/column-pointrange/\n             *         Set the point range to one day on a data set with one week\n             *         between the points\n             * @default null\n             * @since 2.3\n             * @product highcharts highstock\n             */\n            pointRange: null,\n\n            /**\n             */\n            states: {\n\n                /**\n                 * @extends plotOptions.series.states.hover\n                 * @excluding lineWidth,lineWidthPlus,marker\n                 * @product highcharts highstock\n                 */\n                hover: {\n\n                    /**\n                     */\n                    halo: false,\n\n\n                    /**\n                     * How much to brighten the point on interaction. Requires the main\n                     * color to be defined in hex or rgb(a) format.\n                     *\n                     * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the hover brightening is by default replaced\n                     * with a fill-opacity set in the `.highcharts-point:hover` rule.\n                     *\n                     * @type {Number}\n                     * @sample {highcharts} highcharts/plotoptions/column-states-hover-brightness/ Brighten by 0.5\n                     * @default 0.1\n                     * @product highcharts highstock\n                     */\n                    brightness: 0.1,\n\n                    /**\n                     */\n                    shadow: false\n\n                },\n\n\n                /**\n                 */\n                select: {\n\n                    /**\n                     */\n                    color: '#cccccc',\n\n                    /**\n                     */\n                    borderColor: '#000000',\n\n                    /**\n                     */\n                    shadow: false\n                }\n\n            },\n\n            /**\n             */\n            dataLabels: {\n\n                /**\n                 */\n                align: null, // auto\n\n                /**\n                 */\n                verticalAlign: null, // auto\n\n                /**\n                 */\n                y: null\n            },\n\n            /**\n             * When this is true, the series will not cause the Y axis to cross\n             * the zero plane (or [threshold](#plotOptions.series.threshold) option)\n             * unless the data actually crosses the plane.\n             *\n             * For example, if `softThreshold` is `false`, a series of 0, 1, 2,\n             * 3 will make the Y axis show negative values according to the `minPadding`\n             * option. If `softThreshold` is `true`, the Y axis starts at 0.\n             *\n             * @type {Boolean}\n             * @default {highcharts} true\n             * @default {highstock} false\n             * @since 4.1.9\n             * @product highcharts highstock\n             */\n            softThreshold: false,\n\n            /**\n             */\n            startFromThreshold: true, // false doesn't work well: http://jsfiddle.net/highcharts/hz8fopan/14/\n\n            /**\n             */\n            stickyTracking: false,\n\n            /**\n             */\n            tooltip: {\n\n                /**\n                 */\n                distance: 6\n            },\n\n            /**\n             * The Y axis value to serve as the base for the columns, for distinguishing\n             * between values above and below a threshold. If `null`, the columns\n             * extend from the padding Y axis minimum.\n             *\n             * @type {Number}\n             * @default 0\n             * @since 2.0\n             * @product highcharts\n             */\n            threshold: 0,\n\n\n            /**\n             * The color of the border surrounding each column or bar.\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the border stroke can be set with the `.highcharts-\n             * point` rule.\n             *\n             * @type {Color}\n             * @sample {highcharts} highcharts/plotoptions/column-bordercolor/ Dark gray border\n             * @default #ffffff\n             * @product highcharts highstock\n             */\n            borderColor: '#ffffff'\n            // borderWidth: 1\n\n\n        }, /** @lends seriesTypes.column.prototype */ {\n            cropShoulder: 0,\n            directTouch: true, // When tooltip is not shared, this series (and derivatives) requires direct touch/hover. KD-tree does not apply.\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            negStacks: true, // use separate negative stacks, unlike area stacks where a negative\n            // point is substracted from previous (#1910)\n\n            /**\n             * Initialize the series. Extends the basic Series.init method by\n             * marking other series of the same type as dirty.\n             *\n             * @function #init\n             * @memberOf seriesTypes.column\n             *\n             */\n            init: function() {\n                Series.prototype.init.apply(this, arguments);\n\n                var series = this,\n                    chart = series.chart;\n\n                // if the series is added dynamically, force redraw of other\n                // series affected by a new column\n                if (chart.hasRendered) {\n                    each(chart.series, function(otherSeries) {\n                        if (otherSeries.type === series.type) {\n                            otherSeries.isDirty = true;\n                        }\n                    });\n                }\n            },\n\n            /**\n             * Return the width and x offset of the columns adjusted for grouping, groupPadding, pointPadding,\n             * pointWidth etc.\n             */\n            getColumnMetrics: function() {\n\n                var series = this,\n                    options = series.options,\n                    xAxis = series.xAxis,\n                    yAxis = series.yAxis,\n                    reversedXAxis = xAxis.reversed,\n                    stackKey,\n                    stackGroups = {},\n                    columnCount = 0;\n\n                // Get the total number of column type series.\n                // This is called on every series. Consider moving this logic to a\n                // chart.orderStacks() function and call it on init, addSeries and removeSeries\n                if (options.grouping === false) {\n                    columnCount = 1;\n                } else {\n                    each(series.chart.series, function(otherSeries) {\n                        var otherOptions = otherSeries.options,\n                            otherYAxis = otherSeries.yAxis,\n                            columnIndex;\n                        if (\n                            otherSeries.type === series.type &&\n                            (\n                                otherSeries.visible ||\n                                !series.chart.options.chart.ignoreHiddenSeries\n                            ) &&\n                            yAxis.len === otherYAxis.len &&\n                            yAxis.pos === otherYAxis.pos\n                        ) { // #642, #2086\n                            if (otherOptions.stacking) {\n                                stackKey = otherSeries.stackKey;\n                                if (stackGroups[stackKey] === undefined) {\n                                    stackGroups[stackKey] = columnCount++;\n                                }\n                                columnIndex = stackGroups[stackKey];\n                            } else if (otherOptions.grouping !== false) { // #1162\n                                columnIndex = columnCount++;\n                            }\n                            otherSeries.columnIndex = columnIndex;\n                        }\n                    });\n                }\n\n                var categoryWidth = Math.min(\n                        Math.abs(xAxis.transA) * (xAxis.ordinalSlope || options.pointRange || xAxis.closestPointRange || xAxis.tickInterval || 1), // #2610\n                        xAxis.len // #1535\n                    ),\n                    groupPadding = categoryWidth * options.groupPadding,\n                    groupWidth = categoryWidth - 2 * groupPadding,\n                    pointOffsetWidth = groupWidth / (columnCount || 1),\n                    pointWidth = Math.min(\n                        options.maxPointWidth || xAxis.len,\n                        pick(options.pointWidth, pointOffsetWidth * (1 - 2 * options.pointPadding))\n                    ),\n                    pointPadding = (pointOffsetWidth - pointWidth) / 2,\n                    colIndex = (series.columnIndex || 0) + (reversedXAxis ? 1 : 0), // #1251, #3737\n                    pointXOffset = pointPadding + (groupPadding + colIndex *\n                        pointOffsetWidth - (categoryWidth / 2)) *\n                    (reversedXAxis ? -1 : 1);\n\n                // Save it for reading in linked series (Error bars particularly)\n                series.columnMetrics = {\n                    width: pointWidth,\n                    offset: pointXOffset\n                };\n                return series.columnMetrics;\n\n            },\n\n            /**\n             * Make the columns crisp. The edges are rounded to the nearest full pixel.\n             */\n            crispCol: function(x, y, w, h) {\n                var chart = this.chart,\n                    borderWidth = this.borderWidth,\n                    xCrisp = -(borderWidth % 2 ? 0.5 : 0),\n                    yCrisp = borderWidth % 2 ? 0.5 : 1,\n                    right,\n                    bottom,\n                    fromTop;\n\n                if (chart.inverted && chart.renderer.isVML) {\n                    yCrisp += 1;\n                }\n\n                // Horizontal. We need to first compute the exact right edge, then round it\n                // and compute the width from there.\n                if (this.options.crisp) {\n                    right = Math.round(x + w) + xCrisp;\n                    x = Math.round(x) + xCrisp;\n                    w = right - x;\n                }\n\n                // Vertical\n                bottom = Math.round(y + h) + yCrisp;\n                fromTop = Math.abs(y) <= 0.5 && bottom > 0.5; // #4504, #4656\n                y = Math.round(y) + yCrisp;\n                h = bottom - y;\n\n                // Top edges are exceptions\n                if (fromTop && h) { // #5146\n                    y -= 1;\n                    h += 1;\n                }\n\n                return {\n                    x: x,\n                    y: y,\n                    width: w,\n                    height: h\n                };\n            },\n\n            /**\n             * Translate each point to the plot area coordinate system and find shape positions\n             */\n            translate: function() {\n                var series = this,\n                    chart = series.chart,\n                    options = series.options,\n                    dense = series.dense = series.closestPointRange * series.xAxis.transA < 2,\n                    borderWidth = series.borderWidth = pick(\n                        options.borderWidth,\n                        dense ? 0 : 1 // #3635\n                    ),\n                    yAxis = series.yAxis,\n                    threshold = options.threshold,\n                    translatedThreshold = series.translatedThreshold = yAxis.getThreshold(threshold),\n                    minPointLength = pick(options.minPointLength, 5),\n                    metrics = series.getColumnMetrics(),\n                    pointWidth = metrics.width,\n                    seriesBarW = series.barW = Math.max(pointWidth, 1 + 2 * borderWidth), // postprocessed for border width\n                    pointXOffset = series.pointXOffset = metrics.offset;\n\n                if (chart.inverted) {\n                    translatedThreshold -= 0.5; // #3355\n                }\n\n                // When the pointPadding is 0, we want the columns to be packed tightly, so we allow individual\n                // columns to have individual sizes. When pointPadding is greater, we strive for equal-width\n                // columns (#2694).\n                if (options.pointPadding) {\n                    seriesBarW = Math.ceil(seriesBarW);\n                }\n\n                Series.prototype.translate.apply(series);\n\n                // Record the new values\n                each(series.points, function(point) {\n                    var yBottom = pick(point.yBottom, translatedThreshold),\n                        safeDistance = 999 + Math.abs(yBottom),\n                        plotY = Math.min(Math.max(-safeDistance, point.plotY), yAxis.len + safeDistance), // Don't draw too far outside plot area (#1303, #2241, #4264)\n                        barX = point.plotX + pointXOffset,\n                        barW = seriesBarW,\n                        barY = Math.min(plotY, yBottom),\n                        up,\n                        barH = Math.max(plotY, yBottom) - barY;\n\n                    // Handle options.minPointLength\n                    if (Math.abs(barH) < minPointLength) {\n                        if (minPointLength) {\n                            barH = minPointLength;\n                            up = (!yAxis.reversed && !point.negative) || (yAxis.reversed && point.negative);\n                            barY = Math.abs(barY - translatedThreshold) > minPointLength ? // stacked\n                                yBottom - minPointLength : // keep position\n                                translatedThreshold - (up ? minPointLength : 0); // #1485, #4051\n                        }\n                    }\n\n                    // Cache for access in polar\n                    point.barX = barX;\n                    point.pointWidth = pointWidth;\n\n                    // Fix the tooltip on center of grouped columns (#1216, #424, #3648)\n                    point.tooltipPos = chart.inverted ? [yAxis.len + yAxis.pos - chart.plotLeft - plotY, series.xAxis.len - barX - barW / 2, barH] : [barX + barW / 2, plotY + yAxis.pos - chart.plotTop, barH];\n\n                    // Register shape type and arguments to be used in drawPoints\n                    point.shapeType = 'rect';\n                    point.shapeArgs = series.crispCol.apply(\n                        series,\n                        point.isNull ?\n                        // #3169, drilldown from null must have a position to work from\n                        // #6585, dataLabel should be placed on xAxis, not floating in the middle of the chart\n                        [barX, translatedThreshold, barW, 0] : [barX, barY, barW, barH]\n                    );\n                });\n\n            },\n\n            getSymbol: noop,\n\n            /**\n             * Use a solid rectangle like the area series types\n             */\n            drawLegendSymbol: LegendSymbolMixin.drawRectangle,\n\n\n            /**\n             * Columns have no graph\n             */\n            drawGraph: function() {\n                this.group[this.dense ? 'addClass' : 'removeClass']('highcharts-dense-data');\n            },\n\n\n            /**\n             * Get presentational attributes\n             */\n            pointAttribs: function(point, state) {\n                var options = this.options,\n                    stateOptions,\n                    ret,\n                    p2o = this.pointAttrToOptions || {},\n                    strokeOption = p2o.stroke || 'borderColor',\n                    strokeWidthOption = p2o['stroke-width'] || 'borderWidth',\n                    fill = (point && point.color) || this.color,\n                    stroke = point[strokeOption] || options[strokeOption] ||\n                    this.color || fill, // set to fill when borderColor null\n                    strokeWidth = point[strokeWidthOption] ||\n                    options[strokeWidthOption] || this[strokeWidthOption] || 0,\n                    dashstyle = options.dashStyle,\n                    zone,\n                    brightness;\n\n                // Handle zone colors\n                if (point && this.zones.length) {\n                    zone = point.getZone();\n                    fill = point.options.color || (zone && zone.color) || this.color; // When zones are present, don't use point.color (#4267). Changed order (#6527)\n                }\n\n                // Select or hover states\n                if (state) {\n                    stateOptions = merge(\n                        options.states[state],\n                        point.options.states && point.options.states[state] || {} // #6401\n                    );\n                    brightness = stateOptions.brightness;\n                    fill = stateOptions.color ||\n                        (brightness !== undefined && color(fill).brighten(stateOptions.brightness).get()) ||\n                        fill;\n                    stroke = stateOptions[strokeOption] || stroke;\n                    strokeWidth = stateOptions[strokeWidthOption] || strokeWidth;\n                    dashstyle = stateOptions.dashStyle || dashstyle;\n                }\n\n                ret = {\n                    'fill': fill,\n                    'stroke': stroke,\n                    'stroke-width': strokeWidth\n                };\n\n                if (dashstyle) {\n                    ret.dashstyle = dashstyle;\n                }\n\n                return ret;\n            },\n\n\n            /**\n             * Draw the columns. For bars, the series.group is rotated, so the same coordinates\n             * apply for columns and bars. This method is inherited by scatter series.\n             *\n             */\n            drawPoints: function() {\n                var series = this,\n                    chart = this.chart,\n                    options = series.options,\n                    renderer = chart.renderer,\n                    animationLimit = options.animationLimit || 250,\n                    shapeArgs;\n\n                // draw the columns\n                each(series.points, function(point) {\n                    var plotY = point.plotY,\n                        graphic = point.graphic;\n\n                    if (isNumber(plotY) && point.y !== null) {\n                        shapeArgs = point.shapeArgs;\n\n                        if (graphic) { // update\n                            graphic[chart.pointCount < animationLimit ? 'animate' : 'attr'](\n                                merge(shapeArgs)\n                            );\n\n                        } else {\n                            point.graphic = graphic = renderer[point.shapeType](shapeArgs)\n                                .add(point.group || series.group);\n                        }\n\n                        // Border radius is not stylable (#6900)\n                        if (options.borderRadius) {\n                            graphic.attr({\n                                r: options.borderRadius\n                            });\n                        }\n\n\n                        // Presentational\n                        graphic\n                            .attr(series.pointAttribs(point, point.selected && 'select'))\n                            .shadow(options.shadow, null, options.stacking && !options.borderRadius);\n\n\n                        graphic.addClass(point.getClassName(), true);\n\n\n                    } else if (graphic) {\n                        point.graphic = graphic.destroy(); // #1269\n                    }\n                });\n            },\n\n            /**\n             * Animate the column heights one by one from zero\n             * @param {Boolean} init Whether to initialize the animation or run it\n             */\n            animate: function(init) {\n                var series = this,\n                    yAxis = this.yAxis,\n                    options = series.options,\n                    inverted = this.chart.inverted,\n                    attr = {},\n                    translatedThreshold;\n\n                if (svg) { // VML is too slow anyway\n                    if (init) {\n                        attr.scaleY = 0.001;\n                        translatedThreshold = Math.min(yAxis.pos + yAxis.len, Math.max(yAxis.pos, yAxis.toPixels(options.threshold)));\n                        if (inverted) {\n                            attr.translateX = translatedThreshold - yAxis.len;\n                        } else {\n                            attr.translateY = translatedThreshold;\n                        }\n                        series.group.attr(attr);\n\n                    } else { // run the animation\n\n                        attr[inverted ? 'translateX' : 'translateY'] = yAxis.pos;\n                        series.group.animate(attr, extend(animObject(series.options.animation), {\n                            // Do the scale synchronously to ensure smooth updating (#5030)\n                            step: function(val, fx) {\n                                series.group.attr({\n                                    scaleY: Math.max(0.001, fx.pos) // #5250\n                                });\n                            }\n                        }));\n\n                        // delete this function to allow it only once\n                        series.animate = null;\n                    }\n                }\n            },\n\n            /**\n             * Remove this series from the chart\n             */\n            remove: function() {\n                var series = this,\n                    chart = series.chart;\n\n                // column and bar series affects other series of the same type\n                // as they are either stacked or grouped\n                if (chart.hasRendered) {\n                    each(chart.series, function(otherSeries) {\n                        if (otherSeries.type === series.type) {\n                            otherSeries.isDirty = true;\n                        }\n                    });\n                }\n\n                Series.prototype.remove.apply(series, arguments);\n            }\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n\n        var seriesType = H.seriesType;\n\n        /**\n         * The Bar series class\n         */\n        seriesType('bar', 'column', null, {\n            /**\n             */\n            inverted: true\n        });\n        /**\n         * @extends {plotOptions.column}\n         * @optionparent plotOptions.bar\n         */\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var Series = H.Series,\n            seriesType = H.seriesType;\n        /**\n         * The scatter series type\n         */\n\n        /**\n         * @extends {plotOptions.line}\n         * @optionparent plotOptions.scatter\n         */\n        seriesType('scatter', 'line', {\n\n            /**\n             * The width of the line connecting the data points.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/scatter-linewidth-none/ 0 by default\n             * @sample {highcharts} highcharts/plotoptions/scatter-linewidth-1/ 1px\n             * @default 0\n             * @product highcharts highstock\n             */\n            lineWidth: 0,\n\n            /**\n             */\n            findNearestPointBy: 'xy',\n\n            /**\n             */\n            marker: {\n\n                /**\n                 */\n                enabled: true // Overrides auto-enabling in line series (#3647)\n            },\n\n            /**\n             * A configuration object for the tooltip rendering of each single\n             * series. Properties are inherited from <a class=\"internal\">#tooltip</a>.\n             * Overridable properties are `headerFormat`, `pointFormat`, `yDecimals`,\n             * `xDateFormat`, `yPrefix` and `ySuffix`. Unlike other series, in\n             * a scatter plot the series.name by default shows in the headerFormat\n             * and point.x and point.y in the pointFormat.\n             *\n             * @product highcharts highstock\n             */\n            tooltip: {\n\n                headerFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                    '<span style=\"font-size: 0.85em\"> {series.name}</span><br/>',\n\n\n                /**\n                 */\n                pointFormat: 'x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>'\n            }\n\n            // Prototype members\n        }, {\n            sorted: false,\n            requireSorting: false,\n            noSharedTooltip: true,\n            trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],\n            takeOrdinalPosition: false, // #2342\n            drawGraph: function() {\n                if (this.options.lineWidth) {\n                    Series.prototype.drawGraph.call(this);\n                }\n            }\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var pick = H.pick,\n            relativeLength = H.relativeLength;\n\n        H.CenteredSeriesMixin = {\n            /**\n             * Get the center of the pie based on the size and center options relative to the\n             * plot area. Borrowed by the polar and gauge series types.\n             */\n            getCenter: function() {\n\n                var options = this.options,\n                    chart = this.chart,\n                    slicingRoom = 2 * (options.slicedOffset || 0),\n                    handleSlicingRoom,\n                    plotWidth = chart.plotWidth - 2 * slicingRoom,\n                    plotHeight = chart.plotHeight - 2 * slicingRoom,\n                    centerOption = options.center,\n                    positions = [pick(centerOption[0], '50%'), pick(centerOption[1], '50%'), options.size || '100%', options.innerSize || 0],\n                    smallestSize = Math.min(plotWidth, plotHeight),\n                    i,\n                    value;\n\n                for (i = 0; i < 4; ++i) {\n                    value = positions[i];\n                    handleSlicingRoom = i < 2 || (i === 2 && /%$/.test(value));\n\n                    // i == 0: centerX, relative to width\n                    // i == 1: centerY, relative to height\n                    // i == 2: size, relative to smallestSize\n                    // i == 3: innerSize, relative to size\n                    positions[i] = relativeLength(value, [plotWidth, plotHeight, smallestSize, positions[2]][i]) +\n                        (handleSlicingRoom ? slicingRoom : 0);\n\n                }\n                // innerSize cannot be larger than size (#3632)\n                if (positions[3] > positions[2]) {\n                    positions[3] = positions[2];\n                }\n                return positions;\n            }\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            CenteredSeriesMixin = H.CenteredSeriesMixin,\n            defined = H.defined,\n            each = H.each,\n            extend = H.extend,\n            inArray = H.inArray,\n            LegendSymbolMixin = H.LegendSymbolMixin,\n            noop = H.noop,\n            pick = H.pick,\n            Point = H.Point,\n            Series = H.Series,\n            seriesType = H.seriesType,\n            seriesTypes = H.seriesTypes,\n            setAnimation = H.setAnimation;\n\n        /**\n         * The pie series type.\n         *\n         * @constructor seriesTypes.pie\n         * @augments Series\n         */\n\n        /**\n         * @extends {plotOptions.line}\n         * @optionparent plotOptions.pie\n         */\n        seriesType('pie', 'line', {\n\n            /**\n             * The center of the pie chart relative to the plot area. Can be percentages\n             * or pixel values. The default behaviour (as of 3.0) is to center\n             * the pie so that all slices and data labels are within the plot area.\n             * As a consequence, the pie may actually jump around in a chart with\n             * dynamic values, as the data labels move. In that case, the center\n             * should be explicitly set, for example to `[\"50%\", \"50%\"]`.\n             *\n             * @type {Array<String|Number>}\n             * @sample {highcharts} highcharts/plotoptions/pie-center/ Centered at 100, 100\n             * @default [null, null]\n             * @product highcharts\n             */\n            center: [null, null],\n\n            /**\n             */\n            clip: false,\n\n            /**\n             */\n            colorByPoint: true, // always true for pies\n\n            /**\n             * @extends plotOptions.series.dataLabels\n             * @excluding align,allowOverlap,staggerLines,step\n             * @product highcharts\n             */\n            dataLabels: {\n                // align: null,\n                // connectorWidth: 1,\n                // connectorColor: point.color,\n                // connectorPadding: 5,\n\n                /**\n                 * The distance of the data label from the pie's edge. Negative numbers\n                 * put the data label on top of the pie slices. Connectors are only\n                 * shown for data labels outside the pie.\n                 *\n                 * @type {Number}\n                 * @sample {highcharts} highcharts/plotoptions/pie-datalabels-distance/ Data labels on top of the pie\n                 * @default 30\n                 * @since 2.1\n                 * @product highcharts\n                 */\n                distance: 30,\n\n                /**\n                 * Enable or disable the data labels.\n                 *\n                 * @type {Boolean}\n                 * @since 2.1\n                 * @product highcharts\n                 */\n                enabled: true,\n\n                /**\n                 */\n                formatter: function() { // #2945\n                    return this.point.isNull ? undefined : this.point.name;\n                },\n                // softConnector: true,\n\n                /**\n                 */\n                x: 0\n                // y: 0\n            },\n\n            /**\n             * Equivalent to [chart.ignoreHiddenSeries](#chart.ignoreHiddenSeries),\n             * this option tells whether the series shall be redrawn as if the\n             * hidden point were `null`.\n             *\n             * The default value changed from `false` to `true` with Highcharts\n             * 3.0.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/pie-ignorehiddenpoint/ True, the hiddden point is ignored\n             * @default true\n             * @since 2.3.0\n             * @product highcharts\n             */\n            ignoreHiddenPoint: true,\n            //innerSize: 0,\n\n            /**\n             */\n            legendType: 'point',\n\n            /**\n             */\n            marker: null, // point options are specified in the base options\n\n            /**\n             * The diameter of the pie relative to the plot area. Can be a percentage\n             * or pixel value. Pixel values are given as integers. The default\n             * behaviour (as of 3.0) is to scale to the plot area and give room\n             * for data labels within the plot area. As a consequence, the size\n             * of the pie may vary when points are updated and data labels more\n             * around. In that case it is best to set a fixed value, for example\n             * `\"75%\"`.\n             *\n             * @type {String|Number}\n             * @sample {highcharts} highcharts/plotoptions/pie-size/ Smaller pie\n             * @default\n             * @product highcharts\n             */\n            size: null,\n\n            /**\n             * Whether to display this particular series or series type in the\n             * legend. Since 2.1, pies are not shown in the legend by default.\n             *\n             * @type {Boolean}\n             * @sample {highcharts} highcharts/plotoptions/series-showinlegend/ One series in the legend, one hidden\n             * @product highcharts\n             */\n            showInLegend: false,\n\n            /**\n             * If a point is sliced, moved out from the center, how many pixels\n             * should it be moved?.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/pie-slicedoffset-20/ 20px offset\n             * @default 10\n             * @product highcharts\n             */\n            slicedOffset: 10,\n\n            /**\n             * Sticky tracking of mouse events. When true, the `mouseOut` event\n             * on a series isn't triggered until the mouse moves over another series,\n             * or out of the plot area. When false, the `mouseOut` event on a\n             * series is triggered when the mouse leaves the area around the series'\n             * graph or markers. This also implies the tooltip. When `stickyTracking`\n             * is false and `tooltip.shared` is false, the tooltip will be hidden\n             * when moving the mouse between series.\n             *\n             * @type {Boolean}\n             * @default false\n             * @product highcharts\n             */\n            stickyTracking: false,\n\n            /**\n             */\n            tooltip: {\n\n                /**\n                 */\n                followPointer: true\n            },\n\n\n            /**\n             * The color of the border surrounding each slice. When `null`, the\n             * border takes the same color as the slice fill. This can be used\n             * together with a `borderWidth` to fill drawing gaps created by antialiazing\n             * artefacts in borderless pies.\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the border stroke is given in the `.highcharts-\n             * point` class.\n             *\n             * @type {Color}\n             * @sample {highcharts} highcharts/plotoptions/pie-bordercolor-black/ Black border\n             * @default #ffffff\n             * @product highcharts\n             */\n            borderColor: '#ffffff',\n\n            /**\n             * The width of the border surrounding each slice.\n             *\n             * When setting the border width to 0, there may be small gaps between\n             * the slices due to SVG antialiasing artefacts. To work around this,\n             * keep the border width at 0.5 or 1, but set the `borderColor` to\n             * `null` instead.\n             *\n             * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n             * style/style-by-css), the border stroke width is given in the `.highcharts-\n             * point` class.\n             *\n             * @type {Number}\n             * @sample {highcharts} highcharts/plotoptions/pie-borderwidth/ 3px border\n             * @default 1\n             * @product highcharts\n             */\n            borderWidth: 1,\n\n            /**\n             */\n            states: {\n\n                /**\n                 * @extends plotOptions.series.states.hover\n                 * @product highcharts\n                 */\n                hover: {\n\n                    /**\n                     * How much to brighten the point on interaction. Requires the main\n                     * color to be defined in hex or rgb(a) format.\n                     *\n                     * In [styled mode](http://www.highcharts.com/docs/chart-design-and-\n                     * style/style-by-css), the hover brightness is by default replaced\n                     * by a fill-opacity given in the `.highcharts-point-hover` class.\n                     *\n                     * @type {Number}\n                     * @sample {highcharts} highcharts/plotoptions/pie-states-hover-brightness/ Brightened by 0.5\n                     * @default 0.1\n                     * @product highcharts\n                     */\n                    brightness: 0.1,\n\n                    /**\n                     */\n                    shadow: false\n                }\n            }\n\n\n        }, /** @lends seriesTypes.pie.prototype */ {\n            isCartesian: false,\n            requireSorting: false,\n            directTouch: true,\n            noSharedTooltip: true,\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            axisTypes: [],\n            pointAttribs: seriesTypes.column.prototype.pointAttribs,\n            /**\n             * Animate the pies in\n             */\n            animate: function(init) {\n                var series = this,\n                    points = series.points,\n                    startAngleRad = series.startAngleRad;\n\n                if (!init) {\n                    each(points, function(point) {\n                        var graphic = point.graphic,\n                            args = point.shapeArgs;\n\n                        if (graphic) {\n                            // start values\n                            graphic.attr({\n                                r: point.startR || (series.center[3] / 2), // animate from inner radius (#779)\n                                start: startAngleRad,\n                                end: startAngleRad\n                            });\n\n                            // animate\n                            graphic.animate({\n                                r: args.r,\n                                start: args.start,\n                                end: args.end\n                            }, series.options.animation);\n                        }\n                    });\n\n                    // delete this function to allow it only once\n                    series.animate = null;\n                }\n            },\n\n            /**\n             * Recompute total chart sum and update percentages of points.\n             */\n            updateTotals: function() {\n                var i,\n                    total = 0,\n                    points = this.points,\n                    len = points.length,\n                    point,\n                    ignoreHiddenPoint = this.options.ignoreHiddenPoint;\n\n                // Get the total sum\n                for (i = 0; i < len; i++) {\n                    point = points[i];\n                    total += (ignoreHiddenPoint && !point.visible) ?\n                        0 :\n                        point.isNull ? 0 : point.y;\n                }\n                this.total = total;\n\n                // Set each point's properties\n                for (i = 0; i < len; i++) {\n                    point = points[i];\n                    point.percentage = (total > 0 && (point.visible || !ignoreHiddenPoint)) ? point.y / total * 100 : 0;\n                    point.total = total;\n                }\n            },\n\n            /**\n             * Extend the generatePoints method by adding total and percentage properties to each point\n             */\n            generatePoints: function() {\n                Series.prototype.generatePoints.call(this);\n                this.updateTotals();\n            },\n\n            /**\n             * Do translation for pie slices\n             */\n            translate: function(positions) {\n                this.generatePoints();\n\n                var series = this,\n                    cumulative = 0,\n                    precision = 1000, // issue #172\n                    options = series.options,\n                    slicedOffset = options.slicedOffset,\n                    connectorOffset = slicedOffset + (options.borderWidth || 0),\n                    finalConnectorOffset,\n                    start,\n                    end,\n                    angle,\n                    startAngle = options.startAngle || 0,\n                    startAngleRad = series.startAngleRad = Math.PI / 180 * (startAngle - 90),\n                    endAngleRad = series.endAngleRad = Math.PI / 180 * ((pick(options.endAngle, startAngle + 360)) - 90),\n                    circ = endAngleRad - startAngleRad, //2 * Math.PI,\n                    points = series.points,\n                    radiusX, // the x component of the radius vector for a given point\n                    radiusY,\n                    labelDistance = options.dataLabels.distance,\n                    ignoreHiddenPoint = options.ignoreHiddenPoint,\n                    i,\n                    len = points.length,\n                    point;\n\n                // Get positions - either an integer or a percentage string must be given.\n                // If positions are passed as a parameter, we're in a recursive loop for adjusting\n                // space for data labels.\n                if (!positions) {\n                    series.center = positions = series.getCenter();\n                }\n\n                // Utility for getting the x value from a given y, used for anticollision\n                // logic in data labels.\n                // Added point for using specific points' label distance.\n                series.getX = function(y, left, point) {\n                    angle = Math.asin(Math.min((y - positions[1]) / (positions[2] / 2 + point.labelDistance), 1));\n                    return positions[0] +\n                        (left ? -1 : 1) *\n                        (Math.cos(angle) * (positions[2] / 2 + point.labelDistance));\n                };\n\n                // Calculate the geometry for each point\n                for (i = 0; i < len; i++) {\n\n                    point = points[i];\n\n                    // Used for distance calculation for specific point.\n                    point.labelDistance = pick(\n                        point.options.dataLabels && point.options.dataLabels.distance,\n                        labelDistance\n                    );\n\n                    // Saved for later dataLabels distance calculation.\n                    series.maxLabelDistance = Math.max(series.maxLabelDistance || 0, point.labelDistance);\n\n                    // set start and end angle\n                    start = startAngleRad + (cumulative * circ);\n                    if (!ignoreHiddenPoint || point.visible) {\n                        cumulative += point.percentage / 100;\n                    }\n                    end = startAngleRad + (cumulative * circ);\n\n                    // set the shape\n                    point.shapeType = 'arc';\n                    point.shapeArgs = {\n                        x: positions[0],\n                        y: positions[1],\n                        r: positions[2] / 2,\n                        innerR: positions[3] / 2,\n                        start: Math.round(start * precision) / precision,\n                        end: Math.round(end * precision) / precision\n                    };\n\n                    // The angle must stay within -90 and 270 (#2645)\n                    angle = (end + start) / 2;\n                    if (angle > 1.5 * Math.PI) {\n                        angle -= 2 * Math.PI;\n                    } else if (angle < -Math.PI / 2) {\n                        angle += 2 * Math.PI;\n                    }\n\n                    // Center for the sliced out slice\n                    point.slicedTranslation = {\n                        translateX: Math.round(Math.cos(angle) * slicedOffset),\n                        translateY: Math.round(Math.sin(angle) * slicedOffset)\n                    };\n\n                    // set the anchor point for tooltips\n                    radiusX = Math.cos(angle) * positions[2] / 2;\n                    radiusY = Math.sin(angle) * positions[2] / 2;\n                    point.tooltipPos = [\n                        positions[0] + radiusX * 0.7,\n                        positions[1] + radiusY * 0.7\n                    ];\n\n                    point.half = angle < -Math.PI / 2 || angle > Math.PI / 2 ? 1 : 0;\n                    point.angle = angle;\n\n                    // Set the anchor point for data labels. Use point.labelDistance\n                    // instead of labelDistance // #1174\n                    // finalConnectorOffset - not override connectorOffset value.\n                    finalConnectorOffset = Math.min(connectorOffset, point.labelDistance / 5); // #1678\n                    point.labelPos = [\n                        positions[0] + radiusX + Math.cos(angle) * point.labelDistance, // first break of connector\n                        positions[1] + radiusY + Math.sin(angle) * point.labelDistance, // a/a\n                        positions[0] + radiusX + Math.cos(angle) * finalConnectorOffset, // second break, right outside pie\n                        positions[1] + radiusY + Math.sin(angle) * finalConnectorOffset, // a/a\n                        positions[0] + radiusX, // landing point for connector\n                        positions[1] + radiusY, // a/a\n                        point.labelDistance < 0 ? // alignment\n                        'center' :\n                        point.half ? 'right' : 'left', // alignment\n                        angle // center angle\n                    ];\n\n                }\n            },\n\n            drawGraph: null,\n\n            /**\n             * Draw the data points\n             */\n            drawPoints: function() {\n                var series = this,\n                    chart = series.chart,\n                    renderer = chart.renderer,\n                    groupTranslation,\n                    //center,\n                    graphic,\n                    //group,\n                    pointAttr,\n                    shapeArgs;\n\n\n                var shadow = series.options.shadow;\n                if (shadow && !series.shadowGroup) {\n                    series.shadowGroup = renderer.g('shadow')\n                        .add(series.group);\n                }\n\n\n                // draw the slices\n                each(series.points, function(point) {\n                    if (!point.isNull) {\n                        graphic = point.graphic;\n                        shapeArgs = point.shapeArgs;\n\n\n                        // If the point is sliced, use special translation, else use\n                        // plot area traslation\n                        groupTranslation = point.getTranslate();\n\n\n                        // Put the shadow behind all points\n                        var shadowGroup = point.shadowGroup;\n                        if (shadow && !shadowGroup) {\n                            shadowGroup = point.shadowGroup = renderer.g('shadow')\n                                .add(series.shadowGroup);\n                        }\n\n                        if (shadowGroup) {\n                            shadowGroup.attr(groupTranslation);\n                        }\n                        pointAttr = series.pointAttribs(point, point.selected && 'select');\n\n\n                        // Draw the slice\n                        if (graphic) {\n                            graphic\n                                .setRadialReference(series.center)\n\n                                .attr(pointAttr)\n\n                                .animate(extend(shapeArgs, groupTranslation));\n                        } else {\n\n                            point.graphic = graphic = renderer[point.shapeType](shapeArgs)\n                                .setRadialReference(series.center)\n                                .attr(groupTranslation)\n                                .add(series.group);\n\n                            if (!point.visible) {\n                                graphic.attr({\n                                    visibility: 'hidden'\n                                });\n                            }\n\n\n                            graphic\n                                .attr(pointAttr)\n                                .attr({\n                                    'stroke-linejoin': 'round'\n                                })\n                                .shadow(shadow, shadowGroup);\n\n                        }\n\n                        graphic.addClass(point.getClassName());\n\n                    }\n                });\n\n            },\n\n\n            searchPoint: noop,\n\n            /**\n             * Utility for sorting data labels\n             */\n            sortByAngle: function(points, sign) {\n                points.sort(function(a, b) {\n                    return a.angle !== undefined && (b.angle - a.angle) * sign;\n                });\n            },\n\n            /**\n             * Use a simple symbol from LegendSymbolMixin\n             */\n            drawLegendSymbol: LegendSymbolMixin.drawRectangle,\n\n            /**\n             * Use the getCenter method from drawLegendSymbol\n             */\n            getCenter: CenteredSeriesMixin.getCenter,\n\n            /**\n             * Pies don't have point marker symbols\n             */\n            getSymbol: noop\n\n\n            /**\n             * @constructor seriesTypes.pie.prototype.pointClass\n             * @extends {Point}\n             */\n        }, /** @lends seriesTypes.pie.prototype.pointClass.prototype */ {\n            /**\n             * Initiate the pie slice\n             */\n            init: function() {\n\n                Point.prototype.init.apply(this, arguments);\n\n                var point = this,\n                    toggleSlice;\n\n                point.name = pick(point.name, 'Slice');\n\n                // add event listener for select\n                toggleSlice = function(e) {\n                    point.slice(e.type === 'select');\n                };\n                addEvent(point, 'select', toggleSlice);\n                addEvent(point, 'unselect', toggleSlice);\n\n                return point;\n            },\n\n            /**\n             * Negative points are not valid (#1530, #3623, #5322)\n             */\n            isValid: function() {\n                return H.isNumber(this.y, true) && this.y >= 0;\n            },\n\n            /**\n             * Toggle the visibility of the pie slice\n             * @param {Boolean} vis Whether to show the slice or not. If undefined, the\n             *    visibility is toggled\n             */\n            setVisible: function(vis, redraw) {\n                var point = this,\n                    series = point.series,\n                    chart = series.chart,\n                    ignoreHiddenPoint = series.options.ignoreHiddenPoint;\n\n                redraw = pick(redraw, ignoreHiddenPoint);\n\n                if (vis !== point.visible) {\n\n                    // If called without an argument, toggle visibility\n                    point.visible = point.options.visible = vis = vis === undefined ? !point.visible : vis;\n                    series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data\n\n                    // Show and hide associated elements. This is performed regardless of redraw or not,\n                    // because chart.redraw only handles full series.\n                    each(['graphic', 'dataLabel', 'connector', 'shadowGroup'], function(key) {\n                        if (point[key]) {\n                            point[key][vis ? 'show' : 'hide'](true);\n                        }\n                    });\n\n                    if (point.legendItem) {\n                        chart.legend.colorizeItem(point, vis);\n                    }\n\n                    // #4170, hide halo after hiding point\n                    if (!vis && point.state === 'hover') {\n                        point.setState('');\n                    }\n\n                    // Handle ignore hidden slices\n                    if (ignoreHiddenPoint) {\n                        series.isDirty = true;\n                    }\n\n                    if (redraw) {\n                        chart.redraw();\n                    }\n                }\n            },\n\n            /**\n             * Set or toggle whether the slice is cut out from the pie\n             * @param {Boolean} sliced When undefined, the slice state is toggled\n             * @param {Boolean} redraw Whether to redraw the chart. True by default.\n             */\n            slice: function(sliced, redraw, animation) {\n                var point = this,\n                    series = point.series,\n                    chart = series.chart;\n\n                setAnimation(animation, chart);\n\n                // redraw is true by default\n                redraw = pick(redraw, true);\n\n                // if called without an argument, toggle\n                point.sliced = point.options.sliced = sliced = defined(sliced) ? sliced : !point.sliced;\n                series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data\n\n                point.graphic.animate(this.getTranslate());\n\n\n                if (point.shadowGroup) {\n                    point.shadowGroup.animate(this.getTranslate());\n                }\n\n            },\n\n            getTranslate: function() {\n                return this.sliced ? this.slicedTranslation : {\n                    translateX: 0,\n                    translateY: 0\n                };\n            },\n\n            haloPath: function(size) {\n                var shapeArgs = this.shapeArgs;\n\n                return this.sliced || !this.visible ? [] :\n                    this.series.chart.renderer.symbols.arc(\n                        shapeArgs.x,\n                        shapeArgs.y,\n                        shapeArgs.r + size,\n                        shapeArgs.r + size, {\n                            innerR: this.shapeArgs.r,\n                            start: shapeArgs.start,\n                            end: shapeArgs.end\n                        }\n                    );\n            }\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            arrayMax = H.arrayMax,\n            defined = H.defined,\n            each = H.each,\n            extend = H.extend,\n            format = H.format,\n            map = H.map,\n            merge = H.merge,\n            noop = H.noop,\n            pick = H.pick,\n            relativeLength = H.relativeLength,\n            Series = H.Series,\n            seriesTypes = H.seriesTypes,\n            stableSort = H.stableSort;\n\n\n        /**\n         * Generatl distribution algorithm for distributing labels of differing size along a\n         * confined length in two dimensions. The algorithm takes an array of objects containing\n         * a size, a target and a rank. It will place the labels as close as possible to their\n         * targets, skipping the lowest ranked labels if necessary.\n         */\n        H.distribute = function(boxes, len) {\n\n            var i,\n                overlapping = true,\n                origBoxes = boxes, // Original array will be altered with added .pos\n                restBoxes = [], // The outranked overshoot\n                box,\n                target,\n                total = 0;\n\n            function sortByTarget(a, b) {\n                return a.target - b.target;\n            }\n\n            // If the total size exceeds the len, remove those boxes with the lowest rank\n            i = boxes.length;\n            while (i--) {\n                total += boxes[i].size;\n            }\n\n            // Sort by rank, then slice away overshoot\n            if (total > len) {\n                stableSort(boxes, function(a, b) {\n                    return (b.rank || 0) - (a.rank || 0);\n                });\n                i = 0;\n                total = 0;\n                while (total <= len) {\n                    total += boxes[i].size;\n                    i++;\n                }\n                restBoxes = boxes.splice(i - 1, boxes.length);\n            }\n\n            // Order by target\n            stableSort(boxes, sortByTarget);\n\n\n            // So far we have been mutating the original array. Now\n            // create a copy with target arrays\n            boxes = map(boxes, function(box) {\n                return {\n                    size: box.size,\n                    targets: [box.target]\n                };\n            });\n\n            while (overlapping) {\n                // Initial positions: target centered in box\n                i = boxes.length;\n                while (i--) {\n                    box = boxes[i];\n                    // Composite box, average of targets\n                    target = (Math.min.apply(0, box.targets) + Math.max.apply(0, box.targets)) / 2;\n                    box.pos = Math.min(Math.max(0, target - box.size / 2), len - box.size);\n                }\n\n                // Detect overlap and join boxes\n                i = boxes.length;\n                overlapping = false;\n                while (i--) {\n                    if (i > 0 && boxes[i - 1].pos + boxes[i - 1].size > boxes[i].pos) { // Overlap\n                        boxes[i - 1].size += boxes[i].size; // Add this size to the previous box\n                        boxes[i - 1].targets = boxes[i - 1].targets.concat(boxes[i].targets);\n\n                        // Overlapping right, push left\n                        if (boxes[i - 1].pos + boxes[i - 1].size > len) {\n                            boxes[i - 1].pos = len - boxes[i - 1].size;\n                        }\n                        boxes.splice(i, 1); // Remove this item\n                        overlapping = true;\n                    }\n                }\n            }\n\n            // Now the composite boxes are placed, we need to put the original boxes within them\n            i = 0;\n            each(boxes, function(box) {\n                var posInCompositeBox = 0;\n                each(box.targets, function() {\n                    origBoxes[i].pos = box.pos + posInCompositeBox;\n                    posInCompositeBox += origBoxes[i].size;\n                    i++;\n                });\n            });\n\n            // Add the rest (hidden) boxes and sort by target\n            origBoxes.push.apply(origBoxes, restBoxes);\n            stableSort(origBoxes, sortByTarget);\n        };\n\n\n        /**\n         * Draw the data labels\n         */\n        Series.prototype.drawDataLabels = function() {\n            var series = this,\n                seriesOptions = series.options,\n                options = seriesOptions.dataLabels,\n                points = series.points,\n                pointOptions,\n                generalOptions,\n                hasRendered = series.hasRendered || 0,\n                str,\n                dataLabelsGroup,\n                defer = pick(options.defer, !!seriesOptions.animation),\n                renderer = series.chart.renderer;\n\n            if (options.enabled || series._hasPointLabels) {\n\n                // Process default alignment of data labels for columns\n                if (series.dlProcessOptions) {\n                    series.dlProcessOptions(options);\n                }\n\n                // Create a separate group for the data labels to avoid rotation\n                dataLabelsGroup = series.plotGroup(\n                    'dataLabelsGroup',\n                    'data-labels',\n                    defer && !hasRendered ? 'hidden' : 'visible', // #5133\n                    options.zIndex || 6\n                );\n\n                if (defer) {\n                    dataLabelsGroup.attr({\n                        opacity: +hasRendered\n                    }); // #3300\n                    if (!hasRendered) {\n                        addEvent(series, 'afterAnimate', function() {\n                            if (series.visible) { // #2597, #3023, #3024\n                                dataLabelsGroup.show(true);\n                            }\n                            dataLabelsGroup[seriesOptions.animation ? 'animate' : 'attr']({\n                                opacity: 1\n                            }, {\n                                duration: 200\n                            });\n                        });\n                    }\n                }\n\n                // Make the labels for each point\n                generalOptions = options;\n                each(points, function(point) {\n                    var enabled,\n                        dataLabel = point.dataLabel,\n                        labelConfig,\n                        attr,\n                        rotation,\n                        connector = point.connector,\n                        isNew = !dataLabel,\n                        style;\n                    // Determine if each data label is enabled\n                    // @note dataLabelAttribs (like pointAttribs) would eradicate\n                    // the need for dlOptions, and simplify the section below.\n                    pointOptions = point.dlOptions || (point.options && point.options.dataLabels); // dlOptions is used in treemaps\n                    enabled = pick(pointOptions && pointOptions.enabled, generalOptions.enabled) && point.y !== null; // #2282, #4641\n                    if (enabled) {\n                        // Create individual options structure that can be extended without\n                        // affecting others\n                        options = merge(generalOptions, pointOptions);\n                        labelConfig = point.getLabelConfig();\n                        str = options.format ?\n                            format(options.format, labelConfig) :\n                            options.formatter.call(labelConfig, options);\n                        style = options.style;\n                        rotation = options.rotation;\n\n                        // Determine the color\n                        style.color = pick(options.color, style.color, series.color, '#000000');\n                        // Get automated contrast color\n                        if (style.color === 'contrast') {\n                            point.contrastColor = renderer.getContrast(point.color || series.color);\n                            style.color = options.inside || pick(point.labelDistance, options.distance) < 0 ||\n                                !!seriesOptions.stacking ? point.contrastColor : '#000000';\n                        }\n                        if (seriesOptions.cursor) {\n                            style.cursor = seriesOptions.cursor;\n                        }\n\n\n                        attr = {\n                            //align: align,\n\n                            fill: options.backgroundColor,\n                            stroke: options.borderColor,\n                            'stroke-width': options.borderWidth,\n\n                            r: options.borderRadius || 0,\n                            rotation: rotation,\n                            padding: options.padding,\n                            zIndex: 1\n                        };\n\n                        // Remove unused attributes (#947)\n                        H.objectEach(attr, function(val, name) {\n                            if (val === undefined) {\n                                delete attr[name];\n                            }\n                        });\n                    }\n                    // If the point is outside the plot area, destroy it. #678, #820\n                    if (dataLabel && (!enabled || !defined(str))) {\n                        point.dataLabel = dataLabel = dataLabel.destroy();\n                        if (connector) {\n                            point.connector = connector.destroy();\n                        }\n                        // Individual labels are disabled if the are explicitly disabled\n                        // in the point options, or if they fall outside the plot area.\n                    } else if (enabled && defined(str)) {\n                        // create new label\n                        if (!dataLabel) {\n                            dataLabel = point.dataLabel = renderer[rotation ? 'text' : 'label']( // labels don't support rotation\n                                str,\n                                0, -9999,\n                                options.shape,\n                                null,\n                                null,\n                                options.useHTML,\n                                null,\n                                'data-label'\n                            );\n                            dataLabel.addClass(\n                                'highcharts-data-label-color-' + point.colorIndex +\n                                ' ' + (options.className || '') +\n                                (options.useHTML ? 'highcharts-tracker' : '') // #3398\n                            );\n                        } else {\n                            attr.text = str;\n                        }\n                        dataLabel.attr(attr);\n\n                        // Styles must be applied before add in order to read text bounding box\n                        dataLabel.css(style).shadow(options.shadow);\n\n\n                        if (!dataLabel.added) {\n                            dataLabel.add(dataLabelsGroup);\n                        }\n                        // Now the data label is created and placed at 0,0, so we need to align it\n                        series.alignDataLabel(point, dataLabel, options, null, isNew);\n                    }\n                });\n            }\n        };\n\n        /**\n         * Align each individual data label\n         */\n        Series.prototype.alignDataLabel = function(point, dataLabel, options, alignTo, isNew) {\n            var chart = this.chart,\n                inverted = chart.inverted,\n                plotX = pick(point.plotX, -9999),\n                plotY = pick(point.plotY, -9999),\n                bBox = dataLabel.getBBox(),\n                fontSize,\n                baseline,\n                rotation = options.rotation,\n                normRotation,\n                negRotation,\n                align = options.align,\n                rotCorr, // rotation correction\n                // Math.round for rounding errors (#2683), alignTo to allow column labels (#2700)\n                visible =\n                this.visible &&\n                (\n                    point.series.forceDL ||\n                    chart.isInsidePlot(plotX, Math.round(plotY), inverted) ||\n                    (\n                        alignTo && chart.isInsidePlot(\n                            plotX,\n                            inverted ? alignTo.x + 1 : alignTo.y + alignTo.height - 1,\n                            inverted\n                        )\n                    )\n                ),\n                alignAttr, // the final position;\n                justify = pick(options.overflow, 'justify') === 'justify';\n\n            if (visible) {\n\n\n                fontSize = options.style.fontSize;\n\n\n                baseline = chart.renderer.fontMetrics(fontSize, dataLabel).b;\n\n                // The alignment box is a singular point\n                alignTo = extend({\n                    x: inverted ? this.yAxis.len - plotY : plotX,\n                    y: Math.round(inverted ? this.xAxis.len - plotX : plotY),\n                    width: 0,\n                    height: 0\n                }, alignTo);\n\n                // Add the text size for alignment calculation\n                extend(options, {\n                    width: bBox.width,\n                    height: bBox.height\n                });\n\n                // Allow a hook for changing alignment in the last moment, then do the alignment\n                if (rotation) {\n                    justify = false; // Not supported for rotated text\n                    rotCorr = chart.renderer.rotCorr(baseline, rotation); // #3723\n                    alignAttr = {\n                        x: alignTo.x + options.x + alignTo.width / 2 + rotCorr.x,\n                        y: alignTo.y + options.y + {\n                            top: 0,\n                            middle: 0.5,\n                            bottom: 1\n                        }[options.verticalAlign] * alignTo.height\n                    };\n                    dataLabel[isNew ? 'attr' : 'animate'](alignAttr)\n                        .attr({ // #3003\n                            align: align\n                        });\n\n                    // Compensate for the rotated label sticking out on the sides\n                    normRotation = (rotation + 720) % 360;\n                    negRotation = normRotation > 180 && normRotation < 360;\n\n                    if (align === 'left') {\n                        alignAttr.y -= negRotation ? bBox.height : 0;\n                    } else if (align === 'center') {\n                        alignAttr.x -= bBox.width / 2;\n                        alignAttr.y -= bBox.height / 2;\n                    } else if (align === 'right') {\n                        alignAttr.x -= bBox.width;\n                        alignAttr.y -= negRotation ? 0 : bBox.height;\n                    }\n\n\n                } else {\n                    dataLabel.align(options, null, alignTo);\n                    alignAttr = dataLabel.alignAttr;\n                }\n\n                // Handle justify or crop\n                if (justify) {\n                    point.isLabelJustified = this.justifyDataLabel(\n                        dataLabel,\n                        options,\n                        alignAttr,\n                        bBox,\n                        alignTo,\n                        isNew\n                    );\n\n                    // Now check that the data label is within the plot area\n                } else if (pick(options.crop, true)) {\n                    visible = chart.isInsidePlot(alignAttr.x, alignAttr.y) && chart.isInsidePlot(alignAttr.x + bBox.width, alignAttr.y + bBox.height);\n                }\n\n                // When we're using a shape, make it possible with a connector or an arrow pointing to thie point\n                if (options.shape && !rotation) {\n                    dataLabel[isNew ? 'attr' : 'animate']({\n                        anchorX: inverted ? chart.plotWidth - point.plotY : point.plotX,\n                        anchorY: inverted ? chart.plotHeight - point.plotX : point.plotY\n                    });\n                }\n            }\n\n            // Show or hide based on the final aligned position\n            if (!visible) {\n                dataLabel.attr({\n                    y: -9999\n                });\n                dataLabel.placed = false; // don't animate back in\n            }\n\n        };\n\n        /**\n         * If data labels fall partly outside the plot area, align them back in, in a way that\n         * doesn't hide the point.\n         */\n        Series.prototype.justifyDataLabel = function(dataLabel, options, alignAttr, bBox, alignTo, isNew) {\n            var chart = this.chart,\n                align = options.align,\n                verticalAlign = options.verticalAlign,\n                off,\n                justified,\n                padding = dataLabel.box ? 0 : (dataLabel.padding || 0);\n\n            // Off left\n            off = alignAttr.x + padding;\n            if (off < 0) {\n                if (align === 'right') {\n                    options.align = 'left';\n                } else {\n                    options.x = -off;\n                }\n                justified = true;\n            }\n\n            // Off right\n            off = alignAttr.x + bBox.width - padding;\n            if (off > chart.plotWidth) {\n                if (align === 'left') {\n                    options.align = 'right';\n                } else {\n                    options.x = chart.plotWidth - off;\n                }\n                justified = true;\n            }\n\n            // Off top\n            off = alignAttr.y + padding;\n            if (off < 0) {\n                if (verticalAlign === 'bottom') {\n                    options.verticalAlign = 'top';\n                } else {\n                    options.y = -off;\n                }\n                justified = true;\n            }\n\n            // Off bottom\n            off = alignAttr.y + bBox.height - padding;\n            if (off > chart.plotHeight) {\n                if (verticalAlign === 'top') {\n                    options.verticalAlign = 'bottom';\n                } else {\n                    options.y = chart.plotHeight - off;\n                }\n                justified = true;\n            }\n\n            if (justified) {\n                dataLabel.placed = !isNew;\n                dataLabel.align(options, null, alignTo);\n            }\n\n            return justified;\n        };\n\n        /**\n         * Override the base drawDataLabels method by pie specific functionality\n         */\n        if (seriesTypes.pie) {\n            seriesTypes.pie.prototype.drawDataLabels = function() {\n                var series = this,\n                    data = series.data,\n                    point,\n                    chart = series.chart,\n                    options = series.options.dataLabels,\n                    connectorPadding = pick(options.connectorPadding, 10),\n                    connectorWidth = pick(options.connectorWidth, 1),\n                    plotWidth = chart.plotWidth,\n                    plotHeight = chart.plotHeight,\n                    connector,\n                    seriesCenter = series.center,\n                    radius = seriesCenter[2] / 2,\n                    centerY = seriesCenter[1],\n                    dataLabel,\n                    dataLabelWidth,\n                    labelPos,\n                    labelHeight,\n                    halves = [ // divide the points into right and left halves for anti collision\n                        [], // right\n                        [] // left\n                    ],\n                    x,\n                    y,\n                    visibility,\n                    j,\n                    overflow = [0, 0, 0, 0]; // top, right, bottom, left\n\n                // get out if not enabled\n                if (!series.visible || (!options.enabled && !series._hasPointLabels)) {\n                    return;\n                }\n\n                // Reset all labels that have been shortened\n                each(data, function(point) {\n                    if (point.dataLabel && point.visible && point.dataLabel.shortened) {\n                        point.dataLabel\n                            .attr({\n                                width: 'auto'\n                            }).css({\n                                width: 'auto',\n                                textOverflow: 'clip'\n                            });\n                        point.dataLabel.shortened = false;\n                    }\n                });\n\n\n                // run parent method\n                Series.prototype.drawDataLabels.apply(series);\n\n                each(data, function(point) {\n                    if (point.dataLabel && point.visible) { // #407, #2510\n\n                        // Arrange points for detection collision\n                        halves[point.half].push(point);\n\n                        // Reset positions (#4905)\n                        point.dataLabel._pos = null;\n                    }\n                });\n\n                /* Loop over the points in each half, starting from the top and bottom\n                 * of the pie to detect overlapping labels.\n                 */\n                each(halves, function(points, i) {\n\n                    var top,\n                        bottom,\n                        length = points.length,\n                        positions = [],\n                        naturalY,\n                        sideOverflow,\n                        positionsIndex, // Point index in positions array.\n                        size;\n\n                    if (!length) {\n                        return;\n                    }\n\n                    // Sort by angle\n                    series.sortByAngle(points, i - 0.5);\n                    // Only do anti-collision when we have dataLabels outside the pie\n                    // and have connectors. (#856)\n                    if (series.maxLabelDistance > 0) {\n                        top = Math.max(\n                            0,\n                            centerY - radius - series.maxLabelDistance\n                        );\n                        bottom = Math.min(\n                            centerY + radius + series.maxLabelDistance,\n                            chart.plotHeight\n                        );\n                        each(points, function(point) {\n                            // check if specific points' label is outside the pie\n                            if (point.labelDistance > 0 && point.dataLabel) {\n                                // point.top depends on point.labelDistance value\n                                // Used for calculation of y value in getX method\n                                point.top = Math.max(\n                                    0,\n                                    centerY - radius - point.labelDistance\n                                );\n                                point.bottom = Math.min(\n                                    centerY + radius + point.labelDistance,\n                                    chart.plotHeight\n                                );\n                                size = point.dataLabel.getBBox().height || 21;\n\n                                // point.positionsIndex is needed for getting index of\n                                // parameter related to specific point inside positions\n                                // array - not every point is in positions array.\n                                point.positionsIndex = positions.push({\n                                    target: point.labelPos[1] - point.top + size / 2,\n                                    size: size,\n                                    rank: point.y\n                                }) - 1;\n                            }\n                        });\n                        H.distribute(positions, bottom + size - top);\n                    }\n\n                    // Now the used slots are sorted, fill them up sequentially\n                    for (j = 0; j < length; j++) {\n\n                        point = points[j];\n                        positionsIndex = point.positionsIndex;\n                        labelPos = point.labelPos;\n                        dataLabel = point.dataLabel;\n                        visibility = point.visible === false ? 'hidden' : 'inherit';\n                        naturalY = labelPos[1];\n\n                        if (positions && defined(positions[positionsIndex])) {\n                            if (positions[positionsIndex].pos === undefined) {\n                                visibility = 'hidden';\n                            } else {\n                                labelHeight = positions[positionsIndex].size;\n                                y = point.top + positions[positionsIndex].pos;\n                            }\n\n                        } else {\n                            y = naturalY;\n                        }\n\n                        // It is needed to delete point.positionIndex for\n                        // dynamically added points etc.\n\n                        delete point.positionIndex;\n\n                        // get the x - use the natural x position for labels near the\n                        // top and bottom, to prevent the top and botton slice connectors\n                        // from touching each other on either side\n                        if (options.justify) {\n                            x = seriesCenter[0] + (i ? -1 : 1) * (radius + point.labelDistance);\n                        } else {\n                            x = series.getX(y < point.top + 2 || y > point.bottom - 2 ? naturalY : y, i, point);\n                        }\n\n\n                        // Record the placement and visibility\n                        dataLabel._attr = {\n                            visibility: visibility,\n                            align: labelPos[6]\n                        };\n                        dataLabel._pos = {\n                            x: x + options.x +\n                                ({\n                                    left: connectorPadding,\n                                    right: -connectorPadding\n                                }[labelPos[6]] || 0),\n                            y: y + options.y - 10 // 10 is for the baseline (label vs text)\n                        };\n                        labelPos.x = x;\n                        labelPos.y = y;\n\n\n                        // Detect overflowing data labels\n                        if (pick(options.crop, true)) {\n                            dataLabelWidth = dataLabel.getBBox().width;\n\n                            sideOverflow = null;\n                            // Overflow left\n                            if (x - dataLabelWidth < connectorPadding) {\n                                sideOverflow = Math.round(\n                                    dataLabelWidth - x + connectorPadding\n                                );\n                                overflow[3] = Math.max(sideOverflow, overflow[3]);\n\n                                // Overflow right\n                            } else if (\n                                x + dataLabelWidth >\n                                plotWidth - connectorPadding\n                            ) {\n                                sideOverflow = Math.round(\n                                    x + dataLabelWidth - plotWidth + connectorPadding\n                                );\n                                overflow[1] = Math.max(sideOverflow, overflow[1]);\n                            }\n\n                            // Overflow top\n                            if (y - labelHeight / 2 < 0) {\n                                overflow[0] = Math.max(\n                                    Math.round(-y + labelHeight / 2),\n                                    overflow[0]\n                                );\n\n                                // Overflow left\n                            } else if (y + labelHeight / 2 > plotHeight) {\n                                overflow[2] = Math.max(\n                                    Math.round(y + labelHeight / 2 - plotHeight),\n                                    overflow[2]\n                                );\n                            }\n                            dataLabel.sideOverflow = sideOverflow;\n                        }\n                    } // for each point\n                }); // for each half\n\n                // Do not apply the final placement and draw the connectors until we have verified\n                // that labels are not spilling over.\n                if (arrayMax(overflow) === 0 || this.verifyDataLabelOverflow(overflow)) {\n\n                    // Place the labels in the final position\n                    this.placeDataLabels();\n\n                    // Draw the connectors\n                    if (connectorWidth) {\n                        each(this.points, function(point) {\n                            var isNew;\n\n                            connector = point.connector;\n                            dataLabel = point.dataLabel;\n\n                            if (\n                                dataLabel &&\n                                dataLabel._pos &&\n                                point.visible &&\n                                point.labelDistance > 0\n                            ) {\n                                visibility = dataLabel._attr.visibility;\n\n                                isNew = !connector;\n\n                                if (isNew) {\n                                    point.connector = connector = chart.renderer.path()\n                                        .addClass('highcharts-data-label-connector highcharts-color-' + point.colorIndex)\n                                        .add(series.dataLabelsGroup);\n\n\n                                    connector.attr({\n                                        'stroke-width': connectorWidth,\n                                        'stroke': options.connectorColor || point.color || '#666666'\n                                    });\n\n                                }\n                                connector[isNew ? 'attr' : 'animate']({\n                                    d: series.connectorPath(point.labelPos)\n                                });\n                                connector.attr('visibility', visibility);\n\n                            } else if (connector) {\n                                point.connector = connector.destroy();\n                            }\n                        });\n                    }\n                }\n            };\n\n            /**\n             * Extendable method for getting the path of the connector between the data label\n             * and the pie slice.\n             */\n            seriesTypes.pie.prototype.connectorPath = function(labelPos) {\n                var x = labelPos.x,\n                    y = labelPos.y;\n                return pick(this.options.dataLabels.softConnector, true) ? [\n                    'M',\n                    x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label\n                    'C',\n                    x, y, // first break, next to the label\n                    2 * labelPos[2] - labelPos[4], 2 * labelPos[3] - labelPos[5],\n                    labelPos[2], labelPos[3], // second break\n                    'L',\n                    labelPos[4], labelPos[5] // base\n                ] : [\n                    'M',\n                    x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label\n                    'L',\n                    labelPos[2], labelPos[3], // second break\n                    'L',\n                    labelPos[4], labelPos[5] // base\n                ];\n            };\n\n            /**\n             * Perform the final placement of the data labels after we have verified that they\n             * fall within the plot area.\n             */\n            seriesTypes.pie.prototype.placeDataLabels = function() {\n                each(this.points, function(point) {\n                    var dataLabel = point.dataLabel,\n                        _pos;\n                    if (dataLabel && point.visible) {\n                        _pos = dataLabel._pos;\n                        if (_pos) {\n\n                            // Shorten data labels with ellipsis if they still overflow\n                            // after the pie has reached minSize (#223).\n                            if (dataLabel.sideOverflow) {\n                                dataLabel._attr.width =\n                                    dataLabel.getBBox().width - dataLabel.sideOverflow;\n                                dataLabel.css({\n                                    width: dataLabel._attr.width + 'px',\n                                    textOverflow: 'ellipsis'\n                                });\n                                dataLabel.shortened = true;\n                            }\n\n                            dataLabel.attr(dataLabel._attr);\n                            dataLabel[dataLabel.moved ? 'animate' : 'attr'](_pos);\n                            dataLabel.moved = true;\n                        } else if (dataLabel) {\n                            dataLabel.attr({\n                                y: -9999\n                            });\n                        }\n                    }\n                }, this);\n            };\n\n            seriesTypes.pie.prototype.alignDataLabel = noop;\n\n            /**\n             * Verify whether the data labels are allowed to draw, or we should run more translation and data\n             * label positioning to keep them inside the plot area. Returns true when data labels are ready\n             * to draw.\n             */\n            seriesTypes.pie.prototype.verifyDataLabelOverflow = function(overflow) {\n\n                var center = this.center,\n                    options = this.options,\n                    centerOption = options.center,\n                    minSize = options.minSize || 80,\n                    newSize = minSize,\n                    // If a size is set, return true and don't try to shrink the pie\n                    // to fit the labels.\n                    ret = options.size !== null;\n\n                if (!ret) {\n                    // Handle horizontal size and center\n                    if (centerOption[0] !== null) { // Fixed center\n                        newSize = Math.max(center[2] -\n                            Math.max(overflow[1], overflow[3]), minSize);\n\n                    } else { // Auto center\n                        newSize = Math.max(\n                            // horizontal overflow\n                            center[2] - overflow[1] - overflow[3],\n                            minSize\n                        );\n                        // horizontal center\n                        center[0] += (overflow[3] - overflow[1]) / 2;\n                    }\n\n                    // Handle vertical size and center\n                    if (centerOption[1] !== null) { // Fixed center\n                        newSize = Math.max(Math.min(newSize, center[2] -\n                            Math.max(overflow[0], overflow[2])), minSize);\n\n                    } else { // Auto center\n                        newSize = Math.max(\n                            Math.min(\n                                newSize,\n                                // vertical overflow\n                                center[2] - overflow[0] - overflow[2]\n                            ),\n                            minSize\n                        );\n                        // vertical center\n                        center[1] += (overflow[0] - overflow[2]) / 2;\n                    }\n\n                    // If the size must be decreased, we need to run translate and\n                    // drawDataLabels again\n                    if (newSize < center[2]) {\n                        center[2] = newSize;\n                        center[3] = Math.min( // #3632\n                            relativeLength(options.innerSize || 0, newSize),\n                            newSize\n                        );\n                        this.translate(center);\n\n                        if (this.drawDataLabels) {\n                            this.drawDataLabels();\n                        }\n                        // Else, return true to indicate that the pie and its labels is\n                        // within the plot area\n                    } else {\n                        ret = true;\n                    }\n                }\n                return ret;\n            };\n        }\n\n        if (seriesTypes.column) {\n\n            /**\n             * Override the basic data label alignment by adjusting for the position of the column\n             */\n            seriesTypes.column.prototype.alignDataLabel = function(point, dataLabel, options, alignTo, isNew) {\n                var inverted = this.chart.inverted,\n                    series = point.series,\n                    dlBox = point.dlBox || point.shapeArgs, // data label box for alignment\n                    below = pick(point.below, point.plotY > pick(this.translatedThreshold, series.yAxis.len)), // point.below is used in range series\n                    inside = pick(options.inside, !!this.options.stacking), // draw it inside the box?\n                    overshoot;\n\n                // Align to the column itself, or the top of it\n                if (dlBox) { // Area range uses this method but not alignTo\n                    alignTo = merge(dlBox);\n\n                    if (alignTo.y < 0) {\n                        alignTo.height += alignTo.y;\n                        alignTo.y = 0;\n                    }\n                    overshoot = alignTo.y + alignTo.height - series.yAxis.len;\n                    if (overshoot > 0) {\n                        alignTo.height -= overshoot;\n                    }\n\n                    if (inverted) {\n                        alignTo = {\n                            x: series.yAxis.len - alignTo.y - alignTo.height,\n                            y: series.xAxis.len - alignTo.x - alignTo.width,\n                            width: alignTo.height,\n                            height: alignTo.width\n                        };\n                    }\n\n                    // Compute the alignment box\n                    if (!inside) {\n                        if (inverted) {\n                            alignTo.x += below ? 0 : alignTo.width;\n                            alignTo.width = 0;\n                        } else {\n                            alignTo.y += below ? alignTo.height : 0;\n                            alignTo.height = 0;\n                        }\n                    }\n                }\n\n\n                // When alignment is undefined (typically columns and bars), display the individual\n                // point below or above the point depending on the threshold\n                options.align = pick(\n                    options.align, !inverted || inside ? 'center' : below ? 'right' : 'left'\n                );\n                options.verticalAlign = pick(\n                    options.verticalAlign,\n                    inverted || inside ? 'middle' : below ? 'top' : 'bottom'\n                );\n\n                // Call the parent method\n                Series.prototype.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);\n\n                // If label was justified and we have contrast, set it:\n                if (point.isLabelJustified && point.contrastColor) {\n                    point.dataLabel.css({\n                        color: point.contrastColor\n                    });\n                }\n            };\n        }\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2009-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        /**\n         * Highcharts module to hide overlapping data labels. This module is included in\n         * Highcharts.\n         */\n        var Chart = H.Chart,\n            each = H.each,\n            objectEach = H.objectEach,\n            pick = H.pick,\n            addEvent = H.addEvent;\n\n        // Collect potensial overlapping data labels. Stack labels probably don't need\n        // to be considered because they are usually accompanied by data labels that lie\n        // inside the columns.\n        Chart.prototype.callbacks.push(function(chart) {\n            function collectAndHide() {\n                var labels = [];\n\n                each(chart.yAxis || [], function(yAxis) {\n                    if (\n                        yAxis.options.stackLabels &&\n                        !yAxis.options.stackLabels.allowOverlap\n                    ) {\n                        objectEach(yAxis.stacks, function(stack) {\n                            objectEach(stack, function(stackItem) {\n                                labels.push(stackItem.label);\n                            });\n                        });\n                    }\n                });\n\n                each(chart.series || [], function(series) {\n                    var dlOptions = series.options.dataLabels,\n                        // Range series have two collections\n                        collections = series.dataLabelCollections || ['dataLabel'];\n\n                    if (\n                        (dlOptions.enabled || series._hasPointLabels) &&\n                        !dlOptions.allowOverlap &&\n                        series.visible\n                    ) { // #3866\n                        each(collections, function(coll) {\n                            each(series.points, function(point) {\n                                if (point[coll]) {\n                                    point[coll].labelrank = pick(\n                                        point.labelrank,\n                                        point.shapeArgs && point.shapeArgs.height\n                                    ); // #4118\n                                    labels.push(point[coll]);\n                                }\n                            });\n                        });\n                    }\n                });\n                chart.hideOverlappingLabels(labels);\n            }\n\n            // Do it now ...\n            collectAndHide();\n\n            // ... and after each chart redraw\n            addEvent(chart, 'redraw', collectAndHide);\n\n        });\n\n        /**\n         * Hide overlapping labels. Labels are moved and faded in and out on zoom to\n         * provide a smooth visual imression.\n         */\n        Chart.prototype.hideOverlappingLabels = function(labels) {\n\n            var len = labels.length,\n                label,\n                i,\n                j,\n                label1,\n                label2,\n                isIntersecting,\n                pos1,\n                pos2,\n                parent1,\n                parent2,\n                padding,\n                bBox,\n                intersectRect = function(x1, y1, w1, h1, x2, y2, w2, h2) {\n                    return !(\n                        x2 > x1 + w1 ||\n                        x2 + w2 < x1 ||\n                        y2 > y1 + h1 ||\n                        y2 + h2 < y1\n                    );\n                };\n\n            for (i = 0; i < len; i++) {\n                label = labels[i];\n                if (label) {\n\n                    // Mark with initial opacity\n                    label.oldOpacity = label.opacity;\n                    label.newOpacity = 1;\n\n                    // Get width and height if pure text nodes (stack labels)\n                    if (!label.width) {\n                        bBox = label.getBBox();\n                        label.width = bBox.width;\n                        label.height = bBox.height;\n                    }\n                }\n            }\n\n            // Prevent a situation in a gradually rising slope, that each label will\n            // hide the previous one because the previous one always has lower rank.\n            labels.sort(function(a, b) {\n                return (b.labelrank || 0) - (a.labelrank || 0);\n            });\n\n            // Detect overlapping labels\n            for (i = 0; i < len; i++) {\n                label1 = labels[i];\n\n                for (j = i + 1; j < len; ++j) {\n                    label2 = labels[j];\n                    if (\n                        label1 && label2 &&\n                        label1 !== label2 && // #6465, polar chart with connectEnds\n                        label1.placed && label2.placed &&\n                        label1.newOpacity !== 0 && label2.newOpacity !== 0\n                    ) {\n                        pos1 = label1.alignAttr;\n                        pos2 = label2.alignAttr;\n                        // Different panes have different positions\n                        parent1 = label1.parentGroup;\n                        parent2 = label2.parentGroup;\n                        // Substract the padding if no background or border (#4333)\n                        padding = 2 * (label1.box ? 0 : (label1.padding || 0));\n                        isIntersecting = intersectRect(\n                            pos1.x + parent1.translateX,\n                            pos1.y + parent1.translateY,\n                            label1.width - padding,\n                            label1.height - padding,\n                            pos2.x + parent2.translateX,\n                            pos2.y + parent2.translateY,\n                            label2.width - padding,\n                            label2.height - padding\n                        );\n\n                        if (isIntersecting) {\n                            (label1.labelrank < label2.labelrank ? label1 : label2)\n                            .newOpacity = 0;\n                        }\n                    }\n                }\n            }\n\n            // Hide or show\n            each(labels, function(label) {\n                var complete,\n                    newOpacity;\n\n                if (label) {\n                    newOpacity = label.newOpacity;\n\n                    if (label.oldOpacity !== newOpacity && label.placed) {\n\n                        // Make sure the label is completely hidden to avoid catching\n                        // clicks (#4362)\n                        if (newOpacity) {\n                            label.show(true);\n                        } else {\n                            complete = function() {\n                                label.hide();\n                            };\n                        }\n\n                        // Animate or set the opacity\n                        label.alignAttr.opacity = newOpacity;\n                        label[label.isOld ? 'animate' : 'attr'](\n                            label.alignAttr,\n                            null,\n                            complete\n                        );\n\n                    }\n                    label.isOld = true;\n                }\n            });\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            Chart = H.Chart,\n            createElement = H.createElement,\n            css = H.css,\n            defaultOptions = H.defaultOptions,\n            defaultPlotOptions = H.defaultPlotOptions,\n            each = H.each,\n            extend = H.extend,\n            fireEvent = H.fireEvent,\n            hasTouch = H.hasTouch,\n            inArray = H.inArray,\n            isObject = H.isObject,\n            Legend = H.Legend,\n            merge = H.merge,\n            pick = H.pick,\n            Point = H.Point,\n            Series = H.Series,\n            seriesTypes = H.seriesTypes,\n            svg = H.svg,\n            TrackerMixin;\n\n        /**\n         * TrackerMixin for points and graphs.\n         */\n        TrackerMixin = H.TrackerMixin = {\n\n            /**\n             * Draw the tracker for a point.\n             */\n            drawTrackerPoint: function() {\n                var series = this,\n                    chart = series.chart,\n                    pointer = chart.pointer,\n                    onMouseOver = function(e) {\n                        var point = pointer.getPointFromEvent(e);\n                        // undefined on graph in scatterchart\n                        if (point !== undefined) {\n                            pointer.isDirectTouch = true;\n                            point.onMouseOver(e);\n                        }\n                    };\n\n                // Add reference to the point\n                each(series.points, function(point) {\n                    if (point.graphic) {\n                        point.graphic.element.point = point;\n                    }\n                    if (point.dataLabel) {\n                        if (point.dataLabel.div) {\n                            point.dataLabel.div.point = point;\n                        } else {\n                            point.dataLabel.element.point = point;\n                        }\n                    }\n                });\n\n                // Add the event listeners, we need to do this only once\n                if (!series._hasTracking) {\n                    each(series.trackerGroups, function(key) {\n                        if (series[key]) { // we don't always have dataLabelsGroup\n                            series[key]\n                                .addClass('highcharts-tracker')\n                                .on('mouseover', onMouseOver)\n                                .on('mouseout', function(e) {\n                                    pointer.onTrackerMouseOut(e);\n                                });\n                            if (hasTouch) {\n                                series[key].on('touchstart', onMouseOver);\n                            }\n\n\n                            if (series.options.cursor) {\n                                series[key]\n                                    .css(css)\n                                    .css({\n                                        cursor: series.options.cursor\n                                    });\n                            }\n\n                        }\n                    });\n                    series._hasTracking = true;\n                }\n            },\n\n            /**\n             * Draw the tracker object that sits above all data labels and markers to\n             * track mouse events on the graph or points. For the line type charts\n             * the tracker uses the same graphPath, but with a greater stroke width\n             * for better control.\n             */\n            drawTrackerGraph: function() {\n                var series = this,\n                    options = series.options,\n                    trackByArea = options.trackByArea,\n                    trackerPath = [].concat(trackByArea ? series.areaPath : series.graphPath),\n                    trackerPathLength = trackerPath.length,\n                    chart = series.chart,\n                    pointer = chart.pointer,\n                    renderer = chart.renderer,\n                    snap = chart.options.tooltip.snap,\n                    tracker = series.tracker,\n                    i,\n                    onMouseOver = function() {\n                        if (chart.hoverSeries !== series) {\n                            series.onMouseOver();\n                        }\n                    },\n                    /*\n                     * Empirical lowest possible opacities for TRACKER_FILL for an element to stay invisible but clickable\n                     * IE6: 0.002\n                     * IE7: 0.002\n                     * IE8: 0.002\n                     * IE9: 0.00000000001 (unlimited)\n                     * IE10: 0.0001 (exporting only)\n                     * FF: 0.00000000001 (unlimited)\n                     * Chrome: 0.000001\n                     * Safari: 0.000001\n                     * Opera: 0.00000000001 (unlimited)\n                     */\n                    TRACKER_FILL = 'rgba(192,192,192,' + (svg ? 0.0001 : 0.002) + ')';\n\n                // Extend end points. A better way would be to use round linecaps,\n                // but those are not clickable in VML.\n                if (trackerPathLength && !trackByArea) {\n                    i = trackerPathLength + 1;\n                    while (i--) {\n                        if (trackerPath[i] === 'M') { // extend left side\n                            trackerPath.splice(i + 1, 0, trackerPath[i + 1] - snap, trackerPath[i + 2], 'L');\n                        }\n                        if ((i && trackerPath[i] === 'M') || i === trackerPathLength) { // extend right side\n                            trackerPath.splice(i, 0, 'L', trackerPath[i - 2] + snap, trackerPath[i - 1]);\n                        }\n                    }\n                }\n\n                // handle single points\n                /*for (i = 0; i < singlePoints.length; i++) {\n                \tsinglePoint = singlePoints[i];\n                \ttrackerPath.push(M, singlePoint.plotX - snap, singlePoint.plotY,\n                \tL, singlePoint.plotX + snap, singlePoint.plotY);\n                }*/\n\n                // draw the tracker\n                if (tracker) {\n                    tracker.attr({\n                        d: trackerPath\n                    });\n                } else if (series.graph) { // create\n\n                    series.tracker = renderer.path(trackerPath)\n                        .attr({\n                            'stroke-linejoin': 'round', // #1225\n                            visibility: series.visible ? 'visible' : 'hidden',\n                            stroke: TRACKER_FILL,\n                            fill: trackByArea ? TRACKER_FILL : 'none',\n                            'stroke-width': series.graph.strokeWidth() + (trackByArea ? 0 : 2 * snap),\n                            zIndex: 2\n                        })\n                        .add(series.group);\n\n                    // The tracker is added to the series group, which is clipped, but is covered\n                    // by the marker group. So the marker group also needs to capture events.\n                    each([series.tracker, series.markerGroup], function(tracker) {\n                        tracker.addClass('highcharts-tracker')\n                            .on('mouseover', onMouseOver)\n                            .on('mouseout', function(e) {\n                                pointer.onTrackerMouseOut(e);\n                            });\n\n\n                        if (options.cursor) {\n                            tracker.css({\n                                cursor: options.cursor\n                            });\n                        }\n\n\n                        if (hasTouch) {\n                            tracker.on('touchstart', onMouseOver);\n                        }\n                    });\n                }\n            }\n        };\n        /* End TrackerMixin */\n\n\n        /**\n         * Add tracking event listener to the series group, so the point graphics\n         * themselves act as trackers\n         */\n\n        if (seriesTypes.column) {\n            seriesTypes.column.prototype.drawTracker = TrackerMixin.drawTrackerPoint;\n        }\n\n        if (seriesTypes.pie) {\n            seriesTypes.pie.prototype.drawTracker = TrackerMixin.drawTrackerPoint;\n        }\n\n        if (seriesTypes.scatter) {\n            seriesTypes.scatter.prototype.drawTracker = TrackerMixin.drawTrackerPoint;\n        }\n\n        /*\n         * Extend Legend for item events\n         */\n        extend(Legend.prototype, {\n\n            setItemEvents: function(item, legendItem, useHTML) {\n                var legend = this,\n                    boxWrapper = legend.chart.renderer.boxWrapper,\n                    activeClass = 'highcharts-legend-' + (item.series ? 'point' : 'series') + '-active';\n\n                // Set the events on the item group, or in case of useHTML, the item itself (#1249)\n                (useHTML ? legendItem : item.legendGroup).on('mouseover', function() {\n                        item.setState('hover');\n\n                        // A CSS class to dim or hide other than the hovered series\n                        boxWrapper.addClass(activeClass);\n\n\n                        legendItem.css(legend.options.itemHoverStyle);\n\n                    })\n                    .on('mouseout', function() {\n\n                        legendItem.css(merge(item.visible ? legend.itemStyle : legend.itemHiddenStyle));\n\n\n                        // A CSS class to dim or hide other than the hovered series\n                        boxWrapper.removeClass(activeClass);\n\n                        item.setState();\n                    })\n                    .on('click', function(event) {\n                        var strLegendItemClick = 'legendItemClick',\n                            fnLegendItemClick = function() {\n                                if (item.setVisible) {\n                                    item.setVisible();\n                                }\n                            };\n\n                        // Pass over the click/touch event. #4.\n                        event = {\n                            browserEvent: event\n                        };\n\n                        // click the name or symbol\n                        if (item.firePointEvent) { // point\n                            item.firePointEvent(strLegendItemClick, event, fnLegendItemClick);\n                        } else {\n                            fireEvent(item, strLegendItemClick, event, fnLegendItemClick);\n                        }\n                    });\n            },\n\n            createCheckboxForItem: function(item) {\n                var legend = this;\n\n                item.checkbox = createElement('input', {\n                    type: 'checkbox',\n                    checked: item.selected,\n                    defaultChecked: item.selected // required by IE7\n                }, legend.options.itemCheckboxStyle, legend.chart.container);\n\n                addEvent(item.checkbox, 'click', function(event) {\n                    var target = event.target;\n                    fireEvent(\n                        item.series || item,\n                        'checkboxClick', { // #3712\n                            checked: target.checked,\n                            item: item\n                        },\n                        function() {\n                            item.select();\n                        }\n                    );\n                });\n            }\n        });\n\n\n\n        // Add pointer cursor to legend itemstyle in defaultOptions\n        defaultOptions.legend.itemStyle.cursor = 'pointer';\n\n\n\n        /*\n         * Extend the Chart object with interaction\n         */\n\n        extend(Chart.prototype, /** @lends Chart.prototype */ {\n            /**\n             * Display the zoom button.\n             *\n             * @private\n             */\n            showResetZoom: function() {\n                var chart = this,\n                    lang = defaultOptions.lang,\n                    btnOptions = chart.options.chart.resetZoomButton,\n                    theme = btnOptions.theme,\n                    states = theme.states,\n                    alignTo = btnOptions.relativeTo === 'chart' ? null : 'plotBox';\n\n                function zoomOut() {\n                    chart.zoomOut();\n                }\n\n                this.resetZoomButton = chart.renderer.button(lang.resetZoom, null, null, zoomOut, theme, states && states.hover)\n                    .attr({\n                        align: btnOptions.position.align,\n                        title: lang.resetZoomTitle\n                    })\n                    .addClass('highcharts-reset-zoom')\n                    .add()\n                    .align(btnOptions.position, false, alignTo);\n\n            },\n\n            /**\n             * Zoom out to 1:1.\n             *\n             * @private\n             */\n            zoomOut: function() {\n                var chart = this;\n                fireEvent(chart, 'selection', {\n                    resetSelection: true\n                }, function() {\n                    chart.zoom();\n                });\n            },\n\n            /**\n             * Zoom into a given portion of the chart given by axis coordinates.\n             * @param {Object} event\n             *\n             * @private\n             */\n            zoom: function(event) {\n                var chart = this,\n                    hasZoomed,\n                    pointer = chart.pointer,\n                    displayButton = false,\n                    resetZoomButton;\n\n                // If zoom is called with no arguments, reset the axes\n                if (!event || event.resetSelection) {\n                    each(chart.axes, function(axis) {\n                        hasZoomed = axis.zoom();\n                    });\n                    pointer.initiated = false; // #6804\n\n                } else { // else, zoom in on all axes\n                    each(event.xAxis.concat(event.yAxis), function(axisData) {\n                        var axis = axisData.axis,\n                            isXAxis = axis.isXAxis;\n\n                        // don't zoom more than minRange\n                        if (pointer[isXAxis ? 'zoomX' : 'zoomY']) {\n                            hasZoomed = axis.zoom(axisData.min, axisData.max);\n                            if (axis.displayBtn) {\n                                displayButton = true;\n                            }\n                        }\n                    });\n                }\n\n                // Show or hide the Reset zoom button\n                resetZoomButton = chart.resetZoomButton;\n                if (displayButton && !resetZoomButton) {\n                    chart.showResetZoom();\n                } else if (!displayButton && isObject(resetZoomButton)) {\n                    chart.resetZoomButton = resetZoomButton.destroy();\n                }\n\n\n                // Redraw\n                if (hasZoomed) {\n                    chart.redraw(\n                        pick(chart.options.chart.animation, event && event.animation, chart.pointCount < 100) // animation\n                    );\n                }\n            },\n\n            /**\n             * Pan the chart by dragging the mouse across the pane. This function is\n             * called on mouse move, and the distance to pan is computed from chartX\n             * compared to the first chartX position in the dragging operation.\n             *\n             * @private\n             */\n            pan: function(e, panning) {\n\n                var chart = this,\n                    hoverPoints = chart.hoverPoints,\n                    doRedraw;\n\n                // remove active points for shared tooltip\n                if (hoverPoints) {\n                    each(hoverPoints, function(point) {\n                        point.setState();\n                    });\n                }\n\n                each(panning === 'xy' ? [1, 0] : [1], function(isX) { // xy is used in maps\n                    var axis = chart[isX ? 'xAxis' : 'yAxis'][0],\n                        horiz = axis.horiz,\n                        mousePos = e[horiz ? 'chartX' : 'chartY'],\n                        mouseDown = horiz ? 'mouseDownX' : 'mouseDownY',\n                        startPos = chart[mouseDown],\n                        halfPointRange = (axis.pointRange || 0) / 2,\n                        extremes = axis.getExtremes(),\n                        panMin = axis.toValue(startPos - mousePos, true) +\n                        halfPointRange,\n                        panMax = axis.toValue(startPos + axis.len - mousePos, true) -\n                        halfPointRange,\n                        flipped = panMax < panMin,\n                        newMin = flipped ? panMax : panMin,\n                        newMax = flipped ? panMin : panMax,\n                        paddedMin = Math.min(\n                            extremes.dataMin,\n                            axis.toValue(\n                                axis.toPixels(extremes.min) - axis.minPixelPadding\n                            )\n                        ),\n                        paddedMax = Math.max(\n                            extremes.dataMax,\n                            axis.toValue(\n                                axis.toPixels(extremes.max) + axis.minPixelPadding\n                            )\n                        ),\n                        spill;\n\n                    // If the new range spills over, either to the min or max, adjust\n                    // the new range.\n                    spill = paddedMin - newMin;\n                    if (spill > 0) {\n                        newMax += spill;\n                        newMin = paddedMin;\n                    }\n                    spill = newMax - paddedMax;\n                    if (spill > 0) {\n                        newMax = paddedMax;\n                        newMin -= spill;\n                    }\n\n                    // Set new extremes if they are actually new\n                    if (axis.series.length && newMin !== extremes.min && newMax !== extremes.max) {\n                        axis.setExtremes(\n                            newMin,\n                            newMax,\n                            false,\n                            false, {\n                                trigger: 'pan'\n                            }\n                        );\n                        doRedraw = true;\n                    }\n\n                    chart[mouseDown] = mousePos; // set new reference for next run\n                });\n\n                if (doRedraw) {\n                    chart.redraw(false);\n                }\n                css(chart.container, {\n                    cursor: 'move'\n                });\n            }\n        });\n\n        /*\n         * Extend the Point object with interaction\n         */\n        extend(Point.prototype, /** @lends Highcharts.Point.prototype */ {\n            /**\n             * Toggle the selection status of a point.\n             * @param  {Boolean} [selected]\n             *         When `true`, the point is selected. When `false`, the point is\n             *         unselected. When `null` or `undefined`, the selection state is\n             *         toggled.\n             * @param  {Boolean} [accumulate=false]\n             *         When `true`, the selection is added to other selected points.\n             *         When `false`, other selected points are deselected. Internally in\n             *         Highcharts, when {@link http://api.highcharts.com/highcharts/plotOptions.series.allowPointSelect|allowPointSelect}\n             *         is `true`, selected points are accumulated on Control, Shift or\n             *         Cmd clicking the point.\n             *\n             * @see    Highcharts.Chart#getSelectedPoints\n             *\n             * @sample highcharts/members/point-select/\n             *         Select a point from a button\n             * @sample highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             * @sample maps/series/data-id/\n             *         Select a point in Highmaps\n             */\n            select: function(selected, accumulate) {\n                var point = this,\n                    series = point.series,\n                    chart = series.chart;\n\n                selected = pick(selected, !point.selected);\n\n                // fire the event with the default handler\n                point.firePointEvent(selected ? 'select' : 'unselect', {\n                    accumulate: accumulate\n                }, function() {\n\n                    /**\n                     * Whether the point is selected or not.\n                     * @see Point#select\n                     * @see Chart#getSelectedPoints\n                     * @memberof Point\n                     * @name selected\n                     * @type {Boolean}\n                     */\n                    point.selected = point.options.selected = selected;\n                    series.options.data[inArray(point, series.data)] = point.options;\n\n                    point.setState(selected && 'select');\n\n                    // unselect all other points unless Ctrl or Cmd + click\n                    if (!accumulate) {\n                        each(chart.getSelectedPoints(), function(loopPoint) {\n                            if (loopPoint.selected && loopPoint !== point) {\n                                loopPoint.selected = loopPoint.options.selected = false;\n                                series.options.data[inArray(loopPoint, series.data)] = loopPoint.options;\n                                loopPoint.setState('');\n                                loopPoint.firePointEvent('unselect');\n                            }\n                        });\n                    }\n                });\n            },\n\n            /**\n             * Runs on mouse over the point. Called internally from mouse and touch\n             * events.\n             *\n             * @param {Object} e The event arguments\n             */\n            onMouseOver: function(e) {\n                var point = this,\n                    series = point.series,\n                    chart = series.chart,\n                    pointer = chart.pointer;\n                e = e ?\n                    pointer.normalize(e) :\n                    // In cases where onMouseOver is called directly without an event\n                    pointer.getChartCoordinatesFromPoint(point, chart.inverted);\n                pointer.runPointActions(e, point);\n            },\n\n            /**\n             * Runs on mouse out from the point. Called internally from mouse and touch\n             * events.\n             */\n            onMouseOut: function() {\n                var point = this,\n                    chart = point.series.chart;\n                point.firePointEvent('mouseOut');\n                each(chart.hoverPoints || [], function(p) {\n                    p.setState();\n                });\n                chart.hoverPoints = chart.hoverPoint = null;\n            },\n\n            /**\n             * Import events from the series' and point's options. Only do it on\n             * demand, to save processing time on hovering.\n             *\n             * @private\n             */\n            importEvents: function() {\n                if (!this.hasImportedEvents) {\n                    var point = this,\n                        options = merge(point.series.options.point, point.options),\n                        events = options.events;\n\n                    point.events = events;\n\n                    H.objectEach(events, function(event, eventType) {\n                        addEvent(point, eventType, event);\n                    });\n                    this.hasImportedEvents = true;\n\n                }\n            },\n\n            /**\n             * Set the point's state.\n             * @param  {String} [state]\n             *         The new state, can be one of `''` (an empty string), `hover` or\n             *         `select`.\n             */\n            setState: function(state, move) {\n                var point = this,\n                    plotX = Math.floor(point.plotX), // #4586\n                    plotY = point.plotY,\n                    series = point.series,\n                    stateOptions = series.options.states[state] || {},\n                    markerOptions = defaultPlotOptions[series.type].marker &&\n                    series.options.marker,\n                    normalDisabled = markerOptions && markerOptions.enabled === false,\n                    markerStateOptions = (markerOptions && markerOptions.states &&\n                        markerOptions.states[state]) || {},\n                    stateDisabled = markerStateOptions.enabled === false,\n                    stateMarkerGraphic = series.stateMarkerGraphic,\n                    pointMarker = point.marker || {},\n                    chart = series.chart,\n                    halo = series.halo,\n                    haloOptions,\n                    markerAttribs,\n                    hasMarkers = markerOptions && series.markerAttribs,\n                    newSymbol;\n\n                state = state || ''; // empty string\n\n                if (\n                    // already has this state\n                    (state === point.state && !move) ||\n\n                    // selected points don't respond to hover\n                    (point.selected && state !== 'select') ||\n\n                    // series' state options is disabled\n                    (stateOptions.enabled === false) ||\n\n                    // general point marker's state options is disabled\n                    (state && (\n                        stateDisabled ||\n                        (normalDisabled && markerStateOptions.enabled === false)\n                    )) ||\n\n                    // individual point marker's state options is disabled\n                    (\n                        state &&\n                        pointMarker.states &&\n                        pointMarker.states[state] &&\n                        pointMarker.states[state].enabled === false\n                    ) // #1610\n\n                ) {\n                    return;\n                }\n\n                if (hasMarkers) {\n                    markerAttribs = series.markerAttribs(point, state);\n                }\n\n                // Apply hover styles to the existing point\n                if (point.graphic) {\n\n                    if (point.state) {\n                        point.graphic.removeClass('highcharts-point-' + point.state);\n                    }\n                    if (state) {\n                        point.graphic.addClass('highcharts-point-' + state);\n                    }\n\n                    /*attribs = radius ? { // new symbol attributes (#507, #612)\n                    \tx: plotX - radius,\n                    \ty: plotY - radius,\n                    \twidth: 2 * radius,\n                    \theight: 2 * radius\n                    } : {};*/\n\n\n                    //attribs = merge(series.pointAttribs(point, state), attribs);\n                    point.graphic.animate(\n                        series.pointAttribs(point, state),\n                        pick(\n                            chart.options.chart.animation,\n                            stateOptions.animation\n                        )\n                    );\n\n\n                    if (markerAttribs) {\n                        point.graphic.animate(\n                            markerAttribs,\n                            pick(\n                                chart.options.chart.animation, // Turn off globally\n                                markerStateOptions.animation,\n                                markerOptions.animation\n                            )\n                        );\n                    }\n\n                    // Zooming in from a range with no markers to a range with markers\n                    if (stateMarkerGraphic) {\n                        stateMarkerGraphic.hide();\n                    }\n                } else {\n                    // if a graphic is not applied to each point in the normal state, create a shared\n                    // graphic for the hover state\n                    if (state && markerStateOptions) {\n                        newSymbol = pointMarker.symbol || series.symbol;\n\n                        // If the point has another symbol than the previous one, throw away the\n                        // state marker graphic and force a new one (#1459)\n                        if (stateMarkerGraphic && stateMarkerGraphic.currentSymbol !== newSymbol) {\n                            stateMarkerGraphic = stateMarkerGraphic.destroy();\n                        }\n\n                        // Add a new state marker graphic\n                        if (!stateMarkerGraphic) {\n                            if (newSymbol) {\n                                series.stateMarkerGraphic = stateMarkerGraphic = chart.renderer.symbol(\n                                        newSymbol,\n                                        markerAttribs.x,\n                                        markerAttribs.y,\n                                        markerAttribs.width,\n                                        markerAttribs.height\n                                    )\n                                    .add(series.markerGroup);\n                                stateMarkerGraphic.currentSymbol = newSymbol;\n                            }\n\n                            // Move the existing graphic\n                        } else {\n                            stateMarkerGraphic[move ? 'animate' : 'attr']({ // #1054\n                                x: markerAttribs.x,\n                                y: markerAttribs.y\n                            });\n                        }\n\n                        if (stateMarkerGraphic) {\n                            stateMarkerGraphic.attr(series.pointAttribs(point, state));\n                        }\n\n                    }\n\n                    if (stateMarkerGraphic) {\n                        stateMarkerGraphic[state && chart.isInsidePlot(plotX, plotY, chart.inverted) ? 'show' : 'hide'](); // #2450\n                        stateMarkerGraphic.element.point = point; // #4310\n                    }\n                }\n\n                // Show me your halo\n                haloOptions = stateOptions.halo;\n                if (haloOptions && haloOptions.size) {\n                    if (!halo) {\n                        series.halo = halo = chart.renderer.path()\n                            // #5818, #5903, #6705\n                            .add((point.graphic || stateMarkerGraphic).parentGroup);\n                    }\n                    halo[move ? 'animate' : 'attr']({\n                        d: point.haloPath(haloOptions.size)\n                    });\n                    halo.attr({\n                        'class': 'highcharts-halo highcharts-color-' +\n                            pick(point.colorIndex, series.colorIndex)\n                    });\n                    halo.point = point; // #6055\n\n\n                    halo.attr(extend({\n                        'fill': point.color || series.color,\n                        'fill-opacity': haloOptions.opacity,\n                        'zIndex': -1 // #4929, IE8 added halo above everything\n                    }, haloOptions.attributes));\n\n\n                } else if (halo && halo.point && halo.point.haloPath) {\n                    // Animate back to 0 on the current halo point (#6055)\n                    halo.animate({\n                        d: halo.point.haloPath(0)\n                    });\n                }\n\n                point.state = state;\n            },\n\n            /**\n             * Get the path definition for the halo, which is usually a shadow-like\n             * circle around the currently hovered point.\n             * @param  {Number} size\n             *         The radius of the circular halo.\n             * @return {Array} The path definition\n             */\n            haloPath: function(size) {\n                var series = this.series,\n                    chart = series.chart;\n\n                return chart.renderer.symbols.circle(\n                    Math.floor(this.plotX) - size,\n                    this.plotY - size,\n                    size * 2,\n                    size * 2\n                );\n            }\n        });\n\n        /*\n         * Extend the Series object with interaction\n         */\n\n        extend(Series.prototype, /** @lends Highcharts.Series.prototype */ {\n            /**\n             * Runs on mouse over the series graphical items.\n             */\n            onMouseOver: function() {\n                var series = this,\n                    chart = series.chart,\n                    hoverSeries = chart.hoverSeries;\n\n                // set normal state to previous series\n                if (hoverSeries && hoverSeries !== series) {\n                    hoverSeries.onMouseOut();\n                }\n\n                // trigger the event, but to save processing time,\n                // only if defined\n                if (series.options.events.mouseOver) {\n                    fireEvent(series, 'mouseOver');\n                }\n\n                // hover this\n                series.setState('hover');\n                chart.hoverSeries = series;\n            },\n\n            /**\n             * Runs on mouse out of the series graphical items.\n             */\n            onMouseOut: function() {\n                // trigger the event only if listeners exist\n                var series = this,\n                    options = series.options,\n                    chart = series.chart,\n                    tooltip = chart.tooltip,\n                    hoverPoint = chart.hoverPoint;\n\n                chart.hoverSeries = null; // #182, set to null before the mouseOut event fires\n\n                // trigger mouse out on the point, which must be in this series\n                if (hoverPoint) {\n                    hoverPoint.onMouseOut();\n                }\n\n                // fire the mouse out event\n                if (series && options.events.mouseOut) {\n                    fireEvent(series, 'mouseOut');\n                }\n\n\n                // hide the tooltip\n                if (tooltip && !series.stickyTracking && (!tooltip.shared || series.noSharedTooltip)) {\n                    tooltip.hide();\n                }\n\n                // set normal state\n                series.setState();\n            },\n\n            /**\n             * Set the state of the series. Called internally on mouse interaction and\n             * select operations, but it can also be called directly to visually\n             * highlight a series.\n             *\n             * @param  {String} [state]\n             *         Can be either `hover`, `select` or undefined to set to normal\n             *         state.\n             */\n            setState: function(state) {\n                var series = this,\n                    options = series.options,\n                    graph = series.graph,\n                    stateOptions = options.states,\n                    lineWidth = options.lineWidth,\n                    attribs,\n                    i = 0;\n\n                state = state || '';\n\n                if (series.state !== state) {\n\n                    // Toggle class names\n                    each([\n                        series.group,\n                        series.markerGroup,\n                        series.dataLabelsGroup\n                    ], function(group) {\n                        if (group) {\n                            // Old state\n                            if (series.state) {\n                                group.removeClass('highcharts-series-' + series.state);\n                            }\n                            // New state\n                            if (state) {\n                                group.addClass('highcharts-series-' + state);\n                            }\n                        }\n                    });\n\n                    series.state = state;\n\n\n\n                    if (stateOptions[state] && stateOptions[state].enabled === false) {\n                        return;\n                    }\n\n                    if (state) {\n                        lineWidth = stateOptions[state].lineWidth || lineWidth + (stateOptions[state].lineWidthPlus || 0); // #4035\n                    }\n\n                    if (graph && !graph.dashstyle) { // hover is turned off for dashed lines in VML\n                        attribs = {\n                            'stroke-width': lineWidth\n                        };\n\n                        // Animate the graph stroke-width. By default a quick animation\n                        // to hover, slower to un-hover.\n                        graph.animate(\n                            attribs,\n                            pick(\n                                series.chart.options.chart.animation,\n                                stateOptions[state] && stateOptions[state].animation\n                            )\n                        );\n                        while (series['zone-graph-' + i]) {\n                            series['zone-graph-' + i].attr(attribs);\n                            i = i + 1;\n                        }\n                    }\n\n                }\n            },\n\n            /**\n             * Show or hide the series.\n             *\n             * @param  {Boolean} [visible]\n             *         True to show the series, false to hide. If undefined, the\n             *         visibility is toggled.\n             * @param  {Boolean} [redraw=true]\n             *         Whether to redraw the chart after the series is altered. If doing\n             *         more operations on the chart, it is a good idea to set redraw to\n             *         false and call {@link Chart#redraw|chart.redraw()} after.\n             */\n            setVisible: function(vis, redraw) {\n                var series = this,\n                    chart = series.chart,\n                    legendItem = series.legendItem,\n                    showOrHide,\n                    ignoreHiddenSeries = chart.options.chart.ignoreHiddenSeries,\n                    oldVisibility = series.visible;\n\n                // if called without an argument, toggle visibility\n                series.visible = vis = series.options.visible = series.userOptions.visible = vis === undefined ? !oldVisibility : vis; // #5618\n                showOrHide = vis ? 'show' : 'hide';\n\n                // show or hide elements\n                each(['group', 'dataLabelsGroup', 'markerGroup', 'tracker', 'tt'], function(key) {\n                    if (series[key]) {\n                        series[key][showOrHide]();\n                    }\n                });\n\n\n                // hide tooltip (#1361)\n                if (chart.hoverSeries === series || (chart.hoverPoint && chart.hoverPoint.series) === series) {\n                    series.onMouseOut();\n                }\n\n\n                if (legendItem) {\n                    chart.legend.colorizeItem(series, vis);\n                }\n\n\n                // rescale or adapt to resized chart\n                series.isDirty = true;\n                // in a stack, all other series are affected\n                if (series.options.stacking) {\n                    each(chart.series, function(otherSeries) {\n                        if (otherSeries.options.stacking && otherSeries.visible) {\n                            otherSeries.isDirty = true;\n                        }\n                    });\n                }\n\n                // show or hide linked series\n                each(series.linkedSeries, function(otherSeries) {\n                    otherSeries.setVisible(vis, false);\n                });\n\n                if (ignoreHiddenSeries) {\n                    chart.isDirtyBox = true;\n                }\n                if (redraw !== false) {\n                    chart.redraw();\n                }\n\n                fireEvent(series, showOrHide);\n            },\n\n            /**\n             * Show the series if hidden.\n             *\n             * @sample highcharts/members/series-hide/\n             *         Toggle visibility from a button\n             */\n            show: function() {\n                this.setVisible(true);\n            },\n\n            /**\n             * Hide the series if visible. If the {@link\n             * https://api.highcharts.com/highcharts/chart.ignoreHiddenSeries|\n             * chart.ignoreHiddenSeries} option is true, the chart is redrawn without\n             * this series.\n             *\n             * @sample highcharts/members/series-hide/\n             *         Toggle visibility from a button\n             */\n            hide: function() {\n                this.setVisible(false);\n            },\n\n\n            /**\n             * Select or unselect the series. This means its {@link\n             * Highcharts.Series.selected|selected} property is set, the checkbox in the\n             * legend is toggled and when selected, the series is returned by the\n             * {@link Highcharts.Chart#getSelectedSeries} function.\n             *\n             * @param  {Boolean} [selected]\n             *         True to select the series, false to unselect. If\tundefined, the\n             *         selection state is toggled.\n             *\n             * @sample highcharts/members/series-select/\n             *         Select a series from a button\n             */\n            select: function(selected) {\n                var series = this;\n\n                series.selected = selected = (selected === undefined) ?\n                    !series.selected :\n                    selected;\n\n                if (series.checkbox) {\n                    series.checkbox.checked = selected;\n                }\n\n                fireEvent(series, selected ? 'select' : 'unselect');\n            },\n\n            drawTracker: TrackerMixin.drawTrackerGraph\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var Chart = H.Chart,\n            each = H.each,\n            inArray = H.inArray,\n            isArray = H.isArray,\n            isObject = H.isObject,\n            pick = H.pick,\n            splat = H.splat;\n\n        /**\n         * Update the chart based on the current chart/document size and options for\n         * responsiveness.\n         */\n        Chart.prototype.setResponsive = function(redraw) {\n            var options = this.options.responsive,\n                ruleIds = [],\n                currentResponsive = this.currentResponsive,\n                currentRuleIds;\n\n            if (options && options.rules) {\n                each(options.rules, function(rule) {\n                    if (rule._id === undefined) {\n                        rule._id = H.uniqueKey();\n                    }\n\n                    this.matchResponsiveRule(rule, ruleIds, redraw);\n                }, this);\n            }\n\n            // Merge matching rules\n            var mergedOptions = H.merge.apply(0, H.map(ruleIds, function(ruleId) {\n                return H.find(options.rules, function(rule) {\n                    return rule._id === ruleId;\n                }).chartOptions;\n            }));\n\n            // Stringified key for the rules that currently apply.\n            ruleIds = ruleIds.toString() || undefined;\n            currentRuleIds = currentResponsive && currentResponsive.ruleIds;\n\n\n            // Changes in what rules apply\n            if (ruleIds !== currentRuleIds) {\n\n                // Undo previous rules. Before we apply a new set of rules, we need to\n                // roll back completely to base options (#6291).\n                if (currentResponsive) {\n                    this.update(currentResponsive.undoOptions, redraw);\n                }\n\n                if (ruleIds) {\n                    // Get undo-options for matching rules\n                    this.currentResponsive = {\n                        ruleIds: ruleIds,\n                        mergedOptions: mergedOptions,\n                        undoOptions: this.currentOptions(mergedOptions)\n                    };\n\n                    this.update(mergedOptions, redraw);\n\n                } else {\n                    this.currentResponsive = undefined;\n                }\n            }\n        };\n\n        /**\n         * Handle a single responsiveness rule\n         */\n        Chart.prototype.matchResponsiveRule = function(rule, matches) {\n            var condition = rule.condition,\n                fn = condition.callback || function() {\n                    return this.chartWidth <= pick(condition.maxWidth, Number.MAX_VALUE) &&\n                        this.chartHeight <= pick(condition.maxHeight, Number.MAX_VALUE) &&\n                        this.chartWidth >= pick(condition.minWidth, 0) &&\n                        this.chartHeight >= pick(condition.minHeight, 0);\n                };\n\n            if (fn.call(this)) {\n                matches.push(rule._id);\n            }\n\n        };\n\n        /**\n         * Get the current values for a given set of options. Used before we update\n         * the chart with a new responsiveness rule.\n         * TODO: Restore axis options (by id?)\n         */\n        Chart.prototype.currentOptions = function(options) {\n\n            var ret = {};\n\n            /**\n             * Recurse over a set of options and its current values,\n             * and store the current values in the ret object.\n             */\n            function getCurrent(options, curr, ret, depth) {\n                var i;\n                H.objectEach(options, function(val, key) {\n                    if (!depth && inArray(key, ['series', 'xAxis', 'yAxis']) > -1) {\n                        options[key] = splat(options[key]);\n\n                        ret[key] = [];\n\n                        // Iterate over collections like series, xAxis or yAxis and map\n                        // the items by index.\n                        for (i = 0; i < options[key].length; i++) {\n                            if (curr[key][i]) { // Item exists in current data (#6347)\n                                ret[key][i] = {};\n                                getCurrent(\n                                    val[i],\n                                    curr[key][i],\n                                    ret[key][i],\n                                    depth + 1\n                                );\n                            }\n                        }\n                    } else if (isObject(val)) {\n                        ret[key] = isArray(val) ? [] : {};\n                        getCurrent(val, curr[key] || {}, ret[key], depth + 1);\n                    } else {\n                        ret[key] = curr[key] || null;\n                    }\n                });\n            }\n\n            getCurrent(options, this.options, ret, 0);\n            return ret;\n        };\n\n    }(Highcharts));\n    return Highcharts\n}));\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/falcon/dashboard/components/highcharts.src.js"],"sourceRoot":""}