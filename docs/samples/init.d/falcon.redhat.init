#!/bin/sh
#
# falcon	This shell script takes care of starting and stopping
#		the FALCON subsystem (falcon).
#
# chkconfig: - 64 36
# description:	FALCON database server.
# processname: falcon
# config: /opt/falcon/etc/falcon.conf
# pidfile: /opt/falcon/run/falcon.pid

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

ROOT=/opt/falcon
exec="$ROOT/bin/falcon"
prog="falcon"
datadir="$ROOT/var"
CONFFILE="$ROOT/etc/falcon.conf"
LOGFILE="$ROOT/log/stdout.log"
PIDFILE="$ROOT/run/falcon.pid"
LOCKFILE="$ROOT/run/${prog}.lock"
COMMAND="$exec -config $CONFFILE"


# Set timeouts here so they can be overridden from /etc/sysconfig/falcon
STARTTIMEOUT=120
STOPTIMEOUT=60

start(){
    [ -x $exec ] || exit 5
    # check to see if it's already running
    RESPONSE=`$COMMAND stats 2>&1`
    if [ $? = 0 ]; then
	# already running, do nothing
	action $"Starting $prog: " /bin/true
	ret=0
    elif echo "$RESPONSE" | grep -q "Access denied for user"
    then
	# already running, do nothing
	action $"Starting $prog: " /bin/true
	ret=0
    else
	# Pass all the options determined above, to ensure consistent behavior.
	# In many cases falcon_safe would arrive at the same conclusions anyway
	# but we need to be sure.  (An exception is that we don't force the
	# log-error setting, since this script doesn't really depend on that,
	# and some users might prefer to configure logging to syslog.)
	# Note: set --basedir to prevent probes that might trigger SELinux
	# alarms, per bug #547485
	$COMMAND "start" >> $LOGFILE  2>&1 &
	safe_pid=$!
	# Spin for a maximum of N seconds waiting for the server to come up;
	# exit the loop immediately if falcon_safe process disappears.
	# Rather than assuming we know a valid username, accept an "access
	# denied" response as meaning the server is functioning.
	ret=0
	TIMEOUT="$STARTTIMEOUT"
	while [ $TIMEOUT -gt 0 ]; do
	    RESPONSE=`$COMMAND stats 2>&1` && break
	    echo "$RESPONSE" | grep -q "Access denied for user" && break
	    if ! /bin/kill -0 $safe_pid 2>/dev/null; then
		echo "FALCON Daemon failed to start."
		ret=1
		break
	    fi
	    sleep 1
	    let TIMEOUT=${TIMEOUT}-1
	done
	if [ $TIMEOUT -eq 0 ]; then
	    echo "Timeout error occurred trying to start FALCON Daemon."
	    ret=1
	fi
	if [ $ret -eq 0 ]; then
	    action $"Starting $prog: " /bin/true
	    touch $LOCKFILE
	else
	    action $"Starting $prog: " /bin/false
	fi
    fi
    return $ret
}

stop(){
	if [ ! -f "$PIDFILE" ]; then
	    # not running; per LSB standards this is "ok"
	    action $"Stopping $prog: " /bin/true
	    return 0
	fi
	FALCONPID=`cat "$PIDFILE"`
	if [ -n "$FALCONPID" ]; then
	    /bin/kill "$FALCONPID" >/dev/null 2>&1
	    ret=$?
	    if [ $ret -eq 0 ]; then
		TIMEOUT="$STOPTIMEOUT"
		while [ $TIMEOUT -gt 0 ]; do
		    /bin/kill -0 "$FALCONPID" >/dev/null 2>&1 || break
		    sleep 1
		    let TIMEOUT=${TIMEOUT}-1
		done
		if [ $TIMEOUT -eq 0 ]; then
		    echo "Timeout error occurred trying to stop FALCON Daemon."
		    ret=1
		    action $"Stopping $prog: " /bin/false
		else
		    rm -f $LOCKFILE
		    action $"Stopping $prog: " /bin/true
		fi
	    else
		action $"Stopping $prog: " /bin/false
	    fi
	else
	    # failed to read pidfile, probably insufficient permissions
	    action $"Stopping $prog: " /bin/false
	    ret=4
	fi
	return $ret
}
 
restart(){
    stop
    start
}

condrestart(){
    [ -e $LOCKFILE ] && restart || :
}

reload(){
    $COMMAND reload 2>&1
}


# See how we were called.
case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status -p "$PIDFILE" $prog
    ;;
  restart)
    restart
    ;;
  condrestart|try-restart)
    condrestart
    ;;
  reload|force-reload)
    reload
    ;;
  *)
    echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
    exit 2
esac

exit $?
